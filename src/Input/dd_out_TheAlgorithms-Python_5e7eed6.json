[
  {
    "project": "TheAlgorithms/Python",
    "commit": "5e7eed610ce81fa96e033f4d2a1781ed8637cb41",
    "filename": "strings/aho_corasick.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/strings/aho_corasick.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "strings/aho_corasick.py:25:36 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `Automaton.find_next_state` but got `typing.Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `Automaton.find_next_state` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 25,
    "warning_line": "            if self.find_next_state(current_state, character):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for character in keyword:\n            if self.find_next_state(current_state, character):\n                current_state = self.find_next_state(current_state, character)\n            else:\n                self.adlist.append(\n",
        "source_code_len": 230,
        "target_code": "        for character in keyword:\n            next_state = self.find_next_state(current_state, character)\n            if next_state is None:\n                self.adlist.append(\n",
        "target_code_len": 177,
        "diff_format": "@@ -24,5 +24,4 @@\n         for character in keyword:\n-            if self.find_next_state(current_state, character):\n-                current_state = self.find_next_state(current_state, character)\n-            else:\n+            next_state = self.find_next_state(current_state, character)\n+            if next_state is None:\n                 self.adlist.append(\n",
        "source_code_with_indent": "        for character in keyword:\n            <IND>if self.find_next_state(current_state, character):\n                <IND>current_state = self.find_next_state(current_state, character)\n            <DED>else:\n                <IND>self.adlist.append(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for character in keyword:\n            <IND>next_state = self.find_next_state(current_state, character)\n            if next_state is None:\n                <IND>self.adlist.append(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "5e7eed610ce81fa96e033f4d2a1781ed8637cb41",
    "filename": "strings/aho_corasick.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/strings/aho_corasick.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "strings/aho_corasick.py:26:53 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `Automaton.find_next_state` but got `typing.Optional[int]`.",
    "message": " Expected `int` for 1st positional only parameter to call `Automaton.find_next_state` but got `typing.Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 26,
    "warning_line": "                current_state = self.find_next_state(current_state, character)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        for character in keyword:\n            if self.find_next_state(current_state, character):\n                current_state = self.find_next_state(current_state, character)\n            else:\n                self.adlist.append(\n",
        "source_code_len": 230,
        "target_code": "        for character in keyword:\n            next_state = self.find_next_state(current_state, character)\n            if next_state is None:\n                self.adlist.append(\n",
        "target_code_len": 177,
        "diff_format": "@@ -24,5 +24,4 @@\n         for character in keyword:\n-            if self.find_next_state(current_state, character):\n-                current_state = self.find_next_state(current_state, character)\n-            else:\n+            next_state = self.find_next_state(current_state, character)\n+            if next_state is None:\n                 self.adlist.append(\n",
        "source_code_with_indent": "        for character in keyword:\n            <IND>if self.find_next_state(current_state, character):\n                <IND>current_state = self.find_next_state(current_state, character)\n            <DED>else:\n                <IND>self.adlist.append(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for character in keyword:\n            <IND>next_state = self.find_next_state(current_state, character)\n            if next_state is None:\n                <IND>self.adlist.append(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "5e7eed610ce81fa96e033f4d2a1781ed8637cb41",
    "filename": "strings/min_cost_string_conversion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/strings/min_cost_string_conversion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "strings/min_cost_string_conversion.py:36:20 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "        ops[i][0] = \"D%c\" % source_seq[i - 1]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    source_seq = list(source_string)\n",
        "source_code_len": 93,
        "target_code": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    source_seq = list(source_string)\n",
        "target_code_len": 105,
        "diff_format": "@@ -20,3 +18,3 @@\n     insert_cost: int,\n-) -> Tuple[List[int], List[str]]:\n+) -> tuple[list[list[int]], list[list[str]]]:\n     source_seq = list(source_string)\n",
        "source_code_with_indent": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    <IND>source_seq = list(source_string)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    <IND>source_seq = list(source_string)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_len": 105,
        "target_code": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_len": 107,
        "diff_format": "@@ -30,3 +28,3 @@\n     ops = [\n-        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n+        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n     ]\n",
        "source_code_with_indent": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    if i == 0 and j == 0:\n",
        "source_code_len": 101,
        "target_code": "\ndef assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    if i == 0 and j == 0:\n",
        "target_code_len": 107,
        "diff_format": "@@ -61,3 +59,3 @@\n \n-def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n+def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n     if i == 0 and j == 0:\n",
        "source_code_with_indent": "\n<DED>def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    <IND>if i == 0 and j == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    <IND>if i == 0 and j == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "5e7eed610ce81fa96e033f4d2a1781ed8637cb41",
    "filename": "strings/min_cost_string_conversion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/strings/min_cost_string_conversion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "strings/min_cost_string_conversion.py:40:20 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 40,
    "warning_line": "        ops[0][i] = \"I%c\" % destination_seq[i - 1]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    source_seq = list(source_string)\n",
        "source_code_len": 93,
        "target_code": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    source_seq = list(source_string)\n",
        "target_code_len": 105,
        "diff_format": "@@ -20,3 +18,3 @@\n     insert_cost: int,\n-) -> Tuple[List[int], List[str]]:\n+) -> tuple[list[list[int]], list[list[str]]]:\n     source_seq = list(source_string)\n",
        "source_code_with_indent": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    <IND>source_seq = list(source_string)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    <IND>source_seq = list(source_string)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_len": 105,
        "target_code": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_len": 107,
        "diff_format": "@@ -30,3 +28,3 @@\n     ops = [\n-        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n+        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n     ]\n",
        "source_code_with_indent": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    if i == 0 and j == 0:\n",
        "source_code_len": 101,
        "target_code": "\ndef assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    if i == 0 and j == 0:\n",
        "target_code_len": 107,
        "diff_format": "@@ -61,3 +59,3 @@\n \n-def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n+def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n     if i == 0 and j == 0:\n",
        "source_code_with_indent": "\n<DED>def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    <IND>if i == 0 and j == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    <IND>if i == 0 and j == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "5e7eed610ce81fa96e033f4d2a1781ed8637cb41",
    "filename": "strings/min_cost_string_conversion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/strings/min_cost_string_conversion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "strings/min_cost_string_conversion.py:46:28 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 46,
    "warning_line": "                ops[i][j] = \"C%c\" % source_seq[i - 1]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    source_seq = list(source_string)\n",
        "source_code_len": 93,
        "target_code": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    source_seq = list(source_string)\n",
        "target_code_len": 105,
        "diff_format": "@@ -20,3 +18,3 @@\n     insert_cost: int,\n-) -> Tuple[List[int], List[str]]:\n+) -> tuple[list[list[int]], list[list[str]]]:\n     source_seq = list(source_string)\n",
        "source_code_with_indent": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    <IND>source_seq = list(source_string)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    <IND>source_seq = list(source_string)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_len": 105,
        "target_code": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_len": 107,
        "diff_format": "@@ -30,3 +28,3 @@\n     ops = [\n-        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n+        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n     ]\n",
        "source_code_with_indent": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    if i == 0 and j == 0:\n",
        "source_code_len": 101,
        "target_code": "\ndef assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    if i == 0 and j == 0:\n",
        "target_code_len": 107,
        "diff_format": "@@ -61,3 +59,3 @@\n \n-def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n+def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n     if i == 0 and j == 0:\n",
        "source_code_with_indent": "\n<DED>def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    <IND>if i == 0 and j == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    <IND>if i == 0 and j == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "5e7eed610ce81fa96e033f4d2a1781ed8637cb41",
    "filename": "strings/min_cost_string_conversion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/strings/min_cost_string_conversion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "strings/min_cost_string_conversion.py:49:28 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "                ops[i][j] = \"R%c\" % source_seq[i - 1] + str(destination_seq[j - 1])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    source_seq = list(source_string)\n",
        "source_code_len": 93,
        "target_code": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    source_seq = list(source_string)\n",
        "target_code_len": 105,
        "diff_format": "@@ -20,3 +18,3 @@\n     insert_cost: int,\n-) -> Tuple[List[int], List[str]]:\n+) -> tuple[list[list[int]], list[list[str]]]:\n     source_seq = list(source_string)\n",
        "source_code_with_indent": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    <IND>source_seq = list(source_string)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    <IND>source_seq = list(source_string)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_len": 105,
        "target_code": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_len": 107,
        "diff_format": "@@ -30,3 +28,3 @@\n     ops = [\n-        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n+        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n     ]\n",
        "source_code_with_indent": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    if i == 0 and j == 0:\n",
        "source_code_len": 101,
        "target_code": "\ndef assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    if i == 0 and j == 0:\n",
        "target_code_len": 107,
        "diff_format": "@@ -61,3 +59,3 @@\n \n-def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n+def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n     if i == 0 and j == 0:\n",
        "source_code_with_indent": "\n<DED>def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    <IND>if i == 0 and j == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    <IND>if i == 0 and j == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "5e7eed610ce81fa96e033f4d2a1781ed8637cb41",
    "filename": "strings/min_cost_string_conversion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/strings/min_cost_string_conversion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "strings/min_cost_string_conversion.py:53:28 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 53,
    "warning_line": "                ops[i][j] = \"D%c\" % source_seq[i - 1]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    source_seq = list(source_string)\n",
        "source_code_len": 93,
        "target_code": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    source_seq = list(source_string)\n",
        "target_code_len": 105,
        "diff_format": "@@ -20,3 +18,3 @@\n     insert_cost: int,\n-) -> Tuple[List[int], List[str]]:\n+) -> tuple[list[list[int]], list[list[str]]]:\n     source_seq = list(source_string)\n",
        "source_code_with_indent": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    <IND>source_seq = list(source_string)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    <IND>source_seq = list(source_string)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_len": 105,
        "target_code": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_len": 107,
        "diff_format": "@@ -30,3 +28,3 @@\n     ops = [\n-        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n+        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n     ]\n",
        "source_code_with_indent": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    if i == 0 and j == 0:\n",
        "source_code_len": 101,
        "target_code": "\ndef assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    if i == 0 and j == 0:\n",
        "target_code_len": 107,
        "diff_format": "@@ -61,3 +59,3 @@\n \n-def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n+def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n     if i == 0 and j == 0:\n",
        "source_code_with_indent": "\n<DED>def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    <IND>if i == 0 and j == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    <IND>if i == 0 and j == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "5e7eed610ce81fa96e033f4d2a1781ed8637cb41",
    "filename": "strings/min_cost_string_conversion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/strings/min_cost_string_conversion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "strings/min_cost_string_conversion.py:57:28 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `list.__setitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 57,
    "warning_line": "                ops[i][j] = \"I%c\" % destination_seq[j - 1]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    source_seq = list(source_string)\n",
        "source_code_len": 93,
        "target_code": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    source_seq = list(source_string)\n",
        "target_code_len": 105,
        "diff_format": "@@ -20,3 +18,3 @@\n     insert_cost: int,\n-) -> Tuple[List[int], List[str]]:\n+) -> tuple[list[list[int]], list[list[str]]]:\n     source_seq = list(source_string)\n",
        "source_code_with_indent": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    <IND>source_seq = list(source_string)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    <IND>source_seq = list(source_string)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_len": 105,
        "target_code": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_len": 107,
        "diff_format": "@@ -30,3 +28,3 @@\n     ops = [\n-        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n+        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n     ]\n",
        "source_code_with_indent": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    if i == 0 and j == 0:\n",
        "source_code_len": 101,
        "target_code": "\ndef assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    if i == 0 and j == 0:\n",
        "target_code_len": 107,
        "diff_format": "@@ -61,3 +59,3 @@\n \n-def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n+def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n     if i == 0 and j == 0:\n",
        "source_code_with_indent": "\n<DED>def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    <IND>if i == 0 and j == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    <IND>if i == 0 and j == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "5e7eed610ce81fa96e033f4d2a1781ed8637cb41",
    "filename": "strings/min_cost_string_conversion.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/strings/min_cost_string_conversion.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "strings/min_cost_string_conversion.py:59:4 Incompatible return type [7]: Expected `Tuple[List[int], List[str]]` but got `Tuple[List[List[int]], List[List[int]]]`.",
    "message": " Expected `Tuple[List[int], List[str]]` but got `Tuple[List[List[int]], List[List[int]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 59,
    "warning_line": "    return costs, ops",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    source_seq = list(source_string)\n",
        "source_code_len": 93,
        "target_code": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    source_seq = list(source_string)\n",
        "target_code_len": 105,
        "diff_format": "@@ -20,3 +18,3 @@\n     insert_cost: int,\n-) -> Tuple[List[int], List[str]]:\n+) -> tuple[list[list[int]], list[list[str]]]:\n     source_seq = list(source_string)\n",
        "source_code_with_indent": "    insert_cost: int,\n) -> Tuple[List[int], List[str]]:\n    <IND>source_seq = list(source_string)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    insert_cost: int,\n) -> tuple[list[list[int]], list[list[str]]]:\n    <IND>source_seq = list(source_string)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_len": 105,
        "target_code": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_len": 107,
        "diff_format": "@@ -30,3 +28,3 @@\n     ops = [\n-        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n+        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n     ]\n",
        "source_code_with_indent": "    ops = [\n        [0 for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    ops = [\n        [\"0\" for _ in range(len_destination_seq + 1)] for _ in range(len_source_seq + 1)\n    ]\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    if i == 0 and j == 0:\n",
        "source_code_len": 101,
        "target_code": "\ndef assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    if i == 0 and j == 0:\n",
        "target_code_len": 107,
        "diff_format": "@@ -61,3 +59,3 @@\n \n-def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n+def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n     if i == 0 and j == 0:\n",
        "source_code_with_indent": "\n<DED>def assemble_transformation(ops: List[str], i: int, j: int) -> List[str]:\n    <IND>if i == 0 and j == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def assemble_transformation(ops: list[list[str]], i: int, j: int) -> list[str]:\n    <IND>if i == 0 and j == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]