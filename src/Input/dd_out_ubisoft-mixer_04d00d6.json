[
  {
    "project": "ubisoft/mixer",
    "commit": "04d00d6daa42ee6a08f1700ad77075ead526728b",
    "filename": "mixer/broadcaster/apps/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/broadcaster/apps/server.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/broadcaster/apps/server.py:348:8 Incompatible return type [7]: Expected `List[str]` but got `typing.AbstractSet[str]`.",
    "message": " Expected `List[str]` but got `typing.AbstractSet[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 348,
    "warning_line": "        return self._rooms.keys()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        Address = Tuple[str, str]  # noqa\n        self._rooms: Mapping[str, Room] = {}\n        # Connections not joined to any room\n        self._unjoined_connections: Mapping[Address, Connection] = {}\n        self._mutex = threading.RLock()\n",
        "source_code_len": 242,
        "target_code": "        Address = Tuple[str, str]  # noqa\n        self._rooms: Dict[str, Room] = {}\n        # Connections not joined to any room\n        self._unjoined_connections: Dict[Address, Connection] = {}\n        self._mutex = threading.RLock()\n",
        "target_code_len": 236,
        "diff_format": "@@ -255,5 +255,5 @@\n         Address = Tuple[str, str]  # noqa\n-        self._rooms: Mapping[str, Room] = {}\n+        self._rooms: Dict[str, Room] = {}\n         # Connections not joined to any room\n-        self._unjoined_connections: Mapping[Address, Connection] = {}\n+        self._unjoined_connections: Dict[Address, Connection] = {}\n         self._mutex = threading.RLock()\n",
        "source_code_with_indent": "        <IND>Address = Tuple[str, str]  # noqa\n        self._rooms: Mapping[str, Room] = {}\n        # Connections not joined to any room\n        self._unjoined_connections: Mapping[Address, Connection] = {}\n        self._mutex = threading.RLock()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>Address = Tuple[str, str]  # noqa\n        self._rooms: Dict[str, Room] = {}\n        # Connections not joined to any room\n        self._unjoined_connections: Dict[Address, Connection] = {}\n        self._mutex = threading.RLock()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "04d00d6daa42ee6a08f1700ad77075ead526728b",
    "filename": "mixer/broadcaster/apps/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/broadcaster/apps/server.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/broadcaster/apps/server.py:359:12 Incompatible return type [7]: Expected `List[Mapping[typing.Any, typing.Any]]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "message": " Expected `List[Mapping[typing.Any, typing.Any]]` but got `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 359,
    "warning_line": "            return client_ids",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import queue\nfrom typing import Tuple, List, Mapping, ValuesView, Optional\n\n",
        "source_code_len": 76,
        "target_code": "import queue\nfrom typing import Tuple, List, Mapping, Dict, Optional\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -8,3 +8,3 @@\n import queue\n-from typing import Tuple, List, Mapping, ValuesView, Optional\n+from typing import Tuple, List, Mapping, Dict, Optional\n \n",
        "source_code_with_indent": "import queue\nfrom typing import Tuple, List, Mapping, ValuesView, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import queue\nfrom typing import Tuple, List, Mapping, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def rooms_names(self) -> List[str]:\n        return self._rooms.keys()\n\n    def rooms(self) -> ValuesView[Room]:\n        return self._rooms.values()\n\n    def client_ids(self) -> List[Mapping]:\n        with self._mutex:\n",
        "source_code_len": 223,
        "target_code": "\n    def client_ids(self) -> Dict[str, Dict[str, Optional[str]]]:\n        with self._mutex:\n",
        "target_code_len": 92,
        "diff_format": "@@ -346,9 +346,3 @@\n \n-    def rooms_names(self) -> List[str]:\n-        return self._rooms.keys()\n-\n-    def rooms(self) -> ValuesView[Room]:\n-        return self._rooms.values()\n-\n-    def client_ids(self) -> List[Mapping]:\n+    def client_ids(self) -> Dict[str, Dict[str, Optional[str]]]:\n         with self._mutex:\n",
        "source_code_with_indent": "\n    <DED><DED>def rooms_names(self) -> List[str]:\n        <IND>return self._rooms.keys()\n\n    <DED>def rooms(self) -> ValuesView[Room]:\n        <IND>return self._rooms.values()\n\n    <DED>def client_ids(self) -> List[Mapping]:\n        <IND>with self._mutex:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def client_ids(self) -> Dict[str, Dict[str, Optional[str]]]:\n        <IND>with self._mutex:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "04d00d6daa42ee6a08f1700ad77075ead526728b",
    "filename": "mixer/broadcaster/apps/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/broadcaster/apps/server.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/broadcaster/apps/server.py:414:86 Incompatible parameter type [6]: Expected `typing.Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `common.encode_json` but got `List[Mapping[typing.Any, typing.Any]]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `common.encode_json` but got `List[Mapping[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 414,
    "warning_line": "        return common.Command(common.MessageType.LIST_ALL_CLIENTS, common.encode_json(self.client_ids()))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import queue\nfrom typing import Tuple, List, Mapping, ValuesView, Optional\n\n",
        "source_code_len": 76,
        "target_code": "import queue\nfrom typing import Tuple, List, Mapping, Dict, Optional\n\n",
        "target_code_len": 70,
        "diff_format": "@@ -8,3 +8,3 @@\n import queue\n-from typing import Tuple, List, Mapping, ValuesView, Optional\n+from typing import Tuple, List, Mapping, Dict, Optional\n \n",
        "source_code_with_indent": "import queue\nfrom typing import Tuple, List, Mapping, ValuesView, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import queue\nfrom typing import Tuple, List, Mapping, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def rooms_names(self) -> List[str]:\n        return self._rooms.keys()\n\n    def rooms(self) -> ValuesView[Room]:\n        return self._rooms.values()\n\n    def client_ids(self) -> List[Mapping]:\n        with self._mutex:\n",
        "source_code_len": 223,
        "target_code": "\n    def client_ids(self) -> Dict[str, Dict[str, Optional[str]]]:\n        with self._mutex:\n",
        "target_code_len": 92,
        "diff_format": "@@ -346,9 +346,3 @@\n \n-    def rooms_names(self) -> List[str]:\n-        return self._rooms.keys()\n-\n-    def rooms(self) -> ValuesView[Room]:\n-        return self._rooms.values()\n-\n-    def client_ids(self) -> List[Mapping]:\n+    def client_ids(self) -> Dict[str, Dict[str, Optional[str]]]:\n         with self._mutex:\n",
        "source_code_with_indent": "\n    <DED><DED>def rooms_names(self) -> List[str]:\n        <IND>return self._rooms.keys()\n\n    <DED>def rooms(self) -> ValuesView[Room]:\n        <IND>return self._rooms.values()\n\n    <DED>def client_ids(self) -> List[Mapping]:\n        <IND>with self._mutex:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def client_ids(self) -> Dict[str, Dict[str, Optional[str]]]:\n        <IND>with self._mutex:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]