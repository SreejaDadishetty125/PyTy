[
  {
    "project": "PyTorchLightning/pytorch-lightning",
    "commit": "46f718d2ba31fdbb8f2abbef03471fec66204b66",
    "filename": "pytorch_lightning/plugins/environments/torchelastic_environment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyTorchLightning-pytorch-lightning/pytorch_lightning/plugins/environments/torchelastic_environment.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytorch_lightning/plugins/environments/torchelastic_environment.py:49:8 Incompatible return type [7]: Expected `str` but got `Optional[str]`.",
    "message": " Expected `str` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 49,
    "warning_line": "        return main_address",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        log.debug(f\"MASTER_ADDR: {os.environ['MASTER_ADDR']}\")\n        main_address = os.environ.get(\"MASTER_ADDR\")\n        return main_address\n\n",
        "source_code_len": 145,
        "target_code": "        log.debug(f\"MASTER_ADDR: {os.environ['MASTER_ADDR']}\")\n        return os.environ[\"MASTER_ADDR\"]\n\n",
        "target_code_len": 105,
        "diff_format": "@@ -47,4 +46,3 @@\n         log.debug(f\"MASTER_ADDR: {os.environ['MASTER_ADDR']}\")\n-        main_address = os.environ.get(\"MASTER_ADDR\")\n-        return main_address\n+        return os.environ[\"MASTER_ADDR\"]\n \n",
        "source_code_with_indent": "        <DED>log.debug(f\"MASTER_ADDR: {os.environ['MASTER_ADDR']}\")\n        main_address = os.environ.get(\"MASTER_ADDR\")\n        return main_address\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>log.debug(f\"MASTER_ADDR: {os.environ['MASTER_ADDR']}\")\n        return os.environ[\"MASTER_ADDR\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyTorchLightning/pytorch-lightning",
    "commit": "46f718d2ba31fdbb8f2abbef03471fec66204b66",
    "filename": "pytorch_lightning/plugins/environments/torchelastic_environment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyTorchLightning-pytorch-lightning/pytorch_lightning/plugins/environments/torchelastic_environment.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytorch_lightning/plugins/environments/torchelastic_environment.py:58:19 Incompatible parameter type [6]: Expected `typing.Union[_SupportsTrunc, bytes, str, typing.SupportsInt, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `int.__new__` but got `Optional[str]`.",
    "message": " Expected `typing.Union[_SupportsTrunc, bytes, str, typing.SupportsInt, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `int.__new__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 58,
    "warning_line": "        port = int(os.environ.get(\"MASTER_PORT\"))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        port = int(os.environ.get(\"MASTER_PORT\"))\n        return port\n\n",
        "source_code_len": 72,
        "target_code": "\n        return int(os.environ[\"MASTER_PORT\"])\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -57,4 +55,3 @@\n \n-        port = int(os.environ.get(\"MASTER_PORT\"))\n-        return port\n+        return int(os.environ[\"MASTER_PORT\"])\n \n",
        "source_code_with_indent": "\n        port = int(os.environ.get(\"MASTER_PORT\"))\n        return port\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        return int(os.environ[\"MASTER_PORT\"])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "PyTorchLightning/pytorch-lightning",
    "commit": "46f718d2ba31fdbb8f2abbef03471fec66204b66",
    "filename": "pytorch_lightning/plugins/environments/torchelastic_environment.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/PyTorchLightning-pytorch-lightning/pytorch_lightning/plugins/environments/torchelastic_environment.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pytorch_lightning/plugins/environments/torchelastic_environment.py:67:4 Inconsistent override [15]: `pytorch_lightning.plugins.environments.torchelastic_environment.TorchElasticEnvironment.world_size` overrides method defined in `ClusterEnvironment` inconsistently. Returned type `Optional[int]` is not a subtype of the overridden return `int`.",
    "message": " `pytorch_lightning.plugins.environments.torchelastic_environment.TorchElasticEnvironment.world_size` overrides method defined in `ClusterEnvironment` inconsistently. Returned type `Optional[int]` is not a subtype of the overridden return `int`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 67,
    "warning_line": "    def world_size(self) -> Optional[int]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def world_size(self) -> Optional[int]:\n        world_size = os.environ.get(\"WORLD_SIZE\")\n        return int(world_size) if world_size is not None else world_size\n\n",
        "source_code_len": 168,
        "target_code": "\n    def world_size(self) -> int:\n        return int(os.environ[\"WORLD_SIZE\"])\n\n",
        "target_code_len": 80,
        "diff_format": "@@ -66,5 +63,4 @@\n \n-    def world_size(self) -> Optional[int]:\n-        world_size = os.environ.get(\"WORLD_SIZE\")\n-        return int(world_size) if world_size is not None else world_size\n+    def world_size(self) -> int:\n+        return int(os.environ[\"WORLD_SIZE\"])\n \n",
        "source_code_with_indent": "\n    <DED>def world_size(self) -> Optional[int]:\n        <IND>world_size = os.environ.get(\"WORLD_SIZE\")\n        return int(world_size) if world_size is not None else world_size\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def world_size(self) -> int:\n        <IND>return int(os.environ[\"WORLD_SIZE\"])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]