[
  {
    "project": "tinkoff-ai/etna",
    "commit": "ec2afb711cd655f1f4f6840ef7e28f41d606f44f",
    "filename": "etna/clustering/hierarchical/dtw_clustering.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tinkoff-ai-etna/etna/clustering/hierarchical/dtw_clustering.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "etna/clustering/hierarchical/dtw_clustering.py:32:4 Inconsistent override [14]: `etna.clustering.hierarchical.dtw_clustering.DTWClustering.build_distance_matrix` overrides method defined in `HierarchicalClustering` inconsistently. Could not find parameter `distance` in overriding signature.",
    "message": " `etna.clustering.hierarchical.dtw_clustering.DTWClustering.build_distance_matrix` overrides method defined in `HierarchicalClustering` inconsistently. Could not find parameter `distance` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 32,
    "warning_line": "    def build_distance_matrix(self, ts: \"TSDataset\"):"
  },
  {
    "project": "tinkoff-ai/etna",
    "commit": "ec2afb711cd655f1f4f6840ef7e28f41d606f44f",
    "filename": "etna/clustering/hierarchical/euclidean_clustering.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tinkoff-ai-etna/etna/clustering/hierarchical/euclidean_clustering.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "etna/clustering/hierarchical/euclidean_clustering.py:32:4 Inconsistent override [14]: `etna.clustering.hierarchical.euclidean_clustering.EuclideanClustering.build_distance_matrix` overrides method defined in `HierarchicalClustering` inconsistently. Could not find parameter `distance` in overriding signature.",
    "message": " `etna.clustering.hierarchical.euclidean_clustering.EuclideanClustering.build_distance_matrix` overrides method defined in `HierarchicalClustering` inconsistently. Could not find parameter `distance` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 32,
    "warning_line": "    def build_distance_matrix(self, ts: \"TSDataset\"):"
  },
  {
    "project": "tinkoff-ai/etna",
    "commit": "ec2afb711cd655f1f4f6840ef7e28f41d606f44f",
    "filename": "etna/ensembles/voting_ensemble.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tinkoff-ai-etna/etna/ensembles/voting_ensemble.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "etna/ensembles/voting_ensemble.py:136:4 Inconsistent override [14]: `etna.ensembles.voting_ensemble.VotingEnsemble.forecast` overrides method defined in `etna.pipeline.pipeline.Pipeline` inconsistently. Could not find parameter `confidence_interval` in overriding signature.",
    "message": " `etna.ensembles.voting_ensemble.VotingEnsemble.forecast` overrides method defined in `etna.pipeline.pipeline.Pipeline` inconsistently. Could not find parameter `confidence_interval` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 136,
    "warning_line": "    def forecast(self) -> TSDataset:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def forecast(self) -> TSDataset:\n        \"\"\"Forecast with ensemble: compute weighted average of pipelines' forecasts.\n\n",
        "source_code_len": 124,
        "target_code": "\n    def forecast(self, confidence_interval: bool = False) -> TSDataset:\n        \"\"\"Forecast with ensemble: compute weighted average of pipelines' forecasts.\n\n        Parameters\n        ----------\n        confidence_interval:\n            This parameter is ignored\n\n",
        "target_code_len": 265,
        "diff_format": "@@ -135,4 +137,9 @@\n \n-    def forecast(self) -> TSDataset:\n+    def forecast(self, confidence_interval: bool = False) -> TSDataset:\n         \"\"\"Forecast with ensemble: compute weighted average of pipelines' forecasts.\n+\n+        Parameters\n+        ----------\n+        confidence_interval:\n+            This parameter is ignored\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def forecast(self) -> TSDataset:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def forecast(self, confidence_interval: bool = False) -> TSDataset:\n        <IND>"
      }
    ]
  },
  {
    "project": "tinkoff-ai/etna",
    "commit": "ec2afb711cd655f1f4f6840ef7e28f41d606f44f",
    "filename": "etna/model_selection/backtest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tinkoff-ai-etna/etna/model_selection/backtest.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "etna/model_selection/backtest.py:168:12 Incompatible return type [7]: Expected `Tuple[TSDataset, TSDataset]` but got `typing.Generator[Tuple[TSDataset, TSDataset], None, None]`.",
    "message": " Expected `Tuple[TSDataset, TSDataset]` but got `typing.Generator[Tuple[TSDataset, TSDataset], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 168,
    "warning_line": "            yield train, test",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\n",
        "source_code_len": 101,
        "target_code": "from typing import Dict\nfrom typing import Generator\nfrom typing import List\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\n",
        "target_code_len": 158,
        "diff_format": "@@ -5,4 +5,6 @@\n from typing import Dict\n+from typing import Generator\n from typing import List\n from typing import Optional\n+from typing import Sequence\n from typing import Tuple\n",
        "source_code_with_indent": "from typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Dict\nfrom typing import Generator\nfrom typing import List\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _generate_folds_dataframes(self, ts: TSDataset) -> Tuple[TSDataset, TSDataset]:\n        \"\"\"\n",
        "source_code_len": 101,
        "target_code": "\n    def _generate_folds_dataframes(self, ts: TSDataset) -> Generator[Tuple[TSDataset, TSDataset], None, None]:\n        \"\"\"\n",
        "target_code_len": 124,
        "diff_format": "@@ -136,3 +138,3 @@\n \n-    def _generate_folds_dataframes(self, ts: TSDataset) -> Tuple[TSDataset, TSDataset]:\n+    def _generate_folds_dataframes(self, ts: TSDataset) -> Generator[Tuple[TSDataset, TSDataset], None, None]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED><DED>def _generate_folds_dataframes(self, ts: TSDataset) -> Tuple[TSDataset, TSDataset]:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED><DED>def _generate_folds_dataframes(self, ts: TSDataset) -> Generator[Tuple[TSDataset, TSDataset], None, None]:\n        <IND>"
      }
    ]
  },
  {
    "project": "tinkoff-ai/etna",
    "commit": "ec2afb711cd655f1f4f6840ef7e28f41d606f44f",
    "filename": "etna/model_selection/backtest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tinkoff-ai-etna/etna/model_selection/backtest.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "etna/model_selection/backtest.py:276:29 Incompatible variable type [9]: transforms is declared to have type `List[Transform]` but is used as type `Tuple[]`.",
    "message": " transforms is declared to have type `List[Transform]` but is used as type `Tuple[]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 276,
    "warning_line": "        self, ts: TSDataset, transforms: List[Transform] = ()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\n",
        "source_code_len": 101,
        "target_code": "from typing import Dict\nfrom typing import Generator\nfrom typing import List\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\n",
        "target_code_len": 158,
        "diff_format": "@@ -5,4 +5,6 @@\n from typing import Dict\n+from typing import Generator\n from typing import List\n from typing import Optional\n+from typing import Sequence\n from typing import Tuple\n",
        "source_code_with_indent": "from typing import Dict\nfrom typing import List\nfrom typing import Optional\nfrom typing import Tuple\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Dict\nfrom typing import Generator\nfrom typing import List\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _generate_folds_dataframes(self, ts: TSDataset) -> Tuple[TSDataset, TSDataset]:\n        \"\"\"\n",
        "source_code_len": 101,
        "target_code": "\n    def _generate_folds_dataframes(self, ts: TSDataset) -> Generator[Tuple[TSDataset, TSDataset], None, None]:\n        \"\"\"\n",
        "target_code_len": 124,
        "diff_format": "@@ -136,3 +138,3 @@\n \n-    def _generate_folds_dataframes(self, ts: TSDataset) -> Tuple[TSDataset, TSDataset]:\n+    def _generate_folds_dataframes(self, ts: TSDataset) -> Generator[Tuple[TSDataset, TSDataset], None, None]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED><DED>def _generate_folds_dataframes(self, ts: TSDataset) -> Tuple[TSDataset, TSDataset]:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED><DED>def _generate_folds_dataframes(self, ts: TSDataset) -> Generator[Tuple[TSDataset, TSDataset], None, None]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def backtest(\n        self, ts: TSDataset, transforms: List[Transform] = ()\n    ) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n",
        "source_code_len": 138,
        "target_code": "    def backtest(\n        self, ts: TSDataset, transforms: Sequence[Transform] = ()\n    ) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n",
        "target_code_len": 142,
        "diff_format": "@@ -275,3 +277,3 @@\n     def backtest(\n-        self, ts: TSDataset, transforms: List[Transform] = ()\n+        self, ts: TSDataset, transforms: Sequence[Transform] = ()\n     ) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n",
        "source_code_with_indent": "    <DED>def backtest(\n        self, ts: TSDataset, transforms: List[Transform] = ()\n    ) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def backtest(\n        self, ts: TSDataset, transforms: Sequence[Transform] = ()\n    ) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]