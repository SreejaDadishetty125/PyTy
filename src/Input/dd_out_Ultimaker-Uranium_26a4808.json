[
  {
    "project": "Ultimaker/Uranium",
    "commit": "26a480870555f68dce0c496e03d749bde4a9d07a",
    "filename": "UM/Settings/ContainerRegistry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/Settings/ContainerRegistry.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/Settings/ContainerRegistry.py:428:50 Incompatible parameter type [6]: Expected `ContainerInterface` for 2nd positional only parameter to call `dict.__setitem__` but got `Optional[ContainerInterface]`.",
    "message": " Expected `ContainerInterface` for 2nd positional only parameter to call `dict.__setitem__` but got `Optional[ContainerInterface]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 428,
    "warning_line": "            self._containers[container.getId()] = container",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if container is None:\n            metadata = self.metadata[container_id]\n            if issubclass(metadata[\"container_type\"], InstanceContainer):\n                container = self.findInstanceContainers(id = container_id)[0]\n            elif issubclass(metadata[\"container_type\"], ContainerStack):\n                container = self.findContainerStacks(id = container_id)[0]\n\n",
        "source_code_len": 382,
        "target_code": "        if container is None:\n            container = self.findContainers(id = container_id)[0]\n        container = cast(ContainerInterface, container)\n\n",
        "target_code_len": 153,
        "diff_format": "@@ -406,7 +407,4 @@\n         if container is None:\n-            metadata = self.metadata[container_id]\n-            if issubclass(metadata[\"container_type\"], InstanceContainer):\n-                container = self.findInstanceContainers(id = container_id)[0]\n-            elif issubclass(metadata[\"container_type\"], ContainerStack):\n-                container = self.findContainerStacks(id = container_id)[0]\n+            container = self.findContainers(id = container_id)[0]\n+        container = cast(ContainerInterface, container)\n \n",
        "source_code_with_indent": "        if container is None:\n            <IND>metadata = self.metadata[container_id]\n            if issubclass(metadata[\"container_type\"], InstanceContainer):\n                <IND>container = self.findInstanceContainers(id = container_id)[0]\n            <DED>elif issubclass(metadata[\"container_type\"], ContainerStack):\n                <IND>container = self.findContainerStacks(id = container_id)[0]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if container is None:\n            <IND>container = self.findContainers(id = container_id)[0]\n        <DED>container = cast(ContainerInterface, container)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        container.setName(new_name)\n        if new_id is not None:\n",
        "source_code_len": 68,
        "target_code": "\n        try:\n            container.setName(new_name) #type: ignore\n        except TypeError: #Some containers don't allow setting the name.\n            return\n        if new_id is not None:\n",
        "target_code_len": 191,
        "diff_format": "@@ -418,3 +416,6 @@\n \n-        container.setName(new_name)\n+        try:\n+            container.setName(new_name) #type: ignore\n+        except TypeError: #Some containers don't allow setting the name.\n+            return\n         if new_id is not None:\n",
        "source_code_with_indent": "\n        container.setName(new_name)\n        if new_id is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        try:\n            <IND>container.setName(new_name) #type: ignore\n        <DED>except TypeError: #Some containers don't allow setting the name.\n            <IND>return\n        <DED>if new_id is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "26a480870555f68dce0c496e03d749bde4a9d07a",
    "filename": "UM/Settings/ContainerRegistry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/Settings/ContainerRegistry.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/Settings/ContainerRegistry.py:432:41 Incompatible parameter type [6]: Expected `ContainerInterface` for 1st positional only parameter to call `ContainerRegistry._clearQueryCacheByContainer` but got `Optional[ContainerInterface]`.",
    "message": " Expected `ContainerInterface` for 1st positional only parameter to call `ContainerRegistry._clearQueryCacheByContainer` but got `Optional[ContainerInterface]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 432,
    "warning_line": "        self._clearQueryCacheByContainer(container)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if container is None:\n            metadata = self.metadata[container_id]\n            if issubclass(metadata[\"container_type\"], InstanceContainer):\n                container = self.findInstanceContainers(id = container_id)[0]\n            elif issubclass(metadata[\"container_type\"], ContainerStack):\n                container = self.findContainerStacks(id = container_id)[0]\n\n",
        "source_code_len": 382,
        "target_code": "        if container is None:\n            container = self.findContainers(id = container_id)[0]\n        container = cast(ContainerInterface, container)\n\n",
        "target_code_len": 153,
        "diff_format": "@@ -406,7 +407,4 @@\n         if container is None:\n-            metadata = self.metadata[container_id]\n-            if issubclass(metadata[\"container_type\"], InstanceContainer):\n-                container = self.findInstanceContainers(id = container_id)[0]\n-            elif issubclass(metadata[\"container_type\"], ContainerStack):\n-                container = self.findContainerStacks(id = container_id)[0]\n+            container = self.findContainers(id = container_id)[0]\n+        container = cast(ContainerInterface, container)\n \n",
        "source_code_with_indent": "        if container is None:\n            <IND>metadata = self.metadata[container_id]\n            if issubclass(metadata[\"container_type\"], InstanceContainer):\n                <IND>container = self.findInstanceContainers(id = container_id)[0]\n            <DED>elif issubclass(metadata[\"container_type\"], ContainerStack):\n                <IND>container = self.findContainerStacks(id = container_id)[0]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if container is None:\n            <IND>container = self.findContainers(id = container_id)[0]\n        <DED>container = cast(ContainerInterface, container)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        container.setName(new_name)\n        if new_id is not None:\n",
        "source_code_len": 68,
        "target_code": "\n        try:\n            container.setName(new_name) #type: ignore\n        except TypeError: #Some containers don't allow setting the name.\n            return\n        if new_id is not None:\n",
        "target_code_len": 191,
        "diff_format": "@@ -418,3 +416,6 @@\n \n-        container.setName(new_name)\n+        try:\n+            container.setName(new_name) #type: ignore\n+        except TypeError: #Some containers don't allow setting the name.\n+            return\n         if new_id is not None:\n",
        "source_code_with_indent": "\n        container.setName(new_name)\n        if new_id is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        try:\n            <IND>container.setName(new_name) #type: ignore\n        <DED>except TypeError: #Some containers don't allow setting the name.\n            <IND>return\n        <DED>if new_id is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Ultimaker/Uranium",
    "commit": "26a480870555f68dce0c496e03d749bde4a9d07a",
    "filename": "UM/Settings/ContainerRegistry.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Ultimaker-Uranium/UM/Settings/ContainerRegistry.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "UM/Settings/ContainerRegistry.py:497:8 Incompatible return type [7]: Expected `MimeType` but got `None`.",
    "message": " Expected `MimeType` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 497,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def getMimeTypeForContainer(cls, container_type: type) -> MimeType:\n        try:\n",
        "source_code_len": 102,
        "target_code": "    @classmethod\n    def getMimeTypeForContainer(cls, container_type: type) -> Optional[MimeType]:\n        try:\n",
        "target_code_len": 112,
        "diff_format": "@@ -489,3 +490,3 @@\n     @classmethod\n-    def getMimeTypeForContainer(cls, container_type: type) -> MimeType:\n+    def getMimeTypeForContainer(cls, container_type: type) -> Optional[MimeType]:\n         try:\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def getMimeTypeForContainer(cls, container_type: type) -> MimeType:\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def getMimeTypeForContainer(cls, container_type: type) -> Optional[MimeType]:\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]