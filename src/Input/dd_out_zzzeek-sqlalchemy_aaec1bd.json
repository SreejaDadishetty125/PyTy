[
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/array.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/array.py:355:9 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.sql.sqltypes.Enum, lib.sqlalchemy.sql.sqltypes.Interval]]` for 1st positional only parameter to call `dict.__setitem__` but got `typing.Type[lib.sqlalchemy.sql.sqltypes.ARRAY]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.sql.sqltypes.Enum, lib.sqlalchemy.sql.sqltypes.Interval]]` for 1st positional only parameter to call `dict.__setitem__` but got `typing.Type[lib.sqlalchemy.sql.sqltypes.ARRAY]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 355,
    "warning_line": "colspecs[sqltypes.ARRAY] = ARRAY",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return process\n\n\ncolspecs[sqltypes.ARRAY] = ARRAY\nischema_names[\"_array\"] = ARRAY\n",
        "source_code_len": 91,
        "target_code": "\n        if self._against_native_enum:\n            super_rp = process\n\n            def handle_raw_string(value):\n                inner = re.match(r\"^{(.*)}$\", value).group(1)\n                return inner.split(\",\") if inner else []\n\n            def process(value):\n                if value is None:\n                    return value\n                # isinstance(value, util.string_types) is required to handle\n                # the # case where a TypeDecorator for and Array of Enum is\n                # used like was required in sa < 1.3.17\n                return super_rp(\n                    handle_raw_string(value)\n                    if isinstance(value, util.string_types)\n                    else value\n                )\n\n        return process\n",
        "target_code_len": 752,
        "diff_format": "@@ -351,6 +365,21 @@\n \n+        if self._against_native_enum:\n+            super_rp = process\n+\n+            def handle_raw_string(value):\n+                inner = re.match(r\"^{(.*)}$\", value).group(1)\n+                return inner.split(\",\") if inner else []\n+\n+            def process(value):\n+                if value is None:\n+                    return value\n+                # isinstance(value, util.string_types) is required to handle\n+                # the # case where a TypeDecorator for and Array of Enum is\n+                # used like was required in sa < 1.3.17\n+                return super_rp(\n+                    handle_raw_string(value)\n+                    if isinstance(value, util.string_types)\n+                    else value\n+                )\n+\n         return process\n-\n-\n-colspecs[sqltypes.ARRAY] = ARRAY\n-ischema_names[\"_array\"] = ARRAY\n",
        "source_code_with_indent": "\n        <DED><DED>return process\n\n\n<DED><DED>colspecs[sqltypes.ARRAY] = ARRAY\nischema_names[\"_array\"] = ARRAY\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED><DED>if self._against_native_enum:\n            <IND>super_rp = process\n\n            def handle_raw_string(value):\n                <IND>inner = re.match(r\"^{(.*)}$\", value).group(1)\n                return inner.split(\",\") if inner else []\n\n            <DED>def process(value):\n                <IND>if value is None:\n                    <IND>return value\n                # isinstance(value, util.string_types) is required to handle\n                # the # case where a TypeDecorator for and Array of Enum is\n                # used like was required in sa < 1.3.17\n                <DED>return super_rp(\n                    handle_raw_string(value)\n                    if isinstance(value, util.string_types)\n                    else value\n                )\n\n        <DED><DED>return process\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/array.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/array.py:355:27 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.ENUM, lib.sqlalchemy.dialects.postgresql.base.INTERVAL]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[ARRAY]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.ENUM, lib.sqlalchemy.dialects.postgresql.base.INTERVAL]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[ARRAY]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 355,
    "warning_line": "colspecs[sqltypes.ARRAY] = ARRAY",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return process\n\n\ncolspecs[sqltypes.ARRAY] = ARRAY\nischema_names[\"_array\"] = ARRAY\n",
        "source_code_len": 91,
        "target_code": "\n        if self._against_native_enum:\n            super_rp = process\n\n            def handle_raw_string(value):\n                inner = re.match(r\"^{(.*)}$\", value).group(1)\n                return inner.split(\",\") if inner else []\n\n            def process(value):\n                if value is None:\n                    return value\n                # isinstance(value, util.string_types) is required to handle\n                # the # case where a TypeDecorator for and Array of Enum is\n                # used like was required in sa < 1.3.17\n                return super_rp(\n                    handle_raw_string(value)\n                    if isinstance(value, util.string_types)\n                    else value\n                )\n\n        return process\n",
        "target_code_len": 752,
        "diff_format": "@@ -351,6 +365,21 @@\n \n+        if self._against_native_enum:\n+            super_rp = process\n+\n+            def handle_raw_string(value):\n+                inner = re.match(r\"^{(.*)}$\", value).group(1)\n+                return inner.split(\",\") if inner else []\n+\n+            def process(value):\n+                if value is None:\n+                    return value\n+                # isinstance(value, util.string_types) is required to handle\n+                # the # case where a TypeDecorator for and Array of Enum is\n+                # used like was required in sa < 1.3.17\n+                return super_rp(\n+                    handle_raw_string(value)\n+                    if isinstance(value, util.string_types)\n+                    else value\n+                )\n+\n         return process\n-\n-\n-colspecs[sqltypes.ARRAY] = ARRAY\n-ischema_names[\"_array\"] = ARRAY\n",
        "source_code_with_indent": "\n        <DED><DED>return process\n\n\n<DED><DED>colspecs[sqltypes.ARRAY] = ARRAY\nischema_names[\"_array\"] = ARRAY\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED><DED>if self._against_native_enum:\n            <IND>super_rp = process\n\n            def handle_raw_string(value):\n                <IND>inner = re.match(r\"^{(.*)}$\", value).group(1)\n                return inner.split(\",\") if inner else []\n\n            <DED>def process(value):\n                <IND>if value is None:\n                    <IND>return value\n                # isinstance(value, util.string_types) is required to handle\n                # the # case where a TypeDecorator for and Array of Enum is\n                # used like was required in sa < 1.3.17\n                <DED>return super_rp(\n                    handle_raw_string(value)\n                    if isinstance(value, util.string_types)\n                    else value\n                )\n\n        <DED><DED>return process\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/array.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/array.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/array.py:356:26 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[ARRAY]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[ARRAY]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 356,
    "warning_line": "ischema_names[\"_array\"] = ARRAY",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return process\n\n\ncolspecs[sqltypes.ARRAY] = ARRAY\nischema_names[\"_array\"] = ARRAY\n",
        "source_code_len": 91,
        "target_code": "\n        if self._against_native_enum:\n            super_rp = process\n\n            def handle_raw_string(value):\n                inner = re.match(r\"^{(.*)}$\", value).group(1)\n                return inner.split(\",\") if inner else []\n\n            def process(value):\n                if value is None:\n                    return value\n                # isinstance(value, util.string_types) is required to handle\n                # the # case where a TypeDecorator for and Array of Enum is\n                # used like was required in sa < 1.3.17\n                return super_rp(\n                    handle_raw_string(value)\n                    if isinstance(value, util.string_types)\n                    else value\n                )\n\n        return process\n",
        "target_code_len": 752,
        "diff_format": "@@ -351,6 +365,21 @@\n \n+        if self._against_native_enum:\n+            super_rp = process\n+\n+            def handle_raw_string(value):\n+                inner = re.match(r\"^{(.*)}$\", value).group(1)\n+                return inner.split(\",\") if inner else []\n+\n+            def process(value):\n+                if value is None:\n+                    return value\n+                # isinstance(value, util.string_types) is required to handle\n+                # the # case where a TypeDecorator for and Array of Enum is\n+                # used like was required in sa < 1.3.17\n+                return super_rp(\n+                    handle_raw_string(value)\n+                    if isinstance(value, util.string_types)\n+                    else value\n+                )\n+\n         return process\n-\n-\n-colspecs[sqltypes.ARRAY] = ARRAY\n-ischema_names[\"_array\"] = ARRAY\n",
        "source_code_with_indent": "\n        <DED><DED>return process\n\n\n<DED><DED>colspecs[sqltypes.ARRAY] = ARRAY\nischema_names[\"_array\"] = ARRAY\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED><DED>if self._against_native_enum:\n            <IND>super_rp = process\n\n            def handle_raw_string(value):\n                <IND>inner = re.match(r\"^{(.*)}$\", value).group(1)\n                return inner.split(\",\") if inner else []\n\n            <DED>def process(value):\n                <IND>if value is None:\n                    <IND>return value\n                # isinstance(value, util.string_types) is required to handle\n                # the # case where a TypeDecorator for and Array of Enum is\n                # used like was required in sa < 1.3.17\n                <DED>return super_rp(\n                    handle_raw_string(value)\n                    if isinstance(value, util.string_types)\n                    else value\n                )\n\n        <DED><DED>return process\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/hstore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/hstore.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/hstore.py:271:26 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[HSTORE]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[HSTORE]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 271,
    "warning_line": "ischema_names[\"hstore\"] = HSTORE",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return process\n\n\nischema_names[\"hstore\"] = HSTORE\n\n",
        "source_code_len": 59,
        "target_code": "        return process\n\n",
        "target_code_len": 24,
        "diff_format": "@@ -268,5 +267,2 @@\n         return process\n-\n-\n-ischema_names[\"hstore\"] = HSTORE\n \n",
        "source_code_with_indent": "        <DED><DED><DED>return process\n\n\n<DED><DED>ischema_names[\"hstore\"] = HSTORE\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED><DED>return process\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/json.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/json.py:99:9 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.sql.sqltypes.Enum, lib.sqlalchemy.sql.sqltypes.Interval]]` for 1st positional only parameter to call `dict.__setitem__` but got `typing.Type[lib.sqlalchemy.sql.sqltypes.JSON.JSONPathType]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.sql.sqltypes.Enum, lib.sqlalchemy.sql.sqltypes.Interval]]` for 1st positional only parameter to call `dict.__setitem__` but got `typing.Type[lib.sqlalchemy.sql.sqltypes.JSON.JSONPathType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 99,
    "warning_line": "colspecs[sqltypes.JSON.JSONPathType] = JSONPathType",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return process\n\n\ncolspecs[sqltypes.JSON.JSONPathType] = JSONPathType\n\n",
        "source_code_len": 78,
        "target_code": "        return process\n\n",
        "target_code_len": 24,
        "diff_format": "@@ -96,5 +94,2 @@\n         return process\n-\n-\n-colspecs[sqltypes.JSON.JSONPathType] = JSONPathType\n \n",
        "source_code_with_indent": "        <DED>return process\n\n\n<DED><DED>colspecs[sqltypes.JSON.JSONPathType] = JSONPathType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return process\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/json.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/json.py:99:39 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.ENUM, lib.sqlalchemy.dialects.postgresql.base.INTERVAL]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[JSONPathType]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.ENUM, lib.sqlalchemy.dialects.postgresql.base.INTERVAL]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[JSONPathType]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 99,
    "warning_line": "colspecs[sqltypes.JSON.JSONPathType] = JSONPathType",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        return process\n\n\ncolspecs[sqltypes.JSON.JSONPathType] = JSONPathType\n\n",
        "source_code_len": 78,
        "target_code": "        return process\n\n",
        "target_code_len": 24,
        "diff_format": "@@ -96,5 +94,2 @@\n         return process\n-\n-\n-colspecs[sqltypes.JSON.JSONPathType] = JSONPathType\n \n",
        "source_code_with_indent": "        <DED>return process\n\n\n<DED><DED>colspecs[sqltypes.JSON.JSONPathType] = JSONPathType\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>return process\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/json.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/json.py:239:9 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.sql.sqltypes.Enum, lib.sqlalchemy.sql.sqltypes.Interval]]` for 1st positional only parameter to call `dict.__setitem__` but got `typing.Type[lib.sqlalchemy.sql.sqltypes.JSON]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.sql.sqltypes.Enum, lib.sqlalchemy.sql.sqltypes.Interval]]` for 1st positional only parameter to call `dict.__setitem__` but got `typing.Type[lib.sqlalchemy.sql.sqltypes.JSON]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 239,
    "warning_line": "colspecs[sqltypes.JSON] = JSON",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\ncolspecs[sqltypes.JSON] = JSON\nischema_names[\"json\"] = JSON\n\n\nclass JSONB(JSON):\n",
        "source_code_len": 82,
        "target_code": "\nclass JSONB(JSON):\n",
        "target_code_len": 20,
        "diff_format": "@@ -238,6 +233,2 @@\n \n-colspecs[sqltypes.JSON] = JSON\n-ischema_names[\"json\"] = JSON\n-\n-\n class JSONB(JSON):\n",
        "source_code_with_indent": "\n<DED>colspecs[sqltypes.JSON] = JSON\nischema_names[\"json\"] = JSON\n\n\nclass JSONB(JSON):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class JSONB(JSON):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/json.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/json.py:239:26 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.ENUM, lib.sqlalchemy.dialects.postgresql.base.INTERVAL]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[JSON]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.ENUM, lib.sqlalchemy.dialects.postgresql.base.INTERVAL]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[JSON]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 239,
    "warning_line": "colspecs[sqltypes.JSON] = JSON",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\ncolspecs[sqltypes.JSON] = JSON\nischema_names[\"json\"] = JSON\n\n\nclass JSONB(JSON):\n",
        "source_code_len": 82,
        "target_code": "\nclass JSONB(JSON):\n",
        "target_code_len": 20,
        "diff_format": "@@ -238,6 +233,2 @@\n \n-colspecs[sqltypes.JSON] = JSON\n-ischema_names[\"json\"] = JSON\n-\n-\n class JSONB(JSON):\n",
        "source_code_with_indent": "\n<DED>colspecs[sqltypes.JSON] = JSON\nischema_names[\"json\"] = JSON\n\n\nclass JSONB(JSON):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class JSONB(JSON):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/json.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/json.py:240:24 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[JSON]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[JSON]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 240,
    "warning_line": "ischema_names[\"json\"] = JSON",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\ncolspecs[sqltypes.JSON] = JSON\nischema_names[\"json\"] = JSON\n\n\nclass JSONB(JSON):\n",
        "source_code_len": 82,
        "target_code": "\nclass JSONB(JSON):\n",
        "target_code_len": 20,
        "diff_format": "@@ -238,6 +233,2 @@\n \n-colspecs[sqltypes.JSON] = JSON\n-ischema_names[\"json\"] = JSON\n-\n-\n class JSONB(JSON):\n",
        "source_code_with_indent": "\n<DED>colspecs[sqltypes.JSON] = JSON\nischema_names[\"json\"] = JSON\n\n\nclass JSONB(JSON):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class JSONB(JSON):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/json.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/json.py:329:25 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[JSONB]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[JSONB]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 329,
    "warning_line": "ischema_names[\"jsonb\"] = JSONB",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    comparator_factory = Comparator\n\n\nischema_names[\"jsonb\"] = JSONB\n",
        "source_code_len": 69,
        "target_code": "    comparator_factory = Comparator\n",
        "target_code_len": 36,
        "diff_format": "@@ -326,4 +317,1 @@\n     comparator_factory = Comparator\n-\n-\n-ischema_names[\"jsonb\"] = JSONB\n",
        "source_code_with_indent": "    <DED><DED>comparator_factory = Comparator\n\n\n<DED>ischema_names[\"jsonb\"] = JSONB\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED><DED>comparator_factory = Comparator\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/ranges.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/ranges.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/ranges.py:111:29 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[INT4RANGE]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[INT4RANGE]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 111,
    "warning_line": "ischema_names[\"int4range\"] = INT4RANGE",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nischema_names[\"int4range\"] = INT4RANGE\n\n\nclass INT8RANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "source_code_len": 96,
        "target_code": "\nclass INT8RANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "target_code_len": 55,
        "diff_format": "@@ -110,5 +109,2 @@\n \n-ischema_names[\"int4range\"] = INT4RANGE\n-\n-\n class INT8RANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "source_code_with_indent": "\n<DED>ischema_names[\"int4range\"] = INT4RANGE\n\n\nclass INT8RANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class INT8RANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/ranges.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/ranges.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/ranges.py:122:29 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[INT8RANGE]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[INT8RANGE]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 122,
    "warning_line": "ischema_names[\"int8range\"] = INT8RANGE",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    __visit_name__ = \"INT8RANGE\"\n\n\nischema_names[\"int8range\"] = INT8RANGE\n\n",
        "source_code_len": 75,
        "target_code": "    __visit_name__ = \"INT8RANGE\"\n\n",
        "target_code_len": 34,
        "diff_format": "@@ -119,5 +115,2 @@\n     __visit_name__ = \"INT8RANGE\"\n-\n-\n-ischema_names[\"int8range\"] = INT8RANGE\n \n",
        "source_code_with_indent": "    __visit_name__ = \"INT8RANGE\"\n\n\n<DED>ischema_names[\"int8range\"] = INT8RANGE\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    __visit_name__ = \"INT8RANGE\"\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/ranges.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/ranges.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/ranges.py:133:28 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[NUMRANGE]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[NUMRANGE]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 133,
    "warning_line": "ischema_names[\"numrange\"] = NUMRANGE",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nischema_names[\"numrange\"] = NUMRANGE\n\n\nclass DATERANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "source_code_len": 94,
        "target_code": "\nclass DATERANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "target_code_len": 55,
        "diff_format": "@@ -132,5 +125,2 @@\n \n-ischema_names[\"numrange\"] = NUMRANGE\n-\n-\n class DATERANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "source_code_with_indent": "\n<DED>ischema_names[\"numrange\"] = NUMRANGE\n\n\nclass DATERANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class DATERANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/ranges.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/ranges.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/ranges.py:144:29 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[DATERANGE]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[DATERANGE]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 144,
    "warning_line": "ischema_names[\"daterange\"] = DATERANGE",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    __visit_name__ = \"DATERANGE\"\n\n\nischema_names[\"daterange\"] = DATERANGE\n\n",
        "source_code_len": 75,
        "target_code": "    __visit_name__ = \"DATERANGE\"\n\n",
        "target_code_len": 34,
        "diff_format": "@@ -141,5 +131,2 @@\n     __visit_name__ = \"DATERANGE\"\n-\n-\n-ischema_names[\"daterange\"] = DATERANGE\n \n",
        "source_code_with_indent": "    __visit_name__ = \"DATERANGE\"\n\n\n<DED>ischema_names[\"daterange\"] = DATERANGE\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    __visit_name__ = \"DATERANGE\"\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/ranges.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/ranges.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/ranges.py:155:27 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[TSRANGE]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[TSRANGE]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 155,
    "warning_line": "ischema_names[\"tsrange\"] = TSRANGE",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nischema_names[\"tsrange\"] = TSRANGE\n\n\nclass TSTZRANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "source_code_len": 92,
        "target_code": "\nclass TSTZRANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "target_code_len": 55,
        "diff_format": "@@ -154,5 +141,2 @@\n \n-ischema_names[\"tsrange\"] = TSRANGE\n-\n-\n class TSTZRANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "source_code_with_indent": "\n<DED>ischema_names[\"tsrange\"] = TSRANGE\n\n\nclass TSTZRANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class TSTZRANGE(RangeOperators, sqltypes.TypeEngine):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "zzzeek/sqlalchemy",
    "commit": "aaec1bdedfc73ead3aef3a3e4d835a8df339e2dd",
    "filename": "lib/sqlalchemy/dialects/postgresql/ranges.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/zzzeek-sqlalchemy/lib/sqlalchemy/dialects/postgresql/ranges.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lib/sqlalchemy/dialects/postgresql/ranges.py:166:29 Incompatible parameter type [6]: Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[TSTZRANGE]`.",
    "message": " Expected `typing.Type[typing.Union[lib.sqlalchemy.dialects.postgresql.base.BIT, lib.sqlalchemy.dialects.postgresql.base.BYTEA, lib.sqlalchemy.dialects.postgresql.base.CIDR, lib.sqlalchemy.dialects.postgresql.base.DOUBLE_PRECISION, lib.sqlalchemy.dialects.postgresql.base.INET, lib.sqlalchemy.dialects.postgresql.base.INTERVAL, lib.sqlalchemy.dialects.postgresql.base.MACADDR, lib.sqlalchemy.dialects.postgresql.base.MONEY, lib.sqlalchemy.dialects.postgresql.base.OID, lib.sqlalchemy.dialects.postgresql.base.REGCLASS, lib.sqlalchemy.dialects.postgresql.base.TIME, lib.sqlalchemy.dialects.postgresql.base.TIMESTAMP, lib.sqlalchemy.dialects.postgresql.base.TSVECTOR, lib.sqlalchemy.dialects.postgresql.base.UUID, lib.sqlalchemy.sql.sqltypes.BIGINT, lib.sqlalchemy.sql.sqltypes.BOOLEAN, lib.sqlalchemy.sql.sqltypes.DATE, lib.sqlalchemy.sql.sqltypes.FLOAT, lib.sqlalchemy.sql.sqltypes.INTEGER, lib.sqlalchemy.sql.sqltypes.NUMERIC, lib.sqlalchemy.sql.sqltypes.REAL, lib.sqlalchemy.sql.sqltypes.SMALLINT, lib.sqlalchemy.sql.sqltypes.String]]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Type[TSTZRANGE]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 166,
    "warning_line": "ischema_names[\"tstzrange\"] = TSTZRANGE",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    __visit_name__ = \"TSTZRANGE\"\n\n\nischema_names[\"tstzrange\"] = TSTZRANGE\n",
        "source_code_len": 74,
        "target_code": "    __visit_name__ = \"TSTZRANGE\"\n",
        "target_code_len": 33,
        "diff_format": "@@ -163,4 +147,1 @@\n     __visit_name__ = \"TSTZRANGE\"\n-\n-\n-ischema_names[\"tstzrange\"] = TSTZRANGE\n",
        "source_code_with_indent": "    __visit_name__ = \"TSTZRANGE\"\n\n\n<DED>ischema_names[\"tstzrange\"] = TSTZRANGE\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    __visit_name__ = \"TSTZRANGE\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]