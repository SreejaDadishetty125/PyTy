[
  {
    "project": "hyperledger/indy-plenum",
    "commit": "54effafa0fdd1d2d561c0761916298324d99f8a6",
    "filename": "plenum/common/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/common/types.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/common/types.py:463:38 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 2nd positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "message": " Expected `typing.Type[typing.Any]` for 2nd positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 463,
    "warning_line": "ThreePhaseMsg = TypeVar(\"3PhaseMsg\", *ThreePhaseType)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Propagate needs the name of the sender client since every node needs to know\n# who sent the request to send the reply. If all clients had name same as\n# their identifier same as client name (stack name, the name which RAET knows)\n\n\n# class Propagate(MessageBase):\n#     typename = PROPAGATE\n#     schema = (\n#         (f.REQUEST.nm, ClientMessageValidator()),\n#         (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n#     )\nPropagate = TaggedTuple(PROPAGATE, [\n    f.REQUEST,\n    f.SENDER_CLIENT])\n\n\n# class PrePrepare(MessageBase):\n#     typename = PREPREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.PP_TIME.nm, TimestampField()),\n#         (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n#         (f.DISCARDED.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.LEDGER_ID.nm, LedgerIdField()),\n#         (f.STATE_ROOT.nm, MerkleRootField()),\n#         (f.TXN_ROOT.nm, MerkleRootField()),\n#     )\nPrePrepare = TaggedTuple(PREPREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.PP_TIME,\n    f.REQ_IDR,\n    f.DISCARDED,\n    f.DIGEST,\n    f.LEDGER_ID,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Prepare(MessageBase):\n#     typename = PREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n#         (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n#     )\nPrepare = TaggedTuple(PREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.DIGEST,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Commit(MessageBase):\n#     typename = COMMIT\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nCommit = TaggedTuple(COMMIT, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO\n    ])\n\n",
        "source_code_len": 2177,
        "target_code": "\nclass Propagate(MessageBase):\n    typename = PROPAGATE\n    schema = (\n        (f.REQUEST.nm, ClientMessageValidator()),\n        (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n    )\n# Propagate = TaggedTuple(PROPAGATE, [\n#     f.REQUEST,\n#     f.SENDER_CLIENT])\n\n\nclass PrePrepare(MessageBase):\n    typename = PREPREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.PP_TIME.nm, TimestampField()),\n        (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n        (f.DISCARDED.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.LEDGER_ID.nm, LedgerIdField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# PrePrepare = TaggedTuple(PREPREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.PP_TIME,\n#     f.REQ_IDR,\n#     f.DISCARDED,\n#     f.DIGEST,\n#     f.LEDGER_ID,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\nclass Prepare(MessageBase):\n    typename = PREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# Prepare = TaggedTuple(PREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.DIGEST,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\nclass Commit(MessageBase):\n    typename = COMMIT\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Commit = TaggedTuple(COMMIT, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO\n#     ])\n\n",
        "target_code_len": 1959,
        "diff_format": "@@ -230,78 +230,73 @@\n \n-# Propagate needs the name of the sender client since every node needs to know\n-# who sent the request to send the reply. If all clients had name same as\n-# their identifier same as client name (stack name, the name which RAET knows)\n-\n-\n-# class Propagate(MessageBase):\n-#     typename = PROPAGATE\n-#     schema = (\n-#         (f.REQUEST.nm, ClientMessageValidator()),\n-#         (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n-#     )\n-Propagate = TaggedTuple(PROPAGATE, [\n-    f.REQUEST,\n-    f.SENDER_CLIENT])\n-\n-\n-# class PrePrepare(MessageBase):\n-#     typename = PREPREPARE\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_TIME.nm, TimestampField()),\n-#         (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n-#         (f.DISCARDED.nm, NonNegativeNumberField()),\n-#         (f.DIGEST.nm, NonEmptyStringField()),\n-#         (f.LEDGER_ID.nm, LedgerIdField()),\n-#         (f.STATE_ROOT.nm, MerkleRootField()),\n-#         (f.TXN_ROOT.nm, MerkleRootField()),\n-#     )\n-PrePrepare = TaggedTuple(PREPREPARE, [\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.PP_SEQ_NO,\n-    f.PP_TIME,\n-    f.REQ_IDR,\n-    f.DISCARDED,\n-    f.DIGEST,\n-    f.LEDGER_ID,\n-    f.STATE_ROOT,\n-    f.TXN_ROOT,\n-    ])\n-\n-\n-# class Prepare(MessageBase):\n-#     typename = PREPARE\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n-#         (f.DIGEST.nm, NonEmptyStringField()),\n-#         (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n-#         (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n-#     )\n-Prepare = TaggedTuple(PREPARE, [\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.PP_SEQ_NO,\n-    f.DIGEST,\n-    f.STATE_ROOT,\n-    f.TXN_ROOT,\n-    ])\n-\n-\n-# class Commit(MessageBase):\n-#     typename = COMMIT\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n-#     )\n-Commit = TaggedTuple(COMMIT, [\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.PP_SEQ_NO\n-    ])\n+class Propagate(MessageBase):\n+    typename = PROPAGATE\n+    schema = (\n+        (f.REQUEST.nm, ClientMessageValidator()),\n+        (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n+    )\n+# Propagate = TaggedTuple(PROPAGATE, [\n+#     f.REQUEST,\n+#     f.SENDER_CLIENT])\n+\n+\n+class PrePrepare(MessageBase):\n+    typename = PREPREPARE\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n+        (f.PP_TIME.nm, TimestampField()),\n+        (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n+        (f.DISCARDED.nm, NonNegativeNumberField()),\n+        (f.DIGEST.nm, NonEmptyStringField()),\n+        (f.LEDGER_ID.nm, LedgerIdField()),\n+        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n+        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n+    )\n+# PrePrepare = TaggedTuple(PREPREPARE, [\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.PP_SEQ_NO,\n+#     f.PP_TIME,\n+#     f.REQ_IDR,\n+#     f.DISCARDED,\n+#     f.DIGEST,\n+#     f.LEDGER_ID,\n+#     f.STATE_ROOT,\n+#     f.TXN_ROOT,\n+#     ])\n+\n+\n+class Prepare(MessageBase):\n+    typename = PREPARE\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n+        (f.DIGEST.nm, NonEmptyStringField()),\n+        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n+        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n+    )\n+# Prepare = TaggedTuple(PREPARE, [\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.PP_SEQ_NO,\n+#     f.DIGEST,\n+#     f.STATE_ROOT,\n+#     f.TXN_ROOT,\n+#     ])\n+\n+\n+class Commit(MessageBase):\n+    typename = COMMIT\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n+    )\n+# Commit = TaggedTuple(COMMIT, [\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.PP_SEQ_NO\n+#     ])\n \n",
        "source_code_with_indent": "\n# Propagate needs the name of the sender client since every node needs to know\n# who sent the request to send the reply. If all clients had name same as\n# their identifier same as client name (stack name, the name which RAET knows)\n\n\n# class Propagate(MessageBase):\n#     typename = PROPAGATE\n#     schema = (\n#         (f.REQUEST.nm, ClientMessageValidator()),\n#         (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n#     )\nPropagate = TaggedTuple(PROPAGATE, [\n    f.REQUEST,\n    f.SENDER_CLIENT])\n\n\n# class PrePrepare(MessageBase):\n#     typename = PREPREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.PP_TIME.nm, TimestampField()),\n#         (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n#         (f.DISCARDED.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.LEDGER_ID.nm, LedgerIdField()),\n#         (f.STATE_ROOT.nm, MerkleRootField()),\n#         (f.TXN_ROOT.nm, MerkleRootField()),\n#     )\nPrePrepare = TaggedTuple(PREPREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.PP_TIME,\n    f.REQ_IDR,\n    f.DISCARDED,\n    f.DIGEST,\n    f.LEDGER_ID,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Prepare(MessageBase):\n#     typename = PREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n#         (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n#     )\nPrepare = TaggedTuple(PREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.DIGEST,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Commit(MessageBase):\n#     typename = COMMIT\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nCommit = TaggedTuple(COMMIT, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO\n    ])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class Propagate(MessageBase):\n    <IND>typename = PROPAGATE\n    schema = (\n        (f.REQUEST.nm, ClientMessageValidator()),\n        (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n    )\n# Propagate = TaggedTuple(PROPAGATE, [\n#     f.REQUEST,\n#     f.SENDER_CLIENT])\n\n\n<DED>class PrePrepare(MessageBase):\n    <IND>typename = PREPREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.PP_TIME.nm, TimestampField()),\n        (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n        (f.DISCARDED.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.LEDGER_ID.nm, LedgerIdField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# PrePrepare = TaggedTuple(PREPREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.PP_TIME,\n#     f.REQ_IDR,\n#     f.DISCARDED,\n#     f.DIGEST,\n#     f.LEDGER_ID,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\n<DED>class Prepare(MessageBase):\n    <IND>typename = PREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# Prepare = TaggedTuple(PREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.DIGEST,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\n<DED>class Commit(MessageBase):\n    <IND>typename = COMMIT\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Commit = TaggedTuple(COMMIT, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO\n#     ])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "54effafa0fdd1d2d561c0761916298324d99f8a6",
    "filename": "plenum/common/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/common/types.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/common/types.py:463:38 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 3rd positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "message": " Expected `typing.Type[typing.Any]` for 3rd positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 463,
    "warning_line": "ThreePhaseMsg = TypeVar(\"3PhaseMsg\", *ThreePhaseType)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Propagate needs the name of the sender client since every node needs to know\n# who sent the request to send the reply. If all clients had name same as\n# their identifier same as client name (stack name, the name which RAET knows)\n\n\n# class Propagate(MessageBase):\n#     typename = PROPAGATE\n#     schema = (\n#         (f.REQUEST.nm, ClientMessageValidator()),\n#         (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n#     )\nPropagate = TaggedTuple(PROPAGATE, [\n    f.REQUEST,\n    f.SENDER_CLIENT])\n\n\n# class PrePrepare(MessageBase):\n#     typename = PREPREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.PP_TIME.nm, TimestampField()),\n#         (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n#         (f.DISCARDED.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.LEDGER_ID.nm, LedgerIdField()),\n#         (f.STATE_ROOT.nm, MerkleRootField()),\n#         (f.TXN_ROOT.nm, MerkleRootField()),\n#     )\nPrePrepare = TaggedTuple(PREPREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.PP_TIME,\n    f.REQ_IDR,\n    f.DISCARDED,\n    f.DIGEST,\n    f.LEDGER_ID,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Prepare(MessageBase):\n#     typename = PREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n#         (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n#     )\nPrepare = TaggedTuple(PREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.DIGEST,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Commit(MessageBase):\n#     typename = COMMIT\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nCommit = TaggedTuple(COMMIT, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO\n    ])\n\n",
        "source_code_len": 2177,
        "target_code": "\nclass Propagate(MessageBase):\n    typename = PROPAGATE\n    schema = (\n        (f.REQUEST.nm, ClientMessageValidator()),\n        (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n    )\n# Propagate = TaggedTuple(PROPAGATE, [\n#     f.REQUEST,\n#     f.SENDER_CLIENT])\n\n\nclass PrePrepare(MessageBase):\n    typename = PREPREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.PP_TIME.nm, TimestampField()),\n        (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n        (f.DISCARDED.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.LEDGER_ID.nm, LedgerIdField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# PrePrepare = TaggedTuple(PREPREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.PP_TIME,\n#     f.REQ_IDR,\n#     f.DISCARDED,\n#     f.DIGEST,\n#     f.LEDGER_ID,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\nclass Prepare(MessageBase):\n    typename = PREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# Prepare = TaggedTuple(PREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.DIGEST,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\nclass Commit(MessageBase):\n    typename = COMMIT\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Commit = TaggedTuple(COMMIT, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO\n#     ])\n\n",
        "target_code_len": 1959,
        "diff_format": "@@ -230,78 +230,73 @@\n \n-# Propagate needs the name of the sender client since every node needs to know\n-# who sent the request to send the reply. If all clients had name same as\n-# their identifier same as client name (stack name, the name which RAET knows)\n-\n-\n-# class Propagate(MessageBase):\n-#     typename = PROPAGATE\n-#     schema = (\n-#         (f.REQUEST.nm, ClientMessageValidator()),\n-#         (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n-#     )\n-Propagate = TaggedTuple(PROPAGATE, [\n-    f.REQUEST,\n-    f.SENDER_CLIENT])\n-\n-\n-# class PrePrepare(MessageBase):\n-#     typename = PREPREPARE\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_TIME.nm, TimestampField()),\n-#         (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n-#         (f.DISCARDED.nm, NonNegativeNumberField()),\n-#         (f.DIGEST.nm, NonEmptyStringField()),\n-#         (f.LEDGER_ID.nm, LedgerIdField()),\n-#         (f.STATE_ROOT.nm, MerkleRootField()),\n-#         (f.TXN_ROOT.nm, MerkleRootField()),\n-#     )\n-PrePrepare = TaggedTuple(PREPREPARE, [\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.PP_SEQ_NO,\n-    f.PP_TIME,\n-    f.REQ_IDR,\n-    f.DISCARDED,\n-    f.DIGEST,\n-    f.LEDGER_ID,\n-    f.STATE_ROOT,\n-    f.TXN_ROOT,\n-    ])\n-\n-\n-# class Prepare(MessageBase):\n-#     typename = PREPARE\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n-#         (f.DIGEST.nm, NonEmptyStringField()),\n-#         (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n-#         (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n-#     )\n-Prepare = TaggedTuple(PREPARE, [\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.PP_SEQ_NO,\n-    f.DIGEST,\n-    f.STATE_ROOT,\n-    f.TXN_ROOT,\n-    ])\n-\n-\n-# class Commit(MessageBase):\n-#     typename = COMMIT\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n-#     )\n-Commit = TaggedTuple(COMMIT, [\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.PP_SEQ_NO\n-    ])\n+class Propagate(MessageBase):\n+    typename = PROPAGATE\n+    schema = (\n+        (f.REQUEST.nm, ClientMessageValidator()),\n+        (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n+    )\n+# Propagate = TaggedTuple(PROPAGATE, [\n+#     f.REQUEST,\n+#     f.SENDER_CLIENT])\n+\n+\n+class PrePrepare(MessageBase):\n+    typename = PREPREPARE\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n+        (f.PP_TIME.nm, TimestampField()),\n+        (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n+        (f.DISCARDED.nm, NonNegativeNumberField()),\n+        (f.DIGEST.nm, NonEmptyStringField()),\n+        (f.LEDGER_ID.nm, LedgerIdField()),\n+        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n+        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n+    )\n+# PrePrepare = TaggedTuple(PREPREPARE, [\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.PP_SEQ_NO,\n+#     f.PP_TIME,\n+#     f.REQ_IDR,\n+#     f.DISCARDED,\n+#     f.DIGEST,\n+#     f.LEDGER_ID,\n+#     f.STATE_ROOT,\n+#     f.TXN_ROOT,\n+#     ])\n+\n+\n+class Prepare(MessageBase):\n+    typename = PREPARE\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n+        (f.DIGEST.nm, NonEmptyStringField()),\n+        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n+        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n+    )\n+# Prepare = TaggedTuple(PREPARE, [\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.PP_SEQ_NO,\n+#     f.DIGEST,\n+#     f.STATE_ROOT,\n+#     f.TXN_ROOT,\n+#     ])\n+\n+\n+class Commit(MessageBase):\n+    typename = COMMIT\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n+    )\n+# Commit = TaggedTuple(COMMIT, [\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.PP_SEQ_NO\n+#     ])\n \n",
        "source_code_with_indent": "\n# Propagate needs the name of the sender client since every node needs to know\n# who sent the request to send the reply. If all clients had name same as\n# their identifier same as client name (stack name, the name which RAET knows)\n\n\n# class Propagate(MessageBase):\n#     typename = PROPAGATE\n#     schema = (\n#         (f.REQUEST.nm, ClientMessageValidator()),\n#         (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n#     )\nPropagate = TaggedTuple(PROPAGATE, [\n    f.REQUEST,\n    f.SENDER_CLIENT])\n\n\n# class PrePrepare(MessageBase):\n#     typename = PREPREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.PP_TIME.nm, TimestampField()),\n#         (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n#         (f.DISCARDED.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.LEDGER_ID.nm, LedgerIdField()),\n#         (f.STATE_ROOT.nm, MerkleRootField()),\n#         (f.TXN_ROOT.nm, MerkleRootField()),\n#     )\nPrePrepare = TaggedTuple(PREPREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.PP_TIME,\n    f.REQ_IDR,\n    f.DISCARDED,\n    f.DIGEST,\n    f.LEDGER_ID,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Prepare(MessageBase):\n#     typename = PREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n#         (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n#     )\nPrepare = TaggedTuple(PREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.DIGEST,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Commit(MessageBase):\n#     typename = COMMIT\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nCommit = TaggedTuple(COMMIT, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO\n    ])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class Propagate(MessageBase):\n    <IND>typename = PROPAGATE\n    schema = (\n        (f.REQUEST.nm, ClientMessageValidator()),\n        (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n    )\n# Propagate = TaggedTuple(PROPAGATE, [\n#     f.REQUEST,\n#     f.SENDER_CLIENT])\n\n\n<DED>class PrePrepare(MessageBase):\n    <IND>typename = PREPREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.PP_TIME.nm, TimestampField()),\n        (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n        (f.DISCARDED.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.LEDGER_ID.nm, LedgerIdField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# PrePrepare = TaggedTuple(PREPREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.PP_TIME,\n#     f.REQ_IDR,\n#     f.DISCARDED,\n#     f.DIGEST,\n#     f.LEDGER_ID,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\n<DED>class Prepare(MessageBase):\n    <IND>typename = PREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# Prepare = TaggedTuple(PREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.DIGEST,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\n<DED>class Commit(MessageBase):\n    <IND>typename = COMMIT\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Commit = TaggedTuple(COMMIT, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO\n#     ])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "54effafa0fdd1d2d561c0761916298324d99f8a6",
    "filename": "plenum/common/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/common/types.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/common/types.py:463:38 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 4th positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "message": " Expected `typing.Type[typing.Any]` for 4th positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 463,
    "warning_line": "ThreePhaseMsg = TypeVar(\"3PhaseMsg\", *ThreePhaseType)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Propagate needs the name of the sender client since every node needs to know\n# who sent the request to send the reply. If all clients had name same as\n# their identifier same as client name (stack name, the name which RAET knows)\n\n\n# class Propagate(MessageBase):\n#     typename = PROPAGATE\n#     schema = (\n#         (f.REQUEST.nm, ClientMessageValidator()),\n#         (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n#     )\nPropagate = TaggedTuple(PROPAGATE, [\n    f.REQUEST,\n    f.SENDER_CLIENT])\n\n\n# class PrePrepare(MessageBase):\n#     typename = PREPREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.PP_TIME.nm, TimestampField()),\n#         (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n#         (f.DISCARDED.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.LEDGER_ID.nm, LedgerIdField()),\n#         (f.STATE_ROOT.nm, MerkleRootField()),\n#         (f.TXN_ROOT.nm, MerkleRootField()),\n#     )\nPrePrepare = TaggedTuple(PREPREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.PP_TIME,\n    f.REQ_IDR,\n    f.DISCARDED,\n    f.DIGEST,\n    f.LEDGER_ID,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Prepare(MessageBase):\n#     typename = PREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n#         (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n#     )\nPrepare = TaggedTuple(PREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.DIGEST,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Commit(MessageBase):\n#     typename = COMMIT\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nCommit = TaggedTuple(COMMIT, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO\n    ])\n\n",
        "source_code_len": 2177,
        "target_code": "\nclass Propagate(MessageBase):\n    typename = PROPAGATE\n    schema = (\n        (f.REQUEST.nm, ClientMessageValidator()),\n        (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n    )\n# Propagate = TaggedTuple(PROPAGATE, [\n#     f.REQUEST,\n#     f.SENDER_CLIENT])\n\n\nclass PrePrepare(MessageBase):\n    typename = PREPREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.PP_TIME.nm, TimestampField()),\n        (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n        (f.DISCARDED.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.LEDGER_ID.nm, LedgerIdField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# PrePrepare = TaggedTuple(PREPREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.PP_TIME,\n#     f.REQ_IDR,\n#     f.DISCARDED,\n#     f.DIGEST,\n#     f.LEDGER_ID,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\nclass Prepare(MessageBase):\n    typename = PREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# Prepare = TaggedTuple(PREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.DIGEST,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\nclass Commit(MessageBase):\n    typename = COMMIT\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Commit = TaggedTuple(COMMIT, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO\n#     ])\n\n",
        "target_code_len": 1959,
        "diff_format": "@@ -230,78 +230,73 @@\n \n-# Propagate needs the name of the sender client since every node needs to know\n-# who sent the request to send the reply. If all clients had name same as\n-# their identifier same as client name (stack name, the name which RAET knows)\n-\n-\n-# class Propagate(MessageBase):\n-#     typename = PROPAGATE\n-#     schema = (\n-#         (f.REQUEST.nm, ClientMessageValidator()),\n-#         (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n-#     )\n-Propagate = TaggedTuple(PROPAGATE, [\n-    f.REQUEST,\n-    f.SENDER_CLIENT])\n-\n-\n-# class PrePrepare(MessageBase):\n-#     typename = PREPREPARE\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_TIME.nm, TimestampField()),\n-#         (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n-#         (f.DISCARDED.nm, NonNegativeNumberField()),\n-#         (f.DIGEST.nm, NonEmptyStringField()),\n-#         (f.LEDGER_ID.nm, LedgerIdField()),\n-#         (f.STATE_ROOT.nm, MerkleRootField()),\n-#         (f.TXN_ROOT.nm, MerkleRootField()),\n-#     )\n-PrePrepare = TaggedTuple(PREPREPARE, [\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.PP_SEQ_NO,\n-    f.PP_TIME,\n-    f.REQ_IDR,\n-    f.DISCARDED,\n-    f.DIGEST,\n-    f.LEDGER_ID,\n-    f.STATE_ROOT,\n-    f.TXN_ROOT,\n-    ])\n-\n-\n-# class Prepare(MessageBase):\n-#     typename = PREPARE\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n-#         (f.DIGEST.nm, NonEmptyStringField()),\n-#         (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n-#         (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n-#     )\n-Prepare = TaggedTuple(PREPARE, [\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.PP_SEQ_NO,\n-    f.DIGEST,\n-    f.STATE_ROOT,\n-    f.TXN_ROOT,\n-    ])\n-\n-\n-# class Commit(MessageBase):\n-#     typename = COMMIT\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n-#     )\n-Commit = TaggedTuple(COMMIT, [\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.PP_SEQ_NO\n-    ])\n+class Propagate(MessageBase):\n+    typename = PROPAGATE\n+    schema = (\n+        (f.REQUEST.nm, ClientMessageValidator()),\n+        (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n+    )\n+# Propagate = TaggedTuple(PROPAGATE, [\n+#     f.REQUEST,\n+#     f.SENDER_CLIENT])\n+\n+\n+class PrePrepare(MessageBase):\n+    typename = PREPREPARE\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n+        (f.PP_TIME.nm, TimestampField()),\n+        (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n+        (f.DISCARDED.nm, NonNegativeNumberField()),\n+        (f.DIGEST.nm, NonEmptyStringField()),\n+        (f.LEDGER_ID.nm, LedgerIdField()),\n+        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n+        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n+    )\n+# PrePrepare = TaggedTuple(PREPREPARE, [\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.PP_SEQ_NO,\n+#     f.PP_TIME,\n+#     f.REQ_IDR,\n+#     f.DISCARDED,\n+#     f.DIGEST,\n+#     f.LEDGER_ID,\n+#     f.STATE_ROOT,\n+#     f.TXN_ROOT,\n+#     ])\n+\n+\n+class Prepare(MessageBase):\n+    typename = PREPARE\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n+        (f.DIGEST.nm, NonEmptyStringField()),\n+        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n+        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n+    )\n+# Prepare = TaggedTuple(PREPARE, [\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.PP_SEQ_NO,\n+#     f.DIGEST,\n+#     f.STATE_ROOT,\n+#     f.TXN_ROOT,\n+#     ])\n+\n+\n+class Commit(MessageBase):\n+    typename = COMMIT\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n+    )\n+# Commit = TaggedTuple(COMMIT, [\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.PP_SEQ_NO\n+#     ])\n \n",
        "source_code_with_indent": "\n# Propagate needs the name of the sender client since every node needs to know\n# who sent the request to send the reply. If all clients had name same as\n# their identifier same as client name (stack name, the name which RAET knows)\n\n\n# class Propagate(MessageBase):\n#     typename = PROPAGATE\n#     schema = (\n#         (f.REQUEST.nm, ClientMessageValidator()),\n#         (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n#     )\nPropagate = TaggedTuple(PROPAGATE, [\n    f.REQUEST,\n    f.SENDER_CLIENT])\n\n\n# class PrePrepare(MessageBase):\n#     typename = PREPREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.PP_TIME.nm, TimestampField()),\n#         (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n#         (f.DISCARDED.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.LEDGER_ID.nm, LedgerIdField()),\n#         (f.STATE_ROOT.nm, MerkleRootField()),\n#         (f.TXN_ROOT.nm, MerkleRootField()),\n#     )\nPrePrepare = TaggedTuple(PREPREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.PP_TIME,\n    f.REQ_IDR,\n    f.DISCARDED,\n    f.DIGEST,\n    f.LEDGER_ID,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Prepare(MessageBase):\n#     typename = PREPARE\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#         (f.DIGEST.nm, NonEmptyStringField()),\n#         (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n#         (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n#     )\nPrepare = TaggedTuple(PREPARE, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO,\n    f.DIGEST,\n    f.STATE_ROOT,\n    f.TXN_ROOT,\n    ])\n\n\n# class Commit(MessageBase):\n#     typename = COMMIT\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nCommit = TaggedTuple(COMMIT, [\n    f.INST_ID,\n    f.VIEW_NO,\n    f.PP_SEQ_NO\n    ])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class Propagate(MessageBase):\n    <IND>typename = PROPAGATE\n    schema = (\n        (f.REQUEST.nm, ClientMessageValidator()),\n        (f.SENDER_CLIENT.nm, NonEmptyStringField()),\n    )\n# Propagate = TaggedTuple(PROPAGATE, [\n#     f.REQUEST,\n#     f.SENDER_CLIENT])\n\n\n<DED>class PrePrepare(MessageBase):\n    <IND>typename = PREPREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.PP_TIME.nm, TimestampField()),\n        (f.REQ_IDR.nm, IterableField(RequestIdentifierField())),\n        (f.DISCARDED.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.LEDGER_ID.nm, LedgerIdField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# PrePrepare = TaggedTuple(PREPREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.PP_TIME,\n#     f.REQ_IDR,\n#     f.DISCARDED,\n#     f.DIGEST,\n#     f.LEDGER_ID,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\n<DED>class Prepare(MessageBase):\n    <IND>typename = PREPARE\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n        (f.DIGEST.nm, NonEmptyStringField()),\n        (f.STATE_ROOT.nm, HexField(length=64, nullable=True)),\n        (f.TXN_ROOT.nm, HexField(length=64, nullable=True)),\n    )\n# Prepare = TaggedTuple(PREPARE, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO,\n#     f.DIGEST,\n#     f.STATE_ROOT,\n#     f.TXN_ROOT,\n#     ])\n\n\n<DED>class Commit(MessageBase):\n    <IND>typename = COMMIT\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.PP_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Commit = TaggedTuple(COMMIT, [\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.PP_SEQ_NO\n#     ])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "54effafa0fdd1d2d561c0761916298324d99f8a6",
    "filename": "plenum/common/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/common/types.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/common/types.py:467:38 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 2nd positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "message": " Expected `typing.Type[typing.Any]` for 2nd positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 467,
    "warning_line": "ElectionMsg = TypeVar(\"ElectionMsg\", *ElectionType)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# class Nomination(MessageBase):\n#     typename = NOMINATE\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nNomination = TaggedTuple(NOMINATE, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_len": 391,
        "target_code": "\nclass Nomination(MessageBase):\n    typename = NOMINATE\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Nomination = TaggedTuple(NOMINATE, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_len": 384,
        "diff_format": "@@ -121,16 +121,16 @@\n \n-# class Nomination(MessageBase):\n-#     typename = NOMINATE\n-#\n-#     schema = (\n-#         (f.NAME.nm, NonEmptyStringField()),\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n-#     )\n-Nomination = TaggedTuple(NOMINATE, [\n-    f.NAME,\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.ORD_SEQ_NO])\n+class Nomination(MessageBase):\n+    typename = NOMINATE\n+\n+    schema = (\n+        (f.NAME.nm, NonEmptyStringField()),\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n+    )\n+# Nomination = TaggedTuple(NOMINATE, [\n+#     f.NAME,\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.ORD_SEQ_NO])\n \n",
        "source_code_with_indent": "\n# class Nomination(MessageBase):\n#     typename = NOMINATE\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\n<DED>Nomination = TaggedTuple(NOMINATE, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class Nomination(MessageBase):\n    <IND>typename = NOMINATE\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Nomination = TaggedTuple(NOMINATE, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# class Reelection(MessageBase):\n#     typename = REELECTION\n#\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.ROUND.nm, NonNegativeNumberField()),\n#         (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#     )\nReelection = TaggedTuple(REELECTION, [\n    f.INST_ID,\n    f.ROUND,\n    f.TIE_AMONG,\n    f.VIEW_NO])\n\n",
        "source_code_len": 404,
        "target_code": "\nclass Reelection(MessageBase):\n    typename = REELECTION\n\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.ROUND.nm, NonNegativeNumberField()),\n        (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n    )\n# Reelection = TaggedTuple(REELECTION, [\n#     f.INST_ID,\n#     f.ROUND,\n#     f.TIE_AMONG,\n#     f.VIEW_NO])\n\n",
        "target_code_len": 397,
        "diff_format": "@@ -149,16 +149,16 @@\n \n-# class Reelection(MessageBase):\n-#     typename = REELECTION\n-#\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.ROUND.nm, NonNegativeNumberField()),\n-#         (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#     )\n-Reelection = TaggedTuple(REELECTION, [\n-    f.INST_ID,\n-    f.ROUND,\n-    f.TIE_AMONG,\n-    f.VIEW_NO])\n+class Reelection(MessageBase):\n+    typename = REELECTION\n+\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.ROUND.nm, NonNegativeNumberField()),\n+        (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+    )\n+# Reelection = TaggedTuple(REELECTION, [\n+#     f.INST_ID,\n+#     f.ROUND,\n+#     f.TIE_AMONG,\n+#     f.VIEW_NO])\n \n",
        "source_code_with_indent": "\n# class Reelection(MessageBase):\n#     typename = REELECTION\n#\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.ROUND.nm, NonNegativeNumberField()),\n#         (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#     )\nReelection = TaggedTuple(REELECTION, [\n    f.INST_ID,\n    f.ROUND,\n    f.TIE_AMONG,\n    f.VIEW_NO])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass Reelection(MessageBase):\n    <IND>typename = REELECTION\n\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.ROUND.nm, NonNegativeNumberField()),\n        (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n    )\n# Reelection = TaggedTuple(REELECTION, [\n#     f.INST_ID,\n#     f.ROUND,\n#     f.TIE_AMONG,\n#     f.VIEW_NO])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# class Primary(MessageBase):\n#     typename = PRIMARY\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nPrimary = TaggedTuple(PRIMARY, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_len": 383,
        "target_code": "\nclass Primary(MessageBase):\n    typename = PRIMARY\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Primary = TaggedTuple(PRIMARY, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_len": 376,
        "diff_format": "@@ -166,16 +166,16 @@\n \n-# class Primary(MessageBase):\n-#     typename = PRIMARY\n-#\n-#     schema = (\n-#         (f.NAME.nm, NonEmptyStringField()),\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n-#     )\n-Primary = TaggedTuple(PRIMARY, [\n-    f.NAME,\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.ORD_SEQ_NO])\n+class Primary(MessageBase):\n+    typename = PRIMARY\n+\n+    schema = (\n+        (f.NAME.nm, NonEmptyStringField()),\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n+    )\n+# Primary = TaggedTuple(PRIMARY, [\n+#     f.NAME,\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.ORD_SEQ_NO])\n \n",
        "source_code_with_indent": "\n# class Primary(MessageBase):\n#     typename = PRIMARY\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nPrimary = TaggedTuple(PRIMARY, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class Primary(MessageBase):\n    <IND>typename = PRIMARY\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Primary = TaggedTuple(PRIMARY, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "54effafa0fdd1d2d561c0761916298324d99f8a6",
    "filename": "plenum/common/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/common/types.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/common/types.py:467:38 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 3rd positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "message": " Expected `typing.Type[typing.Any]` for 3rd positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 467,
    "warning_line": "ElectionMsg = TypeVar(\"ElectionMsg\", *ElectionType)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# class Nomination(MessageBase):\n#     typename = NOMINATE\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nNomination = TaggedTuple(NOMINATE, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_len": 391,
        "target_code": "\nclass Nomination(MessageBase):\n    typename = NOMINATE\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Nomination = TaggedTuple(NOMINATE, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_len": 384,
        "diff_format": "@@ -121,16 +121,16 @@\n \n-# class Nomination(MessageBase):\n-#     typename = NOMINATE\n-#\n-#     schema = (\n-#         (f.NAME.nm, NonEmptyStringField()),\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n-#     )\n-Nomination = TaggedTuple(NOMINATE, [\n-    f.NAME,\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.ORD_SEQ_NO])\n+class Nomination(MessageBase):\n+    typename = NOMINATE\n+\n+    schema = (\n+        (f.NAME.nm, NonEmptyStringField()),\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n+    )\n+# Nomination = TaggedTuple(NOMINATE, [\n+#     f.NAME,\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.ORD_SEQ_NO])\n \n",
        "source_code_with_indent": "\n# class Nomination(MessageBase):\n#     typename = NOMINATE\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\n<DED>Nomination = TaggedTuple(NOMINATE, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class Nomination(MessageBase):\n    <IND>typename = NOMINATE\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Nomination = TaggedTuple(NOMINATE, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# class Reelection(MessageBase):\n#     typename = REELECTION\n#\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.ROUND.nm, NonNegativeNumberField()),\n#         (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#     )\nReelection = TaggedTuple(REELECTION, [\n    f.INST_ID,\n    f.ROUND,\n    f.TIE_AMONG,\n    f.VIEW_NO])\n\n",
        "source_code_len": 404,
        "target_code": "\nclass Reelection(MessageBase):\n    typename = REELECTION\n\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.ROUND.nm, NonNegativeNumberField()),\n        (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n    )\n# Reelection = TaggedTuple(REELECTION, [\n#     f.INST_ID,\n#     f.ROUND,\n#     f.TIE_AMONG,\n#     f.VIEW_NO])\n\n",
        "target_code_len": 397,
        "diff_format": "@@ -149,16 +149,16 @@\n \n-# class Reelection(MessageBase):\n-#     typename = REELECTION\n-#\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.ROUND.nm, NonNegativeNumberField()),\n-#         (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#     )\n-Reelection = TaggedTuple(REELECTION, [\n-    f.INST_ID,\n-    f.ROUND,\n-    f.TIE_AMONG,\n-    f.VIEW_NO])\n+class Reelection(MessageBase):\n+    typename = REELECTION\n+\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.ROUND.nm, NonNegativeNumberField()),\n+        (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+    )\n+# Reelection = TaggedTuple(REELECTION, [\n+#     f.INST_ID,\n+#     f.ROUND,\n+#     f.TIE_AMONG,\n+#     f.VIEW_NO])\n \n",
        "source_code_with_indent": "\n# class Reelection(MessageBase):\n#     typename = REELECTION\n#\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.ROUND.nm, NonNegativeNumberField()),\n#         (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#     )\nReelection = TaggedTuple(REELECTION, [\n    f.INST_ID,\n    f.ROUND,\n    f.TIE_AMONG,\n    f.VIEW_NO])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass Reelection(MessageBase):\n    <IND>typename = REELECTION\n\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.ROUND.nm, NonNegativeNumberField()),\n        (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n    )\n# Reelection = TaggedTuple(REELECTION, [\n#     f.INST_ID,\n#     f.ROUND,\n#     f.TIE_AMONG,\n#     f.VIEW_NO])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# class Primary(MessageBase):\n#     typename = PRIMARY\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nPrimary = TaggedTuple(PRIMARY, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_len": 383,
        "target_code": "\nclass Primary(MessageBase):\n    typename = PRIMARY\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Primary = TaggedTuple(PRIMARY, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_len": 376,
        "diff_format": "@@ -166,16 +166,16 @@\n \n-# class Primary(MessageBase):\n-#     typename = PRIMARY\n-#\n-#     schema = (\n-#         (f.NAME.nm, NonEmptyStringField()),\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n-#     )\n-Primary = TaggedTuple(PRIMARY, [\n-    f.NAME,\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.ORD_SEQ_NO])\n+class Primary(MessageBase):\n+    typename = PRIMARY\n+\n+    schema = (\n+        (f.NAME.nm, NonEmptyStringField()),\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n+    )\n+# Primary = TaggedTuple(PRIMARY, [\n+#     f.NAME,\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.ORD_SEQ_NO])\n \n",
        "source_code_with_indent": "\n# class Primary(MessageBase):\n#     typename = PRIMARY\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nPrimary = TaggedTuple(PRIMARY, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class Primary(MessageBase):\n    <IND>typename = PRIMARY\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Primary = TaggedTuple(PRIMARY, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "54effafa0fdd1d2d561c0761916298324d99f8a6",
    "filename": "plenum/common/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/common/types.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/common/types.py:467:38 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 4th positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "message": " Expected `typing.Type[typing.Any]` for 4th positional only parameter to call `TypeVar.__init__` but got `NamedTuple`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 467,
    "warning_line": "ElectionMsg = TypeVar(\"ElectionMsg\", *ElectionType)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# class Nomination(MessageBase):\n#     typename = NOMINATE\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nNomination = TaggedTuple(NOMINATE, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_len": 391,
        "target_code": "\nclass Nomination(MessageBase):\n    typename = NOMINATE\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Nomination = TaggedTuple(NOMINATE, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_len": 384,
        "diff_format": "@@ -121,16 +121,16 @@\n \n-# class Nomination(MessageBase):\n-#     typename = NOMINATE\n-#\n-#     schema = (\n-#         (f.NAME.nm, NonEmptyStringField()),\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n-#     )\n-Nomination = TaggedTuple(NOMINATE, [\n-    f.NAME,\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.ORD_SEQ_NO])\n+class Nomination(MessageBase):\n+    typename = NOMINATE\n+\n+    schema = (\n+        (f.NAME.nm, NonEmptyStringField()),\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n+    )\n+# Nomination = TaggedTuple(NOMINATE, [\n+#     f.NAME,\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.ORD_SEQ_NO])\n \n",
        "source_code_with_indent": "\n# class Nomination(MessageBase):\n#     typename = NOMINATE\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\n<DED>Nomination = TaggedTuple(NOMINATE, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class Nomination(MessageBase):\n    <IND>typename = NOMINATE\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Nomination = TaggedTuple(NOMINATE, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# class Reelection(MessageBase):\n#     typename = REELECTION\n#\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.ROUND.nm, NonNegativeNumberField()),\n#         (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#     )\nReelection = TaggedTuple(REELECTION, [\n    f.INST_ID,\n    f.ROUND,\n    f.TIE_AMONG,\n    f.VIEW_NO])\n\n",
        "source_code_len": 404,
        "target_code": "\nclass Reelection(MessageBase):\n    typename = REELECTION\n\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.ROUND.nm, NonNegativeNumberField()),\n        (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n    )\n# Reelection = TaggedTuple(REELECTION, [\n#     f.INST_ID,\n#     f.ROUND,\n#     f.TIE_AMONG,\n#     f.VIEW_NO])\n\n",
        "target_code_len": 397,
        "diff_format": "@@ -149,16 +149,16 @@\n \n-# class Reelection(MessageBase):\n-#     typename = REELECTION\n-#\n-#     schema = (\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.ROUND.nm, NonNegativeNumberField()),\n-#         (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#     )\n-Reelection = TaggedTuple(REELECTION, [\n-    f.INST_ID,\n-    f.ROUND,\n-    f.TIE_AMONG,\n-    f.VIEW_NO])\n+class Reelection(MessageBase):\n+    typename = REELECTION\n+\n+    schema = (\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.ROUND.nm, NonNegativeNumberField()),\n+        (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+    )\n+# Reelection = TaggedTuple(REELECTION, [\n+#     f.INST_ID,\n+#     f.ROUND,\n+#     f.TIE_AMONG,\n+#     f.VIEW_NO])\n \n",
        "source_code_with_indent": "\n# class Reelection(MessageBase):\n#     typename = REELECTION\n#\n#     schema = (\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.ROUND.nm, NonNegativeNumberField()),\n#         (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#     )\nReelection = TaggedTuple(REELECTION, [\n    f.INST_ID,\n    f.ROUND,\n    f.TIE_AMONG,\n    f.VIEW_NO])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass Reelection(MessageBase):\n    <IND>typename = REELECTION\n\n    schema = (\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.ROUND.nm, NonNegativeNumberField()),\n        (f.TIE_AMONG.nm, IterableField(TieAmongField())),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n    )\n# Reelection = TaggedTuple(REELECTION, [\n#     f.INST_ID,\n#     f.ROUND,\n#     f.TIE_AMONG,\n#     f.VIEW_NO])\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# class Primary(MessageBase):\n#     typename = PRIMARY\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nPrimary = TaggedTuple(PRIMARY, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_len": 383,
        "target_code": "\nclass Primary(MessageBase):\n    typename = PRIMARY\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Primary = TaggedTuple(PRIMARY, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_len": 376,
        "diff_format": "@@ -166,16 +166,16 @@\n \n-# class Primary(MessageBase):\n-#     typename = PRIMARY\n-#\n-#     schema = (\n-#         (f.NAME.nm, NonEmptyStringField()),\n-#         (f.INST_ID.nm, NonNegativeNumberField()),\n-#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n-#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n-#     )\n-Primary = TaggedTuple(PRIMARY, [\n-    f.NAME,\n-    f.INST_ID,\n-    f.VIEW_NO,\n-    f.ORD_SEQ_NO])\n+class Primary(MessageBase):\n+    typename = PRIMARY\n+\n+    schema = (\n+        (f.NAME.nm, NonEmptyStringField()),\n+        (f.INST_ID.nm, NonNegativeNumberField()),\n+        (f.VIEW_NO.nm, NonNegativeNumberField()),\n+        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n+    )\n+# Primary = TaggedTuple(PRIMARY, [\n+#     f.NAME,\n+#     f.INST_ID,\n+#     f.VIEW_NO,\n+#     f.ORD_SEQ_NO])\n \n",
        "source_code_with_indent": "\n# class Primary(MessageBase):\n#     typename = PRIMARY\n#\n#     schema = (\n#         (f.NAME.nm, NonEmptyStringField()),\n#         (f.INST_ID.nm, NonNegativeNumberField()),\n#         (f.VIEW_NO.nm, NonNegativeNumberField()),\n#         (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n#     )\nPrimary = TaggedTuple(PRIMARY, [\n    f.NAME,\n    f.INST_ID,\n    f.VIEW_NO,\n    f.ORD_SEQ_NO])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class Primary(MessageBase):\n    <IND>typename = PRIMARY\n\n    schema = (\n        (f.NAME.nm, NonEmptyStringField()),\n        (f.INST_ID.nm, NonNegativeNumberField()),\n        (f.VIEW_NO.nm, NonNegativeNumberField()),\n        (f.ORD_SEQ_NO.nm, NonNegativeNumberField()),\n    )\n# Primary = TaggedTuple(PRIMARY, [\n#     f.NAME,\n#     f.INST_ID,\n#     f.VIEW_NO,\n#     f.ORD_SEQ_NO])\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "54effafa0fdd1d2d561c0761916298324d99f8a6",
    "filename": "plenum/test/malicious_behaviors_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/test/malicious_behaviors_node.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/test/malicious_behaviors_node.py:103:8 Incompatible attribute type [8]: Attribute `sendPrePrepare` declared in class `plenum.server.replica.Replica` has type `BoundMethod[typing.Callable(plenum.server.replica.Replica.sendPrePrepare)[[Named(self, plenum.server.replica.Replica), Named(ppReq, unknown)], typing.Any], TestReplica]` but is used as type `types.MethodType`.",
    "message": " Attribute `sendPrePrepare` declared in class `plenum.server.replica.Replica` has type `BoundMethod[typing.Callable(plenum.server.replica.Replica.sendPrePrepare)[[Named(self, plenum.server.replica.Replica), Named(ppReq, unknown)], typing.Any], TestReplica]` but is used as type `types.MethodType`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 103,
    "warning_line": "        replica.sendPrePrepare = evilMethod"
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "54effafa0fdd1d2d561c0761916298324d99f8a6",
    "filename": "plenum/test/malicious_behaviors_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/test/malicious_behaviors_node.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/test/malicious_behaviors_node.py:105:8 Incompatible attribute type [8]: Attribute `doPrepare` declared in class `plenum.server.replica.Replica` has type `BoundMethod[typing.Callable(plenum.server.replica.Replica.doPrepare)[[Named(self, plenum.server.replica.Replica), Named(pp, unknown)], typing.Any], TestReplica]` but is used as type `types.MethodType`.",
    "message": " Attribute `doPrepare` declared in class `plenum.server.replica.Replica` has type `BoundMethod[typing.Callable(plenum.server.replica.Replica.doPrepare)[[Named(self, plenum.server.replica.Replica), Named(pp, unknown)], typing.Any], TestReplica]` but is used as type `types.MethodType`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 105,
    "warning_line": "        replica.doPrepare = evilMethod"
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "54effafa0fdd1d2d561c0761916298324d99f8a6",
    "filename": "plenum/test/malicious_behaviors_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/test/malicious_behaviors_node.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/test/malicious_behaviors_node.py:107:8 Incompatible attribute type [8]: Attribute `doCommit` declared in class `plenum.server.replica.Replica` has type `BoundMethod[typing.Callable(plenum.server.replica.Replica.doCommit)[[Named(self, plenum.server.replica.Replica), Named(p, unknown)], typing.Any], TestReplica]` but is used as type `types.MethodType`.",
    "message": " Attribute `doCommit` declared in class `plenum.server.replica.Replica` has type `BoundMethod[typing.Callable(plenum.server.replica.Replica.doCommit)[[Named(self, plenum.server.replica.Replica), Named(p, unknown)], typing.Any], TestReplica]` but is used as type `types.MethodType`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 107,
    "warning_line": "        replica.doCommit = evilMethod"
  }
]