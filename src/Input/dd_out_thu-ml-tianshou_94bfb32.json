[
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/data/batch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/data/batch.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/data/batch.py:314:8 Incompatible return type [7]: Expected `List[str]` but got `typing.KeysView[str]`.",
    "message": " Expected `List[str]` but got `typing.KeysView[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 314,
    "warning_line": "        return self.__dict__.keys()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, Optional\n\n",
        "source_code_len": 103,
        "target_code": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, KeysView, ValuesView, \\\n    ItemsView, Optional\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -7,3 +7,4 @@\n from collections.abc import Collection\n-from typing import Any, List, Tuple, Union, Iterator, Optional\n+from typing import Any, List, Tuple, Union, Iterator, KeysView, ValuesView, \\\n+    ItemsView, Optional\n \n",
        "source_code_with_indent": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, KeysView, ValuesView,    ItemsView, Optional\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def keys(self) -> List[str]:\n        \"\"\"Return self.keys().\"\"\"\n",
        "source_code_len": 68,
        "target_code": "\n    def __contains__(self, key: str) -> bool:\n        \"\"\"Return key in self.\"\"\"\n        return key in self.__dict__\n\n    def keys(self) -> KeysView[str]:\n        \"\"\"Return self.keys().\"\"\"\n",
        "target_code_len": 189,
        "diff_format": "@@ -311,3 +317,7 @@\n \n-    def keys(self) -> List[str]:\n+    def __contains__(self, key: str) -> bool:\n+        \"\"\"Return key in self.\"\"\"\n+        return key in self.__dict__\n+\n+    def keys(self) -> KeysView[str]:\n         \"\"\"Return self.keys().\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def keys(self) -> List[str]:\n        <IND>\"\"\"Return self.keys().\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __contains__(self, key: str) -> bool:\n        <IND>\"\"\"Return key in self.\"\"\"\n        return key in self.__dict__\n\n    <DED>def keys(self) -> KeysView[str]:\n        <IND>\"\"\"Return self.keys().\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def values(self) -> List[Any]:\n        \"\"\"Return self.values().\"\"\"\n",
        "source_code_len": 72,
        "target_code": "\n    def values(self) -> ValuesView[Any]:\n        \"\"\"Return self.values().\"\"\"\n",
        "target_code_len": 78,
        "diff_format": "@@ -315,3 +325,3 @@\n \n-    def values(self) -> List[Any]:\n+    def values(self) -> ValuesView[Any]:\n         \"\"\"Return self.values().\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def values(self) -> List[Any]:\n        <IND>\"\"\"Return self.values().\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def values(self) -> ValuesView[Any]:\n        <IND>\"\"\"Return self.values().\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def items(self) -> List[Tuple[str, Any]]:\n        \"\"\"Return self.items().\"\"\"\n",
        "source_code_len": 82,
        "target_code": "\n    def items(self) -> ItemsView[str, Any]:\n        \"\"\"Return self.items().\"\"\"\n",
        "target_code_len": 80,
        "diff_format": "@@ -319,3 +329,3 @@\n \n-    def items(self) -> List[Tuple[str, Any]]:\n+    def items(self) -> ItemsView[str, Any]:\n         \"\"\"Return self.items().\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def items(self) -> List[Tuple[str, Any]]:\n        <IND>\"\"\"Return self.items().\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def items(self) -> ItemsView[str, Any]:\n        <IND>\"\"\"Return self.items().\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/data/batch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/data/batch.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/data/batch.py:318:8 Incompatible return type [7]: Expected `List[typing.Any]` but got `typing.ValuesView[typing.Any]`.",
    "message": " Expected `List[typing.Any]` but got `typing.ValuesView[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 318,
    "warning_line": "        return self.__dict__.values()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, Optional\n\n",
        "source_code_len": 103,
        "target_code": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, KeysView, ValuesView, \\\n    ItemsView, Optional\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -7,3 +7,4 @@\n from collections.abc import Collection\n-from typing import Any, List, Tuple, Union, Iterator, Optional\n+from typing import Any, List, Tuple, Union, Iterator, KeysView, ValuesView, \\\n+    ItemsView, Optional\n \n",
        "source_code_with_indent": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, KeysView, ValuesView,    ItemsView, Optional\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def keys(self) -> List[str]:\n        \"\"\"Return self.keys().\"\"\"\n",
        "source_code_len": 68,
        "target_code": "\n    def __contains__(self, key: str) -> bool:\n        \"\"\"Return key in self.\"\"\"\n        return key in self.__dict__\n\n    def keys(self) -> KeysView[str]:\n        \"\"\"Return self.keys().\"\"\"\n",
        "target_code_len": 189,
        "diff_format": "@@ -311,3 +317,7 @@\n \n-    def keys(self) -> List[str]:\n+    def __contains__(self, key: str) -> bool:\n+        \"\"\"Return key in self.\"\"\"\n+        return key in self.__dict__\n+\n+    def keys(self) -> KeysView[str]:\n         \"\"\"Return self.keys().\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def keys(self) -> List[str]:\n        <IND>\"\"\"Return self.keys().\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __contains__(self, key: str) -> bool:\n        <IND>\"\"\"Return key in self.\"\"\"\n        return key in self.__dict__\n\n    <DED>def keys(self) -> KeysView[str]:\n        <IND>\"\"\"Return self.keys().\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def values(self) -> List[Any]:\n        \"\"\"Return self.values().\"\"\"\n",
        "source_code_len": 72,
        "target_code": "\n    def values(self) -> ValuesView[Any]:\n        \"\"\"Return self.values().\"\"\"\n",
        "target_code_len": 78,
        "diff_format": "@@ -315,3 +325,3 @@\n \n-    def values(self) -> List[Any]:\n+    def values(self) -> ValuesView[Any]:\n         \"\"\"Return self.values().\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def values(self) -> List[Any]:\n        <IND>\"\"\"Return self.values().\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def values(self) -> ValuesView[Any]:\n        <IND>\"\"\"Return self.values().\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def items(self) -> List[Tuple[str, Any]]:\n        \"\"\"Return self.items().\"\"\"\n",
        "source_code_len": 82,
        "target_code": "\n    def items(self) -> ItemsView[str, Any]:\n        \"\"\"Return self.items().\"\"\"\n",
        "target_code_len": 80,
        "diff_format": "@@ -319,3 +329,3 @@\n \n-    def items(self) -> List[Tuple[str, Any]]:\n+    def items(self) -> ItemsView[str, Any]:\n         \"\"\"Return self.items().\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def items(self) -> List[Tuple[str, Any]]:\n        <IND>\"\"\"Return self.items().\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def items(self) -> ItemsView[str, Any]:\n        <IND>\"\"\"Return self.items().\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/data/batch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/data/batch.py",
    "file_hunks_size": 34,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/data/batch.py:322:8 Incompatible return type [7]: Expected `List[Tuple[str, typing.Any]]` but got `typing.ItemsView[str, typing.Any]`.",
    "message": " Expected `List[Tuple[str, typing.Any]]` but got `typing.ItemsView[str, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 322,
    "warning_line": "        return self.__dict__.items()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, Optional\n\n",
        "source_code_len": 103,
        "target_code": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, KeysView, ValuesView, \\\n    ItemsView, Optional\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -7,3 +7,4 @@\n from collections.abc import Collection\n-from typing import Any, List, Tuple, Union, Iterator, Optional\n+from typing import Any, List, Tuple, Union, Iterator, KeysView, ValuesView, \\\n+    ItemsView, Optional\n \n",
        "source_code_with_indent": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "from collections.abc import Collection\nfrom typing import Any, List, Tuple, Union, Iterator, KeysView, ValuesView,    ItemsView, Optional\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def keys(self) -> List[str]:\n        \"\"\"Return self.keys().\"\"\"\n",
        "source_code_len": 68,
        "target_code": "\n    def __contains__(self, key: str) -> bool:\n        \"\"\"Return key in self.\"\"\"\n        return key in self.__dict__\n\n    def keys(self) -> KeysView[str]:\n        \"\"\"Return self.keys().\"\"\"\n",
        "target_code_len": 189,
        "diff_format": "@@ -311,3 +317,7 @@\n \n-    def keys(self) -> List[str]:\n+    def __contains__(self, key: str) -> bool:\n+        \"\"\"Return key in self.\"\"\"\n+        return key in self.__dict__\n+\n+    def keys(self) -> KeysView[str]:\n         \"\"\"Return self.keys().\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def keys(self) -> List[str]:\n        <IND>\"\"\"Return self.keys().\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __contains__(self, key: str) -> bool:\n        <IND>\"\"\"Return key in self.\"\"\"\n        return key in self.__dict__\n\n    <DED>def keys(self) -> KeysView[str]:\n        <IND>\"\"\"Return self.keys().\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def values(self) -> List[Any]:\n        \"\"\"Return self.values().\"\"\"\n",
        "source_code_len": 72,
        "target_code": "\n    def values(self) -> ValuesView[Any]:\n        \"\"\"Return self.values().\"\"\"\n",
        "target_code_len": 78,
        "diff_format": "@@ -315,3 +325,3 @@\n \n-    def values(self) -> List[Any]:\n+    def values(self) -> ValuesView[Any]:\n         \"\"\"Return self.values().\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def values(self) -> List[Any]:\n        <IND>\"\"\"Return self.values().\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def values(self) -> ValuesView[Any]:\n        <IND>\"\"\"Return self.values().\"\"\"\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def items(self) -> List[Tuple[str, Any]]:\n        \"\"\"Return self.items().\"\"\"\n",
        "source_code_len": 82,
        "target_code": "\n    def items(self) -> ItemsView[str, Any]:\n        \"\"\"Return self.items().\"\"\"\n",
        "target_code_len": 80,
        "diff_format": "@@ -319,3 +329,3 @@\n \n-    def items(self) -> List[Tuple[str, Any]]:\n+    def items(self) -> ItemsView[str, Any]:\n         \"\"\"Return self.items().\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def items(self) -> List[Tuple[str, Any]]:\n        <IND>\"\"\"Return self.items().\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def items(self) -> ItemsView[str, Any]:\n        <IND>\"\"\"Return self.items().\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/data/batch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/data/batch.py",
    "file_hunks_size": 34,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/data/batch.py:423:34 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Union[List[Union[typing.Dict[typing.Any, typing.Any], Batch]], Batch]`.",
    "message": " Expected `typing.Iterable[Variable[_T]]` for 1st positional only parameter to call `enumerate.__init__` but got `Union[List[Union[typing.Dict[typing.Any, typing.Any], Batch]], Batch]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 423,
    "warning_line": "            for i, e in enumerate(batches):"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/data/batch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/data/batch.py",
    "file_hunks_size": 34,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/data/batch.py:464:26 Incompatible parameter type [6]: Expected `Union[List[Union[typing.Dict[typing.Any, typing.Any], Batch]], Batch]` for 1st positional only parameter to call `Batch._Batch__cat` but got `List[Batch]`.",
    "message": " Expected `Union[List[Union[typing.Dict[typing.Any, typing.Any], Batch]], Batch]` for 1st positional only parameter to call `Batch._Batch__cat` but got `List[Batch]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 464,
    "warning_line": "        return self.__cat(batches, lens)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/data/buffer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/data/buffer.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/data/buffer.py:403:12 Incompatible variable type [9]: weight is declared to have type `float` but is used as type `None`.",
    "message": " weight is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 403,
    "warning_line": "            weight: float = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def add(self,\n            obs: Union[dict, Batch, np.ndarray],\n            act: Union[np.ndarray, float],\n            rew: Union[int, float],\n            done: bool,\n            obs_next: Optional[Union[dict, Batch, np.ndarray]] = None,\n            info: dict = {},\n            policy: Optional[Union[dict, Batch]] = {},\n",
        "source_code_len": 325,
        "target_code": "    def add(self,\n            obs: Union[dict, Batch, np.ndarray, float],\n            act: Union[dict, Batch, np.ndarray, float],\n            rew: Union[int, float],\n            done: Union[bool, int],\n            obs_next: Optional[Union[dict, Batch, np.ndarray, float]] = None,\n            info: Optional[Union[dict, Batch]] = {},\n            policy: Optional[Union[dict, Batch]] = {},\n",
        "target_code_len": 388,
        "diff_format": "@@ -200,8 +201,8 @@\n     def add(self,\n-            obs: Union[dict, Batch, np.ndarray],\n-            act: Union[np.ndarray, float],\n+            obs: Union[dict, Batch, np.ndarray, float],\n+            act: Union[dict, Batch, np.ndarray, float],\n             rew: Union[int, float],\n-            done: bool,\n-            obs_next: Optional[Union[dict, Batch, np.ndarray]] = None,\n-            info: dict = {},\n+            done: Union[bool, int],\n+            obs_next: Optional[Union[dict, Batch, np.ndarray, float]] = None,\n+            info: Optional[Union[dict, Batch]] = {},\n             policy: Optional[Union[dict, Batch]] = {},\n",
        "source_code_with_indent": "    <DED>def add(self,\n            obs: Union[dict, Batch, np.ndarray],\n            act: Union[np.ndarray, float],\n            rew: Union[int, float],\n            done: bool,\n            obs_next: Optional[Union[dict, Batch, np.ndarray]] = None,\n            info: dict = {},\n            policy: Optional[Union[dict, Batch]] = {},\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def add(self,\n            obs: Union[dict, Batch, np.ndarray, float],\n            act: Union[dict, Batch, np.ndarray, float],\n            rew: Union[int, float],\n            done: Union[bool, int],\n            obs_next: Optional[Union[dict, Batch, np.ndarray, float]] = None,\n            info: Optional[Union[dict, Batch]] = {},\n            policy: Optional[Union[dict, Batch]] = {},\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def add(self,\n            obs: Union[dict, np.ndarray],\n            act: Union[np.ndarray, float],\n            rew: Union[int, float],\n            done: bool,\n            obs_next: Optional[Union[dict, np.ndarray]] = None,\n            info: dict = {},\n            policy: Optional[Union[dict, Batch]] = {},\n            weight: float = None,\n            **kwargs) -> None:\n",
        "source_code_len": 376,
        "target_code": "    def add(self,\n            obs: Union[dict, Batch, np.ndarray, float],\n            act: Union[dict, Batch, np.ndarray, float],\n            rew: Union[int, float],\n            done: Union[bool, int],\n            obs_next: Optional[Union[dict, Batch, np.ndarray, float]] = None,\n            info: Optional[Union[dict, Batch]] = {},\n            policy: Optional[Union[dict, Batch]] = {},\n            weight: Optional[float] = None,\n            **kwargs) -> None:\n",
        "target_code_len": 463,
        "diff_format": "@@ -395,10 +394,10 @@\n     def add(self,\n-            obs: Union[dict, np.ndarray],\n-            act: Union[np.ndarray, float],\n+            obs: Union[dict, Batch, np.ndarray, float],\n+            act: Union[dict, Batch, np.ndarray, float],\n             rew: Union[int, float],\n-            done: bool,\n-            obs_next: Optional[Union[dict, np.ndarray]] = None,\n-            info: dict = {},\n+            done: Union[bool, int],\n+            obs_next: Optional[Union[dict, Batch, np.ndarray, float]] = None,\n+            info: Optional[Union[dict, Batch]] = {},\n             policy: Optional[Union[dict, Batch]] = {},\n-            weight: float = None,\n+            weight: Optional[float] = None,\n             **kwargs) -> None:\n",
        "source_code_with_indent": "    <DED>def add(self,\n            obs: Union[dict, np.ndarray],\n            act: Union[np.ndarray, float],\n            rew: Union[int, float],\n            done: bool,\n            obs_next: Optional[Union[dict, np.ndarray]] = None,\n            info: dict = {},\n            policy: Optional[Union[dict, Batch]] = {},\n            weight: float = None,\n            **kwargs) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def add(self,\n            obs: Union[dict, Batch, np.ndarray, float],\n            act: Union[dict, Batch, np.ndarray, float],\n            rew: Union[int, float],\n            done: Union[bool, int],\n            obs_next: Optional[Union[dict, Batch, np.ndarray, float]] = None,\n            info: Optional[Union[dict, Batch]] = {},\n            policy: Optional[Union[dict, Batch]] = {},\n            weight: Optional[float] = None,\n            **kwargs) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/env/venvs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/venvs.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/env/venvs.py:124:12 Incompatible variable type [9]: id is declared to have type `Union[None, List[int], int]` but is used as type `List[Union[List[int], int]]`.",
    "message": " id is declared to have type `Union[None, List[int], int]` but is used as type `List[Union[List[int], int]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 124,
    "warning_line": "            id = [id]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _wrap_id(\n            self, id: Optional[Union[int, List[int]]] = None) -> List[int]:\n        if id is None:\n",
        "source_code_len": 118,
        "target_code": "\n    def _wrap_id(self, id: Optional[Union[int, List[int], np.ndarray]] = None\n                 ) -> List[int]:\n        if id is None:\n",
        "target_code_len": 135,
        "diff_format": "@@ -118,4 +118,4 @@\n \n-    def _wrap_id(\n-            self, id: Optional[Union[int, List[int]]] = None) -> List[int]:\n+    def _wrap_id(self, id: Optional[Union[int, List[int], np.ndarray]] = None\n+                 ) -> List[int]:\n         if id is None:\n",
        "source_code_with_indent": "\n    <DED>def _wrap_id(\n            self, id: Optional[Union[int, List[int]]] = None) -> List[int]:\n        <IND>if id is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _wrap_id(self, id: Optional[Union[int, List[int], np.ndarray]] = None\n                 ) -> List[int]:\n        <IND>if id is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/env/venvs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/venvs.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/env/venvs.py:125:8 Incompatible return type [7]: Expected `List[int]` but got `Union[List[int], int]`.",
    "message": " Expected `List[int]` but got `Union[List[int], int]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 125,
    "warning_line": "        return id",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _wrap_id(\n            self, id: Optional[Union[int, List[int]]] = None) -> List[int]:\n        if id is None:\n",
        "source_code_len": 118,
        "target_code": "\n    def _wrap_id(self, id: Optional[Union[int, List[int], np.ndarray]] = None\n                 ) -> List[int]:\n        if id is None:\n",
        "target_code_len": 135,
        "diff_format": "@@ -118,4 +118,4 @@\n \n-    def _wrap_id(\n-            self, id: Optional[Union[int, List[int]]] = None) -> List[int]:\n+    def _wrap_id(self, id: Optional[Union[int, List[int], np.ndarray]] = None\n+                 ) -> List[int]:\n         if id is None:\n",
        "source_code_with_indent": "\n    <DED>def _wrap_id(\n            self, id: Optional[Union[int, List[int]]] = None) -> List[int]:\n        <IND>if id is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _wrap_id(self, id: Optional[Union[int, List[int], np.ndarray]] = None\n                 ) -> List[int]:\n        <IND>if id is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/env/venvs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/venvs.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/env/venvs.py:132:12 Incompatible return type [7]: Expected `List[int]` but got implicit return value of `None`.",
    "message": " Expected `List[int]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 132,
    "warning_line": "            assert i in self.ready_id, \\",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_id(\n            self, id: Optional[Union[int, List[int]]] = None) -> List[int]:\n        for i in id:\n",
        "source_code_len": 118,
        "target_code": "\n    def _assert_id(self, id: List[int]) -> None:\n        for i in id:\n",
        "target_code_len": 71,
        "diff_format": "@@ -126,4 +126,3 @@\n \n-    def _assert_id(\n-            self, id: Optional[Union[int, List[int]]] = None) -> List[int]:\n+    def _assert_id(self, id: List[int]) -> None:\n         for i in id:\n",
        "source_code_with_indent": "\n    <DED>def _assert_id(\n            self, id: Optional[Union[int, List[int]]] = None) -> List[int]:\n        <IND>for i in id:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _assert_id(self, id: List[int]) -> None:\n        <IND>for i in id:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/env/venvs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/env/venvs.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/env/venvs.py:222:20 Unsupported operand [58]: `+` is not supported for operand types `Union[None, List[int], int]` and `int`.",
    "message": " `+` is not supported for operand types `Union[None, List[int], int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 222,
    "warning_line": "            seed = [seed + _ for _ in range(self.env_num)]"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/exploration/random.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/exploration/random.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/exploration/random.py:81:4 Inconsistent override [14]: `tianshou.exploration.random.OUNoise.reset` overrides method defined in `BaseNoise` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `tianshou.exploration.random.OUNoise.reset` overrides method defined in `BaseNoise` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 81,
    "warning_line": "    def reset(self) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def reset(self, **kwargs) -> None:\n        \"\"\"Reset to the initial state.\"\"\"\n",
        "source_code_len": 82,
        "target_code": "\n    def reset(self) -> None:\n        \"\"\"Reset to the initial state.\"\"\"\n",
        "target_code_len": 72,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-    def reset(self, **kwargs) -> None:\n+    def reset(self) -> None:\n         \"\"\"Reset to the initial state.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def reset(self, **kwargs) -> None:\n        <IND>\"\"\"Reset to the initial state.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def reset(self) -> None:\n        <IND>\"\"\"Reset to the initial state.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/policy/modelfree/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/dqn.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/dqn.py:51:23 Unsupported operand [58]: `>` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `>` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 51,
    "warning_line": "        self._target = target_update_freq > 0",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n                 reward_normalization: bool = False,\n",
        "source_code_len": 152,
        "target_code": "                 estimation_step: int = 1,\n                 target_update_freq: int = 0,\n                 reward_normalization: bool = False,\n",
        "target_code_len": 142,
        "diff_format": "@@ -39,3 +39,3 @@\n                  estimation_step: int = 1,\n-                 target_update_freq: Optional[int] = 0,\n+                 target_update_freq: int = 0,\n                  reward_normalization: bool = False,\n",
        "source_code_with_indent": "                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n                 reward_normalization: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 estimation_step: int = 1,\n                 target_update_freq: int = 0,\n                 reward_normalization: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/policy/modelfree/dqn.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/policy/modelfree/dqn.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/policy/modelfree/dqn.py:156:40 Unsupported operand [58]: `%` is not supported for operand types `int` and `Optional[int]`.",
    "message": " `%` is not supported for operand types `int` and `Optional[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 156,
    "warning_line": "        if self._target and self._cnt % self._freq == 0:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n                 reward_normalization: bool = False,\n",
        "source_code_len": 152,
        "target_code": "                 estimation_step: int = 1,\n                 target_update_freq: int = 0,\n                 reward_normalization: bool = False,\n",
        "target_code_len": 142,
        "diff_format": "@@ -39,3 +39,3 @@\n                  estimation_step: int = 1,\n-                 target_update_freq: Optional[int] = 0,\n+                 target_update_freq: int = 0,\n                  reward_normalization: bool = False,\n",
        "source_code_with_indent": "                 estimation_step: int = 1,\n                 target_update_freq: Optional[int] = 0,\n                 reward_normalization: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 estimation_step: int = 1,\n                 target_update_freq: int = 0,\n                 reward_normalization: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/trainer/offpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/offpolicy.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/offpolicy.py:90:48 Incompatible parameter type [6]: Expected `typing.Callable[[int], None]` for 3rd positional only parameter to call `tianshou.trainer.utils.test_episode` but got `Optional[typing.Callable[[int], None]]`.",
    "message": " Expected `typing.Callable[[int], None]` for 3rd positional only parameter to call `tianshou.trainer.utils.test_episode` but got `Optional[typing.Callable[[int], None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 90,
    "warning_line": "                        policy, test_collector, test_fn,"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/trainer/offpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/offpolicy.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/offpolicy.py:108:55 Incompatible parameter type [6]: Expected `tianshou.data.buffer.ReplayBuffer` for 2nd positional only parameter to call `tianshou.policy.base.BasePolicy.update` but got `Optional[tianshou.data.buffer.ReplayBuffer]`.",
    "message": " Expected `tianshou.data.buffer.ReplayBuffer` for 2nd positional only parameter to call `tianshou.policy.base.BasePolicy.update` but got `Optional[tianshou.data.buffer.ReplayBuffer]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 108,
    "warning_line": "                    losses = policy.update(batch_size, train_collector.buffer)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/trainer/offpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/offpolicy.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/offpolicy.py:128:36 Incompatible parameter type [6]: Expected `typing.Callable[[int], None]` for 3rd positional only parameter to call `tianshou.trainer.utils.test_episode` but got `Optional[typing.Callable[[int], None]]`.",
    "message": " Expected `typing.Callable[[int], None]` for 3rd positional only parameter to call `tianshou.trainer.utils.test_episode` but got `Optional[typing.Callable[[int], None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 128,
    "warning_line": "            policy, test_collector, test_fn, epoch, episode_per_test)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/trainer/onpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/onpolicy.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/onpolicy.py:90:48 Incompatible parameter type [6]: Expected `typing.Callable[[int], None]` for 3rd positional only parameter to call `tianshou.trainer.utils.test_episode` but got `Optional[typing.Callable[[int], None]]`.",
    "message": " Expected `typing.Callable[[int], None]` for 3rd positional only parameter to call `tianshou.trainer.utils.test_episode` but got `Optional[typing.Callable[[int], None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 90,
    "warning_line": "                        policy, test_collector, test_fn,"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/trainer/onpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/onpolicy.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/onpolicy.py:106:23 Incompatible parameter type [6]: Expected `tianshou.data.buffer.ReplayBuffer` for 2nd positional only parameter to call `tianshou.policy.base.BasePolicy.update` but got `Optional[tianshou.data.buffer.ReplayBuffer]`.",
    "message": " Expected `tianshou.data.buffer.ReplayBuffer` for 2nd positional only parameter to call `tianshou.policy.base.BasePolicy.update` but got `Optional[tianshou.data.buffer.ReplayBuffer]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 106,
    "warning_line": "                    0, train_collector.buffer, batch_size, repeat_per_collect)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/trainer/onpolicy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/trainer/onpolicy.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/trainer/onpolicy.py:132:36 Incompatible parameter type [6]: Expected `typing.Callable[[int], None]` for 3rd positional only parameter to call `tianshou.trainer.utils.test_episode` but got `Optional[typing.Callable[[int], None]]`.",
    "message": " Expected `typing.Callable[[int], None]` for 3rd positional only parameter to call `tianshou.trainer.utils.test_episode` but got `Optional[typing.Callable[[int], None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 132,
    "warning_line": "            policy, test_collector, test_fn, epoch, episode_per_test)"
  },
  {
    "project": "thu-ml/tianshou",
    "commit": "94bfb32cc17cee5cf39635103572eec4b1f63a1a",
    "filename": "tianshou/utils/net/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/thu-ml-tianshou/tianshou/utils/net/common.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tianshou/utils/net/common.py:31:17 Incompatible variable type [9]: action_shape is declared to have type `Optional[typing.Tuple[typing.Any, ...]]` but is used as type `int`.",
    "message": " action_shape is declared to have type `Optional[typing.Tuple[typing.Any, ...]]` but is used as type `int`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 31,
    "warning_line": "                 action_shape: Optional[tuple] = 0,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(self, layer_num: int, state_shape: tuple,\n                 action_shape: Optional[tuple] = 0,\n                 device: Union[str, torch.device] = 'cpu',\n",
        "source_code_len": 170,
        "target_code": "    def __init__(self, layer_num: int, state_shape: tuple,\n                 action_shape: Optional[Union[tuple, int]] = 0,\n                 device: Union[str, torch.device] = 'cpu',\n",
        "target_code_len": 182,
        "diff_format": "@@ -30,3 +31,3 @@\n     def __init__(self, layer_num: int, state_shape: tuple,\n-                 action_shape: Optional[tuple] = 0,\n+                 action_shape: Optional[Union[tuple, int]] = 0,\n                  device: Union[str, torch.device] = 'cpu',\n",
        "source_code_with_indent": "    def __init__(self, layer_num: int, state_shape: tuple,\n                 action_shape: Optional[tuple] = 0,\n                 device: Union[str, torch.device] = 'cpu',\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(self, layer_num: int, state_shape: tuple,\n                 action_shape: Optional[Union[tuple, int]] = 0,\n                 device: Union[str, torch.device] = 'cpu',\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]