[
  {
    "project": "spectacles-ci/spectacles",
    "commit": "4a1e7093a39b621712c2445035f2c5055eaa257f",
    "filename": "fonz/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spectacles-ci-spectacles/fonz/connection.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fonz/connection.py:86:47 Incompatible parameter type [6]: Expected `Optional[str]` for 1st positional only parameter to call `printer.color` but got `float`.",
    "message": " Expected `Optional[str]` for 1st positional only parameter to call `printer.color` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 86,
    "warning_line": "            f\"using API version {printer.color(self.api_version, 'bold')}\"",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            f\"Connected to {printer.color(self.base_url, 'bold')} \"\n            f\"using API version {printer.color(self.api_version, 'bold')}\"\n        )\n",
        "source_code_len": 153,
        "target_code": "            f\"Connected to {printer.color(self.base_url, 'bold')} \"\n            f\"using API version {printer.color(str(self.api_version), 'bold')}\"\n        )\n",
        "target_code_len": 158,
        "diff_format": "@@ -85,3 +95,3 @@\n             f\"Connected to {printer.color(self.base_url, 'bold')} \"\n-            f\"using API version {printer.color(self.api_version, 'bold')}\"\n+            f\"using API version {printer.color(str(self.api_version), 'bold')}\"\n         )\n",
        "source_code_with_indent": "            f\"Connected to {printer.color(self.base_url, 'bold')} \"\n            f\"using API version {printer.color(self.api_version, 'bold')}\"\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            f\"Connected to {printer.color(self.base_url, 'bold')} \"\n            f\"using API version {printer.color(str(self.api_version), 'bold')}\"\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "spectacles-ci/spectacles",
    "commit": "4a1e7093a39b621712c2445035f2c5055eaa257f",
    "filename": "fonz/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spectacles-ci-spectacles/fonz/connection.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fonz/connection.py:124:8 Incompatible variable type [9]: choices is declared to have type `Sequence[str]` but is used as type `Set[str]`.",
    "message": " choices is declared to have type `Sequence[str]` but is used as type `Set[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 124,
    "warning_line": "        choices = set(choices)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def select(\n        self, choices: Sequence[str], select_from: Sequence[Model]\n    ) -> Sequence[Model]:\n        choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = choices.difference(select_from_names)\n        if difference:\n",
        "source_code_len": 290,
        "target_code": "\n    def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n        unique_choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = unique_choices.difference(select_from_names)\n        if difference:\n",
        "target_code_len": 276,
        "diff_format": "@@ -120,8 +130,6 @@\n \n-    def select(\n-        self, choices: Sequence[str], select_from: Sequence[Model]\n-    ) -> Sequence[Model]:\n-        choices = set(choices)\n+    def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n+        unique_choices = set(choices)\n         select_from_names = set(each.name for each in select_from)\n-        difference = choices.difference(select_from_names)\n+        difference = unique_choices.difference(select_from_names)\n         if difference:\n",
        "source_code_with_indent": "\n    <DED>def select(\n        self, choices: Sequence[str], select_from: Sequence[Model]\n    ) -> Sequence[Model]:\n        <IND>choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = choices.difference(select_from_names)\n        if difference:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n        <IND>unique_choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = unique_choices.difference(select_from_names)\n        if difference:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "spectacles-ci/spectacles",
    "commit": "4a1e7093a39b621712c2445035f2c5055eaa257f",
    "filename": "fonz/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spectacles-ci-spectacles/fonz/connection.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fonz/connection.py:181:12 Incompatible parameter type [6]: Expected `Sequence[str]` for 1st parameter `choices` to call `Fonz.select` but got `typing.KeysView[str]`.",
    "message": " Expected `Sequence[str]` for 1st parameter `choices` to call `Fonz.select` but got `typing.KeysView[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 181,
    "warning_line": "            choices=selection.keys(), select_from=project_models",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        selected_models = self.select(\n            choices=selection.keys(), select_from=project_models\n        )\n",
        "source_code_len": 114,
        "target_code": "        selected_models = self.select(\n            choices=tuple(selection.keys()), select_from=project_models\n        )\n",
        "target_code_len": 121,
        "diff_format": "@@ -180,3 +188,3 @@\n         selected_models = self.select(\n-            choices=selection.keys(), select_from=project_models\n+            choices=tuple(selection.keys()), select_from=project_models\n         )\n",
        "source_code_with_indent": "        <DED><DED>selected_models = self.select(\n            choices=selection.keys(), select_from=project_models\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED><DED>selected_models = self.select(\n            choices=tuple(selection.keys()), select_from=project_models\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "spectacles-ci/spectacles",
    "commit": "4a1e7093a39b621712c2445035f2c5055eaa257f",
    "filename": "fonz/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spectacles-ci-spectacles/fonz/connection.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fonz/connection.py:194:16 Incompatible parameter type [6]: Expected `Sequence[str]` for 1st parameter `choices` to call `Fonz.select` but got `Set[typing.Any]`.",
    "message": " Expected `Sequence[str]` for 1st parameter `choices` to call `Fonz.select` but got `Set[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 194,
    "warning_line": "                choices=selected_explore_names, select_from=model.explores",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def select(\n        self, choices: Sequence[str], select_from: Sequence[Model]\n    ) -> Sequence[Model]:\n        choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = choices.difference(select_from_names)\n        if difference:\n",
        "source_code_len": 290,
        "target_code": "\n    def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n        unique_choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = unique_choices.difference(select_from_names)\n        if difference:\n",
        "target_code_len": 276,
        "diff_format": "@@ -120,8 +130,6 @@\n \n-    def select(\n-        self, choices: Sequence[str], select_from: Sequence[Model]\n-    ) -> Sequence[Model]:\n-        choices = set(choices)\n+    def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n+        unique_choices = set(choices)\n         select_from_names = set(each.name for each in select_from)\n-        difference = choices.difference(select_from_names)\n+        difference = unique_choices.difference(select_from_names)\n         if difference:\n",
        "source_code_with_indent": "\n    <DED>def select(\n        self, choices: Sequence[str], select_from: Sequence[Model]\n    ) -> Sequence[Model]:\n        <IND>choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = choices.difference(select_from_names)\n        if difference:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n        <IND>unique_choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = unique_choices.difference(select_from_names)\n        if difference:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            selected_explores = self.select(\n                choices=selected_explore_names, select_from=model.explores\n            )\n",
        "source_code_len": 134,
        "target_code": "            selected_explores = self.select(\n                choices=tuple(selected_explore_names), select_from=model.explores\n            )\n",
        "target_code_len": 141,
        "diff_format": "@@ -193,3 +201,3 @@\n             selected_explores = self.select(\n-                choices=selected_explore_names, select_from=model.explores\n+                choices=tuple(selected_explore_names), select_from=model.explores\n             )\n",
        "source_code_with_indent": "            <DED>selected_explores = self.select(\n                choices=selected_explore_names, select_from=model.explores\n            )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>selected_explores = self.select(\n                choices=tuple(selected_explore_names), select_from=model.explores\n            )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "spectacles-ci/spectacles",
    "commit": "4a1e7093a39b621712c2445035f2c5055eaa257f",
    "filename": "fonz/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spectacles-ci-spectacles/fonz/connection.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fonz/connection.py:194:48 Incompatible parameter type [6]: Expected `Sequence[Model]` for 2nd parameter `select_from` to call `Fonz.select` but got `List[Explore]`.",
    "message": " Expected `Sequence[Model]` for 2nd parameter `select_from` to call `Fonz.select` but got `List[Explore]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 194,
    "warning_line": "                choices=selected_explore_names, select_from=model.explores",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def select(\n        self, choices: Sequence[str], select_from: Sequence[Model]\n    ) -> Sequence[Model]:\n        choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = choices.difference(select_from_names)\n        if difference:\n",
        "source_code_len": 290,
        "target_code": "\n    def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n        unique_choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = unique_choices.difference(select_from_names)\n        if difference:\n",
        "target_code_len": 276,
        "diff_format": "@@ -120,8 +130,6 @@\n \n-    def select(\n-        self, choices: Sequence[str], select_from: Sequence[Model]\n-    ) -> Sequence[Model]:\n-        choices = set(choices)\n+    def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n+        unique_choices = set(choices)\n         select_from_names = set(each.name for each in select_from)\n-        difference = choices.difference(select_from_names)\n+        difference = unique_choices.difference(select_from_names)\n         if difference:\n",
        "source_code_with_indent": "\n    <DED>def select(\n        self, choices: Sequence[str], select_from: Sequence[Model]\n    ) -> Sequence[Model]:\n        <IND>choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = choices.difference(select_from_names)\n        if difference:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n        <IND>unique_choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = unique_choices.difference(select_from_names)\n        if difference:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "spectacles-ci/spectacles",
    "commit": "4a1e7093a39b621712c2445035f2c5055eaa257f",
    "filename": "fonz/connection.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/spectacles-ci-spectacles/fonz/connection.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "fonz/connection.py:204:12 Incompatible attribute type [8]: Attribute `explores` declared in class `Model` has type `List[Explore]` but is used as type `Sequence[Model]`.",
    "message": " Attribute `explores` declared in class `Model` has type `List[Explore]` but is used as type `Sequence[Model]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 204,
    "warning_line": "            model.explores = selected_explores",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def select(\n        self, choices: Sequence[str], select_from: Sequence[Model]\n    ) -> Sequence[Model]:\n        choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = choices.difference(select_from_names)\n        if difference:\n",
        "source_code_len": 290,
        "target_code": "\n    def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n        unique_choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = unique_choices.difference(select_from_names)\n        if difference:\n",
        "target_code_len": 276,
        "diff_format": "@@ -120,8 +130,6 @@\n \n-    def select(\n-        self, choices: Sequence[str], select_from: Sequence[Model]\n-    ) -> Sequence[Model]:\n-        choices = set(choices)\n+    def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n+        unique_choices = set(choices)\n         select_from_names = set(each.name for each in select_from)\n-        difference = choices.difference(select_from_names)\n+        difference = unique_choices.difference(select_from_names)\n         if difference:\n",
        "source_code_with_indent": "\n    <DED>def select(\n        self, choices: Sequence[str], select_from: Sequence[Model]\n    ) -> Sequence[Model]:\n        <IND>choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = choices.difference(select_from_names)\n        if difference:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def select(self, choices: Sequence[str], select_from: Sequence) -> Sequence:\n        <IND>unique_choices = set(choices)\n        select_from_names = set(each.name for each in select_from)\n        difference = unique_choices.difference(select_from_names)\n        if difference:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]