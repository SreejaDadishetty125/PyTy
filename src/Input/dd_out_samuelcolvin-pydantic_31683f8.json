[
  {
    "project": "samuelcolvin/pydantic",
    "commit": "31683f8dc42adeff378c78854fea86d144bce0d4",
    "filename": "tests/test_complex.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/samuelcolvin-pydantic/tests/test_complex.py",
    "file_hunks_size": 25,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/test_complex.py:255:4 Incompatible attribute type [8]: Attribute `count` declared in class `SubModel` has type `int` but is used as type `None`.",
    "message": " Attribute `count` declared in class `SubModel` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 255,
    "warning_line": "    count: int = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass SubModel(BaseModel):\n    name: str = ...\n    count: int = None\n\n\nclass MasterListModel(BaseModel):\n    v: List[SubModel] = []\n\n\ndef test_recursive_list():\n    m = MasterListModel(v=[])\n    assert m.v == []\n\n    m = MasterListModel(v=[{'name': 'testing', 'count': 4}])\n    assert \"<MasterListModel v=[<SubModel name='testing' count=4>]>\" == repr(m)\n    assert m.v[0].name == 'testing'\n",
        "source_code_len": 391,
        "target_code": "\ndef test_recursive_list():\n    class SubModel(BaseModel):\n        name: str = ...\n        count: int = None\n\n    class Model(BaseModel):\n        v: List[SubModel] = []\n\n    m = Model(v=[])\n    assert m.v == []\n\n    m = Model(v=[{'name': 'testing', 'count': 4}])\n    assert \"<Model v=[<SubModel name='testing' count=4>]>\" == repr(m)\n    assert m.v[0].name == 'testing'\n",
        "target_code_len": 369,
        "diff_format": "@@ -252,17 +259,15 @@\n \n-class SubModel(BaseModel):\n-    name: str = ...\n-    count: int = None\n-\n-\n-class MasterListModel(BaseModel):\n-    v: List[SubModel] = []\n-\n-\n def test_recursive_list():\n-    m = MasterListModel(v=[])\n+    class SubModel(BaseModel):\n+        name: str = ...\n+        count: int = None\n+\n+    class Model(BaseModel):\n+        v: List[SubModel] = []\n+\n+    m = Model(v=[])\n     assert m.v == []\n \n-    m = MasterListModel(v=[{'name': 'testing', 'count': 4}])\n-    assert \"<MasterListModel v=[<SubModel name='testing' count=4>]>\" == repr(m)\n+    m = Model(v=[{'name': 'testing', 'count': 4}])\n+    assert \"<Model v=[<SubModel name='testing' count=4>]>\" == repr(m)\n     assert m.v[0].name == 'testing'\n",
        "source_code_with_indent": "\n<DED>class SubModel(BaseModel):\n    <IND>name: str = ...\n    count: int = None\n\n\n<DED>class MasterListModel(BaseModel):\n    <IND>v: List[SubModel] = []\n\n\n<DED>def test_recursive_list():\n    <IND>m = MasterListModel(v=[])\n    assert m.v == []\n\n    m = MasterListModel(v=[{'name': 'testing', 'count': 4}])\n    assert \"<MasterListModel v=[<SubModel name='testing' count=4>]>\" == repr(m)\n    assert m.v[0].name == 'testing'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def test_recursive_list():\n    <IND>class SubModel(BaseModel):\n        <IND>name: str = ...\n        count: int = None\n\n    <DED>class Model(BaseModel):\n        <IND>v: List[SubModel] = []\n\n    <DED>m = Model(v=[])\n    assert m.v == []\n\n    m = Model(v=[{'name': 'testing', 'count': 4}])\n    assert \"<Model v=[<SubModel name='testing' count=4>]>\" == repr(m)\n    assert m.v[0].name == 'testing'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]