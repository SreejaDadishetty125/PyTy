[
  {
    "project": "python/mypy",
    "commit": "f178a6c0ebdf99b0fccb8cd9665a4e7dc316890d",
    "filename": "mypy/checkmember.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/checkmember.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/checkmember.py:193:30 Incompatible variable type [9]: original_type is declared to have type `Type` but is used as type `None`.",
    "message": " original_type is declared to have type `Type` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 193,
    "warning_line": "                              original_type: Type = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                              msg: MessageBuilder,\n                              original_type: Type = None,\n                              chk: 'mypy.checker.TypeChecker' = None) -> Type:\n",
        "source_code_len": 188,
        "target_code": "                              msg: MessageBuilder,\n                              original_type: Type,\n                              chk: 'mypy.checker.TypeChecker' = None) -> Type:\n",
        "target_code_len": 181,
        "diff_format": "@@ -192,3 +192,3 @@\n                               msg: MessageBuilder,\n-                              original_type: Type = None,\n+                              original_type: Type,\n                               chk: 'mypy.checker.TypeChecker' = None) -> Type:\n",
        "source_code_with_indent": "                              msg: MessageBuilder,\n                              original_type: Type = None,\n                              chk: 'mypy.checker.TypeChecker' = None) -> Type:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                              msg: MessageBuilder,\n                              original_type: Type,\n                              chk: 'mypy.checker.TypeChecker' = None) -> Type:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "f178a6c0ebdf99b0fccb8cd9665a4e7dc316890d",
    "filename": "mypy/checkmember.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/checkmember.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/checkmember.py:240:15 Incompatible variable type [9]: original_type is declared to have type `Type` but is used as type `None`.",
    "message": " original_type is declared to have type `Type` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 240,
    "warning_line": "               original_type: Type = None) -> Type:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                return analyze_var(name, method.items[0].var, typ, info, node, is_lvalue, msg,\n                                   not_ready_callback)\n            if is_lvalue:\n",
        "source_code_len": 176,
        "target_code": "                return analyze_var(name, method.items[0].var, typ, info, node, is_lvalue, msg,\n                                   original_type, not_ready_callback)\n            if is_lvalue:\n",
        "target_code_len": 191,
        "diff_format": "@@ -77,3 +76,3 @@\n                 return analyze_var(name, method.items[0].var, typ, info, node, is_lvalue, msg,\n-                                   not_ready_callback)\n+                                   original_type, not_ready_callback)\n             if is_lvalue:\n",
        "source_code_with_indent": "                return analyze_var(name, method.items[0].var, typ, info, node, is_lvalue, msg,\n                                   not_ready_callback)\n            <DED>if is_lvalue:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                return analyze_var(name, method.items[0].var, typ, info, node, is_lvalue, msg,\n                                   original_type, not_ready_callback)\n            <DED>if is_lvalue:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(v, Var):\n        return analyze_var(name, v, itype, info, node, is_lvalue, msg, not_ready_callback)\n    elif isinstance(v, FuncDef):\n",
        "source_code_len": 151,
        "target_code": "    if isinstance(v, Var):\n        return analyze_var(name, v, itype, info, node, is_lvalue, msg,\n                           original_type, not_ready_callback)\n    elif isinstance(v, FuncDef):\n",
        "target_code_len": 193,
        "diff_format": "@@ -209,3 +208,4 @@\n     if isinstance(v, Var):\n-        return analyze_var(name, v, itype, info, node, is_lvalue, msg, not_ready_callback)\n+        return analyze_var(name, v, itype, info, node, is_lvalue, msg,\n+                           original_type, not_ready_callback)\n     elif isinstance(v, FuncDef):\n",
        "source_code_with_indent": "    <DED>if isinstance(v, Var):\n        <IND>return analyze_var(name, v, itype, info, node, is_lvalue, msg, not_ready_callback)\n    <DED>elif isinstance(v, FuncDef):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if isinstance(v, Var):\n        <IND>return analyze_var(name, v, itype, info, node, is_lvalue, msg,\n                           original_type, not_ready_callback)\n    <DED>elif isinstance(v, FuncDef):\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def analyze_var(name: str, var: Var, itype: Instance, info: TypeInfo, node: Context,\n               is_lvalue: bool, msg: MessageBuilder,\n               not_ready_callback: Callable[[str, Context], None],\n               original_type: Type = None) -> Type:\n    \"\"\"Analyze access to an attribute via a Var node.\n",
        "source_code_len": 311,
        "target_code": "def analyze_var(name: str, var: Var, itype: Instance, info: TypeInfo, node: Context,\n                is_lvalue: bool, msg: MessageBuilder, original_type: Type,\n                not_ready_callback: Callable[[str, Context], None]) -> Type:\n    \"\"\"Analyze access to an attribute via a Var node.\n",
        "target_code_len": 291,
        "diff_format": "@@ -237,5 +237,4 @@\n def analyze_var(name: str, var: Var, itype: Instance, info: TypeInfo, node: Context,\n-               is_lvalue: bool, msg: MessageBuilder,\n-               not_ready_callback: Callable[[str, Context], None],\n-               original_type: Type = None) -> Type:\n+                is_lvalue: bool, msg: MessageBuilder, original_type: Type,\n+                not_ready_callback: Callable[[str, Context], None]) -> Type:\n     \"\"\"Analyze access to an attribute via a Var node.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED><DED>def analyze_var(name: str, var: Var, itype: Instance, info: TypeInfo, node: Context,\n               is_lvalue: bool, msg: MessageBuilder,\n               not_ready_callback: Callable[[str, Context], None],\n               original_type: Type = None) -> Type:\n    <IND>",
        "target_code_with_indent": "<DED><DED>def analyze_var(name: str, var: Var, itype: Instance, info: TypeInfo, node: Context,\n                is_lvalue: bool, msg: MessageBuilder, original_type: Type,\n                not_ready_callback: Callable[[str, Context], None]) -> Type:\n    <IND>"
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "f178a6c0ebdf99b0fccb8cd9665a4e7dc316890d",
    "filename": "mypy/checkmember.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/checkmember.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/checkmember.py:308:8 Incompatible return type [7]: Expected `SymbolNode` but got `Optional[SymbolNode]`.",
    "message": " Expected `SymbolNode` but got `Optional[SymbolNode]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 308,
    "warning_line": "        return node.node",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def lookup_member_var_or_accessor(info: TypeInfo, name: str,\n                                  is_lvalue: bool) -> SymbolNode:\n    \"\"\"Find the attribute/accessor node that refers to a member of a type.\"\"\"\n",
        "source_code_len": 205,
        "target_code": "def lookup_member_var_or_accessor(info: TypeInfo, name: str,\n                                  is_lvalue: bool) -> Optional[SymbolNode]:\n    \"\"\"Find the attribute/accessor node that refers to a member of a type.\"\"\"\n",
        "target_code_len": 215,
        "diff_format": "@@ -302,3 +300,3 @@\n def lookup_member_var_or_accessor(info: TypeInfo, name: str,\n-                                  is_lvalue: bool) -> SymbolNode:\n+                                  is_lvalue: bool) -> Optional[SymbolNode]:\n     \"\"\"Find the attribute/accessor node that refers to a member of a type.\"\"\"\n",
        "source_code_with_indent": "<DED><DED>def lookup_member_var_or_accessor(info: TypeInfo, name: str,\n                                  is_lvalue: bool) -> SymbolNode:\n    <IND>\"\"\"Find the attribute/accessor node that refers to a member of a type.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def lookup_member_var_or_accessor(info: TypeInfo, name: str,\n                                  is_lvalue: bool) -> Optional[SymbolNode]:\n    <IND>\"\"\"Find the attribute/accessor node that refers to a member of a type.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "f178a6c0ebdf99b0fccb8cd9665a4e7dc316890d",
    "filename": "mypy/checkmember.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/checkmember.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/checkmember.py:310:8 Incompatible return type [7]: Expected `SymbolNode` but got `None`.",
    "message": " Expected `SymbolNode` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 310,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def lookup_member_var_or_accessor(info: TypeInfo, name: str,\n                                  is_lvalue: bool) -> SymbolNode:\n    \"\"\"Find the attribute/accessor node that refers to a member of a type.\"\"\"\n",
        "source_code_len": 205,
        "target_code": "def lookup_member_var_or_accessor(info: TypeInfo, name: str,\n                                  is_lvalue: bool) -> Optional[SymbolNode]:\n    \"\"\"Find the attribute/accessor node that refers to a member of a type.\"\"\"\n",
        "target_code_len": 215,
        "diff_format": "@@ -302,3 +300,3 @@\n def lookup_member_var_or_accessor(info: TypeInfo, name: str,\n-                                  is_lvalue: bool) -> SymbolNode:\n+                                  is_lvalue: bool) -> Optional[SymbolNode]:\n     \"\"\"Find the attribute/accessor node that refers to a member of a type.\"\"\"\n",
        "source_code_with_indent": "<DED><DED>def lookup_member_var_or_accessor(info: TypeInfo, name: str,\n                                  is_lvalue: bool) -> SymbolNode:\n    <IND>\"\"\"Find the attribute/accessor node that refers to a member of a type.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def lookup_member_var_or_accessor(info: TypeInfo, name: str,\n                                  is_lvalue: bool) -> Optional[SymbolNode]:\n    <IND>\"\"\"Find the attribute/accessor node that refers to a member of a type.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "f178a6c0ebdf99b0fccb8cd9665a4e7dc316890d",
    "filename": "mypy/checkmember.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/checkmember.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/checkmember.py:349:35 Incompatible variable type [9]: original_type is declared to have type `Type` but is used as type `None`.",
    "message": " original_type is declared to have type `Type` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 349,
    "warning_line": "                                   original_type: Type = None) -> Type:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                   msg: MessageBuilder,\n                                   original_type: Type = None) -> Type:\n    \"\"\"original_type is the type of E in the expression E.var\"\"\"\n",
        "source_code_len": 193,
        "target_code": "                                   msg: MessageBuilder,\n                                   original_type: Type) -> Type:\n    \"\"\"original_type is the type of E in the expression E.var\"\"\"\n",
        "target_code_len": 186,
        "diff_format": "@@ -348,3 +346,3 @@\n                                    msg: MessageBuilder,\n-                                   original_type: Type = None) -> Type:\n+                                   original_type: Type) -> Type:\n     \"\"\"original_type is the type of E in the expression E.var\"\"\"\n",
        "source_code_with_indent": "                                   msg: MessageBuilder,\n                                   original_type: Type = None) -> Type:\n    <IND>\"\"\"original_type is the type of E in the expression E.var\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                   msg: MessageBuilder,\n                                   original_type: Type) -> Type:\n    <IND>\"\"\"original_type is the type of E in the expression E.var\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "f178a6c0ebdf99b0fccb8cd9665a4e7dc316890d",
    "filename": "mypy/checkmember.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/checkmember.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/checkmember.py:394:20 Incompatible variable type [9]: original_type is declared to have type `Type` but is used as type `None`.",
    "message": " original_type is declared to have type `Type` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 394,
    "warning_line": "                    original_type: Type = None) -> Type:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    builtin_type: Callable[[str], Instance],\n                    original_type: Type = None) -> Type:\n    \"\"\"Instantiate type variables during analyze_class_attribute_access,\n",
        "source_code_len": 191,
        "target_code": "                    builtin_type: Callable[[str], Instance],\n                    original_type: Type) -> Type:\n    \"\"\"Instantiate type variables during analyze_class_attribute_access,\n",
        "target_code_len": 184,
        "diff_format": "@@ -393,3 +391,3 @@\n                     builtin_type: Callable[[str], Instance],\n-                    original_type: Type = None) -> Type:\n+                    original_type: Type) -> Type:\n     \"\"\"Instantiate type variables during analyze_class_attribute_access,\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                    builtin_type: Callable[[str], Instance],\n                    original_type: Type = None) -> Type:\n    <IND>",
        "target_code_with_indent": "                    builtin_type: Callable[[str], Instance],\n                    original_type: Type) -> Type:\n    <IND>"
      }
    ]
  },
  {
    "project": "python/mypy",
    "commit": "f178a6c0ebdf99b0fccb8cd9665a4e7dc316890d",
    "filename": "mypy/checkmember.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/python-mypy/mypy/checkmember.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mypy/checkmember.py:544:25 Incompatible variable type [9]: original_type is declared to have type `Type` but is used as type `None`.",
    "message": " original_type is declared to have type `Type` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 544,
    "warning_line": "def bind_self(method: F, original_type: Type = None) -> F:"
  }
]