[
  {
    "project": "cognitedata/Expression",
    "commit": "ca9c6380d67a109abe1c5241bfbf66a2f32815d9",
    "filename": "expression/collections/frozenlist.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/collections/frozenlist.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/collections/frozenlist.py:146:8 Incompatible return type [7]: Expected `FrozenList[Variable[TSource]]` but got `FrozenList[object]`.",
    "message": " Expected `FrozenList[Variable[TSource]]` but got `FrozenList[object]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 146,
    "warning_line": "        return FrozenList((element, *self))"
  },
  {
    "project": "cognitedata/Expression",
    "commit": "ca9c6380d67a109abe1c5241bfbf66a2f32815d9",
    "filename": "expression/collections/frozenlist.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/collections/frozenlist.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/collections/frozenlist.py:331:12 Incompatible return type [7]: Expected `Iterable[Variable[TSource]]` but got `Iterable[List[Variable[TSource]]]`.",
    "message": " Expected `Iterable[Variable[TSource]]` but got `Iterable[List[Variable[TSource]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 331,
    "warning_line": "            return [[val for val in self]]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __match__(self, pattern: Any) -> Iterable[TSource]:\n        if self == pattern:\n",
        "source_code_len": 89,
        "target_code": "\n    def __match__(self, pattern: Any) -> Iterable[List[TSource]]:\n        if self == pattern:\n",
        "target_code_len": 95,
        "diff_format": "@@ -328,3 +353,3 @@\n \n-    def __match__(self, pattern: Any) -> Iterable[TSource]:\n+    def __match__(self, pattern: Any) -> Iterable[List[TSource]]:\n         if self == pattern:\n",
        "source_code_with_indent": "\n    <DED>def __match__(self, pattern: Any) -> Iterable[TSource]:\n        <IND>if self == pattern:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __match__(self, pattern: Any) -> Iterable[List[TSource]]:\n        <IND>if self == pattern:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "cognitedata/Expression",
    "commit": "ca9c6380d67a109abe1c5241bfbf66a2f32815d9",
    "filename": "expression/collections/frozenlist.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/collections/frozenlist.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/collections/frozenlist.py:335:16 Incompatible return type [7]: Expected `Iterable[Variable[TSource]]` but got `Iterable[List[Variable[TSource]]]`.",
    "message": " Expected `Iterable[Variable[TSource]]` but got `Iterable[List[Variable[TSource]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 335,
    "warning_line": "                return [[val for val in self]]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __match__(self, pattern: Any) -> Iterable[TSource]:\n        if self == pattern:\n",
        "source_code_len": 89,
        "target_code": "\n    def __match__(self, pattern: Any) -> Iterable[List[TSource]]:\n        if self == pattern:\n",
        "target_code_len": 95,
        "diff_format": "@@ -328,3 +353,3 @@\n \n-    def __match__(self, pattern: Any) -> Iterable[TSource]:\n+    def __match__(self, pattern: Any) -> Iterable[List[TSource]]:\n         if self == pattern:\n",
        "source_code_with_indent": "\n    <DED>def __match__(self, pattern: Any) -> Iterable[TSource]:\n        <IND>if self == pattern:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __match__(self, pattern: Any) -> Iterable[List[TSource]]:\n        <IND>if self == pattern:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "cognitedata/Expression",
    "commit": "ca9c6380d67a109abe1c5241bfbf66a2f32815d9",
    "filename": "expression/core/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/core/misc.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/core/misc.py:19:28 Incompatible parameter type [6]: Expected `typing.Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Variable[Base]`.",
    "message": " Expected `typing.Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Variable[Base]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 19,
    "warning_line": "    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "Derived = TypeVar(\"Derived\")\n\n\ndef downcast(type: Base, expr: Derived) -> Base:\n    \"\"\"Downcast expression `Derived` to `Base`\n\n    Checks at compile time that the type of expression E is a supertype\n    of T, and checks at runtime that E is in fact an instance of T.\n\n    Note: F# `:?>` or `downcast`.\n    \"\"\"\n    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n    return expr\n\n\ndef upcast(type: Derived, expr: Base) -> Derived:\n    \"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of Base.\n\n    Note: F# `:>` or `upcast`.\n    \"\"\"\n\n    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n    return expr\n\n\ndef try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n    \"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of `Base`.\n\n    NOTE: Supports generic types.\n\n    Returns:\n        None if `Derived` is not a supertype of `Base`.\n    \"\"\"\n    origin: Optional[Derived] = get_origin(type_) or type_\n    if origin is not None and isinstance(expr, origin):\n        derived = cast(type(type_), expr)\n        return derived\n    else:\n        return None\n\n",
        "source_code_len": 1228,
        "target_code": "Derived = TypeVar(\"Derived\")\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -8,44 +8,2 @@\n Derived = TypeVar(\"Derived\")\n-\n-\n-def downcast(type: Base, expr: Derived) -> Base:\n-    \"\"\"Downcast expression `Derived` to `Base`\n-\n-    Checks at compile time that the type of expression E is a supertype\n-    of T, and checks at runtime that E is in fact an instance of T.\n-\n-    Note: F# `:?>` or `downcast`.\n-    \"\"\"\n-    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n-    return expr\n-\n-\n-def upcast(type: Derived, expr: Base) -> Derived:\n-    \"\"\"Upcast expression `Base` to `Derived`.\n-\n-    Check that the `Derived` type is a supertype of Base.\n-\n-    Note: F# `:>` or `upcast`.\n-    \"\"\"\n-\n-    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n-    return expr\n-\n-\n-def try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n-    \"\"\"Upcast expression `Base` to `Derived`.\n-\n-    Check that the `Derived` type is a supertype of `Base`.\n-\n-    NOTE: Supports generic types.\n-\n-    Returns:\n-        None if `Derived` is not a supertype of `Base`.\n-    \"\"\"\n-    origin: Optional[Derived] = get_origin(type_) or type_\n-    if origin is not None and isinstance(expr, origin):\n-        derived = cast(type(type_), expr)\n-        return derived\n-    else:\n-        return None\n \n",
        "source_code_with_indent": "Derived = TypeVar(\"Derived\")\n\n\ndef downcast(type: Base, expr: Derived) -> Base:\n    <IND>\"\"\"Downcast expression `Derived` to `Base`\n\n    Checks at compile time that the type of expression E is a supertype\n    of T, and checks at runtime that E is in fact an instance of T.\n\n    Note: F# `:?>` or `downcast`.\n    \"\"\"\n    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n    return expr\n\n\n<DED>def upcast(type: Derived, expr: Base) -> Derived:\n    <IND>\"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of Base.\n\n    Note: F# `:>` or `upcast`.\n    \"\"\"\n\n    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n    return expr\n\n\n<DED>def try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n    <IND>\"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of `Base`.\n\n    NOTE: Supports generic types.\n\n    Returns:\n        None if `Derived` is not a supertype of `Base`.\n    \"\"\"\n    origin: Optional[Derived] = get_origin(type_) or type_\n    if origin is not None and isinstance(expr, origin):\n        <IND>derived = cast(type(type_), expr)\n        return derived\n    <DED>else:\n        <IND>return None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "Derived = TypeVar(\"Derived\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "cognitedata/Expression",
    "commit": "ca9c6380d67a109abe1c5241bfbf66a2f32815d9",
    "filename": "expression/core/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/core/misc.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/core/misc.py:31:28 Incompatible parameter type [6]: Expected `typing.Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Variable[Derived]`.",
    "message": " Expected `typing.Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Variable[Derived]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 31,
    "warning_line": "    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "Derived = TypeVar(\"Derived\")\n\n\ndef downcast(type: Base, expr: Derived) -> Base:\n    \"\"\"Downcast expression `Derived` to `Base`\n\n    Checks at compile time that the type of expression E is a supertype\n    of T, and checks at runtime that E is in fact an instance of T.\n\n    Note: F# `:?>` or `downcast`.\n    \"\"\"\n    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n    return expr\n\n\ndef upcast(type: Derived, expr: Base) -> Derived:\n    \"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of Base.\n\n    Note: F# `:>` or `upcast`.\n    \"\"\"\n\n    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n    return expr\n\n\ndef try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n    \"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of `Base`.\n\n    NOTE: Supports generic types.\n\n    Returns:\n        None if `Derived` is not a supertype of `Base`.\n    \"\"\"\n    origin: Optional[Derived] = get_origin(type_) or type_\n    if origin is not None and isinstance(expr, origin):\n        derived = cast(type(type_), expr)\n        return derived\n    else:\n        return None\n\n",
        "source_code_len": 1228,
        "target_code": "Derived = TypeVar(\"Derived\")\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -8,44 +8,2 @@\n Derived = TypeVar(\"Derived\")\n-\n-\n-def downcast(type: Base, expr: Derived) -> Base:\n-    \"\"\"Downcast expression `Derived` to `Base`\n-\n-    Checks at compile time that the type of expression E is a supertype\n-    of T, and checks at runtime that E is in fact an instance of T.\n-\n-    Note: F# `:?>` or `downcast`.\n-    \"\"\"\n-    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n-    return expr\n-\n-\n-def upcast(type: Derived, expr: Base) -> Derived:\n-    \"\"\"Upcast expression `Base` to `Derived`.\n-\n-    Check that the `Derived` type is a supertype of Base.\n-\n-    Note: F# `:>` or `upcast`.\n-    \"\"\"\n-\n-    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n-    return expr\n-\n-\n-def try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n-    \"\"\"Upcast expression `Base` to `Derived`.\n-\n-    Check that the `Derived` type is a supertype of `Base`.\n-\n-    NOTE: Supports generic types.\n-\n-    Returns:\n-        None if `Derived` is not a supertype of `Base`.\n-    \"\"\"\n-    origin: Optional[Derived] = get_origin(type_) or type_\n-    if origin is not None and isinstance(expr, origin):\n-        derived = cast(type(type_), expr)\n-        return derived\n-    else:\n-        return None\n \n",
        "source_code_with_indent": "Derived = TypeVar(\"Derived\")\n\n\ndef downcast(type: Base, expr: Derived) -> Base:\n    <IND>\"\"\"Downcast expression `Derived` to `Base`\n\n    Checks at compile time that the type of expression E is a supertype\n    of T, and checks at runtime that E is in fact an instance of T.\n\n    Note: F# `:?>` or `downcast`.\n    \"\"\"\n    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n    return expr\n\n\n<DED>def upcast(type: Derived, expr: Base) -> Derived:\n    <IND>\"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of Base.\n\n    Note: F# `:>` or `upcast`.\n    \"\"\"\n\n    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n    return expr\n\n\n<DED>def try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n    <IND>\"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of `Base`.\n\n    NOTE: Supports generic types.\n\n    Returns:\n        None if `Derived` is not a supertype of `Base`.\n    \"\"\"\n    origin: Optional[Derived] = get_origin(type_) or type_\n    if origin is not None and isinstance(expr, origin):\n        <IND>derived = cast(type(type_), expr)\n        return derived\n    <DED>else:\n        <IND>return None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "Derived = TypeVar(\"Derived\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "cognitedata/Expression",
    "commit": "ca9c6380d67a109abe1c5241bfbf66a2f32815d9",
    "filename": "expression/core/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/core/misc.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/core/misc.py:46:47 Incompatible parameter type [6]: Expected `typing.Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Variable[Derived]`.",
    "message": " Expected `typing.Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `Variable[Derived]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 46,
    "warning_line": "    if origin is not None and isinstance(expr, origin):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "Derived = TypeVar(\"Derived\")\n\n\ndef downcast(type: Base, expr: Derived) -> Base:\n    \"\"\"Downcast expression `Derived` to `Base`\n\n    Checks at compile time that the type of expression E is a supertype\n    of T, and checks at runtime that E is in fact an instance of T.\n\n    Note: F# `:?>` or `downcast`.\n    \"\"\"\n    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n    return expr\n\n\ndef upcast(type: Derived, expr: Base) -> Derived:\n    \"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of Base.\n\n    Note: F# `:>` or `upcast`.\n    \"\"\"\n\n    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n    return expr\n\n\ndef try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n    \"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of `Base`.\n\n    NOTE: Supports generic types.\n\n    Returns:\n        None if `Derived` is not a supertype of `Base`.\n    \"\"\"\n    origin: Optional[Derived] = get_origin(type_) or type_\n    if origin is not None and isinstance(expr, origin):\n        derived = cast(type(type_), expr)\n        return derived\n    else:\n        return None\n\n",
        "source_code_len": 1228,
        "target_code": "Derived = TypeVar(\"Derived\")\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -8,44 +8,2 @@\n Derived = TypeVar(\"Derived\")\n-\n-\n-def downcast(type: Base, expr: Derived) -> Base:\n-    \"\"\"Downcast expression `Derived` to `Base`\n-\n-    Checks at compile time that the type of expression E is a supertype\n-    of T, and checks at runtime that E is in fact an instance of T.\n-\n-    Note: F# `:?>` or `downcast`.\n-    \"\"\"\n-    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n-    return expr\n-\n-\n-def upcast(type: Derived, expr: Base) -> Derived:\n-    \"\"\"Upcast expression `Base` to `Derived`.\n-\n-    Check that the `Derived` type is a supertype of Base.\n-\n-    Note: F# `:>` or `upcast`.\n-    \"\"\"\n-\n-    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n-    return expr\n-\n-\n-def try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n-    \"\"\"Upcast expression `Base` to `Derived`.\n-\n-    Check that the `Derived` type is a supertype of `Base`.\n-\n-    NOTE: Supports generic types.\n-\n-    Returns:\n-        None if `Derived` is not a supertype of `Base`.\n-    \"\"\"\n-    origin: Optional[Derived] = get_origin(type_) or type_\n-    if origin is not None and isinstance(expr, origin):\n-        derived = cast(type(type_), expr)\n-        return derived\n-    else:\n-        return None\n \n",
        "source_code_with_indent": "Derived = TypeVar(\"Derived\")\n\n\ndef downcast(type: Base, expr: Derived) -> Base:\n    <IND>\"\"\"Downcast expression `Derived` to `Base`\n\n    Checks at compile time that the type of expression E is a supertype\n    of T, and checks at runtime that E is in fact an instance of T.\n\n    Note: F# `:?>` or `downcast`.\n    \"\"\"\n    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n    return expr\n\n\n<DED>def upcast(type: Derived, expr: Base) -> Derived:\n    <IND>\"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of Base.\n\n    Note: F# `:>` or `upcast`.\n    \"\"\"\n\n    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n    return expr\n\n\n<DED>def try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n    <IND>\"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of `Base`.\n\n    NOTE: Supports generic types.\n\n    Returns:\n        None if `Derived` is not a supertype of `Base`.\n    \"\"\"\n    origin: Optional[Derived] = get_origin(type_) or type_\n    if origin is not None and isinstance(expr, origin):\n        <IND>derived = cast(type(type_), expr)\n        return derived\n    <DED>else:\n        <IND>return None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "Derived = TypeVar(\"Derived\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "cognitedata/Expression",
    "commit": "ca9c6380d67a109abe1c5241bfbf66a2f32815d9",
    "filename": "expression/core/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/cognitedata-Expression/expression/core/misc.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "expression/core/misc.py:47:23 Invalid type [31]: Expression `type($parameter$type_)` is not a valid type.",
    "message": " Expression `type($parameter$type_)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 47,
    "warning_line": "        derived = cast(type(type_), expr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "Derived = TypeVar(\"Derived\")\n\n\ndef downcast(type: Base, expr: Derived) -> Base:\n    \"\"\"Downcast expression `Derived` to `Base`\n\n    Checks at compile time that the type of expression E is a supertype\n    of T, and checks at runtime that E is in fact an instance of T.\n\n    Note: F# `:?>` or `downcast`.\n    \"\"\"\n    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n    return expr\n\n\ndef upcast(type: Derived, expr: Base) -> Derived:\n    \"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of Base.\n\n    Note: F# `:>` or `upcast`.\n    \"\"\"\n\n    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n    return expr\n\n\ndef try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n    \"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of `Base`.\n\n    NOTE: Supports generic types.\n\n    Returns:\n        None if `Derived` is not a supertype of `Base`.\n    \"\"\"\n    origin: Optional[Derived] = get_origin(type_) or type_\n    if origin is not None and isinstance(expr, origin):\n        derived = cast(type(type_), expr)\n        return derived\n    else:\n        return None\n\n",
        "source_code_len": 1228,
        "target_code": "Derived = TypeVar(\"Derived\")\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -8,44 +8,2 @@\n Derived = TypeVar(\"Derived\")\n-\n-\n-def downcast(type: Base, expr: Derived) -> Base:\n-    \"\"\"Downcast expression `Derived` to `Base`\n-\n-    Checks at compile time that the type of expression E is a supertype\n-    of T, and checks at runtime that E is in fact an instance of T.\n-\n-    Note: F# `:?>` or `downcast`.\n-    \"\"\"\n-    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n-    return expr\n-\n-\n-def upcast(type: Derived, expr: Base) -> Derived:\n-    \"\"\"Upcast expression `Base` to `Derived`.\n-\n-    Check that the `Derived` type is a supertype of Base.\n-\n-    Note: F# `:>` or `upcast`.\n-    \"\"\"\n-\n-    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n-    return expr\n-\n-\n-def try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n-    \"\"\"Upcast expression `Base` to `Derived`.\n-\n-    Check that the `Derived` type is a supertype of `Base`.\n-\n-    NOTE: Supports generic types.\n-\n-    Returns:\n-        None if `Derived` is not a supertype of `Base`.\n-    \"\"\"\n-    origin: Optional[Derived] = get_origin(type_) or type_\n-    if origin is not None and isinstance(expr, origin):\n-        derived = cast(type(type_), expr)\n-        return derived\n-    else:\n-        return None\n \n",
        "source_code_with_indent": "Derived = TypeVar(\"Derived\")\n\n\ndef downcast(type: Base, expr: Derived) -> Base:\n    <IND>\"\"\"Downcast expression `Derived` to `Base`\n\n    Checks at compile time that the type of expression E is a supertype\n    of T, and checks at runtime that E is in fact an instance of T.\n\n    Note: F# `:?>` or `downcast`.\n    \"\"\"\n    assert isinstance(expr, type), f\"The type of expression {expr} is not a supertype of {type}\"\n    return expr\n\n\n<DED>def upcast(type: Derived, expr: Base) -> Derived:\n    <IND>\"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of Base.\n\n    Note: F# `:>` or `upcast`.\n    \"\"\"\n\n    assert isinstance(expr, type), f\"The expression {expr} is not derived from type {type}\"\n    return expr\n\n\n<DED>def try_upcast(type_: Derived, expr: Base) -> Optional[Derived]:\n    <IND>\"\"\"Upcast expression `Base` to `Derived`.\n\n    Check that the `Derived` type is a supertype of `Base`.\n\n    NOTE: Supports generic types.\n\n    Returns:\n        None if `Derived` is not a supertype of `Base`.\n    \"\"\"\n    origin: Optional[Derived] = get_origin(type_) or type_\n    if origin is not None and isinstance(expr, origin):\n        <IND>derived = cast(type(type_), expr)\n        return derived\n    <DED>else:\n        <IND>return None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "Derived = TypeVar(\"Derived\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]