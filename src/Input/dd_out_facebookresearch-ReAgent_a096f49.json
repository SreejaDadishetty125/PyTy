[
  {
    "project": "facebookresearch/ReAgent",
    "commit": "a096f492dcbb9c65badd44c3678b8d0573f0ac55",
    "filename": "reagent/workflow/reporters/actor_critic_reporter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-ReAgent/reagent/workflow/reporters/actor_critic_reporter.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "reagent/workflow/reporters/actor_critic_reporter.py:37:14 Unsupported operand [58]: `+` is not supported for operand types `typing.List[typing.Tuple[str, typing.Union[agg.MeanAggregator, agg.RecentValuesAggregator]]]` and `typing.List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.",
    "message": " `+` is not supported for operand types `typing.List[typing.Tuple[str, typing.Union[agg.MeanAggregator, agg.RecentValuesAggregator]]]` and `typing.List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 37,
    "warning_line": "            + [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport logging\n",
        "source_code_len": 16,
        "target_code": "\nimport itertools\nimport logging\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,2 +2,3 @@\n \n+import itertools\n import logging\n",
        "source_code_with_indent": "\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport itertools\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in [\n                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st\n            #  param but got `List[typing.Tuple[str,\n            #  agg.TensorBoardHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st\n            #  param but got `List[typing.Tuple[str,\n            #  agg.TensorBoardHistogramAndMeanAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n                for key, log_key in [\n                    (\"td_loss\", \"td_loss\"),\n                    (\"reward_loss\", \"reward_loss\"),\n                    (\"logged_propensities\", \"propensities/logged\"),\n                    (\"logged_rewards\", \"reward/logged\"),\n                ]\n            ]\n        )\n",
        "source_code_len": 1269,
        "target_code": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in itertools.chain(\n                [\n                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n                    )\n                    for key, log_key in [\n                        (\"td_loss\", \"td_loss\"),\n                        (\"reward_loss\", \"reward_loss\"),\n                        (\"logged_propensities\", \"propensities/logged\"),\n                        (\"logged_rewards\", \"reward/logged\"),\n                    ]\n                ],\n            )\n        )\n",
        "target_code_len": 913,
        "diff_format": "@@ -23,24 +24,21 @@\n             (name, IntervalAggregatingObserver(report_interval, aggregator))\n-            for name, aggregator in [\n-                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n-                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n-                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n-            ]\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st\n-            #  param but got `List[typing.Tuple[str,\n-            #  agg.TensorBoardHistogramAndMeanAggregator]]`.\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st\n-            #  param but got `List[typing.Tuple[str,\n-            #  agg.TensorBoardHistogramAndMeanAggregator]]`.\n-            + [\n-                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n-                for key, log_key in [\n-                    (\"td_loss\", \"td_loss\"),\n-                    (\"reward_loss\", \"reward_loss\"),\n-                    (\"logged_propensities\", \"propensities/logged\"),\n-                    (\"logged_rewards\", \"reward/logged\"),\n-                ]\n-            ]\n+            for name, aggregator in itertools.chain(\n+                [\n+                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n+                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n+                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n+                ],\n+                [\n+                    (\n+                        f\"{key}_tb\",\n+                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n+                    )\n+                    for key, log_key in [\n+                        (\"td_loss\", \"td_loss\"),\n+                        (\"reward_loss\", \"reward_loss\"),\n+                        (\"logged_propensities\", \"propensities/logged\"),\n+                        (\"logged_rewards\", \"reward/logged\"),\n+                    ]\n+                ],\n+            )\n         )\n",
        "source_code_with_indent": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in [\n                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st\n            #  param but got `List[typing.Tuple[str,\n            #  agg.TensorBoardHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st\n            #  param but got `List[typing.Tuple[str,\n            #  agg.TensorBoardHistogramAndMeanAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n                for key, log_key in [\n                    (\"td_loss\", \"td_loss\"),\n                    (\"reward_loss\", \"reward_loss\"),\n                    (\"logged_propensities\", \"propensities/logged\"),\n                    (\"logged_rewards\", \"reward/logged\"),\n                ]\n            ]\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in itertools.chain(\n                [\n                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n                    )\n                    for key, log_key in [\n                        (\"td_loss\", \"td_loss\"),\n                        (\"reward_loss\", \"reward_loss\"),\n                        (\"logged_propensities\", \"propensities/logged\"),\n                        (\"logged_rewards\", \"reward/logged\"),\n                    ]\n                ],\n            )\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/ReAgent",
    "commit": "a096f492dcbb9c65badd44c3678b8d0573f0ac55",
    "filename": "reagent/workflow/reporters/actor_critic_reporter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-ReAgent/reagent/workflow/reporters/actor_critic_reporter.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "reagent/workflow/reporters/actor_critic_reporter.py:55:14 Unsupported operand [58]: `+` is not supported for operand types `typing.List[ValueListObserver]` and `typing.List[EpochEndObserver]`.",
    "message": " `+` is not supported for operand types `typing.List[ValueListObserver]` and `typing.List[EpochEndObserver]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 55,
    "warning_line": "            + [epoch_end_observer]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport logging\n",
        "source_code_len": 16,
        "target_code": "\nimport itertools\nimport logging\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,2 +2,3 @@\n \n+import itertools\n import logging\n",
        "source_code_with_indent": "\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport itertools\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super().__init__(\n            list(self.value_list_observers.values())\n            + list(self.aggregating_observers.values())\n            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n            #  got `List[EpochEndObserver]`.\n            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n            #  got `List[EpochEndObserver]`.\n            + [epoch_end_observer]\n        )\n",
        "source_code_len": 434,
        "target_code": "        super().__init__(\n            itertools.chain(\n                self.value_list_observers.values(),\n                self.aggregating_observers.values(),\n                [epoch_end_observer],\n            )\n        )\n",
        "target_code_len": 222,
        "diff_format": "@@ -48,9 +46,7 @@\n         super().__init__(\n-            list(self.value_list_observers.values())\n-            + list(self.aggregating_observers.values())\n-            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n-            #  got `List[EpochEndObserver]`.\n-            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n-            #  got `List[EpochEndObserver]`.\n-            + [epoch_end_observer]\n+            itertools.chain(\n+                self.value_list_observers.values(),\n+                self.aggregating_observers.values(),\n+                [epoch_end_observer],\n+            )\n         )\n",
        "source_code_with_indent": "        super().__init__(\n            list(self.value_list_observers.values())\n            + list(self.aggregating_observers.values())\n            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n            #  got `List[EpochEndObserver]`.\n            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n            #  got `List[EpochEndObserver]`.\n            + [epoch_end_observer]\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        super().__init__(\n            itertools.chain(\n                self.value_list_observers.values(),\n                self.aggregating_observers.values(),\n                [epoch_end_observer],\n            )\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/ReAgent",
    "commit": "a096f492dcbb9c65badd44c3678b8d0573f0ac55",
    "filename": "reagent/workflow/reporters/discrete_dqn_reporter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-ReAgent/reagent/workflow/reporters/discrete_dqn_reporter.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "reagent/workflow/reporters/discrete_dqn_reporter.py:57:14 Unsupported operand [58]: `+` is not supported for operand types `List[typing.Tuple[str, typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator, agg.MeanAggregator, agg.RecentValuesAggregator]]]` and `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.",
    "message": " `+` is not supported for operand types `List[typing.Tuple[str, typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator, agg.MeanAggregator, agg.RecentValuesAggregator]]]` and `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 57,
    "warning_line": "            + [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport logging\n",
        "source_code_len": 16,
        "target_code": "\nimport itertools\nimport logging\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,2 +2,3 @@\n \n+import itertools\n import logging\n",
        "source_code_with_indent": "\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport itertools\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in [\n                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                (\n                    \"model_values\",\n                    agg.FunctionsByActionAggregator(\n                        \"model_values\", actions, {\"mean\": torch.mean, \"std\": torch.std}\n                    ),\n                ),\n                (\"logged_action\", agg.ActionCountAggregator(\"logged_actions\", actions)),\n                (\n                    \"model_action\",\n                    agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                ),\n                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardActionCountAggregator(key, title, actions))\n                for key, title in [\n                    (\"logged_actions\", \"logged\"),\n                    (\"model_action_idxs\", \"model\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n                for key, log_key in [\n                    (\"td_loss\", \"td_loss\"),\n                    (\"reward_loss\", \"reward_loss\"),\n                    (\"logged_propensities\", \"propensities/logged\"),\n                    (\"logged_rewards\", \"reward/logged\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            + [\n                (\n                    f\"{key}_tb\",\n                    agg.TensorBoardActionHistogramAndMeanAggregator(\n                        key, category, title, actions\n                    ),\n                )\n                for key, category, title in [\n                    (\"model_propensities\", \"propensities\", \"model\"),\n                    (\"model_rewards\", \"reward\", \"model\"),\n                    (\"model_values\", \"value\", \"model\"),\n                ]\n            ]\n        )\n",
        "source_code_len": 3956,
        "target_code": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in itertools.chain(\n                [\n                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                    (\n                        \"model_values\",\n                        agg.FunctionsByActionAggregator(\n                            \"model_values\",\n                            actions,\n                            {\"mean\": torch.mean, \"std\": torch.std},\n                        ),\n                    ),\n                    (\n                        \"logged_action\",\n                        agg.ActionCountAggregator(\"logged_actions\", actions),\n                    ),\n                    (\n                        \"model_action\",\n                        agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                    ),\n                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionCountAggregator(key, title, actions),\n                    )\n                    for key, title in [\n                        (\"logged_actions\", \"logged\"),\n                        (\"model_action_idxs\", \"model\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n                    )\n                    for key, log_key in [\n                        (\"td_loss\", \"td_loss\"),\n                        (\"reward_loss\", \"reward_loss\"),\n                        (\"logged_propensities\", \"propensities/logged\"),\n                        (\"logged_rewards\", \"reward/logged\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionHistogramAndMeanAggregator(\n                            key, category, title, actions\n                        ),\n                    )\n                    for key, category, title in [\n                        (\"model_propensities\", \"propensities\", \"model\"),\n                        (\"model_rewards\", \"reward\", \"model\"),\n                        (\"model_values\", \"value\", \"model\"),\n                    ]\n                ],\n            )\n        )\n",
        "target_code_len": 2477,
        "diff_format": "@@ -32,73 +33,60 @@\n             (name, IntervalAggregatingObserver(report_interval, aggregator))\n-            for name, aggregator in [\n-                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n-                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n-                (\n-                    \"model_values\",\n-                    agg.FunctionsByActionAggregator(\n-                        \"model_values\", actions, {\"mean\": torch.mean, \"std\": torch.std}\n+            for name, aggregator in itertools.chain(\n+                [\n+                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n+                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n+                    (\n+                        \"model_values\",\n+                        agg.FunctionsByActionAggregator(\n+                            \"model_values\",\n+                            actions,\n+                            {\"mean\": torch.mean, \"std\": torch.std},\n+                        ),\n                     ),\n-                ),\n-                (\"logged_action\", agg.ActionCountAggregator(\"logged_actions\", actions)),\n-                (\n-                    \"model_action\",\n-                    agg.ActionCountAggregator(\"model_action_idxs\", actions),\n-                ),\n-                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n-            ]\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n-            + [\n-                (f\"{key}_tb\", agg.TensorBoardActionCountAggregator(key, title, actions))\n-                for key, title in [\n-                    (\"logged_actions\", \"logged\"),\n-                    (\"model_action_idxs\", \"model\"),\n-                ]\n-            ]\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n-            + [\n-                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n-                for key, log_key in [\n-                    (\"td_loss\", \"td_loss\"),\n-                    (\"reward_loss\", \"reward_loss\"),\n-                    (\"logged_propensities\", \"propensities/logged\"),\n-                    (\"logged_rewards\", \"reward/logged\"),\n-                ]\n-            ]\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str,\n-            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str,\n-            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n-            + [\n-                (\n-                    f\"{key}_tb\",\n-                    agg.TensorBoardActionHistogramAndMeanAggregator(\n-                        key, category, title, actions\n+                    (\n+                        \"logged_action\",\n+                        agg.ActionCountAggregator(\"logged_actions\", actions),\n                     ),\n-                )\n-                for key, category, title in [\n-                    (\"model_propensities\", \"propensities\", \"model\"),\n-                    (\"model_rewards\", \"reward\", \"model\"),\n-                    (\"model_values\", \"value\", \"model\"),\n-                ]\n-            ]\n+                    (\n+                        \"model_action\",\n+                        agg.ActionCountAggregator(\"model_action_idxs\", actions),\n+                    ),\n+                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n+                ],\n+                [\n+                    (\n+                        f\"{key}_tb\",\n+                        agg.TensorBoardActionCountAggregator(key, title, actions),\n+                    )\n+                    for key, title in [\n+                        (\"logged_actions\", \"logged\"),\n+                        (\"model_action_idxs\", \"model\"),\n+                    ]\n+                ],\n+                [\n+                    (\n+                        f\"{key}_tb\",\n+                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n+                    )\n+                    for key, log_key in [\n+                        (\"td_loss\", \"td_loss\"),\n+                        (\"reward_loss\", \"reward_loss\"),\n+                        (\"logged_propensities\", \"propensities/logged\"),\n+                        (\"logged_rewards\", \"reward/logged\"),\n+                    ]\n+                ],\n+                [\n+                    (\n+                        f\"{key}_tb\",\n+                        agg.TensorBoardActionHistogramAndMeanAggregator(\n+                            key, category, title, actions\n+                        ),\n+                    )\n+                    for key, category, title in [\n+                        (\"model_propensities\", \"propensities\", \"model\"),\n+                        (\"model_rewards\", \"reward\", \"model\"),\n+                        (\"model_values\", \"value\", \"model\"),\n+                    ]\n+                ],\n+            )\n         )\n",
        "source_code_with_indent": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in [\n                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                (\n                    \"model_values\",\n                    agg.FunctionsByActionAggregator(\n                        \"model_values\", actions, {\"mean\": torch.mean, \"std\": torch.std}\n                    ),\n                ),\n                (\"logged_action\", agg.ActionCountAggregator(\"logged_actions\", actions)),\n                (\n                    \"model_action\",\n                    agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                ),\n                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardActionCountAggregator(key, title, actions))\n                for key, title in [\n                    (\"logged_actions\", \"logged\"),\n                    (\"model_action_idxs\", \"model\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n                for key, log_key in [\n                    (\"td_loss\", \"td_loss\"),\n                    (\"reward_loss\", \"reward_loss\"),\n                    (\"logged_propensities\", \"propensities/logged\"),\n                    (\"logged_rewards\", \"reward/logged\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            + [\n                (\n                    f\"{key}_tb\",\n                    agg.TensorBoardActionHistogramAndMeanAggregator(\n                        key, category, title, actions\n                    ),\n                )\n                for key, category, title in [\n                    (\"model_propensities\", \"propensities\", \"model\"),\n                    (\"model_rewards\", \"reward\", \"model\"),\n                    (\"model_values\", \"value\", \"model\"),\n                ]\n            ]\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in itertools.chain(\n                [\n                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                    (\n                        \"model_values\",\n                        agg.FunctionsByActionAggregator(\n                            \"model_values\",\n                            actions,\n                            {\"mean\": torch.mean, \"std\": torch.std},\n                        ),\n                    ),\n                    (\n                        \"logged_action\",\n                        agg.ActionCountAggregator(\"logged_actions\", actions),\n                    ),\n                    (\n                        \"model_action\",\n                        agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                    ),\n                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionCountAggregator(key, title, actions),\n                    )\n                    for key, title in [\n                        (\"logged_actions\", \"logged\"),\n                        (\"model_action_idxs\", \"model\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n                    )\n                    for key, log_key in [\n                        (\"td_loss\", \"td_loss\"),\n                        (\"reward_loss\", \"reward_loss\"),\n                        (\"logged_propensities\", \"propensities/logged\"),\n                        (\"logged_rewards\", \"reward/logged\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionHistogramAndMeanAggregator(\n                            key, category, title, actions\n                        ),\n                    )\n                    for key, category, title in [\n                        (\"model_propensities\", \"propensities\", \"model\"),\n                        (\"model_rewards\", \"reward\", \"model\"),\n                        (\"model_values\", \"value\", \"model\"),\n                    ]\n                ],\n            )\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/ReAgent",
    "commit": "a096f492dcbb9c65badd44c3678b8d0573f0ac55",
    "filename": "reagent/workflow/reporters/discrete_dqn_reporter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-ReAgent/reagent/workflow/reporters/discrete_dqn_reporter.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "reagent/workflow/reporters/discrete_dqn_reporter.py:72:14 Unsupported operand [58]: `+` is not supported for operand types `List[typing.Tuple[str, typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator, agg.MeanAggregator, agg.RecentValuesAggregator]]]` and `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.",
    "message": " `+` is not supported for operand types `List[typing.Tuple[str, typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator, agg.MeanAggregator, agg.RecentValuesAggregator]]]` and `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 72,
    "warning_line": "            + [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport logging\n",
        "source_code_len": 16,
        "target_code": "\nimport itertools\nimport logging\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,2 +2,3 @@\n \n+import itertools\n import logging\n",
        "source_code_with_indent": "\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport itertools\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in [\n                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                (\n                    \"model_values\",\n                    agg.FunctionsByActionAggregator(\n                        \"model_values\", actions, {\"mean\": torch.mean, \"std\": torch.std}\n                    ),\n                ),\n                (\"logged_action\", agg.ActionCountAggregator(\"logged_actions\", actions)),\n                (\n                    \"model_action\",\n                    agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                ),\n                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardActionCountAggregator(key, title, actions))\n                for key, title in [\n                    (\"logged_actions\", \"logged\"),\n                    (\"model_action_idxs\", \"model\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n                for key, log_key in [\n                    (\"td_loss\", \"td_loss\"),\n                    (\"reward_loss\", \"reward_loss\"),\n                    (\"logged_propensities\", \"propensities/logged\"),\n                    (\"logged_rewards\", \"reward/logged\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            + [\n                (\n                    f\"{key}_tb\",\n                    agg.TensorBoardActionHistogramAndMeanAggregator(\n                        key, category, title, actions\n                    ),\n                )\n                for key, category, title in [\n                    (\"model_propensities\", \"propensities\", \"model\"),\n                    (\"model_rewards\", \"reward\", \"model\"),\n                    (\"model_values\", \"value\", \"model\"),\n                ]\n            ]\n        )\n",
        "source_code_len": 3956,
        "target_code": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in itertools.chain(\n                [\n                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                    (\n                        \"model_values\",\n                        agg.FunctionsByActionAggregator(\n                            \"model_values\",\n                            actions,\n                            {\"mean\": torch.mean, \"std\": torch.std},\n                        ),\n                    ),\n                    (\n                        \"logged_action\",\n                        agg.ActionCountAggregator(\"logged_actions\", actions),\n                    ),\n                    (\n                        \"model_action\",\n                        agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                    ),\n                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionCountAggregator(key, title, actions),\n                    )\n                    for key, title in [\n                        (\"logged_actions\", \"logged\"),\n                        (\"model_action_idxs\", \"model\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n                    )\n                    for key, log_key in [\n                        (\"td_loss\", \"td_loss\"),\n                        (\"reward_loss\", \"reward_loss\"),\n                        (\"logged_propensities\", \"propensities/logged\"),\n                        (\"logged_rewards\", \"reward/logged\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionHistogramAndMeanAggregator(\n                            key, category, title, actions\n                        ),\n                    )\n                    for key, category, title in [\n                        (\"model_propensities\", \"propensities\", \"model\"),\n                        (\"model_rewards\", \"reward\", \"model\"),\n                        (\"model_values\", \"value\", \"model\"),\n                    ]\n                ],\n            )\n        )\n",
        "target_code_len": 2477,
        "diff_format": "@@ -32,73 +33,60 @@\n             (name, IntervalAggregatingObserver(report_interval, aggregator))\n-            for name, aggregator in [\n-                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n-                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n-                (\n-                    \"model_values\",\n-                    agg.FunctionsByActionAggregator(\n-                        \"model_values\", actions, {\"mean\": torch.mean, \"std\": torch.std}\n+            for name, aggregator in itertools.chain(\n+                [\n+                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n+                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n+                    (\n+                        \"model_values\",\n+                        agg.FunctionsByActionAggregator(\n+                            \"model_values\",\n+                            actions,\n+                            {\"mean\": torch.mean, \"std\": torch.std},\n+                        ),\n                     ),\n-                ),\n-                (\"logged_action\", agg.ActionCountAggregator(\"logged_actions\", actions)),\n-                (\n-                    \"model_action\",\n-                    agg.ActionCountAggregator(\"model_action_idxs\", actions),\n-                ),\n-                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n-            ]\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n-            + [\n-                (f\"{key}_tb\", agg.TensorBoardActionCountAggregator(key, title, actions))\n-                for key, title in [\n-                    (\"logged_actions\", \"logged\"),\n-                    (\"model_action_idxs\", \"model\"),\n-                ]\n-            ]\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n-            + [\n-                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n-                for key, log_key in [\n-                    (\"td_loss\", \"td_loss\"),\n-                    (\"reward_loss\", \"reward_loss\"),\n-                    (\"logged_propensities\", \"propensities/logged\"),\n-                    (\"logged_rewards\", \"reward/logged\"),\n-                ]\n-            ]\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str,\n-            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str,\n-            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n-            + [\n-                (\n-                    f\"{key}_tb\",\n-                    agg.TensorBoardActionHistogramAndMeanAggregator(\n-                        key, category, title, actions\n+                    (\n+                        \"logged_action\",\n+                        agg.ActionCountAggregator(\"logged_actions\", actions),\n                     ),\n-                )\n-                for key, category, title in [\n-                    (\"model_propensities\", \"propensities\", \"model\"),\n-                    (\"model_rewards\", \"reward\", \"model\"),\n-                    (\"model_values\", \"value\", \"model\"),\n-                ]\n-            ]\n+                    (\n+                        \"model_action\",\n+                        agg.ActionCountAggregator(\"model_action_idxs\", actions),\n+                    ),\n+                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n+                ],\n+                [\n+                    (\n+                        f\"{key}_tb\",\n+                        agg.TensorBoardActionCountAggregator(key, title, actions),\n+                    )\n+                    for key, title in [\n+                        (\"logged_actions\", \"logged\"),\n+                        (\"model_action_idxs\", \"model\"),\n+                    ]\n+                ],\n+                [\n+                    (\n+                        f\"{key}_tb\",\n+                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n+                    )\n+                    for key, log_key in [\n+                        (\"td_loss\", \"td_loss\"),\n+                        (\"reward_loss\", \"reward_loss\"),\n+                        (\"logged_propensities\", \"propensities/logged\"),\n+                        (\"logged_rewards\", \"reward/logged\"),\n+                    ]\n+                ],\n+                [\n+                    (\n+                        f\"{key}_tb\",\n+                        agg.TensorBoardActionHistogramAndMeanAggregator(\n+                            key, category, title, actions\n+                        ),\n+                    )\n+                    for key, category, title in [\n+                        (\"model_propensities\", \"propensities\", \"model\"),\n+                        (\"model_rewards\", \"reward\", \"model\"),\n+                        (\"model_values\", \"value\", \"model\"),\n+                    ]\n+                ],\n+            )\n         )\n",
        "source_code_with_indent": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in [\n                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                (\n                    \"model_values\",\n                    agg.FunctionsByActionAggregator(\n                        \"model_values\", actions, {\"mean\": torch.mean, \"std\": torch.std}\n                    ),\n                ),\n                (\"logged_action\", agg.ActionCountAggregator(\"logged_actions\", actions)),\n                (\n                    \"model_action\",\n                    agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                ),\n                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardActionCountAggregator(key, title, actions))\n                for key, title in [\n                    (\"logged_actions\", \"logged\"),\n                    (\"model_action_idxs\", \"model\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n                for key, log_key in [\n                    (\"td_loss\", \"td_loss\"),\n                    (\"reward_loss\", \"reward_loss\"),\n                    (\"logged_propensities\", \"propensities/logged\"),\n                    (\"logged_rewards\", \"reward/logged\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            + [\n                (\n                    f\"{key}_tb\",\n                    agg.TensorBoardActionHistogramAndMeanAggregator(\n                        key, category, title, actions\n                    ),\n                )\n                for key, category, title in [\n                    (\"model_propensities\", \"propensities\", \"model\"),\n                    (\"model_rewards\", \"reward\", \"model\"),\n                    (\"model_values\", \"value\", \"model\"),\n                ]\n            ]\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in itertools.chain(\n                [\n                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                    (\n                        \"model_values\",\n                        agg.FunctionsByActionAggregator(\n                            \"model_values\",\n                            actions,\n                            {\"mean\": torch.mean, \"std\": torch.std},\n                        ),\n                    ),\n                    (\n                        \"logged_action\",\n                        agg.ActionCountAggregator(\"logged_actions\", actions),\n                    ),\n                    (\n                        \"model_action\",\n                        agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                    ),\n                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionCountAggregator(key, title, actions),\n                    )\n                    for key, title in [\n                        (\"logged_actions\", \"logged\"),\n                        (\"model_action_idxs\", \"model\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n                    )\n                    for key, log_key in [\n                        (\"td_loss\", \"td_loss\"),\n                        (\"reward_loss\", \"reward_loss\"),\n                        (\"logged_propensities\", \"propensities/logged\"),\n                        (\"logged_rewards\", \"reward/logged\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionHistogramAndMeanAggregator(\n                            key, category, title, actions\n                        ),\n                    )\n                    for key, category, title in [\n                        (\"model_propensities\", \"propensities\", \"model\"),\n                        (\"model_rewards\", \"reward\", \"model\"),\n                        (\"model_values\", \"value\", \"model\"),\n                    ]\n                ],\n            )\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/ReAgent",
    "commit": "a096f492dcbb9c65badd44c3678b8d0573f0ac55",
    "filename": "reagent/workflow/reporters/discrete_dqn_reporter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-ReAgent/reagent/workflow/reporters/discrete_dqn_reporter.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "reagent/workflow/reporters/discrete_dqn_reporter.py:91:14 Unsupported operand [58]: `+` is not supported for operand types `List[typing.Tuple[str, typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator, agg.MeanAggregator, agg.RecentValuesAggregator]]]` and `List[typing.Tuple[str, agg.TensorBoardActionHistogramAndMeanAggregator]]`.",
    "message": " `+` is not supported for operand types `List[typing.Tuple[str, typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator, agg.MeanAggregator, agg.RecentValuesAggregator]]]` and `List[typing.Tuple[str, agg.TensorBoardActionHistogramAndMeanAggregator]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 91,
    "warning_line": "            + [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport logging\n",
        "source_code_len": 16,
        "target_code": "\nimport itertools\nimport logging\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,2 +2,3 @@\n \n+import itertools\n import logging\n",
        "source_code_with_indent": "\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport itertools\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in [\n                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                (\n                    \"model_values\",\n                    agg.FunctionsByActionAggregator(\n                        \"model_values\", actions, {\"mean\": torch.mean, \"std\": torch.std}\n                    ),\n                ),\n                (\"logged_action\", agg.ActionCountAggregator(\"logged_actions\", actions)),\n                (\n                    \"model_action\",\n                    agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                ),\n                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardActionCountAggregator(key, title, actions))\n                for key, title in [\n                    (\"logged_actions\", \"logged\"),\n                    (\"model_action_idxs\", \"model\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n                for key, log_key in [\n                    (\"td_loss\", \"td_loss\"),\n                    (\"reward_loss\", \"reward_loss\"),\n                    (\"logged_propensities\", \"propensities/logged\"),\n                    (\"logged_rewards\", \"reward/logged\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            + [\n                (\n                    f\"{key}_tb\",\n                    agg.TensorBoardActionHistogramAndMeanAggregator(\n                        key, category, title, actions\n                    ),\n                )\n                for key, category, title in [\n                    (\"model_propensities\", \"propensities\", \"model\"),\n                    (\"model_rewards\", \"reward\", \"model\"),\n                    (\"model_values\", \"value\", \"model\"),\n                ]\n            ]\n        )\n",
        "source_code_len": 3956,
        "target_code": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in itertools.chain(\n                [\n                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                    (\n                        \"model_values\",\n                        agg.FunctionsByActionAggregator(\n                            \"model_values\",\n                            actions,\n                            {\"mean\": torch.mean, \"std\": torch.std},\n                        ),\n                    ),\n                    (\n                        \"logged_action\",\n                        agg.ActionCountAggregator(\"logged_actions\", actions),\n                    ),\n                    (\n                        \"model_action\",\n                        agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                    ),\n                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionCountAggregator(key, title, actions),\n                    )\n                    for key, title in [\n                        (\"logged_actions\", \"logged\"),\n                        (\"model_action_idxs\", \"model\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n                    )\n                    for key, log_key in [\n                        (\"td_loss\", \"td_loss\"),\n                        (\"reward_loss\", \"reward_loss\"),\n                        (\"logged_propensities\", \"propensities/logged\"),\n                        (\"logged_rewards\", \"reward/logged\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionHistogramAndMeanAggregator(\n                            key, category, title, actions\n                        ),\n                    )\n                    for key, category, title in [\n                        (\"model_propensities\", \"propensities\", \"model\"),\n                        (\"model_rewards\", \"reward\", \"model\"),\n                        (\"model_values\", \"value\", \"model\"),\n                    ]\n                ],\n            )\n        )\n",
        "target_code_len": 2477,
        "diff_format": "@@ -32,73 +33,60 @@\n             (name, IntervalAggregatingObserver(report_interval, aggregator))\n-            for name, aggregator in [\n-                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n-                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n-                (\n-                    \"model_values\",\n-                    agg.FunctionsByActionAggregator(\n-                        \"model_values\", actions, {\"mean\": torch.mean, \"std\": torch.std}\n+            for name, aggregator in itertools.chain(\n+                [\n+                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n+                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n+                    (\n+                        \"model_values\",\n+                        agg.FunctionsByActionAggregator(\n+                            \"model_values\",\n+                            actions,\n+                            {\"mean\": torch.mean, \"std\": torch.std},\n+                        ),\n                     ),\n-                ),\n-                (\"logged_action\", agg.ActionCountAggregator(\"logged_actions\", actions)),\n-                (\n-                    \"model_action\",\n-                    agg.ActionCountAggregator(\"model_action_idxs\", actions),\n-                ),\n-                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n-            ]\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n-            + [\n-                (f\"{key}_tb\", agg.TensorBoardActionCountAggregator(key, title, actions))\n-                for key, title in [\n-                    (\"logged_actions\", \"logged\"),\n-                    (\"model_action_idxs\", \"model\"),\n-                ]\n-            ]\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n-            + [\n-                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n-                for key, log_key in [\n-                    (\"td_loss\", \"td_loss\"),\n-                    (\"reward_loss\", \"reward_loss\"),\n-                    (\"logged_propensities\", \"propensities/logged\"),\n-                    (\"logged_rewards\", \"reward/logged\"),\n-                ]\n-            ]\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str,\n-            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n-            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n-            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n-            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n-            #  `List[typing.Tuple[str,\n-            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n-            + [\n-                (\n-                    f\"{key}_tb\",\n-                    agg.TensorBoardActionHistogramAndMeanAggregator(\n-                        key, category, title, actions\n+                    (\n+                        \"logged_action\",\n+                        agg.ActionCountAggregator(\"logged_actions\", actions),\n                     ),\n-                )\n-                for key, category, title in [\n-                    (\"model_propensities\", \"propensities\", \"model\"),\n-                    (\"model_rewards\", \"reward\", \"model\"),\n-                    (\"model_values\", \"value\", \"model\"),\n-                ]\n-            ]\n+                    (\n+                        \"model_action\",\n+                        agg.ActionCountAggregator(\"model_action_idxs\", actions),\n+                    ),\n+                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n+                ],\n+                [\n+                    (\n+                        f\"{key}_tb\",\n+                        agg.TensorBoardActionCountAggregator(key, title, actions),\n+                    )\n+                    for key, title in [\n+                        (\"logged_actions\", \"logged\"),\n+                        (\"model_action_idxs\", \"model\"),\n+                    ]\n+                ],\n+                [\n+                    (\n+                        f\"{key}_tb\",\n+                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n+                    )\n+                    for key, log_key in [\n+                        (\"td_loss\", \"td_loss\"),\n+                        (\"reward_loss\", \"reward_loss\"),\n+                        (\"logged_propensities\", \"propensities/logged\"),\n+                        (\"logged_rewards\", \"reward/logged\"),\n+                    ]\n+                ],\n+                [\n+                    (\n+                        f\"{key}_tb\",\n+                        agg.TensorBoardActionHistogramAndMeanAggregator(\n+                            key, category, title, actions\n+                        ),\n+                    )\n+                    for key, category, title in [\n+                        (\"model_propensities\", \"propensities\", \"model\"),\n+                        (\"model_rewards\", \"reward\", \"model\"),\n+                        (\"model_values\", \"value\", \"model\"),\n+                    ]\n+                ],\n+            )\n         )\n",
        "source_code_with_indent": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in [\n                (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                (\n                    \"model_values\",\n                    agg.FunctionsByActionAggregator(\n                        \"model_values\", actions, {\"mean\": torch.mean, \"std\": torch.std}\n                    ),\n                ),\n                (\"logged_action\", agg.ActionCountAggregator(\"logged_actions\", actions)),\n                (\n                    \"model_action\",\n                    agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                ),\n                (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardActionCountAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardActionCountAggregator(key, title, actions))\n                for key, title in [\n                    (\"logged_actions\", \"logged\"),\n                    (\"model_action_idxs\", \"model\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str, agg.TensorBoardHistogramAndMeanAggregator]]`.\n            + [\n                (f\"{key}_tb\", agg.TensorBoardHistogramAndMeanAggregator(key, log_key))\n                for key, log_key in [\n                    (\"td_loss\", \"td_loss\"),\n                    (\"reward_loss\", \"reward_loss\"),\n                    (\"logged_propensities\", \"propensities/logged\"),\n                    (\"logged_rewards\", \"reward/logged\"),\n                ]\n            ]\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            # pyre-fixme[6]: Expected `List[typing.Tuple[str,\n            #  typing.Union[agg.ActionCountAggregator, agg.FunctionsByActionAggregator,\n            #  agg.MeanAggregator, agg.RecentValuesAggregator]]]` for 1st param but got\n            #  `List[typing.Tuple[str,\n            #  agg.TensorBoardActionHistogramAndMeanAggregator]]`.\n            + [\n                (\n                    f\"{key}_tb\",\n                    agg.TensorBoardActionHistogramAndMeanAggregator(\n                        key, category, title, actions\n                    ),\n                )\n                for key, category, title in [\n                    (\"model_propensities\", \"propensities\", \"model\"),\n                    (\"model_rewards\", \"reward\", \"model\"),\n                    (\"model_values\", \"value\", \"model\"),\n                ]\n            ]\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            (name, IntervalAggregatingObserver(report_interval, aggregator))\n            for name, aggregator in itertools.chain(\n                [\n                    (\"td_loss\", agg.MeanAggregator(\"td_loss\")),\n                    (\"reward_loss\", agg.MeanAggregator(\"reward_loss\")),\n                    (\n                        \"model_values\",\n                        agg.FunctionsByActionAggregator(\n                            \"model_values\",\n                            actions,\n                            {\"mean\": torch.mean, \"std\": torch.std},\n                        ),\n                    ),\n                    (\n                        \"logged_action\",\n                        agg.ActionCountAggregator(\"logged_actions\", actions),\n                    ),\n                    (\n                        \"model_action\",\n                        agg.ActionCountAggregator(\"model_action_idxs\", actions),\n                    ),\n                    (\"recent_rewards\", agg.RecentValuesAggregator(\"logged_rewards\")),\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionCountAggregator(key, title, actions),\n                    )\n                    for key, title in [\n                        (\"logged_actions\", \"logged\"),\n                        (\"model_action_idxs\", \"model\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardHistogramAndMeanAggregator(key, log_key),\n                    )\n                    for key, log_key in [\n                        (\"td_loss\", \"td_loss\"),\n                        (\"reward_loss\", \"reward_loss\"),\n                        (\"logged_propensities\", \"propensities/logged\"),\n                        (\"logged_rewards\", \"reward/logged\"),\n                    ]\n                ],\n                [\n                    (\n                        f\"{key}_tb\",\n                        agg.TensorBoardActionHistogramAndMeanAggregator(\n                            key, category, title, actions\n                        ),\n                    )\n                    for key, category, title in [\n                        (\"model_propensities\", \"propensities\", \"model\"),\n                        (\"model_rewards\", \"reward\", \"model\"),\n                        (\"model_values\", \"value\", \"model\"),\n                    ]\n                ],\n            )\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "facebookresearch/ReAgent",
    "commit": "a096f492dcbb9c65badd44c3678b8d0573f0ac55",
    "filename": "reagent/workflow/reporters/discrete_dqn_reporter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/facebookresearch-ReAgent/reagent/workflow/reporters/discrete_dqn_reporter.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "reagent/workflow/reporters/discrete_dqn_reporter.py:114:14 Unsupported operand [58]: `+` is not supported for operand types `List[ValueListObserver]` and `List[EpochEndObserver]`.",
    "message": " `+` is not supported for operand types `List[ValueListObserver]` and `List[EpochEndObserver]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 114,
    "warning_line": "            + [epoch_end_observer]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport logging\n",
        "source_code_len": 16,
        "target_code": "\nimport itertools\nimport logging\n",
        "target_code_len": 33,
        "diff_format": "@@ -2,2 +2,3 @@\n \n+import itertools\n import logging\n",
        "source_code_with_indent": "\nimport logging\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport itertools\nimport logging\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        super().__init__(\n            list(self.value_list_observers.values())\n            + list(self.aggregating_observers.values())\n            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n            #  got `List[EpochEndObserver]`.\n            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n            #  got `List[EpochEndObserver]`.\n            + [epoch_end_observer]\n        )\n",
        "source_code_len": 434,
        "target_code": "        super().__init__(\n            itertools.chain(\n                self.value_list_observers.values(),\n                self.aggregating_observers.values(),\n                [epoch_end_observer],\n            )\n        )\n",
        "target_code_len": 222,
        "diff_format": "@@ -107,9 +95,7 @@\n         super().__init__(\n-            list(self.value_list_observers.values())\n-            + list(self.aggregating_observers.values())\n-            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n-            #  got `List[EpochEndObserver]`.\n-            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n-            #  got `List[EpochEndObserver]`.\n-            + [epoch_end_observer]\n+            itertools.chain(\n+                self.value_list_observers.values(),\n+                self.aggregating_observers.values(),\n+                [epoch_end_observer],\n+            )\n         )\n",
        "source_code_with_indent": "        super().__init__(\n            list(self.value_list_observers.values())\n            + list(self.aggregating_observers.values())\n            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n            #  got `List[EpochEndObserver]`.\n            # pyre-fixme[6]: Expected `List[ValueListObserver]` for 1st param but\n            #  got `List[EpochEndObserver]`.\n            + [epoch_end_observer]\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        super().__init__(\n            itertools.chain(\n                self.value_list_observers.values(),\n                self.aggregating_observers.values(),\n                [epoch_end_observer],\n            )\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]