[
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/actor/client/proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/actor/client/proxy.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/actor/client/proxy.py:36:38 Incompatible parameter type [6]: Expected `ActorId` for 4th positional only parameter to call `ActorProxy.__init__` but got `str`.",
    "message": " Expected `ActorId` for 4th positional only parameter to call `ActorProxy.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "                          actor_type, actor_id, self._message_serializer)"
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/actor/client/proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/actor/client/proxy.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/actor/client/proxy.py:139:59 Incompatible parameter type [6]: Expected `bytes` for 4th positional only parameter to call `dapr.clients.base.DaprActorClientBase.invoke_method` but got `Optional[bytes]`.",
    "message": " Expected `bytes` for 4th positional only parameter to call `dapr.clients.base.DaprActorClientBase.invoke_method` but got `Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 139,
    "warning_line": "            self._actor_type, str(self._actor_id), method, raw_body)"
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/actor/client/proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/actor/client/proxy.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/actor/client/proxy.py:159:50 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 1st positional only parameter to call `get_dispatchable_attrs_from_interface` but got `ActorInterface`.",
    "message": " Expected `typing.Type[typing.Any]` for 1st positional only parameter to call `get_dispatchable_attrs_from_interface` but got `ActorInterface`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 159,
    "warning_line": "            get_dispatchable_attrs_from_interface(self._actor_interface, self._dispatchable_attr)"
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/actor/runtime/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/actor/runtime/manager.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/actor/runtime/manager.py:66:12 Incompatible return type [7]: Expected `bytes` but got `None`.",
    "message": " Expected `bytes` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 66,
    "warning_line": "            return None"
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/actor/runtime/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/actor/runtime/manager.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/actor/runtime/manager.py:73:12 Incompatible return type [7]: Expected `bytes` but got `None`.",
    "message": " Expected `bytes` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 73,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Awaitable, Callable\n\n",
        "source_code_len": 41,
        "target_code": "\nfrom typing import Any, Callable, Coroutine, Dict, Optional\n\n",
        "target_code_len": 62,
        "diff_format": "@@ -9,3 +9,3 @@\n \n-from typing import Awaitable, Callable\n+from typing import Any, Callable, Coroutine, Dict, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Awaitable, Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Callable, Coroutine, Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    async def fire_timer(self, actor_id: ActorId, timer_name: str) -> None:\n        async def invoke_timer(actor: Actor) -> bytes:\n            await actor._fire_timer_internal(timer_name)\n",
        "source_code_len": 188,
        "target_code": "    async def fire_timer(self, actor_id: ActorId, timer_name: str) -> None:\n        async def invoke_timer(actor: Actor) -> Optional[bytes]:\n            await actor._fire_timer_internal(timer_name)\n",
        "target_code_len": 198,
        "diff_format": "@@ -70,3 +73,3 @@\n     async def fire_timer(self, actor_id: ActorId, timer_name: str) -> None:\n-        async def invoke_timer(actor: Actor) -> bytes:\n+        async def invoke_timer(actor: Actor) -> Optional[bytes]:\n             await actor._fire_timer_internal(timer_name)\n",
        "source_code_with_indent": "    <DED>async def fire_timer(self, actor_id: ActorId, timer_name: str) -> None:\n        <IND>async def invoke_timer(actor: Actor) -> bytes:\n            <IND>await actor._fire_timer_internal(timer_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>async def fire_timer(self, actor_id: ActorId, timer_name: str) -> None:\n        <IND>async def invoke_timer(actor: Actor) -> Optional[bytes]:\n            <IND>await actor._fire_timer_internal(timer_name)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, actor_id: ActorId, method_context: ActorMethodContext,\n            dispatch_action: Callable[[Actor], Awaitable[bytes]]) -> object:\n        actor = None\n",
        "source_code_len": 171,
        "target_code": "            self, actor_id: ActorId, method_context: ActorMethodContext,\n            dispatch_action: Callable[[Actor], Coroutine[Any, Any, Optional[bytes]]]) -> object:\n        actor = None\n",
        "target_code_len": 191,
        "diff_format": "@@ -102,3 +105,3 @@\n             self, actor_id: ActorId, method_context: ActorMethodContext,\n-            dispatch_action: Callable[[Actor], Awaitable[bytes]]) -> object:\n+            dispatch_action: Callable[[Actor], Coroutine[Any, Any, Optional[bytes]]]) -> object:\n         actor = None\n",
        "source_code_with_indent": "            self, actor_id: ActorId, method_context: ActorMethodContext,\n            dispatch_action: Callable[[Actor], Awaitable[bytes]]) -> object:\n        <IND>actor = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, actor_id: ActorId, method_context: ActorMethodContext,\n            dispatch_action: Callable[[Actor], Coroutine[Any, Any, Optional[bytes]]]) -> object:\n        <IND>actor = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/actor/runtime/runtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/actor/runtime/runtime.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/actor/runtime/runtime.py:45:48 Incompatible parameter type [6]: Expected `typing.Type[typing.Any]` for 1st positional only parameter to call `ActorTypeInformation.create` but got `Actor`.",
    "message": " Expected `typing.Type[typing.Any]` for 1st positional only parameter to call `ActorTypeInformation.create` but got `Actor`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 45,
    "warning_line": "        type_info = ActorTypeInformation.create(actor)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom typing import Dict, List, Optional, Type\n\n",
        "target_code_len": 48,
        "diff_format": "@@ -9,3 +9,3 @@\n \n-from typing import List\n+from typing import Dict, List, Optional, Type\n \n",
        "source_code_with_indent": "\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, List, Optional, Type\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    async def register_actor(\n            cls, actor: Actor,\n            message_serializer: Serializer = DefaultJSONSerializer(),\n",
        "source_code_len": 131,
        "target_code": "    async def register_actor(\n            cls, actor: Type[Actor],\n            message_serializer: Serializer = DefaultJSONSerializer(),\n",
        "target_code_len": 137,
        "diff_format": "@@ -33,3 +33,3 @@\n     async def register_actor(\n-            cls, actor: Actor,\n+            cls, actor: Type[Actor],\n             message_serializer: Serializer = DefaultJSONSerializer(),\n",
        "source_code_with_indent": "    async def register_actor(\n            cls, actor: Actor,\n            message_serializer: Serializer = DefaultJSONSerializer(),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    async def register_actor(\n            cls, actor: Type[Actor],\n            message_serializer: Serializer = DefaultJSONSerializer(),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/actor/runtime/state_manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/actor/runtime/state_manager.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/actor/runtime/state_manager.py:79:16 Incompatible return type [7]: Expected `Tuple[bool, Variable[T]]` but got `Tuple[bool, None]`.",
    "message": " Expected `Tuple[bool, Variable[T]]` but got `Tuple[bool, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 79,
    "warning_line": "                return False, None"
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/actor/runtime/state_provider.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/actor/runtime/state_provider.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/actor/runtime/state_provider.py:38:12 Incompatible return type [7]: Expected `Tuple[bool, Variable[T]]` but got `Tuple[bool, None]`.",
    "message": " Expected `Tuple[bool, Variable[T]]` but got `Tuple[bool, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 38,
    "warning_line": "            return (False, None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Generic, List, TypeVar, Tuple\nfrom dapr.actor.runtime.state_change import StateChangeKind, ActorStateChange\n",
        "source_code_len": 128,
        "target_code": "\nfrom typing import Any, List, Type, Tuple\nfrom dapr.actor.runtime.state_change import StateChangeKind, ActorStateChange\n",
        "target_code_len": 121,
        "diff_format": "@@ -9,3 +9,3 @@\n \n-from typing import Generic, List, TypeVar, Tuple\n+from typing import Any, List, Type, Tuple\n from dapr.actor.runtime.state_change import StateChangeKind, ActorStateChange\n",
        "source_code_with_indent": "\nfrom typing import Generic, List, TypeVar, Tuple\nfrom dapr.actor.runtime.state_change import StateChangeKind, ActorStateChange\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, List, Type, Tuple\nfrom dapr.actor.runtime.state_change import StateChangeKind, ActorStateChange\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\nT = TypeVar('T')\n\n",
        "source_code_len": 19,
        "target_code": "\n\n",
        "target_code_len": 2,
        "diff_format": "@@ -14,3 +14,2 @@\n \n-T = TypeVar('T')\n \n",
        "source_code_with_indent": "\nT = TypeVar('T')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass StateProvider(Generic[T]):\n    def __init__(\n",
        "source_code_len": 52,
        "target_code": "\nclass StateProvider:\n    def __init__(\n",
        "target_code_len": 40,
        "diff_format": "@@ -24,3 +23,3 @@\n \n-class StateProvider(Generic[T]):\n+class StateProvider:\n     def __init__(\n",
        "source_code_with_indent": "\nclass StateProvider(Generic[T]):\n    <IND>def __init__(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass StateProvider:\n    <IND>def __init__(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, actor_type: str, actor_id: str,\n            state_name: str) -> Tuple[bool, T]:\n        raw_state_value = await self._state_client.get_state(actor_type, actor_id, state_name)\n",
        "source_code_len": 193,
        "target_code": "            self, actor_type: str, actor_id: str,\n            state_name: str, state_type: Type[Any] = object) -> Tuple[bool, Any]:\n        raw_state_value = await self._state_client.get_state(actor_type, actor_id, state_name)\n",
        "target_code_len": 227,
        "diff_format": "@@ -34,3 +33,3 @@\n             self, actor_type: str, actor_id: str,\n-            state_name: str) -> Tuple[bool, T]:\n+            state_name: str, state_type: Type[Any] = object) -> Tuple[bool, Any]:\n         raw_state_value = await self._state_client.get_state(actor_type, actor_id, state_name)\n",
        "source_code_with_indent": "            self, actor_type: str, actor_id: str,\n            state_name: str) -> Tuple[bool, T]:\n        <IND>raw_state_value = await self._state_client.get_state(actor_type, actor_id, state_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, actor_type: str, actor_id: str,\n            state_name: str, state_type: Type[Any] = object) -> Tuple[bool, Any]:\n        <IND>raw_state_value = await self._state_client.get_state(actor_type, actor_id, state_name)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return (False, None)\n        result = self._state_serializer.deserialize(raw_state_value, T)\n        return (True, result)\n",
        "source_code_len": 135,
        "target_code": "            return (False, None)\n        result = self._state_serializer.deserialize(raw_state_value, state_type)\n        return (True, result)\n",
        "target_code_len": 144,
        "diff_format": "@@ -38,3 +37,3 @@\n             return (False, None)\n-        result = self._state_serializer.deserialize(raw_state_value, T)\n+        result = self._state_serializer.deserialize(raw_state_value, state_type)\n         return (True, result)\n",
        "source_code_with_indent": "            <IND>return (False, None)\n        <DED>result = self._state_serializer.deserialize(raw_state_value, T)\n        return (True, result)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return (False, None)\n        <DED>result = self._state_serializer.deserialize(raw_state_value, state_type)\n        return (True, result)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/clients/http/dapr_actor_http_client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/clients/http/dapr_actor_http_client.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/clients/http/dapr_actor_http_client.py:65:61 Incompatible parameter type [6]: Expected `bytes` for 3rd parameter `data` to call `DaprActorHttpClient._send_bytes` but got `None`.",
    "message": " Expected `bytes` for 3rd parameter `data` to call `DaprActorHttpClient._send_bytes` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 65,
    "warning_line": "        return await self._send_bytes(method='GET', url=url, data=None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import aiohttp\n\n",
        "source_code_len": 16,
        "target_code": "import aiohttp\n\nfrom typing import Dict, Optional\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -7,2 +7,4 @@\n import aiohttp\n+\n+from typing import Dict, Optional\n \n",
        "source_code_with_indent": "import aiohttp\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import aiohttp\n\nfrom typing import Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, method: str, url: str,\n            data: bytes, headers: dict = {}) -> bytes:\n        if not headers.get(CONTENT_TYPE_HEADER):\n",
        "source_code_len": 145,
        "target_code": "            self, method: str, url: str,\n            data: Optional[bytes], headers: Dict[str, str] = {}) -> bytes:\n        if not headers.get(CONTENT_TYPE_HEADER):\n",
        "target_code_len": 165,
        "diff_format": "@@ -121,3 +123,3 @@\n             self, method: str, url: str,\n-            data: bytes, headers: dict = {}) -> bytes:\n+            data: Optional[bytes], headers: Dict[str, str] = {}) -> bytes:\n         if not headers.get(CONTENT_TYPE_HEADER):\n",
        "source_code_with_indent": "            self, method: str, url: str,\n            data: bytes, headers: dict = {}) -> bytes:\n        <IND>if not headers.get(CONTENT_TYPE_HEADER):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, method: str, url: str,\n            data: Optional[bytes], headers: Dict[str, str] = {}) -> bytes:\n        <IND>if not headers.get(CONTENT_TYPE_HEADER):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/clients/http/dapr_actor_http_client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/clients/http/dapr_actor_http_client.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/clients/http/dapr_actor_http_client.py:88:57 Incompatible parameter type [6]: Expected `bytes` for 3rd parameter `data` to call `DaprActorHttpClient._send_bytes` but got `None`.",
    "message": " Expected `bytes` for 3rd parameter `data` to call `DaprActorHttpClient._send_bytes` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "        await self._send_bytes(method='DELETE', url=url, data=None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import aiohttp\n\n",
        "source_code_len": 16,
        "target_code": "import aiohttp\n\nfrom typing import Dict, Optional\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -7,2 +7,4 @@\n import aiohttp\n+\n+from typing import Dict, Optional\n \n",
        "source_code_with_indent": "import aiohttp\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import aiohttp\n\nfrom typing import Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, method: str, url: str,\n            data: bytes, headers: dict = {}) -> bytes:\n        if not headers.get(CONTENT_TYPE_HEADER):\n",
        "source_code_len": 145,
        "target_code": "            self, method: str, url: str,\n            data: Optional[bytes], headers: Dict[str, str] = {}) -> bytes:\n        if not headers.get(CONTENT_TYPE_HEADER):\n",
        "target_code_len": 165,
        "diff_format": "@@ -121,3 +123,3 @@\n             self, method: str, url: str,\n-            data: bytes, headers: dict = {}) -> bytes:\n+            data: Optional[bytes], headers: Dict[str, str] = {}) -> bytes:\n         if not headers.get(CONTENT_TYPE_HEADER):\n",
        "source_code_with_indent": "            self, method: str, url: str,\n            data: bytes, headers: dict = {}) -> bytes:\n        <IND>if not headers.get(CONTENT_TYPE_HEADER):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, method: str, url: str,\n            data: Optional[bytes], headers: Dict[str, str] = {}) -> bytes:\n        <IND>if not headers.get(CONTENT_TYPE_HEADER):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/clients/http/dapr_actor_http_client.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/clients/http/dapr_actor_http_client.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/clients/http/dapr_actor_http_client.py:111:57 Incompatible parameter type [6]: Expected `bytes` for 3rd parameter `data` to call `DaprActorHttpClient._send_bytes` but got `None`.",
    "message": " Expected `bytes` for 3rd parameter `data` to call `DaprActorHttpClient._send_bytes` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 111,
    "warning_line": "        await self._send_bytes(method='DELETE', url=url, data=None)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import aiohttp\n\n",
        "source_code_len": 16,
        "target_code": "import aiohttp\n\nfrom typing import Dict, Optional\n\n",
        "target_code_len": 51,
        "diff_format": "@@ -7,2 +7,4 @@\n import aiohttp\n+\n+from typing import Dict, Optional\n \n",
        "source_code_with_indent": "import aiohttp\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import aiohttp\n\nfrom typing import Dict, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, method: str, url: str,\n            data: bytes, headers: dict = {}) -> bytes:\n        if not headers.get(CONTENT_TYPE_HEADER):\n",
        "source_code_len": 145,
        "target_code": "            self, method: str, url: str,\n            data: Optional[bytes], headers: Dict[str, str] = {}) -> bytes:\n        if not headers.get(CONTENT_TYPE_HEADER):\n",
        "target_code_len": 165,
        "diff_format": "@@ -121,3 +123,3 @@\n             self, method: str, url: str,\n-            data: bytes, headers: dict = {}) -> bytes:\n+            data: Optional[bytes], headers: Dict[str, str] = {}) -> bytes:\n         if not headers.get(CONTENT_TYPE_HEADER):\n",
        "source_code_with_indent": "            self, method: str, url: str,\n            data: bytes, headers: dict = {}) -> bytes:\n        <IND>if not headers.get(CONTENT_TYPE_HEADER):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, method: str, url: str,\n            data: Optional[bytes], headers: Dict[str, str] = {}) -> bytes:\n        <IND>if not headers.get(CONTENT_TYPE_HEADER):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/serializers/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/serializers/json.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/serializers/json.py:26:4 Inconsistent override [14]: `dapr.serializers.json.DefaultJSONSerializer.serialize` overrides method defined in `Serializer` inconsistently. Parameter of type `typing.Callable[[object], typing.Dict[typing.Any, typing.Any]]` is not a supertype of the overridden parameter `typing.Callable[[object], bytes]`.",
    "message": " `dapr.serializers.json.DefaultJSONSerializer.serialize` overrides method defined in `Serializer` inconsistently. Parameter of type `typing.Callable[[object], typing.Dict[typing.Any, typing.Any]]` is not a supertype of the overridden parameter `typing.Callable[[object], bytes]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 26,
    "warning_line": "    def serialize(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Callable\nfrom dateutil import parser\n",
        "source_code_len": 57,
        "target_code": "\nfrom typing import Callable, Optional\nfrom dateutil import parser\n",
        "target_code_len": 67,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-from typing import Callable\n+from typing import Callable, Optional\n from dateutil import parser\n",
        "source_code_with_indent": "\nfrom typing import Callable\nfrom dateutil import parser\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Callable, Optional\nfrom dateutil import parser\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, obj: object,\n            custom_hook: Callable[[object], dict] = None) -> bytes:\n\n",
        "source_code_len": 100,
        "target_code": "            self, obj: object,\n            custom_hook: Optional[Callable[[object], bytes]] = None) -> bytes:\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -27,3 +27,3 @@\n             self, obj: object,\n-            custom_hook: Callable[[object], dict] = None) -> bytes:\n+            custom_hook: Optional[Callable[[object], bytes]] = None) -> bytes:\n \n",
        "source_code_with_indent": "            self, obj: object,\n            custom_hook: Callable[[object], dict] = None) -> bytes:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, obj: object,\n            custom_hook: Optional[Callable[[object], bytes]] = None) -> bytes:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/serializers/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/serializers/json.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/serializers/json.py:28:12 Incompatible variable type [9]: custom_hook is declared to have type `typing.Callable[[object], typing.Dict[typing.Any, typing.Any]]` but is used as type `None`.",
    "message": " custom_hook is declared to have type `typing.Callable[[object], typing.Dict[typing.Any, typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 28,
    "warning_line": "            custom_hook: Callable[[object], dict] = None) -> bytes:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Callable\nfrom dateutil import parser\n",
        "source_code_len": 57,
        "target_code": "\nfrom typing import Callable, Optional\nfrom dateutil import parser\n",
        "target_code_len": 67,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-from typing import Callable\n+from typing import Callable, Optional\n from dateutil import parser\n",
        "source_code_with_indent": "\nfrom typing import Callable\nfrom dateutil import parser\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Callable, Optional\nfrom dateutil import parser\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, obj: object,\n            custom_hook: Callable[[object], dict] = None) -> bytes:\n\n",
        "source_code_len": 100,
        "target_code": "            self, obj: object,\n            custom_hook: Optional[Callable[[object], bytes]] = None) -> bytes:\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -27,3 +27,3 @@\n             self, obj: object,\n-            custom_hook: Callable[[object], dict] = None) -> bytes:\n+            custom_hook: Optional[Callable[[object], bytes]] = None) -> bytes:\n \n",
        "source_code_with_indent": "            self, obj: object,\n            custom_hook: Callable[[object], dict] = None) -> bytes:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, obj: object,\n            custom_hook: Optional[Callable[[object], bytes]] = None) -> bytes:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "dapr/serializers/json.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/dapr/serializers/json.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "dapr/serializers/json.py:44:12 Incompatible variable type [9]: custom_hook is declared to have type `typing.Callable[[bytes], object]` but is used as type `None`.",
    "message": " custom_hook is declared to have type `typing.Callable[[bytes], object]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "            custom_hook: Callable[[bytes], object] = None) -> object:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Callable\nfrom dateutil import parser\n",
        "source_code_len": 57,
        "target_code": "\nfrom typing import Callable, Optional\nfrom dateutil import parser\n",
        "target_code_len": 67,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-from typing import Callable\n+from typing import Callable, Optional\n from dateutil import parser\n",
        "source_code_with_indent": "\nfrom typing import Callable\nfrom dateutil import parser\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Callable, Optional\nfrom dateutil import parser\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, data: bytes, data_type: type = object,\n            custom_hook: Callable[[bytes], object] = None) -> object:\n\n",
        "source_code_len": 128,
        "target_code": "            self, data: bytes, data_type: type = object,\n            custom_hook: Optional[Callable[[bytes], object]] = None) -> object:\n\n",
        "target_code_len": 138,
        "diff_format": "@@ -43,3 +43,3 @@\n             self, data: bytes, data_type: type = object,\n-            custom_hook: Callable[[bytes], object] = None) -> object:\n+            custom_hook: Optional[Callable[[bytes], object]] = None) -> object:\n \n",
        "source_code_with_indent": "            self, data: bytes, data_type: type = object,\n            custom_hook: Callable[[bytes], object] = None) -> object:\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            self, data: bytes, data_type: type = object,\n            custom_hook: Optional[Callable[[bytes], object]] = None) -> object:\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "examples/demo_actor/service/app.py",
    "min_patch_found": false,
    "full_warning_msg": "examples/demo_actor/service/app.py:16:21 Incompatible parameter type [6]: Expected `dapr.actor.runtime.actor.Actor` for 1st positional only parameter to call `DaprActor.register_actor` but got `typing.Type[DemoActor]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "dapr/python-sdk",
    "commit": "2682d2e99ad8d63bc30eaff61fd7f4c6bdc729cd",
    "filename": "flask_dapr/actor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dapr-python-sdk/flask_dapr/actor.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "flask_dapr/actor.py:156:40 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 156,
    "warning_line": "            response_obj['errorCode'] = error_code",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        }\n        if not (status >= 200 and status < 300):\n            response_obj['errorCode'] = error_code\n",
        "source_code_len": 110,
        "target_code": "        }\n        if not (status >= 200 and status < 300) and error_code:\n            response_obj['errorCode'] = error_code\n",
        "target_code_len": 125,
        "diff_format": "@@ -154,3 +154,3 @@\n         }\n-        if not (status >= 200 and status < 300):\n+        if not (status >= 200 and status < 300) and error_code:\n             response_obj['errorCode'] = error_code\n",
        "source_code_with_indent": "        }\n        if not (status >= 200 and status < 300):\n            <IND>response_obj['errorCode'] = error_code\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        }\n        if not (status >= 200 and status < 300) and error_code:\n            <IND>response_obj['errorCode'] = error_code\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]