[
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/daemon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/daemon.py",
    "file_hunks_size": 23,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/daemon.py:118:30 Unsupported operand [58]: `<` is not supported for operand types `None` and `float`.",
    "message": " `<` is not supported for operand types `None` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 118,
    "warning_line": "        if not create_time or create_time < time.time() - 1.0:"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/daemon.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/daemon.py",
    "file_hunks_size": 23,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/daemon.py:193:41 Incompatible parameter type [6]: Expected `str` for 4th parameter `password` to call `AiohttpServer.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 4th parameter `password` to call `AiohttpServer.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 193,
    "warning_line": "                                         password=password)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/gui/qt/invoice_dialog.py",
    "min_patch_found": false,
    "full_warning_msg": "electrumsv/gui/qt/invoice_dialog.py:36:49 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `PaymentRequest.from_json` but got `bytes`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/gui/qt/invoice_list.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/invoice_list.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/invoice_list.py:163:30 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `InvoiceList._start_timer` but got `float`.",
    "message": " Expected `int` for 1st positional only parameter to call `InvoiceList._start_timer` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 163,
    "warning_line": "            self._start_timer(nearest_expiry_time)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _start_timer(self, event_time: int) -> None:\n        seconds = math.ceil(event_time - time.time())\n        assert seconds > 0, f\"got invalid timer duration {seconds}\"\n        logger.debug(\"start_timer for %d seconds\", seconds)\n        interval = seconds * 1000\n",
        "source_code_len": 270,
        "target_code": "\n    def _start_timer(self, event_time: float) -> None:\n        seconds = math.ceil(event_time - time.time())\n        assert seconds > 0, f\"got invalid timer duration {seconds}\"\n        # logger.debug(\"start_timer for %d seconds\", seconds)\n        interval = seconds * 1000\n",
        "target_code_len": 274,
        "diff_format": "@@ -84,6 +84,6 @@\n \n-    def _start_timer(self, event_time: int) -> None:\n+    def _start_timer(self, event_time: float) -> None:\n         seconds = math.ceil(event_time - time.time())\n         assert seconds > 0, f\"got invalid timer duration {seconds}\"\n-        logger.debug(\"start_timer for %d seconds\", seconds)\n+        # logger.debug(\"start_timer for %d seconds\", seconds)\n         interval = seconds * 1000\n",
        "source_code_with_indent": "\n    <DED>def _start_timer(self, event_time: int) -> None:\n        <IND>seconds = math.ceil(event_time - time.time())\n        assert seconds > 0, f\"got invalid timer duration {seconds}\"\n        logger.debug(\"start_timer for %d seconds\", seconds)\n        interval = seconds * 1000\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _start_timer(self, event_time: float) -> None:\n        <IND>seconds = math.ceil(event_time - time.time())\n        assert seconds > 0, f\"got invalid timer duration {seconds}\"\n        # logger.debug(\"start_timer for %d seconds\", seconds)\n        interval = seconds * 1000\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/gui/qt/main_window.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/main_window.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/main_window.py:354:46 Incompatible parameter type [6]: Expected `AbstractAccount` for 2nd positional only parameter to call `Wallet.create_gui_handler` but got `Optional[AbstractAccount]`.",
    "message": " Expected `AbstractAccount` for 2nd positional only parameter to call `Wallet.create_gui_handler` but got `Optional[AbstractAccount]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 354,
    "warning_line": "        self._wallet.create_gui_handler(self, account)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        account = self._wallet.get_account(new_account_id)\n\n",
        "source_code_len": 60,
        "target_code": "        account = self._wallet.get_account(new_account_id)\n        assert account is not None\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -348,2 +351,3 @@\n         account = self._wallet.get_account(new_account_id)\n+        assert account is not None\n \n",
        "source_code_with_indent": "        <IND>account = self._wallet.get_account(new_account_id)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>account = self._wallet.get_account(new_account_id)\n        assert account is not None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/gui/qt/main_window.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/main_window.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/main_window.py:357:32 Incompatible parameter type [6]: Expected `AbstractAccount` for 1st positional only parameter to call `ElectrumWindow.set_active_account` but got `Optional[AbstractAccount]`.",
    "message": " Expected `AbstractAccount` for 1st positional only parameter to call `ElectrumWindow.set_active_account` but got `Optional[AbstractAccount]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 357,
    "warning_line": "        self.set_active_account(account)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        account = self._wallet.get_account(new_account_id)\n\n",
        "source_code_len": 60,
        "target_code": "        account = self._wallet.get_account(new_account_id)\n        assert account is not None\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -348,2 +351,3 @@\n         account = self._wallet.get_account(new_account_id)\n+        assert account is not None\n \n",
        "source_code_with_indent": "        <IND>account = self._wallet.get_account(new_account_id)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>account = self._wallet.get_account(new_account_id)\n        assert account is not None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/gui/qt/send_view.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/send_view.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/send_view.py:565:35 Incompatible parameter type [6]: Expected `electrumsv.wallet.DeterministicAccount` for 1st positional only parameter to call `PaymentRequest.send_payment` but got `Optional[AbstractAccount]`.",
    "message": " Expected `electrumsv.wallet.DeterministicAccount` for 1st positional only parameter to call `PaymentRequest.send_payment` but got `Optional[AbstractAccount]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 565,
    "warning_line": "            if not pr.send_payment(self._account, str(tx)):"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/gui/qt/wallet_wizard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/wallet_wizard.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/wallet_wizard.py:519:8 Incompatible variable type [9]: password is declared to have type `str` but is used as type `None`.",
    "message": " password is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 519,
    "warning_line": "        password: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        password: str = None\n        wizard: WalletWizard = self.wizard()\n",
        "source_code_len": 75,
        "target_code": "\n        password: Optional[str] = None\n        wizard: WalletWizard = self.wizard()\n",
        "target_code_len": 85,
        "diff_format": "@@ -518,3 +531,3 @@\n \n-        password: str = None\n+        password: Optional[str] = None\n         wizard: WalletWizard = self.wizard()\n",
        "source_code_with_indent": "\n        <DED>password: str = None\n        wizard: WalletWizard = self.wizard()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>password: Optional[str] = None\n        wizard: WalletWizard = self.wizard()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/gui/qt/wallet_wizard.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/gui/qt/wallet_wizard.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/gui/qt/wallet_wizard.py:523:12 Incompatible variable type [9]: password is declared to have type `str` but is used as type `Optional[str]`.",
    "message": " password is declared to have type `str` but is used as type `Optional[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 523,
    "warning_line": "            password = request_password(self, storage, entry)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        password: str = None\n        wizard: WalletWizard = self.wizard()\n",
        "source_code_len": 75,
        "target_code": "\n        password: Optional[str] = None\n        wizard: WalletWizard = self.wizard()\n",
        "target_code_len": 85,
        "diff_format": "@@ -518,3 +531,3 @@\n \n-        password: str = None\n+        password: Optional[str] = None\n         wizard: WalletWizard = self.wizard()\n",
        "source_code_with_indent": "\n        <DED>password: str = None\n        wizard: WalletWizard = self.wizard()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>password: Optional[str] = None\n        wizard: WalletWizard = self.wizard()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_account.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_account.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_account.py:43:34 Unsupported operand [58]: `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "message": " `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 43,
    "warning_line": "    account.derive_new_keys_until(RECEIVING_SUBPATH + (2,))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_account.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_account.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_account.py:62:34 Unsupported operand [58]: `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "message": " `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 62,
    "warning_line": "    account.derive_new_keys_until(RECEIVING_SUBPATH + (10,))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_account.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_account.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_account.py:96:34 Unsupported operand [58]: `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "message": " `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 96,
    "warning_line": "    account.derive_new_keys_until(RECEIVING_SUBPATH + (0,))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_account.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_account.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_account.py:97:34 Unsupported operand [58]: `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "message": " `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 97,
    "warning_line": "    account.derive_new_keys_until(CHANGE_SUBPATH + (9,))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:80:4 Incompatible variable type [9]: account is declared to have type `StandardAccount` but is used as type `electrumsv.wallet.AbstractAccount`.",
    "message": " account is declared to have type `StandardAccount` but is used as type `electrumsv.wallet.AbstractAccount`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 80,
    "warning_line": "    account: StandardAccount = wallet.get_accounts()[0]"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:117:4 Incompatible variable type [9]: account is declared to have type `ImportedPrivkeyAccount` but is used as type `electrumsv.wallet.AbstractAccount`.",
    "message": " account is declared to have type `ImportedPrivkeyAccount` but is used as type `electrumsv.wallet.AbstractAccount`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 117,
    "warning_line": "    account: ImportedPrivkeyAccount = wallet.get_accounts()[0]"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:139:4 Incompatible variable type [9]: account is declared to have type `ImportedAddressAccount` but is used as type `electrumsv.wallet.AbstractAccount`.",
    "message": " account is declared to have type `ImportedAddressAccount` but is used as type `electrumsv.wallet.AbstractAccount`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 139,
    "warning_line": "    account: ImportedAddressAccount = wallet.get_accounts()[0]"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:147:4 Incompatible variable type [9]: account is declared to have type `MultisigAccount` but is used as type `electrumsv.wallet.AbstractAccount`.",
    "message": " account is declared to have type `MultisigAccount` but is used as type `electrumsv.wallet.AbstractAccount`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 147,
    "warning_line": "    account: MultisigAccount = wallet.get_accounts()[0]"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:241:50 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 241,
    "warning_line": "        local_last_index = unpack_derivation_path(local_last_row.derivation_data2)[-1]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        local_last_row = keyinstances[-1]\n        local_last_index = unpack_derivation_path(local_last_row.derivation_data2)[-1]\n",
        "source_code_len": 129,
        "target_code": "        local_last_row = keyinstances[-1]\n        assert local_last_row.derivation_data2 is not None\n        local_last_index = unpack_derivation_path(local_last_row.derivation_data2)[-1]\n",
        "target_code_len": 188,
        "diff_format": "@@ -240,2 +237,3 @@\n         local_last_row = keyinstances[-1]\n+        assert local_last_row.derivation_data2 is not None\n         local_last_index = unpack_derivation_path(local_last_row.derivation_data2)[-1]\n",
        "source_code_with_indent": "        <IND>local_last_row = keyinstances[-1]\n        local_last_index = unpack_derivation_path(local_last_row.derivation_data2)[-1]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>local_last_row = keyinstances[-1]\n        assert local_last_row.derivation_data2 is not None\n        local_last_index = unpack_derivation_path(local_last_row.derivation_data2)[-1]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:248:16 Unsupported operand [58]: `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "message": " `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 248,
    "warning_line": "                RECEIVING_SUBPATH + (last_allocation_index,))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:253:12 Unsupported operand [58]: `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "message": " `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 253,
    "warning_line": "            RECEIVING_SUBPATH + (last_allocation_index,))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:255:19 Incompatible parameter type [6]: Expected `List[KeyInstanceRow]` for 1st positional only parameter to anonymous call but got `typing.Sequence[KeyInstanceRow]`.",
    "message": " Expected `List[KeyInstanceRow]` for 1st positional only parameter to anonymous call but got `typing.Sequence[KeyInstanceRow]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 255,
    "warning_line": "        check_rows(new_keyinstances, account_script_type)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:331:12 Incompatible parameter type [6]: Expected `Set[str]` for 3rd positional only parameter to call `Wallet.create_account_from_text_entries` but got `List[str]`.",
    "message": " Expected `Set[str]` for 3rd positional only parameter to call `Wallet.create_account_from_text_entries` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 331,
    "warning_line": "            [ \"KzMFjMC2MPadjvX5Cd7b8AKKjjpBSoRKUTpoAtN6B3J9ezWYyXS6\" ],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            ScriptType.P2PKH,\n            [ \"KzMFjMC2MPadjvX5Cd7b8AKKjjpBSoRKUTpoAtN6B3J9ezWYyXS6\" ],\n            \"password\")\n",
        "source_code_len": 126,
        "target_code": "            ScriptType.P2PKH,\n            { \"KzMFjMC2MPadjvX5Cd7b8AKKjjpBSoRKUTpoAtN6B3J9ezWYyXS6\" },\n            \"password\")\n",
        "target_code_len": 126,
        "diff_format": "@@ -330,3 +338,3 @@\n             ScriptType.P2PKH,\n-            [ \"KzMFjMC2MPadjvX5Cd7b8AKKjjpBSoRKUTpoAtN6B3J9ezWYyXS6\" ],\n+            { \"KzMFjMC2MPadjvX5Cd7b8AKKjjpBSoRKUTpoAtN6B3J9ezWYyXS6\" },\n             \"password\")\n",
        "source_code_with_indent": "            ScriptType.P2PKH,\n            [ \"KzMFjMC2MPadjvX5Cd7b8AKKjjpBSoRKUTpoAtN6B3J9ezWYyXS6\" ],\n            \"password\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ScriptType.P2PKH,\n            { \"KzMFjMC2MPadjvX5Cd7b8AKKjjpBSoRKUTpoAtN6B3J9ezWYyXS6\" },\n            \"password\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:349:12 Incompatible parameter type [6]: Expected `Set[str]` for 3rd positional only parameter to call `Wallet.create_account_from_text_entries` but got `List[str]`.",
    "message": " Expected `Set[str]` for 3rd positional only parameter to call `Wallet.create_account_from_text_entries` but got `List[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 349,
    "warning_line": "            [ \"15hETetDmcXm1mM4sEf7U2KXC9hDHFMSzz\", \"1GPHVTY8UD9my6jyP4tb2TYJwUbDetyNC6\" ],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            ScriptType.NONE,\n            [ \"15hETetDmcXm1mM4sEf7U2KXC9hDHFMSzz\", \"1GPHVTY8UD9my6jyP4tb2TYJwUbDetyNC6\" ],\n            \"password\")\n",
        "source_code_len": 145,
        "target_code": "            ScriptType.NONE,\n            { \"15hETetDmcXm1mM4sEf7U2KXC9hDHFMSzz\", \"1GPHVTY8UD9my6jyP4tb2TYJwUbDetyNC6\" },\n            \"password\")\n",
        "target_code_len": 145,
        "diff_format": "@@ -348,3 +357,3 @@\n             ScriptType.NONE,\n-            [ \"15hETetDmcXm1mM4sEf7U2KXC9hDHFMSzz\", \"1GPHVTY8UD9my6jyP4tb2TYJwUbDetyNC6\" ],\n+            { \"15hETetDmcXm1mM4sEf7U2KXC9hDHFMSzz\", \"1GPHVTY8UD9my6jyP4tb2TYJwUbDetyNC6\" },\n             \"password\")\n",
        "source_code_with_indent": "            ScriptType.NONE,\n            [ \"15hETetDmcXm1mM4sEf7U2KXC9hDHFMSzz\", \"1GPHVTY8UD9my6jyP4tb2TYJwUbDetyNC6\" ],\n            \"password\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            ScriptType.NONE,\n            { \"15hETetDmcXm1mM4sEf7U2KXC9hDHFMSzz\", \"1GPHVTY8UD9my6jyP4tb2TYJwUbDetyNC6\" },\n            \"password\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:421:42 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `WalletStorage.upgrade` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `WalletStorage.upgrade` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 421,
    "warning_line": "    storage.upgrade(password is not None, password)"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet.py",
    "file_hunks_size": 39,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet.py:543:34 Unsupported operand [58]: `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "message": " `+` is not supported for operand types `typing.Sequence[int]` and `typing.Tuple[int]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 543,
    "warning_line": "    account.derive_new_keys_until(RECEIVING_SUBPATH + (2,))"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:102:34 Incompatible parameter type [6]: Expected `DerivationType` for 3rd positional only parameter to call `MasterKeyRow.__init__` but got `int`.",
    "message": " Expected `DerivationType` for 3rd positional only parameter to call `MasterKeyRow.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 102,
    "warning_line": "    line1 = MasterKeyRow(1, None, 2, b'111')",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    line1 = MasterKeyRow(1, None, 2, b'111')\n    line2 = MasterKeyRow(2, None, 4, b'222')\n\n",
        "source_code_len": 92,
        "target_code": "\n    line1 = MasterKeyRow(1, None, DerivationType.ELECTRUM_MULTISIG, b'111')\n    line2 = MasterKeyRow(2, None, DerivationType.BIP32_SUBPATH, b'222')\n\n",
        "target_code_len": 150,
        "diff_format": "@@ -101,4 +103,4 @@\n \n-    line1 = MasterKeyRow(1, None, 2, b'111')\n-    line2 = MasterKeyRow(2, None, 4, b'222')\n+    line1 = MasterKeyRow(1, None, DerivationType.ELECTRUM_MULTISIG, b'111')\n+    line2 = MasterKeyRow(2, None, DerivationType.BIP32_SUBPATH, b'222')\n \n",
        "source_code_with_indent": "\n    line1 = MasterKeyRow(1, None, 2, b'111')\n    line2 = MasterKeyRow(2, None, 4, b'222')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    line1 = MasterKeyRow(1, None, DerivationType.ELECTRUM_MULTISIG, b'111')\n    line2 = MasterKeyRow(2, None, DerivationType.BIP32_SUBPATH, b'222')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:103:34 Incompatible parameter type [6]: Expected `DerivationType` for 3rd positional only parameter to call `MasterKeyRow.__init__` but got `int`.",
    "message": " Expected `DerivationType` for 3rd positional only parameter to call `MasterKeyRow.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 103,
    "warning_line": "    line2 = MasterKeyRow(2, None, 4, b'222')",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    line1 = MasterKeyRow(1, None, 2, b'111')\n    line2 = MasterKeyRow(2, None, 4, b'222')\n\n",
        "source_code_len": 92,
        "target_code": "\n    line1 = MasterKeyRow(1, None, DerivationType.ELECTRUM_MULTISIG, b'111')\n    line2 = MasterKeyRow(2, None, DerivationType.BIP32_SUBPATH, b'222')\n\n",
        "target_code_len": 150,
        "diff_format": "@@ -101,4 +103,4 @@\n \n-    line1 = MasterKeyRow(1, None, 2, b'111')\n-    line2 = MasterKeyRow(2, None, 4, b'222')\n+    line1 = MasterKeyRow(1, None, DerivationType.ELECTRUM_MULTISIG, b'111')\n+    line2 = MasterKeyRow(2, None, DerivationType.BIP32_SUBPATH, b'222')\n \n",
        "source_code_with_indent": "\n    line1 = MasterKeyRow(1, None, 2, b'111')\n    line2 = MasterKeyRow(2, None, 4, b'222')\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    line1 = MasterKeyRow(1, None, DerivationType.ELECTRUM_MULTISIG, b'111')\n    line2 = MasterKeyRow(2, None, DerivationType.BIP32_SUBPATH, b'222')\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:147:49 Incompatible parameter type [6]: Expected `DerivationType` for 3rd positional only parameter to call `MasterKeyRow.__init__` but got `int`.",
    "message": " Expected `DerivationType` for 3rd positional only parameter to call `MasterKeyRow.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 147,
    "warning_line": "    mk_row1 = MasterKeyRow(MASTERKEY_ID+1, None, 2, b'111')",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    mk_row1 = MasterKeyRow(MASTERKEY_ID+1, None, 2, b'111')\n    future = db_functions.create_master_keys(db_context, [ mk_row1 ])\n",
        "source_code_len": 208,
        "target_code": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    mk_row1 = MasterKeyRow(MASTERKEY_ID+1, None, DerivationType.ELECTRUM_MULTISIG, b'111')\n    future = db_functions.create_master_keys(db_context, [ mk_row1 ])\n",
        "target_code_len": 239,
        "diff_format": "@@ -146,3 +148,3 @@\n     # Satisfy the masterkey foreign key constraint by creating the masterkey.\n-    mk_row1 = MasterKeyRow(MASTERKEY_ID+1, None, 2, b'111')\n+    mk_row1 = MasterKeyRow(MASTERKEY_ID+1, None, DerivationType.ELECTRUM_MULTISIG, b'111')\n     future = db_functions.create_master_keys(db_context, [ mk_row1 ])\n",
        "source_code_with_indent": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    <DED>mk_row1 = MasterKeyRow(MASTERKEY_ID+1, None, 2, b'111')\n    future = db_functions.create_master_keys(db_context, [ mk_row1 ])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    <DED>mk_row1 = MasterKeyRow(MASTERKEY_ID+1, None, DerivationType.ELECTRUM_MULTISIG, b'111')\n    future = db_functions.create_master_keys(db_context, [ mk_row1 ])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:278:32 Incompatible parameter type [6]: Expected `KeyInstanceFlag` for 7th positional only parameter to call `KeyInstanceRow.__init__` but got `int`.",
    "message": " Expected `KeyInstanceFlag` for 7th positional only parameter to call `KeyInstanceRow.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 278,
    "warning_line": "        DERIVATION_DATA1, None, 0, None)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    line1 = KeyInstanceRow(KEYINSTANCE_ID+1, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.BIP32,\n        DERIVATION_DATA1, None, 0, None)\n    line2 = KeyInstanceRow(KEYINSTANCE_ID+2, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.HARDWARE,\n        DERIVATION_DATA2, None, 0, None)\n\n",
        "source_code_len": 280,
        "target_code": "    line1 = KeyInstanceRow(KEYINSTANCE_ID+1, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.BIP32,\n        DERIVATION_DATA1, None, KeyInstanceFlag.NONE, None)\n    line2 = KeyInstanceRow(KEYINSTANCE_ID+2, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.HARDWARE,\n        DERIVATION_DATA2, None, KeyInstanceFlag.NONE, None)\n\n",
        "target_code_len": 318,
        "diff_format": "@@ -277,5 +279,5 @@\n     line1 = KeyInstanceRow(KEYINSTANCE_ID+1, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.BIP32,\n-        DERIVATION_DATA1, None, 0, None)\n+        DERIVATION_DATA1, None, KeyInstanceFlag.NONE, None)\n     line2 = KeyInstanceRow(KEYINSTANCE_ID+2, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.HARDWARE,\n-        DERIVATION_DATA2, None, 0, None)\n+        DERIVATION_DATA2, None, KeyInstanceFlag.NONE, None)\n \n",
        "source_code_with_indent": "    line1 = KeyInstanceRow(KEYINSTANCE_ID+1, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.BIP32,\n        DERIVATION_DATA1, None, 0, None)\n    line2 = KeyInstanceRow(KEYINSTANCE_ID+2, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.HARDWARE,\n        DERIVATION_DATA2, None, 0, None)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    line1 = KeyInstanceRow(KEYINSTANCE_ID+1, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.BIP32,\n        DERIVATION_DATA1, None, KeyInstanceFlag.NONE, None)\n    line2 = KeyInstanceRow(KEYINSTANCE_ID+2, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.HARDWARE,\n        DERIVATION_DATA2, None, KeyInstanceFlag.NONE, None)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:280:32 Incompatible parameter type [6]: Expected `KeyInstanceFlag` for 7th positional only parameter to call `KeyInstanceRow.__init__` but got `int`.",
    "message": " Expected `KeyInstanceFlag` for 7th positional only parameter to call `KeyInstanceRow.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 280,
    "warning_line": "        DERIVATION_DATA2, None, 0, None)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    line1 = KeyInstanceRow(KEYINSTANCE_ID+1, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.BIP32,\n        DERIVATION_DATA1, None, 0, None)\n    line2 = KeyInstanceRow(KEYINSTANCE_ID+2, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.HARDWARE,\n        DERIVATION_DATA2, None, 0, None)\n\n",
        "source_code_len": 280,
        "target_code": "    line1 = KeyInstanceRow(KEYINSTANCE_ID+1, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.BIP32,\n        DERIVATION_DATA1, None, KeyInstanceFlag.NONE, None)\n    line2 = KeyInstanceRow(KEYINSTANCE_ID+2, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.HARDWARE,\n        DERIVATION_DATA2, None, KeyInstanceFlag.NONE, None)\n\n",
        "target_code_len": 318,
        "diff_format": "@@ -277,5 +279,5 @@\n     line1 = KeyInstanceRow(KEYINSTANCE_ID+1, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.BIP32,\n-        DERIVATION_DATA1, None, 0, None)\n+        DERIVATION_DATA1, None, KeyInstanceFlag.NONE, None)\n     line2 = KeyInstanceRow(KEYINSTANCE_ID+2, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.HARDWARE,\n-        DERIVATION_DATA2, None, 0, None)\n+        DERIVATION_DATA2, None, KeyInstanceFlag.NONE, None)\n \n",
        "source_code_with_indent": "    line1 = KeyInstanceRow(KEYINSTANCE_ID+1, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.BIP32,\n        DERIVATION_DATA1, None, 0, None)\n    line2 = KeyInstanceRow(KEYINSTANCE_ID+2, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.HARDWARE,\n        DERIVATION_DATA2, None, 0, None)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    line1 = KeyInstanceRow(KEYINSTANCE_ID+1, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.BIP32,\n        DERIVATION_DATA1, None, KeyInstanceFlag.NONE, None)\n    line2 = KeyInstanceRow(KEYINSTANCE_ID+2, ACCOUNT_ID+1, MASTERKEY_ID+1, DerivationType.HARDWARE,\n        DERIVATION_DATA2, None, KeyInstanceFlag.NONE, None)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:289:45 Incompatible parameter type [6]: Expected `DerivationType` for 3rd positional only parameter to call `MasterKeyRow.__init__` but got `int`.",
    "message": " Expected `DerivationType` for 3rd positional only parameter to call `MasterKeyRow.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 289,
    "warning_line": "        [ MasterKeyRow(MASTERKEY_ID+1, None, 2, b'111') ])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    future = db_functions.create_master_keys(db_context,\n        [ MasterKeyRow(MASTERKEY_ID+1, None, 2, b'111') ])\n    future.result(timeout=5)\n",
        "source_code_len": 145,
        "target_code": "    future = db_functions.create_master_keys(db_context,\n        [ MasterKeyRow(MASTERKEY_ID+1, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n    future.result(timeout=5)\n",
        "target_code_len": 176,
        "diff_format": "@@ -288,3 +290,3 @@\n     future = db_functions.create_master_keys(db_context,\n-        [ MasterKeyRow(MASTERKEY_ID+1, None, 2, b'111') ])\n+        [ MasterKeyRow(MASTERKEY_ID+1, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n     future.result(timeout=5)\n",
        "source_code_with_indent": "    <DED>future = db_functions.create_master_keys(db_context,\n        [ MasterKeyRow(MASTERKEY_ID+1, None, 2, b'111') ])\n    future.result(timeout=5)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>future = db_functions.create_master_keys(db_context,\n        [ MasterKeyRow(MASTERKEY_ID+1, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n    future.result(timeout=5)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:715:57 Incompatible parameter type [6]: Expected `typing.Iterable[MasterKeyRow]` for 2nd positional only parameter to call `db_functions.create_master_keys` but got `typing.Iterable[typing.Tuple[int, None, int, bytes]]`.",
    "message": " Expected `typing.Iterable[MasterKeyRow]` for 2nd positional only parameter to call `db_functions.create_master_keys` but got `typing.Iterable[typing.Tuple[int, None, int, bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 715,
    "warning_line": "    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n    future.result(timeout=5)\n",
        "source_code_len": 201,
        "target_code": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    future = db_functions.create_master_keys(db_context, [\n        MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n    future.result(timeout=5)\n",
        "target_code_len": 252,
        "diff_format": "@@ -714,3 +725,4 @@\n     # Satisfy the masterkey foreign key constraint by creating the masterkey.\n-    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n+    future = db_functions.create_master_keys(db_context, [\n+        MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n     future.result(timeout=5)\n",
        "source_code_with_indent": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n    future.result(timeout=5)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    future = db_functions.create_master_keys(db_context, [\n        MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n    future.result(timeout=5)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:794:57 Incompatible parameter type [6]: Expected `typing.Iterable[MasterKeyRow]` for 2nd positional only parameter to call `db_functions.create_master_keys` but got `typing.Iterable[typing.Tuple[int, None, int, bytes]]`.",
    "message": " Expected `typing.Iterable[MasterKeyRow]` for 2nd positional only parameter to call `db_functions.create_master_keys` but got `typing.Iterable[typing.Tuple[int, None, int, bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 794,
    "warning_line": "    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n    future.result(timeout=5)\n",
        "source_code_len": 201,
        "target_code": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    future = db_functions.create_master_keys(db_context, [\n        MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n    future.result(timeout=5)\n",
        "target_code_len": 252,
        "diff_format": "@@ -793,3 +805,4 @@\n     # Satisfy the masterkey foreign key constraint by creating the masterkey.\n-    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n+    future = db_functions.create_master_keys(db_context, [\n+        MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n     future.result(timeout=5)\n",
        "source_code_with_indent": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    <DED>future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n    future.result(timeout=5)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    <DED>future = db_functions.create_master_keys(db_context, [\n        MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n    future.result(timeout=5)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:805:58 Incompatible parameter type [6]: Expected `typing.Iterable[KeyInstanceRow]` for 2nd positional only parameter to call `db_functions.create_keyinstances` but got `List[typing.Tuple[int, int, int, DerivationType, bytes, ScriptType, bool, None]]`.",
    "message": " Expected `typing.Iterable[KeyInstanceRow]` for 2nd positional only parameter to call `db_functions.create_keyinstances` but got `List[typing.Tuple[int, int, int, DerivationType, bytes, ScriptType, bool, None]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 805,
    "warning_line": "    future = db_functions.create_keyinstances(db_context, entries)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # Satisfy the keyinstance foreign key constraint by creating the keyinstance.\n    entries = [ (KEYINSTANCE_ID+i, ACCOUNT_ID, MASTERKEY_ID, DerivationType.BIP32,\n        DERIVATION_DATA, ScriptType.P2PKH, True, None) for i in range(LINE_COUNT) ]\n    future = db_functions.create_keyinstances(db_context, entries)\n",
        "source_code_len": 316,
        "target_code": "    # Satisfy the keyinstance foreign key constraint by creating the keyinstance.\n    entries = [ KeyInstanceRow(KEYINSTANCE_ID+i, ACCOUNT_ID, MASTERKEY_ID, DerivationType.BIP32,\n        DERIVATION_DATA, None, KeyInstanceFlag.NONE, None) for i in range(LINE_COUNT) ]\n    future = db_functions.create_keyinstances(db_context, entries)\n",
        "target_code_len": 334,
        "diff_format": "@@ -802,4 +815,4 @@\n     # Satisfy the keyinstance foreign key constraint by creating the keyinstance.\n-    entries = [ (KEYINSTANCE_ID+i, ACCOUNT_ID, MASTERKEY_ID, DerivationType.BIP32,\n-        DERIVATION_DATA, ScriptType.P2PKH, True, None) for i in range(LINE_COUNT) ]\n+    entries = [ KeyInstanceRow(KEYINSTANCE_ID+i, ACCOUNT_ID, MASTERKEY_ID, DerivationType.BIP32,\n+        DERIVATION_DATA, None, KeyInstanceFlag.NONE, None) for i in range(LINE_COUNT) ]\n     future = db_functions.create_keyinstances(db_context, entries)\n",
        "source_code_with_indent": "    # Satisfy the keyinstance foreign key constraint by creating the keyinstance.\n    entries = [ (KEYINSTANCE_ID+i, ACCOUNT_ID, MASTERKEY_ID, DerivationType.BIP32,\n        DERIVATION_DATA, ScriptType.P2PKH, True, None) for i in range(LINE_COUNT) ]\n    future = db_functions.create_keyinstances(db_context, entries)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # Satisfy the keyinstance foreign key constraint by creating the keyinstance.\n    entries = [ KeyInstanceRow(KEYINSTANCE_ID+i, ACCOUNT_ID, MASTERKEY_ID, DerivationType.BIP32,\n        DERIVATION_DATA, None, KeyInstanceFlag.NONE, None) for i in range(LINE_COUNT) ]\n    future = db_functions.create_keyinstances(db_context, entries)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:908:57 Incompatible parameter type [6]: Expected `typing.Iterable[MasterKeyRow]` for 2nd positional only parameter to call `db_functions.create_master_keys` but got `typing.Iterable[typing.Tuple[int, None, int, bytes]]`.",
    "message": " Expected `typing.Iterable[MasterKeyRow]` for 2nd positional only parameter to call `db_functions.create_master_keys` but got `typing.Iterable[typing.Tuple[int, None, int, bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 908,
    "warning_line": "    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n    future.result(timeout=5)\n",
        "source_code_len": 201,
        "target_code": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    future = db_functions.create_master_keys(db_context,\n        [ MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n    future.result(timeout=5)\n",
        "target_code_len": 252,
        "diff_format": "@@ -907,3 +920,4 @@\n     # Satisfy the masterkey foreign key constraint by creating the masterkey.\n-    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n+    future = db_functions.create_master_keys(db_context,\n+        [ MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n     future.result(timeout=5)\n",
        "source_code_with_indent": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    <DED>future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n    future.result(timeout=5)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    <DED>future = db_functions.create_master_keys(db_context,\n        [ MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n    future.result(timeout=5)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:1107:57 Incompatible parameter type [6]: Expected `typing.Iterable[MasterKeyRow]` for 2nd positional only parameter to call `db_functions.create_master_keys` but got `typing.Iterable[typing.Tuple[int, None, int, bytes]]`.",
    "message": " Expected `typing.Iterable[MasterKeyRow]` for 2nd positional only parameter to call `db_functions.create_master_keys` but got `typing.Iterable[typing.Tuple[int, None, int, bytes]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1107,
    "warning_line": "    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n    future.result(timeout=5)\n",
        "source_code_len": 201,
        "target_code": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    future = db_functions.create_master_keys(db_context, [\n        MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n    future.result(timeout=5)\n",
        "target_code_len": 252,
        "diff_format": "@@ -1106,3 +1119,4 @@\n     # Satisfy the masterkey foreign key constraint by creating the masterkey.\n-    future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n+    future = db_functions.create_master_keys(db_context, [\n+        MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n     future.result(timeout=5)\n",
        "source_code_with_indent": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    <DED>future = db_functions.create_master_keys(db_context, [ (MASTERKEY_ID, None, 2, b'111') ])\n    future.result(timeout=5)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # Satisfy the masterkey foreign key constraint by creating the masterkey.\n    <DED>future = db_functions.create_master_keys(db_context, [\n        MasterKeyRow(MASTERKEY_ID, None, DerivationType.ELECTRUM_MULTISIG, b'111') ])\n    future.result(timeout=5)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_database_tables.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_database_tables.py",
    "file_hunks_size": 23,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/tests/test_wallet_database_tables.py:1216:8 Incompatible parameter type [6]: Expected `typing.Iterable[typing.Tuple[PaymentFlag, PaymentFlag, int]]` for 2nd positional only parameter to call `db_functions.update_invoice_flags` but got `typing.Iterable[typing.Tuple[int, PaymentFlag, int]]`.",
    "message": " Expected `typing.Iterable[typing.Tuple[PaymentFlag, PaymentFlag, int]]` for 2nd positional only parameter to call `db_functions.update_invoice_flags` but got `typing.Iterable[typing.Tuple[int, PaymentFlag, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1216,
    "warning_line": "        [ (~PaymentFlag.ARCHIVED, PaymentFlag.ARCHIVED, line3_2.invoice_id), ])"
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "9154a84d48a81ec19f6787cec6e9bf1a94a5e025",
    "filename": "electrumsv/tests/test_wallet_vertical.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/tests/test_wallet_vertical.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "electrumsv/tests/test_wallet_vertical.py:58:30 Incompatible parameter type [6]: Expected `electrumsv.storage.WalletStorage` for 1st positional only parameter to call `Wallet.__init__` but got `MockStorage`.",
    "message": " Expected `electrumsv.storage.WalletStorage` for 1st positional only parameter to call `Wallet.__init__` but got `MockStorage`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 58,
    "warning_line": "        self.wallet = _Wallet(self.storage)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        self.storage = MockStorage()\n        self.wallet = _Wallet(self.storage)\n\n",
        "source_code_len": 82,
        "target_code": "        self.storage = MockStorage()\n        with unittest.mock.patch(\"electrumsv.wallet.app_state\") as mock_app_state:\n            mock_app_state.credentials.get_wallet_password = lambda wallet_path: \"password\"\n            self.wallet = _Wallet(self.storage) # type: ignore\n\n",
        "target_code_len": 276,
        "diff_format": "@@ -57,3 +60,5 @@\n         self.storage = MockStorage()\n-        self.wallet = _Wallet(self.storage)\n+        with unittest.mock.patch(\"electrumsv.wallet.app_state\") as mock_app_state:\n+            mock_app_state.credentials.get_wallet_password = lambda wallet_path: \"password\"\n+            self.wallet = _Wallet(self.storage) # type: ignore\n \n",
        "source_code_with_indent": "        self.storage = MockStorage()\n        self.wallet = _Wallet(self.storage)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.storage = MockStorage()\n        with unittest.mock.patch(\"electrumsv.wallet.app_state\") as mock_app_state:\n            <IND>mock_app_state.credentials.get_wallet_password = lambda wallet_path: \"password\"\n            self.wallet = _Wallet(self.storage) # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]