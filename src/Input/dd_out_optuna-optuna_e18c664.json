[
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/samplers/_random.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/samplers/_random.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "optuna/multi_objective/samplers/_random.py:23:57 Incompatible parameter type [6]: Expected `optuna.study.Study` for 1st positional only parameter to call `optuna.samplers.random.RandomSampler.infer_relative_search_space` but got `multi_objective.study.MultiObjectiveStudy`.",
    "message": " Expected `optuna.study.Study` for 1st positional only parameter to call `optuna.samplers.random.RandomSampler.infer_relative_search_space` but got `multi_objective.study.MultiObjectiveStudy`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 23,
    "warning_line": "        return self._sampler.infer_relative_search_space(study, trial)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ):\n        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.infer_relative_search_space(study, trial)\n\n",
        "source_code_len": 240,
        "target_code": "        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ) -> Dict[str, BaseDistribution]:\n        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.infer_relative_search_space(study, trial)  # type: ignore\n\n",
        "target_code_len": 287,
        "diff_format": "@@ -20,5 +20,5 @@\n         trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n-    ):\n+    ) -> Dict[str, BaseDistribution]:\n         # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n-        return self._sampler.infer_relative_search_space(study, trial)\n+        return self._sampler.infer_relative_search_space(study, trial)  # type: ignore\n \n",
        "source_code_with_indent": "        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ):\n        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.infer_relative_search_space(study, trial)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ) -> Dict[str, BaseDistribution]:\n        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.infer_relative_search_space(study, trial)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/samplers/_random.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/samplers/_random.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "optuna/multi_objective/samplers/_random.py:23:64 Incompatible parameter type [6]: Expected `optuna.structs.FrozenTrial` for 2nd positional only parameter to call `optuna.samplers.random.RandomSampler.infer_relative_search_space` but got `multi_objective.trial.FrozenMultiObjectiveTrial`.",
    "message": " Expected `optuna.structs.FrozenTrial` for 2nd positional only parameter to call `optuna.samplers.random.RandomSampler.infer_relative_search_space` but got `multi_objective.trial.FrozenMultiObjectiveTrial`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 23,
    "warning_line": "        return self._sampler.infer_relative_search_space(study, trial)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ):\n        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.infer_relative_search_space(study, trial)\n\n",
        "source_code_len": 240,
        "target_code": "        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ) -> Dict[str, BaseDistribution]:\n        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.infer_relative_search_space(study, trial)  # type: ignore\n\n",
        "target_code_len": 287,
        "diff_format": "@@ -20,5 +20,5 @@\n         trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n-    ):\n+    ) -> Dict[str, BaseDistribution]:\n         # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n-        return self._sampler.infer_relative_search_space(study, trial)\n+        return self._sampler.infer_relative_search_space(study, trial)  # type: ignore\n \n",
        "source_code_with_indent": "        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ):\n        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.infer_relative_search_space(study, trial)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        trial: \"multi_objective.trial.FrozenMultiObjectiveTrial\",\n    ) -> Dict[str, BaseDistribution]:\n        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.infer_relative_search_space(study, trial)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/samplers/_random.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/samplers/_random.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "optuna/multi_objective/samplers/_random.py:32:45 Incompatible parameter type [6]: Expected `optuna.study.Study` for 1st positional only parameter to call `optuna.samplers.random.RandomSampler.sample_relative` but got `multi_objective.study.MultiObjectiveStudy`.",
    "message": " Expected `optuna.study.Study` for 1st positional only parameter to call `optuna.samplers.random.RandomSampler.sample_relative` but got `multi_objective.study.MultiObjectiveStudy`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 32,
    "warning_line": "        return self._sampler.sample_relative(study, trial, search_space)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.sample_relative(study, trial, search_space)\n\n",
        "source_code_len": 169,
        "target_code": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.sample_relative(study, trial, search_space)  # type: ignore\n\n",
        "target_code_len": 185,
        "diff_format": "@@ -31,3 +31,3 @@\n         # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n-        return self._sampler.sample_relative(study, trial, search_space)\n+        return self._sampler.sample_relative(study, trial, search_space)  # type: ignore\n \n",
        "source_code_with_indent": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.sample_relative(study, trial, search_space)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.sample_relative(study, trial, search_space)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/samplers/_random.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/samplers/_random.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "optuna/multi_objective/samplers/_random.py:32:52 Incompatible parameter type [6]: Expected `optuna.structs.FrozenTrial` for 2nd positional only parameter to call `optuna.samplers.random.RandomSampler.sample_relative` but got `multi_objective.trial.FrozenMultiObjectiveTrial`.",
    "message": " Expected `optuna.structs.FrozenTrial` for 2nd positional only parameter to call `optuna.samplers.random.RandomSampler.sample_relative` but got `multi_objective.trial.FrozenMultiObjectiveTrial`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 32,
    "warning_line": "        return self._sampler.sample_relative(study, trial, search_space)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.sample_relative(study, trial, search_space)\n\n",
        "source_code_len": 169,
        "target_code": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.sample_relative(study, trial, search_space)  # type: ignore\n\n",
        "target_code_len": 185,
        "diff_format": "@@ -31,3 +31,3 @@\n         # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n-        return self._sampler.sample_relative(study, trial, search_space)\n+        return self._sampler.sample_relative(study, trial, search_space)  # type: ignore\n \n",
        "source_code_with_indent": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.sample_relative(study, trial, search_space)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.sample_relative(study, trial, search_space)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/samplers/_random.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/samplers/_random.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "optuna/multi_objective/samplers/_random.py:42:48 Incompatible parameter type [6]: Expected `optuna.study.Study` for 1st positional only parameter to call `optuna.samplers.random.RandomSampler.sample_independent` but got `multi_objective.study.MultiObjectiveStudy`.",
    "message": " Expected `optuna.study.Study` for 1st positional only parameter to call `optuna.samplers.random.RandomSampler.sample_independent` but got `multi_objective.study.MultiObjectiveStudy`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "        return self._sampler.sample_independent(study, trial, param_name, param_distribution)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.sample_independent(study, trial, param_name, param_distribution)\n",
        "source_code_len": 189,
        "target_code": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.sample_independent(\n            study, trial, param_name, param_distribution  # type: ignore\n        )\n",
        "target_code_len": 227,
        "diff_format": "@@ -41,2 +41,4 @@\n         # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n-        return self._sampler.sample_independent(study, trial, param_name, param_distribution)\n+        return self._sampler.sample_independent(\n+            study, trial, param_name, param_distribution  # type: ignore\n+        )\n",
        "source_code_with_indent": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.sample_independent(study, trial, param_name, param_distribution)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.sample_independent(\n            study, trial, param_name, param_distribution  # type: ignore\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/samplers/_random.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/samplers/_random.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "optuna/multi_objective/samplers/_random.py:42:55 Incompatible parameter type [6]: Expected `optuna.structs.FrozenTrial` for 2nd positional only parameter to call `optuna.samplers.random.RandomSampler.sample_independent` but got `multi_objective.trial.FrozenMultiObjectiveTrial`.",
    "message": " Expected `optuna.structs.FrozenTrial` for 2nd positional only parameter to call `optuna.samplers.random.RandomSampler.sample_independent` but got `multi_objective.trial.FrozenMultiObjectiveTrial`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 42,
    "warning_line": "        return self._sampler.sample_independent(study, trial, param_name, param_distribution)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.sample_independent(study, trial, param_name, param_distribution)\n",
        "source_code_len": 189,
        "target_code": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        return self._sampler.sample_independent(\n            study, trial, param_name, param_distribution  # type: ignore\n        )\n",
        "target_code_len": 227,
        "diff_format": "@@ -41,2 +41,4 @@\n         # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n-        return self._sampler.sample_independent(study, trial, param_name, param_distribution)\n+        return self._sampler.sample_independent(\n+            study, trial, param_name, param_distribution  # type: ignore\n+        )\n",
        "source_code_with_indent": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.sample_independent(study, trial, param_name, param_distribution)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # TODO(ohta): Convert `study` and `trial` to single objective versions before passing.\n        <IND>return self._sampler.sample_independent(\n            study, trial, param_name, param_distribution  # type: ignore\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/study.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/study.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/study.py:44:4 Incompatible variable type [9]: sampler is declared to have type `Optional[multi_objective.samplers._base.BaseMultiObjectiveSampler]` but is used as type `multi_objective.samplers._adapter._MultiObjectiveSamplerAdapter`.",
    "message": " sampler is declared to have type `Optional[multi_objective.samplers._base.BaseMultiObjectiveSampler]` but is used as type `multi_objective.samplers._adapter._MultiObjectiveSamplerAdapter`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    load_if_exists: bool = False,\n):\n    # TODO(ohta): Support pruner.\n    mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n",
        "source_code_len": 236,
        "target_code": "    load_if_exists: bool = False,\n) -> \"multi_objective.study.MultiObjectiveStudy\":\n    # TODO(ohta): Support pruner.\n    mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n",
        "target_code_len": 291,
        "diff_format": "@@ -40,6 +40,6 @@\n     load_if_exists: bool = False,\n-):\n+) -> \"multi_objective.study.MultiObjectiveStudy\":\n     # TODO(ohta): Support pruner.\n     mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n-    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n+    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n \n",
        "source_code_with_indent": "    load_if_exists: bool = False,\n):\n    # TODO(ohta): Support pruner.\n    <IND>mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    load_if_exists: bool = False,\n) -> \"multi_objective.study.MultiObjectiveStudy\":\n    # TODO(ohta): Support pruner.\n    <IND>mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/study.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/study.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/study.py:55:8 Incompatible parameter type [6]: Expected `optuna.samplers.base.BaseSampler` for 3rd parameter `sampler` to call `optuna.study.create_study` but got `Optional[multi_objective.samplers._base.BaseMultiObjectiveSampler]`.",
    "message": " Expected `optuna.samplers.base.BaseSampler` for 3rd parameter `sampler` to call `optuna.study.create_study` but got `Optional[multi_objective.samplers._base.BaseMultiObjectiveSampler]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 55,
    "warning_line": "        sampler=sampler,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    load_if_exists: bool = False,\n):\n    # TODO(ohta): Support pruner.\n    mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n",
        "source_code_len": 236,
        "target_code": "    load_if_exists: bool = False,\n) -> \"multi_objective.study.MultiObjectiveStudy\":\n    # TODO(ohta): Support pruner.\n    mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n",
        "target_code_len": 291,
        "diff_format": "@@ -40,6 +40,6 @@\n     load_if_exists: bool = False,\n-):\n+) -> \"multi_objective.study.MultiObjectiveStudy\":\n     # TODO(ohta): Support pruner.\n     mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n-    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n+    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n \n",
        "source_code_with_indent": "    load_if_exists: bool = False,\n):\n    # TODO(ohta): Support pruner.\n    <IND>mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    load_if_exists: bool = False,\n) -> \"multi_objective.study.MultiObjectiveStudy\":\n    # TODO(ohta): Support pruner.\n    <IND>mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        storage=storage,\n        sampler=sampler,\n        pruner=optuna.pruners.NopPruner(),\n",
        "source_code_len": 93,
        "target_code": "        storage=storage,\n        sampler=sampler_adapter,\n        pruner=optuna.pruners.NopPruner(),\n",
        "target_code_len": 101,
        "diff_format": "@@ -54,3 +54,3 @@\n         storage=storage,\n-        sampler=sampler,\n+        sampler=sampler_adapter,\n         pruner=optuna.pruners.NopPruner(),\n",
        "source_code_with_indent": "        storage=storage,\n        sampler=sampler,\n        pruner=optuna.pruners.NopPruner(),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        storage=storage,\n        sampler=sampler_adapter,\n        pruner=optuna.pruners.NopPruner(),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/study.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/study.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/study.py:72:4 Incompatible variable type [9]: sampler is declared to have type `Optional[multi_objective.samplers._base.BaseMultiObjectiveSampler]` but is used as type `multi_objective.samplers._adapter._MultiObjectiveSamplerAdapter`.",
    "message": " sampler is declared to have type `Optional[multi_objective.samplers._base.BaseMultiObjectiveSampler]` but is used as type `multi_objective.samplers._adapter._MultiObjectiveSamplerAdapter`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 72,
    "warning_line": "    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    sampler: Optional[\"multi_objective.samplers.BaseMultiObjectiveSampler\"] = None,\n):\n    mo_sampler = sampler or multi_objective.samplers.RandomSampler()\n    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler)\n\n",
        "source_code_len": 326,
        "target_code": "    sampler: Optional[\"multi_objective.samplers.BaseMultiObjectiveSampler\"] = None,\n) -> \"multi_objective.study.MultiObjectiveStudy\":\n    mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler_adapter)\n\n",
        "target_code_len": 403,
        "diff_format": "@@ -69,7 +69,7 @@\n     sampler: Optional[\"multi_objective.samplers.BaseMultiObjectiveSampler\"] = None,\n-):\n-    mo_sampler = sampler or multi_objective.samplers.RandomSampler()\n-    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n+) -> \"multi_objective.study.MultiObjectiveStudy\":\n+    mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n+    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n \n-    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler)\n+    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler_adapter)\n \n",
        "source_code_with_indent": "    sampler: Optional[\"multi_objective.samplers.BaseMultiObjectiveSampler\"] = None,\n):\n    <IND>mo_sampler = sampler or multi_objective.samplers.RandomSampler()\n    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    sampler: Optional[\"multi_objective.samplers.BaseMultiObjectiveSampler\"] = None,\n) -> \"multi_objective.study.MultiObjectiveStudy\":\n    <IND>mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler_adapter)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/study.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/study.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/study.py:74:70 Incompatible parameter type [6]: Expected `optuna.samplers.base.BaseSampler` for 3rd parameter `sampler` to call `optuna.study.load_study` but got `Optional[multi_objective.samplers._base.BaseMultiObjectiveSampler]`.",
    "message": " Expected `optuna.samplers.base.BaseSampler` for 3rd parameter `sampler` to call `optuna.study.load_study` but got `Optional[multi_objective.samplers._base.BaseMultiObjectiveSampler]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 74,
    "warning_line": "    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    sampler: Optional[\"multi_objective.samplers.BaseMultiObjectiveSampler\"] = None,\n):\n    mo_sampler = sampler or multi_objective.samplers.RandomSampler()\n    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler)\n\n",
        "source_code_len": 326,
        "target_code": "    sampler: Optional[\"multi_objective.samplers.BaseMultiObjectiveSampler\"] = None,\n) -> \"multi_objective.study.MultiObjectiveStudy\":\n    mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler_adapter)\n\n",
        "target_code_len": 403,
        "diff_format": "@@ -69,7 +69,7 @@\n     sampler: Optional[\"multi_objective.samplers.BaseMultiObjectiveSampler\"] = None,\n-):\n-    mo_sampler = sampler or multi_objective.samplers.RandomSampler()\n-    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n+) -> \"multi_objective.study.MultiObjectiveStudy\":\n+    mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n+    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n \n-    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler)\n+    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler_adapter)\n \n",
        "source_code_with_indent": "    sampler: Optional[\"multi_objective.samplers.BaseMultiObjectiveSampler\"] = None,\n):\n    <IND>mo_sampler = sampler or multi_objective.samplers.RandomSampler()\n    sampler = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    sampler: Optional[\"multi_objective.samplers.BaseMultiObjectiveSampler\"] = None,\n) -> \"multi_objective.study.MultiObjectiveStudy\":\n    <IND>mo_sampler = sampler or multi_objective.samplers.RandomMultiObjectiveSampler()\n    sampler_adapter = multi_objective.samplers._MultiObjectiveSamplerAdapter(mo_sampler)\n\n    study = optuna.load_study(study_name=study_name, storage=storage, sampler=sampler_adapter)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/study.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/study.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "optuna/multi_objective/study.py:97:8 Incompatible attribute type [8]: Attribute `_log_completed_trial` declared in class `Study` has type `BoundMethod[typing.Callable(Study._log_completed_trial)[[Named(self, Study), Named(trial, Trial), Named(result, float)], None], Study]` but is used as type `typing.Callable(_log_completed_trial)[[Named(trial, Trial), Named(result, float)], None]`.",
    "message": " Attribute `_log_completed_trial` declared in class `Study` has type `BoundMethod[typing.Callable(Study._log_completed_trial)[[Named(self, Study), Named(trial, Trial), Named(result, float)], None], Study]` but is used as type `typing.Callable(_log_completed_trial)[[Named(trial, Trial), Named(result, float)], None]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 97,
    "warning_line": "        self._study._log_completed_trial = _log_completed_trial",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n        self._study._log_completed_trial = _log_completed_trial\n\n",
        "source_code_len": 66,
        "target_code": "\n        self._study._log_completed_trial = _log_completed_trial  # type: ignore\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -96,3 +96,3 @@\n \n-        self._study._log_completed_trial = _log_completed_trial\n+        self._study._log_completed_trial = _log_completed_trial  # type: ignore\n \n",
        "source_code_with_indent": "\n        <DED>self._study._log_completed_trial = _log_completed_trial\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>self._study._log_completed_trial = _log_completed_trial  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/study.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/study.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/study.py:130:12 Incompatible parameter type [6]: Expected `Optional[List[typing.Callable[[Study, optuna.structs.FrozenTrial], None]]]` for 6th parameter `callbacks` to call `Study.optimize` but got `Optional[List[typing.Callable[[MultiObjectiveStudy, multi_objective.trial.FrozenMultiObjectiveTrial], None]]]`.",
    "message": " Expected `Optional[List[typing.Callable[[Study, optuna.structs.FrozenTrial], None]]]` for 6th parameter `callbacks` to call `Study.optimize` but got `Optional[List[typing.Callable[[MultiObjectiveStudy, multi_objective.trial.FrozenMultiObjectiveTrial], None]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 130,
    "warning_line": "            callbacks=callbacks,"
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/trial.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/trial.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/trial.py:118:50 Incompatible parameter type [6]: Expected `float` for 2nd positional only parameter to call `dict.__setitem__` but got `List[None]`.",
    "message": " Expected `float` for 2nd positional only parameter to call `dict.__setitem__` but got `List[None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 118,
    "warning_line": "                trial.intermediate_values[step] = list(None for _ in range(n_objectives))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            if step not in trial.intermediate_values:\n                trial.intermediate_values[step] = list(None for _ in range(n_objectives))\n\n            trial.intermediate_values[step][key % n_objectives] = value\n\n",
        "source_code_len": 218,
        "target_code": "            if step not in trial.intermediate_values:\n                self.intermediate_values[step] = list(None for _ in range(n_objectives))\n\n            self.intermediate_values[step][key % n_objectives] = value\n\n",
        "target_code_len": 216,
        "diff_format": "@@ -117,5 +117,5 @@\n             if step not in trial.intermediate_values:\n-                trial.intermediate_values[step] = list(None for _ in range(n_objectives))\n-\n-            trial.intermediate_values[step][key % n_objectives] = value\n+                self.intermediate_values[step] = list(None for _ in range(n_objectives))\n+\n+            self.intermediate_values[step][key % n_objectives] = value\n \n",
        "source_code_with_indent": "            if step not in trial.intermediate_values:\n                <IND>trial.intermediate_values[step] = list(None for _ in range(n_objectives))\n\n            <DED>trial.intermediate_values[step][key % n_objectives] = value\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if step not in trial.intermediate_values:\n                <IND>self.intermediate_values[step] = list(None for _ in range(n_objectives))\n\n            <DED>self.intermediate_values[step][key % n_objectives] = value\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/trial.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/trial.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/trial.py:132:8 Incompatible return type [7]: Expected `datetime` but got `Optional[datetime]`.",
    "message": " Expected `datetime` but got `Optional[datetime]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 132,
    "warning_line": "        return self._trial.datetime_start",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def datetime_start(self) -> datetime:\n        return self._trial.datetime_start\n",
        "source_code_len": 98,
        "target_code": "    @property\n    def datetime_start(self) -> Optional[datetime]:\n        return self._trial.datetime_start\n",
        "target_code_len": 108,
        "diff_format": "@@ -130,3 +130,3 @@\n     @property\n-    def datetime_start(self) -> datetime:\n+    def datetime_start(self) -> Optional[datetime]:\n         return self._trial.datetime_start\n",
        "source_code_with_indent": "    <DED>@property\n    def datetime_start(self) -> datetime:\n        <IND>return self._trial.datetime_start\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def datetime_start(self) -> Optional[datetime]:\n        <IND>return self._trial.datetime_start\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "optuna/optuna",
    "commit": "e18c664dd748a4d25e629b5e2628c7632050dd5b",
    "filename": "optuna/multi_objective/trial.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/optuna-optuna/optuna/multi_objective/trial.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "optuna/multi_objective/trial.py:136:8 Incompatible return type [7]: Expected `datetime` but got `Optional[datetime]`.",
    "message": " Expected `datetime` but got `Optional[datetime]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 136,
    "warning_line": "        return self._trial.datetime_complete",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def datetime_complete(self) -> datetime:\n        return self._trial.datetime_complete\n",
        "source_code_len": 104,
        "target_code": "    @property\n    def datetime_complete(self) -> Optional[datetime]:\n        return self._trial.datetime_complete\n",
        "target_code_len": 114,
        "diff_format": "@@ -134,3 +134,3 @@\n     @property\n-    def datetime_complete(self) -> datetime:\n+    def datetime_complete(self) -> Optional[datetime]:\n         return self._trial.datetime_complete\n",
        "source_code_with_indent": "    <DED>@property\n    def datetime_complete(self) -> datetime:\n        <IND>return self._trial.datetime_complete\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def datetime_complete(self) -> Optional[datetime]:\n        <IND>return self._trial.datetime_complete\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]