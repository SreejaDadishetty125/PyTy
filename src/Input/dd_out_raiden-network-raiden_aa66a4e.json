[
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v17_to_v18.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v17_to_v18.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v17_to_v18.py:30:26 Incompatible parameter type [6]: Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `json.loads` but got `typing.Dict[typing.Any, typing.Any]`.",
    "message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `json.loads` but got `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 30,
    "warning_line": "    snapshot = json.loads(raw_snapshot)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _transform_snapshot(raw_snapshot: Dict[Any, Any]) -> str:\n    \"\"\"\n",
        "source_code_len": 71,
        "target_code": "\ndef _transform_snapshot(raw_snapshot: str) -> str:\n    \"\"\"\n",
        "target_code_len": 60,
        "diff_format": "@@ -22,3 +22,3 @@\n \n-def _transform_snapshot(raw_snapshot: Dict[Any, Any]) -> str:\n+def _transform_snapshot(raw_snapshot: str) -> str:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _transform_snapshot(raw_snapshot: Dict[Any, Any]) -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED>def _transform_snapshot(raw_snapshot: str) -> str:\n    <IND>"
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v18_to_v19.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v18_to_v19.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v18_to_v19.py:116:60 Incompatible parameter type [6]: Expected `BlockNumber` for 1st positional only parameter to call `BlockHashCache.get` but got `int`.",
    "message": " Expected `BlockNumber` for 1st positional only parameter to call `BlockHashCache.get` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 116,
    "warning_line": "                data[\"triggered_by_block_hash\"] = cache.get(block_number)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            elif \"block_number\" in statechange_data:\n                block_number = int(statechange_data[\"block_number\"])\n                data[\"triggered_by_block_hash\"] = cache.get(block_number)\n",
        "source_code_len": 196,
        "target_code": "            elif \"block_number\" in statechange_data:\n                block_number = BlockNumber(int(statechange_data[\"block_number\"]))\n                data[\"triggered_by_block_hash\"] = cache.get(block_number)\n",
        "target_code_len": 209,
        "diff_format": "@@ -114,3 +114,3 @@\n             elif \"block_number\" in statechange_data:\n-                block_number = int(statechange_data[\"block_number\"])\n+                block_number = BlockNumber(int(statechange_data[\"block_number\"]))\n                 data[\"triggered_by_block_hash\"] = cache.get(block_number)\n",
        "source_code_with_indent": "            <DED>elif \"block_number\" in statechange_data:\n                <IND>block_number = int(statechange_data[\"block_number\"])\n                data[\"triggered_by_block_hash\"] = cache.get(block_number)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>elif \"block_number\" in statechange_data:\n                <IND>block_number = BlockNumber(int(statechange_data[\"block_number\"]))\n                data[\"triggered_by_block_hash\"] = cache.get(block_number)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v18_to_v19.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v18_to_v19.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v18_to_v19.py:127:39 Incompatible parameter type [6]: Expected `BlockNumber` for 1st positional only parameter to call `BlockHashCache.get` but got `int`.",
    "message": " Expected `BlockNumber` for 1st positional only parameter to call `BlockHashCache.get` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 127,
    "warning_line": "    snapshot[\"block_hash\"] = cache.get(block_number)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    snapshot = json.loads(raw_snapshot)\n    block_number = int(snapshot[\"block_number\"])\n    snapshot[\"block_hash\"] = cache.get(block_number)\n",
        "source_code_len": 142,
        "target_code": "    snapshot = json.loads(raw_snapshot)\n    block_number = BlockNumber(int(snapshot[\"block_number\"]))\n    snapshot[\"block_hash\"] = cache.get(block_number)\n",
        "target_code_len": 155,
        "diff_format": "@@ -125,3 +125,3 @@\n     snapshot = json.loads(raw_snapshot)\n-    block_number = int(snapshot[\"block_number\"])\n+    block_number = BlockNumber(int(snapshot[\"block_number\"]))\n     snapshot[\"block_hash\"] = cache.get(block_number)\n",
        "source_code_with_indent": "    snapshot = json.loads(raw_snapshot)\n    block_number = int(snapshot[\"block_number\"])\n    snapshot[\"block_hash\"] = cache.get(block_number)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    snapshot = json.loads(raw_snapshot)\n    block_number = BlockNumber(int(snapshot[\"block_number\"]))\n    snapshot[\"block_hash\"] = cache.get(block_number)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v19_to_v20.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v19_to_v20.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v19_to_v20.py:52:8 Incompatible parameter type [6]: Expected `raiden.utils.typing.ChainID` for 1st parameter `chain_identifier` to call `CanonicalIdentifier.__init__` but got `int`.",
    "message": " Expected `raiden.utils.typing.ChainID` for 1st parameter `chain_identifier` to call `CanonicalIdentifier.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "        chain_identifier=-1,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import Any, Dict, Locksroot, Tuple\n\nRaidenService = \"RaidenService\"\n\n",
        "source_code_len": 340,
        "target_code": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import (\n    Any,\n    ChainID,\n    ChannelID,\n    Dict,\n    Locksroot,\n    TokenNetworkAddress,\n    Tuple,\n)\n\nif TYPE_CHECKING:\n    # pylint: disable=unused-import\n    from raiden.raiden_service import RaidenService  # noqa: F401\n\n\n",
        "target_code_len": 519,
        "diff_format": "@@ -9,8 +10,19 @@\n from raiden.network.proxies.utils import get_onchain_locksroots\n-from raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\n+from raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\n from raiden.transfer.identifiers import CanonicalIdentifier\n from raiden.utils.serialization import serialize_bytes\n-from raiden.utils.typing import Any, Dict, Locksroot, Tuple\n-\n-RaidenService = \"RaidenService\"\n+from raiden.utils.typing import (\n+    Any,\n+    ChainID,\n+    ChannelID,\n+    Dict,\n+    Locksroot,\n+    TokenNetworkAddress,\n+    Tuple,\n+)\n+\n+if TYPE_CHECKING:\n+    # pylint: disable=unused-import\n+    from raiden.raiden_service import RaidenService  # noqa: F401\n+\n \n",
        "source_code_with_indent": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import Any, Dict, Locksroot, Tuple\n\nRaidenService = \"RaidenService\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import (\n    Any,\n    ChainID,\n    ChannelID,\n    Dict,\n    Locksroot,\n    TokenNetworkAddress,\n    Tuple,\n)\n\nif TYPE_CHECKING:\n    # pylint: disable=unused-import\n    <IND>from raiden.raiden_service import RaidenService  # noqa: F401\n\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    canonical_identifier = CanonicalIdentifier(\n        chain_identifier=-1,\n        token_network_address=to_canonical_address(token_network[\"address\"]),\n        channel_identifier=int(channel[\"identifier\"]),\n    )\n",
        "source_code_len": 216,
        "target_code": "    canonical_identifier = CanonicalIdentifier(\n        chain_identifier=ChainID(-1),\n        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n    )\n",
        "target_code_len": 257,
        "diff_format": "@@ -51,5 +63,5 @@\n     canonical_identifier = CanonicalIdentifier(\n-        chain_identifier=-1,\n-        token_network_address=to_canonical_address(token_network[\"address\"]),\n-        channel_identifier=int(channel[\"identifier\"]),\n+        chain_identifier=ChainID(-1),\n+        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n+        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n     )\n",
        "source_code_with_indent": "    <DED>canonical_identifier = CanonicalIdentifier(\n        chain_identifier=-1,\n        token_network_address=to_canonical_address(token_network[\"address\"]),\n        channel_identifier=int(channel[\"identifier\"]),\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>canonical_identifier = CanonicalIdentifier(\n        chain_identifier=ChainID(-1),\n        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n    )\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=-1,\n                token_network_address=to_canonical_address(token_network_identifier),\n                channel_identifier=int(channel_identifier),\n            )\n",
        "source_code_len": 253,
        "target_code": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=ChainID(-1),\n                token_network_address=TokenNetworkAddress(\n                    to_canonical_address(token_network_identifier)\n                ),\n                channel_identifier=ChannelID(int(channel_identifier)),\n            )\n",
        "target_code_len": 332,
        "diff_format": "@@ -136,5 +148,7 @@\n             canonical_identifier = CanonicalIdentifier(\n-                chain_identifier=-1,\n-                token_network_address=to_canonical_address(token_network_identifier),\n-                channel_identifier=int(channel_identifier),\n+                chain_identifier=ChainID(-1),\n+                token_network_address=TokenNetworkAddress(\n+                    to_canonical_address(token_network_identifier)\n+                ),\n+                channel_identifier=ChannelID(int(channel_identifier)),\n             )\n",
        "source_code_with_indent": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=-1,\n                token_network_address=to_canonical_address(token_network_identifier),\n                channel_identifier=int(channel_identifier),\n            )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=ChainID(-1),\n                token_network_address=TokenNetworkAddress(\n                    to_canonical_address(token_network_identifier)\n                ),\n                channel_identifier=ChannelID(int(channel_identifier)),\n            )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v19_to_v20.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v19_to_v20.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v19_to_v20.py:54:8 Incompatible parameter type [6]: Expected `raiden.utils.typing.ChannelID` for 3rd parameter `channel_identifier` to call `CanonicalIdentifier.__init__` but got `int`.",
    "message": " Expected `raiden.utils.typing.ChannelID` for 3rd parameter `channel_identifier` to call `CanonicalIdentifier.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 54,
    "warning_line": "        channel_identifier=int(channel[\"identifier\"]),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import Any, Dict, Locksroot, Tuple\n\nRaidenService = \"RaidenService\"\n\n",
        "source_code_len": 340,
        "target_code": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import (\n    Any,\n    ChainID,\n    ChannelID,\n    Dict,\n    Locksroot,\n    TokenNetworkAddress,\n    Tuple,\n)\n\nif TYPE_CHECKING:\n    # pylint: disable=unused-import\n    from raiden.raiden_service import RaidenService  # noqa: F401\n\n\n",
        "target_code_len": 519,
        "diff_format": "@@ -9,8 +10,19 @@\n from raiden.network.proxies.utils import get_onchain_locksroots\n-from raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\n+from raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\n from raiden.transfer.identifiers import CanonicalIdentifier\n from raiden.utils.serialization import serialize_bytes\n-from raiden.utils.typing import Any, Dict, Locksroot, Tuple\n-\n-RaidenService = \"RaidenService\"\n+from raiden.utils.typing import (\n+    Any,\n+    ChainID,\n+    ChannelID,\n+    Dict,\n+    Locksroot,\n+    TokenNetworkAddress,\n+    Tuple,\n+)\n+\n+if TYPE_CHECKING:\n+    # pylint: disable=unused-import\n+    from raiden.raiden_service import RaidenService  # noqa: F401\n+\n \n",
        "source_code_with_indent": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import Any, Dict, Locksroot, Tuple\n\nRaidenService = \"RaidenService\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import (\n    Any,\n    ChainID,\n    ChannelID,\n    Dict,\n    Locksroot,\n    TokenNetworkAddress,\n    Tuple,\n)\n\nif TYPE_CHECKING:\n    # pylint: disable=unused-import\n    <IND>from raiden.raiden_service import RaidenService  # noqa: F401\n\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    canonical_identifier = CanonicalIdentifier(\n        chain_identifier=-1,\n        token_network_address=to_canonical_address(token_network[\"address\"]),\n        channel_identifier=int(channel[\"identifier\"]),\n    )\n",
        "source_code_len": 216,
        "target_code": "    canonical_identifier = CanonicalIdentifier(\n        chain_identifier=ChainID(-1),\n        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n    )\n",
        "target_code_len": 257,
        "diff_format": "@@ -51,5 +63,5 @@\n     canonical_identifier = CanonicalIdentifier(\n-        chain_identifier=-1,\n-        token_network_address=to_canonical_address(token_network[\"address\"]),\n-        channel_identifier=int(channel[\"identifier\"]),\n+        chain_identifier=ChainID(-1),\n+        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n+        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n     )\n",
        "source_code_with_indent": "    <DED>canonical_identifier = CanonicalIdentifier(\n        chain_identifier=-1,\n        token_network_address=to_canonical_address(token_network[\"address\"]),\n        channel_identifier=int(channel[\"identifier\"]),\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>canonical_identifier = CanonicalIdentifier(\n        chain_identifier=ChainID(-1),\n        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n    )\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=-1,\n                token_network_address=to_canonical_address(token_network_identifier),\n                channel_identifier=int(channel_identifier),\n            )\n",
        "source_code_len": 253,
        "target_code": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=ChainID(-1),\n                token_network_address=TokenNetworkAddress(\n                    to_canonical_address(token_network_identifier)\n                ),\n                channel_identifier=ChannelID(int(channel_identifier)),\n            )\n",
        "target_code_len": 332,
        "diff_format": "@@ -136,5 +148,7 @@\n             canonical_identifier = CanonicalIdentifier(\n-                chain_identifier=-1,\n-                token_network_address=to_canonical_address(token_network_identifier),\n-                channel_identifier=int(channel_identifier),\n+                chain_identifier=ChainID(-1),\n+                token_network_address=TokenNetworkAddress(\n+                    to_canonical_address(token_network_identifier)\n+                ),\n+                channel_identifier=ChannelID(int(channel_identifier)),\n             )\n",
        "source_code_with_indent": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=-1,\n                token_network_address=to_canonical_address(token_network_identifier),\n                channel_identifier=int(channel_identifier),\n            )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=ChainID(-1),\n                token_network_address=TokenNetworkAddress(\n                    to_canonical_address(token_network_identifier)\n                ),\n                channel_identifier=ChannelID(int(channel_identifier)),\n            )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v19_to_v20.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v19_to_v20.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v19_to_v20.py:137:16 Incompatible parameter type [6]: Expected `raiden.utils.typing.ChainID` for 1st parameter `chain_identifier` to call `CanonicalIdentifier.__init__` but got `int`.",
    "message": " Expected `raiden.utils.typing.ChainID` for 1st parameter `chain_identifier` to call `CanonicalIdentifier.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 137,
    "warning_line": "                chain_identifier=-1,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import Any, Dict, Locksroot, Tuple\n\nRaidenService = \"RaidenService\"\n\n",
        "source_code_len": 340,
        "target_code": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import (\n    Any,\n    ChainID,\n    ChannelID,\n    Dict,\n    Locksroot,\n    TokenNetworkAddress,\n    Tuple,\n)\n\nif TYPE_CHECKING:\n    # pylint: disable=unused-import\n    from raiden.raiden_service import RaidenService  # noqa: F401\n\n\n",
        "target_code_len": 519,
        "diff_format": "@@ -9,8 +10,19 @@\n from raiden.network.proxies.utils import get_onchain_locksroots\n-from raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\n+from raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\n from raiden.transfer.identifiers import CanonicalIdentifier\n from raiden.utils.serialization import serialize_bytes\n-from raiden.utils.typing import Any, Dict, Locksroot, Tuple\n-\n-RaidenService = \"RaidenService\"\n+from raiden.utils.typing import (\n+    Any,\n+    ChainID,\n+    ChannelID,\n+    Dict,\n+    Locksroot,\n+    TokenNetworkAddress,\n+    Tuple,\n+)\n+\n+if TYPE_CHECKING:\n+    # pylint: disable=unused-import\n+    from raiden.raiden_service import RaidenService  # noqa: F401\n+\n \n",
        "source_code_with_indent": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import Any, Dict, Locksroot, Tuple\n\nRaidenService = \"RaidenService\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import (\n    Any,\n    ChainID,\n    ChannelID,\n    Dict,\n    Locksroot,\n    TokenNetworkAddress,\n    Tuple,\n)\n\nif TYPE_CHECKING:\n    # pylint: disable=unused-import\n    <IND>from raiden.raiden_service import RaidenService  # noqa: F401\n\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    canonical_identifier = CanonicalIdentifier(\n        chain_identifier=-1,\n        token_network_address=to_canonical_address(token_network[\"address\"]),\n        channel_identifier=int(channel[\"identifier\"]),\n    )\n",
        "source_code_len": 216,
        "target_code": "    canonical_identifier = CanonicalIdentifier(\n        chain_identifier=ChainID(-1),\n        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n    )\n",
        "target_code_len": 257,
        "diff_format": "@@ -51,5 +63,5 @@\n     canonical_identifier = CanonicalIdentifier(\n-        chain_identifier=-1,\n-        token_network_address=to_canonical_address(token_network[\"address\"]),\n-        channel_identifier=int(channel[\"identifier\"]),\n+        chain_identifier=ChainID(-1),\n+        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n+        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n     )\n",
        "source_code_with_indent": "    <DED>canonical_identifier = CanonicalIdentifier(\n        chain_identifier=-1,\n        token_network_address=to_canonical_address(token_network[\"address\"]),\n        channel_identifier=int(channel[\"identifier\"]),\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>canonical_identifier = CanonicalIdentifier(\n        chain_identifier=ChainID(-1),\n        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n    )\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=-1,\n                token_network_address=to_canonical_address(token_network_identifier),\n                channel_identifier=int(channel_identifier),\n            )\n",
        "source_code_len": 253,
        "target_code": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=ChainID(-1),\n                token_network_address=TokenNetworkAddress(\n                    to_canonical_address(token_network_identifier)\n                ),\n                channel_identifier=ChannelID(int(channel_identifier)),\n            )\n",
        "target_code_len": 332,
        "diff_format": "@@ -136,5 +148,7 @@\n             canonical_identifier = CanonicalIdentifier(\n-                chain_identifier=-1,\n-                token_network_address=to_canonical_address(token_network_identifier),\n-                channel_identifier=int(channel_identifier),\n+                chain_identifier=ChainID(-1),\n+                token_network_address=TokenNetworkAddress(\n+                    to_canonical_address(token_network_identifier)\n+                ),\n+                channel_identifier=ChannelID(int(channel_identifier)),\n             )\n",
        "source_code_with_indent": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=-1,\n                token_network_address=to_canonical_address(token_network_identifier),\n                channel_identifier=int(channel_identifier),\n            )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=ChainID(-1),\n                token_network_address=TokenNetworkAddress(\n                    to_canonical_address(token_network_identifier)\n                ),\n                channel_identifier=ChannelID(int(channel_identifier)),\n            )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v19_to_v20.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v19_to_v20.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v19_to_v20.py:139:16 Incompatible parameter type [6]: Expected `raiden.utils.typing.ChannelID` for 3rd parameter `channel_identifier` to call `CanonicalIdentifier.__init__` but got `int`.",
    "message": " Expected `raiden.utils.typing.ChannelID` for 3rd parameter `channel_identifier` to call `CanonicalIdentifier.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 139,
    "warning_line": "                channel_identifier=int(channel_identifier),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import Any, Dict, Locksroot, Tuple\n\nRaidenService = \"RaidenService\"\n\n",
        "source_code_len": 340,
        "target_code": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import (\n    Any,\n    ChainID,\n    ChannelID,\n    Dict,\n    Locksroot,\n    TokenNetworkAddress,\n    Tuple,\n)\n\nif TYPE_CHECKING:\n    # pylint: disable=unused-import\n    from raiden.raiden_service import RaidenService  # noqa: F401\n\n\n",
        "target_code_len": 519,
        "diff_format": "@@ -9,8 +10,19 @@\n from raiden.network.proxies.utils import get_onchain_locksroots\n-from raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\n+from raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\n from raiden.transfer.identifiers import CanonicalIdentifier\n from raiden.utils.serialization import serialize_bytes\n-from raiden.utils.typing import Any, Dict, Locksroot, Tuple\n-\n-RaidenService = \"RaidenService\"\n+from raiden.utils.typing import (\n+    Any,\n+    ChainID,\n+    ChannelID,\n+    Dict,\n+    Locksroot,\n+    TokenNetworkAddress,\n+    Tuple,\n+)\n+\n+if TYPE_CHECKING:\n+    # pylint: disable=unused-import\n+    from raiden.raiden_service import RaidenService  # noqa: F401\n+\n \n",
        "source_code_with_indent": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import Any, Dict, Locksroot, Tuple\n\nRaidenService = \"RaidenService\"\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from raiden.network.proxies.utils import get_onchain_locksroots\nfrom raiden.storage.sqlite import SnapshotRecord, SQLiteStorage, StateChangeRecord\nfrom raiden.transfer.identifiers import CanonicalIdentifier\nfrom raiden.utils.serialization import serialize_bytes\nfrom raiden.utils.typing import (\n    Any,\n    ChainID,\n    ChannelID,\n    Dict,\n    Locksroot,\n    TokenNetworkAddress,\n    Tuple,\n)\n\nif TYPE_CHECKING:\n    # pylint: disable=unused-import\n    <IND>from raiden.raiden_service import RaidenService  # noqa: F401\n\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    canonical_identifier = CanonicalIdentifier(\n        chain_identifier=-1,\n        token_network_address=to_canonical_address(token_network[\"address\"]),\n        channel_identifier=int(channel[\"identifier\"]),\n    )\n",
        "source_code_len": 216,
        "target_code": "    canonical_identifier = CanonicalIdentifier(\n        chain_identifier=ChainID(-1),\n        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n    )\n",
        "target_code_len": 257,
        "diff_format": "@@ -51,5 +63,5 @@\n     canonical_identifier = CanonicalIdentifier(\n-        chain_identifier=-1,\n-        token_network_address=to_canonical_address(token_network[\"address\"]),\n-        channel_identifier=int(channel[\"identifier\"]),\n+        chain_identifier=ChainID(-1),\n+        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n+        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n     )\n",
        "source_code_with_indent": "    <DED>canonical_identifier = CanonicalIdentifier(\n        chain_identifier=-1,\n        token_network_address=to_canonical_address(token_network[\"address\"]),\n        channel_identifier=int(channel[\"identifier\"]),\n    )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>canonical_identifier = CanonicalIdentifier(\n        chain_identifier=ChainID(-1),\n        token_network_address=TokenNetworkAddress(to_canonical_address(token_network[\"address\"])),\n        channel_identifier=ChannelID(int(channel[\"identifier\"])),\n    )\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=-1,\n                token_network_address=to_canonical_address(token_network_identifier),\n                channel_identifier=int(channel_identifier),\n            )\n",
        "source_code_len": 253,
        "target_code": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=ChainID(-1),\n                token_network_address=TokenNetworkAddress(\n                    to_canonical_address(token_network_identifier)\n                ),\n                channel_identifier=ChannelID(int(channel_identifier)),\n            )\n",
        "target_code_len": 332,
        "diff_format": "@@ -136,5 +148,7 @@\n             canonical_identifier = CanonicalIdentifier(\n-                chain_identifier=-1,\n-                token_network_address=to_canonical_address(token_network_identifier),\n-                channel_identifier=int(channel_identifier),\n+                chain_identifier=ChainID(-1),\n+                token_network_address=TokenNetworkAddress(\n+                    to_canonical_address(token_network_identifier)\n+                ),\n+                channel_identifier=ChannelID(int(channel_identifier)),\n             )\n",
        "source_code_with_indent": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=-1,\n                token_network_address=to_canonical_address(token_network_identifier),\n                channel_identifier=int(channel_identifier),\n            )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            canonical_identifier = CanonicalIdentifier(\n                chain_identifier=ChainID(-1),\n                token_network_address=TokenNetworkAddress(\n                    to_canonical_address(token_network_identifier)\n                ),\n                channel_identifier=ChannelID(int(channel_identifier)),\n            )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:54:52 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 54,
    "warning_line": "        \"token_network_address\": pop_first_key(obj, SPELLING_VARS_TOKEN_NETWORK),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:55:49 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 55,
    "warning_line": "        \"channel_identifier\": pop_first_key(obj, SPELLING_VARS_CHANNEL),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:71:52 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 71,
    "warning_line": "        \"token_network_address\": pop_first_key(obj, SPELLING_VARS_TOKEN_NETWORK),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:92:52 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 92,
    "warning_line": "        \"token_network_address\": pop_first_key(obj, SPELLING_VARS_TOKEN_NETWORK),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:93:49 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 93,
    "warning_line": "        \"channel_identifier\": pop_first_key(obj, SPELLING_VARS_CHANNEL),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:110:47 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 110,
    "warning_line": "        \"chain_identifier\": pop_first_key(obj, SPELLING_VARS_CHAIN),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:111:52 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 111,
    "warning_line": "        \"token_network_address\": pop_first_key(obj, SPELLING_VARS_TOKEN_NETWORK),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:112:49 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 112,
    "warning_line": "        \"channel_identifier\": pop_first_key(obj, SPELLING_VARS_CHANNEL),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:126:23 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 126,
    "warning_line": "    pop_first_key(obj, SPELLING_VARS_TOKEN_NETWORK)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:127:23 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 127,
    "warning_line": "    pop_first_key(obj, SPELLING_VARS_CHANNEL)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "aa66a4ee225f171c9f2f1d14c33a491507496b40",
    "filename": "raiden/storage/migrations/v21_to_v22.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/storage/migrations/v21_to_v22.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/storage/migrations/v21_to_v22.py:137:23 Incompatible parameter type [6]: Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "message": " Expected `typing.List[str]` for 2nd positional only parameter to call `pop_first_key` but got `typing.Tuple[str, str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 137,
    "warning_line": "    pop_first_key(obj, SPELLING_VARS_TOKEN_NETWORK)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_len": 62,
        "target_code": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_len": 62,
        "diff_format": "@@ -18,3 +18,3 @@\n \n-SPELLING_VARS_TOKEN_NETWORK = (\n+SPELLING_VARS_TOKEN_NETWORK = [\n     \"token_network_address\",\n",
        "source_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = (\n    \"token_network_address\",\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nSPELLING_VARS_TOKEN_NETWORK = [\n    \"token_network_address\",\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_len": 167,
        "target_code": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_len": 167,
        "diff_format": "@@ -22,7 +22,7 @@\n     \"token_network_identifier\",\n-)\n-\n-SPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n-\n-SPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n+]\n+\n+SPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n+\n+SPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n \n",
        "source_code_with_indent": "    \"token_network_identifier\",\n)\n\nSPELLING_VARS_CHANNEL = (\"channel_identifier\", \"channel_id\", \"identifier\")\n\nSPELLING_VARS_CHAIN = (\"chain_id\", \"chain_identifier\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    \"token_network_identifier\",\n]\n\nSPELLING_VARS_CHANNEL = [\"channel_identifier\", \"channel_id\", \"identifier\"]\n\nSPELLING_VARS_CHAIN = [\"chain_id\", \"chain_identifier\"]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]