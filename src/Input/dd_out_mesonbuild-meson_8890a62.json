[
  {
    "project": "mesonbuild/meson",
    "commit": "8890a624997a9cf56ead08bda03e9b46803986ad",
    "filename": "mesonbuild/interpreterbase.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mesonbuild-meson/mesonbuild/interpreterbase.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mesonbuild/interpreterbase.py:320:50 Unsupported operand [58]: `+` is not supported for operand types `T.List[T.Union[T.Type[typing.Any], typing.Tuple[T.Type[typing.Any], ...]]]` and `T.List[T.Union[T.Tuple[T.Type[typing.Any]], T.Type[typing.Any]]]`.",
    "message": " `+` is not supported for operand types `T.List[T.Union[T.Type[typing.Any], typing.Tuple[T.Type[typing.Any], ...]]]` and `T.List[T.Union[T.Tuple[T.Type[typing.Any]], T.Type[typing.Any]]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 320,
    "warning_line": "                    a_types = tuple(list(types) + list(optargs[:diff]))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def typed_pos_args(name: str, *types: T.Union[T.Type, T.Tuple[T.Type, ...]],\n                   varargs: T.Optional[T.Union[T.Type, T.Tuple[T.Type]]] = None,\n                   optargs: T.Optional[T.List[T.Union[T.Type, T.Tuple[T.Type]]]] = None,\n                   min_varargs: int = 0, max_varargs: int = 0) -> T.Callable[..., T.Any]:\n",
        "source_code_len": 337,
        "target_code": "def typed_pos_args(name: str, *types: T.Union[T.Type, T.Tuple[T.Type, ...]],\n                   varargs: T.Optional[T.Union[T.Type, T.Tuple[T.Type, ...]]] = None,\n                   optargs: T.Optional[T.List[T.Union[T.Type, T.Tuple[T.Type, ...]]]] = None,\n                   min_varargs: int = 0, max_varargs: int = 0) -> T.Callable[..., T.Any]:\n",
        "target_code_len": 347,
        "diff_format": "@@ -240,4 +240,4 @@\n def typed_pos_args(name: str, *types: T.Union[T.Type, T.Tuple[T.Type, ...]],\n-                   varargs: T.Optional[T.Union[T.Type, T.Tuple[T.Type]]] = None,\n-                   optargs: T.Optional[T.List[T.Union[T.Type, T.Tuple[T.Type]]]] = None,\n+                   varargs: T.Optional[T.Union[T.Type, T.Tuple[T.Type, ...]]] = None,\n+                   optargs: T.Optional[T.List[T.Union[T.Type, T.Tuple[T.Type, ...]]]] = None,\n                    min_varargs: int = 0, max_varargs: int = 0) -> T.Callable[..., T.Any]:\n",
        "source_code_with_indent": "<DED><DED>def typed_pos_args(name: str, *types: T.Union[T.Type, T.Tuple[T.Type, ...]],\n                   varargs: T.Optional[T.Union[T.Type, T.Tuple[T.Type]]] = None,\n                   optargs: T.Optional[T.List[T.Union[T.Type, T.Tuple[T.Type]]]] = None,\n                   min_varargs: int = 0, max_varargs: int = 0) -> T.Callable[..., T.Any]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>def typed_pos_args(name: str, *types: T.Union[T.Type, T.Tuple[T.Type, ...]],\n                   varargs: T.Optional[T.Union[T.Type, T.Tuple[T.Type, ...]]] = None,\n                   optargs: T.Optional[T.List[T.Union[T.Type, T.Tuple[T.Type, ...]]]] = None,\n                   min_varargs: int = 0, max_varargs: int = 0) -> T.Callable[..., T.Any]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mesonbuild/meson",
    "commit": "8890a624997a9cf56ead08bda03e9b46803986ad",
    "filename": "run_unittests.py",
    "min_patch_found": false,
    "full_warning_msg": "run_unittests.py:1364:36 Incompatible parameter type [6]: Expected `T.Union[None, T.Tuple[T.Type[typing.Any]], T.Type[typing.Any]]` for 3rd parameter `varargs` to call `typed_pos_args` but got `T.Tuple[T.Type[str], T.Type[list]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]