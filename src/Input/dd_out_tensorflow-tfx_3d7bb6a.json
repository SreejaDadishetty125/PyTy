[
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/example_validator/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/example_validator/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/example_validator/component.py:49:15 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 49,
    "warning_line": "               name: Text = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               stats: channel.Channel,\n               schema: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    \"\"\"Construct an ExampleValidator component.\n",
        "source_code_len": 243,
        "target_code": "  def __init__(self,\n               stats,\n               schema,\n               name = None,\n               outputs = None):\n    \"\"\"Construct an ExampleValidator component.\n",
        "target_code_len": 174,
        "diff_format": "@@ -46,6 +46,6 @@\n   def __init__(self,\n-               stats: channel.Channel,\n-               schema: channel.Channel,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               stats,\n+               schema,\n+               name = None,\n+               outputs = None):\n     \"\"\"Construct an ExampleValidator component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  def __init__(self,\n               stats: channel.Channel,\n               schema: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>",
        "target_code_with_indent": "  def __init__(self,\n               stats,\n               schema,\n               name = None,\n               outputs = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/example_validator/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/example_validator/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/example_validator/component.py:50:15 Incompatible variable type [9]: outputs is declared to have type `Dict[str, channel.Channel]` but is used as type `None`.",
    "message": " outputs is declared to have type `Dict[str, channel.Channel]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 50,
    "warning_line": "               outputs: Dict[Text, channel.Channel] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               stats: channel.Channel,\n               schema: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    \"\"\"Construct an ExampleValidator component.\n",
        "source_code_len": 243,
        "target_code": "  def __init__(self,\n               stats,\n               schema,\n               name = None,\n               outputs = None):\n    \"\"\"Construct an ExampleValidator component.\n",
        "target_code_len": 174,
        "diff_format": "@@ -46,6 +46,6 @@\n   def __init__(self,\n-               stats: channel.Channel,\n-               schema: channel.Channel,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               stats,\n+               schema,\n+               name = None,\n+               outputs = None):\n     \"\"\"Construct an ExampleValidator component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  def __init__(self,\n               stats: channel.Channel,\n               schema: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>",
        "target_code_with_indent": "  def __init__(self,\n               stats,\n               schema,\n               name = None,\n               outputs = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/example_validator/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/example_validator/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/example_validator/component.py:74:8 Incompatible parameter type [6]: Expected `typing.Optional[base_component.ComponentOutputs]` for 6th parameter `outputs` to call `base_component.BaseComponent.__init__` but got `Dict[str, channel.Channel]`.",
    "message": " Expected `typing.Optional[base_component.ComponentOutputs]` for 6th parameter `outputs` to call `base_component.BaseComponent.__init__` but got `Dict[str, channel.Channel]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 74,
    "warning_line": "        outputs=outputs,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               stats: channel.Channel,\n               schema: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    \"\"\"Construct an ExampleValidator component.\n",
        "source_code_len": 243,
        "target_code": "  def __init__(self,\n               stats,\n               schema,\n               name = None,\n               outputs = None):\n    \"\"\"Construct an ExampleValidator component.\n",
        "target_code_len": 174,
        "diff_format": "@@ -46,6 +46,6 @@\n   def __init__(self,\n-               stats: channel.Channel,\n-               schema: channel.Channel,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               stats,\n+               schema,\n+               name = None,\n+               outputs = None):\n     \"\"\"Construct an ExampleValidator component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  def __init__(self,\n               stats: channel.Channel,\n               schema: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>",
        "target_code_with_indent": "  def __init__(self,\n               stats,\n               schema,\n               name = None,\n               outputs = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/pusher/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/pusher/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/pusher/component.py:56:15 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 56,
    "warning_line": "               name: Text = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               model_export: channel.Channel,\n               model_blessing: channel.Channel,\n               push_destination: pusher_pb2.PushDestination,\n               name: Text = None,\n               outputs: base_component.ComponentOutputs = None):\n    component_name = 'Pusher'\n",
        "source_code_len": 305,
        "target_code": "  def __init__(self,\n               model_export,\n               model_blessing,\n               push_destination,\n               name = None,\n               outputs = None):\n    component_name = 'Pusher'\n",
        "target_code_len": 204,
        "diff_format": "@@ -52,7 +52,7 @@\n   def __init__(self,\n-               model_export: channel.Channel,\n-               model_blessing: channel.Channel,\n-               push_destination: pusher_pb2.PushDestination,\n-               name: Text = None,\n-               outputs: base_component.ComponentOutputs = None):\n+               model_export,\n+               model_blessing,\n+               push_destination,\n+               name = None,\n+               outputs = None):\n     component_name = 'Pusher'\n",
        "source_code_with_indent": "  def __init__(self,\n               model_export: channel.Channel,\n               model_blessing: channel.Channel,\n               push_destination: pusher_pb2.PushDestination,\n               name: Text = None,\n               outputs: base_component.ComponentOutputs = None):\n    <IND>component_name = 'Pusher'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self,\n               model_export,\n               model_blessing,\n               push_destination,\n               name = None,\n               outputs = None):\n    <IND>component_name = 'Pusher'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/pusher/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/pusher/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/pusher/component.py:57:15 Incompatible variable type [9]: outputs is declared to have type `base_component.ComponentOutputs` but is used as type `None`.",
    "message": " outputs is declared to have type `base_component.ComponentOutputs` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 57,
    "warning_line": "               outputs: base_component.ComponentOutputs = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               model_export: channel.Channel,\n               model_blessing: channel.Channel,\n               push_destination: pusher_pb2.PushDestination,\n               name: Text = None,\n               outputs: base_component.ComponentOutputs = None):\n    component_name = 'Pusher'\n",
        "source_code_len": 305,
        "target_code": "  def __init__(self,\n               model_export,\n               model_blessing,\n               push_destination,\n               name = None,\n               outputs = None):\n    component_name = 'Pusher'\n",
        "target_code_len": 204,
        "diff_format": "@@ -52,7 +52,7 @@\n   def __init__(self,\n-               model_export: channel.Channel,\n-               model_blessing: channel.Channel,\n-               push_destination: pusher_pb2.PushDestination,\n-               name: Text = None,\n-               outputs: base_component.ComponentOutputs = None):\n+               model_export,\n+               model_blessing,\n+               push_destination,\n+               name = None,\n+               outputs = None):\n     component_name = 'Pusher'\n",
        "source_code_with_indent": "  def __init__(self,\n               model_export: channel.Channel,\n               model_blessing: channel.Channel,\n               push_destination: pusher_pb2.PushDestination,\n               name: Text = None,\n               outputs: base_component.ComponentOutputs = None):\n    <IND>component_name = 'Pusher'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self,\n               model_export,\n               model_blessing,\n               push_destination,\n               name = None,\n               outputs = None):\n    <IND>component_name = 'Pusher'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/schema_gen/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/schema_gen/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/schema_gen/component.py:41:15 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 41,
    "warning_line": "               name: Text = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               stats: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    \"\"\"Constructs a SchemaGen component.\n",
        "source_code_len": 196,
        "target_code": "  def __init__(self,\n               stats,\n               name = None,\n               outputs = None):\n    \"\"\"Constructs a SchemaGen component.\n",
        "target_code_len": 144,
        "diff_format": "@@ -39,5 +39,5 @@\n   def __init__(self,\n-               stats: channel.Channel,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               stats,\n+               name = None,\n+               outputs = None):\n     \"\"\"Constructs a SchemaGen component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  def __init__(self,\n               stats: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>",
        "target_code_with_indent": "  def __init__(self,\n               stats,\n               name = None,\n               outputs = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/schema_gen/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/schema_gen/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/schema_gen/component.py:42:15 Incompatible variable type [9]: outputs is declared to have type `Dict[str, channel.Channel]` but is used as type `None`.",
    "message": " outputs is declared to have type `Dict[str, channel.Channel]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 42,
    "warning_line": "               outputs: Dict[Text, channel.Channel] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               stats: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    \"\"\"Constructs a SchemaGen component.\n",
        "source_code_len": 196,
        "target_code": "  def __init__(self,\n               stats,\n               name = None,\n               outputs = None):\n    \"\"\"Constructs a SchemaGen component.\n",
        "target_code_len": 144,
        "diff_format": "@@ -39,5 +39,5 @@\n   def __init__(self,\n-               stats: channel.Channel,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               stats,\n+               name = None,\n+               outputs = None):\n     \"\"\"Constructs a SchemaGen component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  def __init__(self,\n               stats: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>",
        "target_code_with_indent": "  def __init__(self,\n               stats,\n               name = None,\n               outputs = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/schema_gen/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/schema_gen/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/schema_gen/component.py:61:8 Incompatible parameter type [6]: Expected `typing.Optional[base_component.ComponentOutputs]` for 6th parameter `outputs` to call `base_component.BaseComponent.__init__` but got `Dict[str, channel.Channel]`.",
    "message": " Expected `typing.Optional[base_component.ComponentOutputs]` for 6th parameter `outputs` to call `base_component.BaseComponent.__init__` but got `Dict[str, channel.Channel]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 61,
    "warning_line": "        outputs=outputs,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               stats: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    \"\"\"Constructs a SchemaGen component.\n",
        "source_code_len": 196,
        "target_code": "  def __init__(self,\n               stats,\n               name = None,\n               outputs = None):\n    \"\"\"Constructs a SchemaGen component.\n",
        "target_code_len": 144,
        "diff_format": "@@ -39,5 +39,5 @@\n   def __init__(self,\n-               stats: channel.Channel,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               stats,\n+               name = None,\n+               outputs = None):\n     \"\"\"Constructs a SchemaGen component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  def __init__(self,\n               stats: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>",
        "target_code_with_indent": "  def __init__(self,\n               stats,\n               name = None,\n               outputs = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/statistics_gen/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/statistics_gen/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/statistics_gen/component.py:43:15 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 43,
    "warning_line": "               name: Text = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               input_data: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    \"\"\"Constructs a StatisticsGen component.\n",
        "source_code_len": 205,
        "target_code": "  def __init__(self,\n               input_data,\n               name = None,\n               outputs = None):\n    \"\"\"Constructs a StatisticsGen component.\n",
        "target_code_len": 153,
        "diff_format": "@@ -41,5 +41,5 @@\n   def __init__(self,\n-               input_data: channel.Channel,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               input_data,\n+               name = None,\n+               outputs = None):\n     \"\"\"Constructs a StatisticsGen component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  def __init__(self,\n               input_data: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>",
        "target_code_with_indent": "  def __init__(self,\n               input_data,\n               name = None,\n               outputs = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/statistics_gen/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/statistics_gen/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/statistics_gen/component.py:44:15 Incompatible variable type [9]: outputs is declared to have type `Dict[str, channel.Channel]` but is used as type `None`.",
    "message": " outputs is declared to have type `Dict[str, channel.Channel]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "               outputs: Dict[Text, channel.Channel] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               input_data: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    \"\"\"Constructs a StatisticsGen component.\n",
        "source_code_len": 205,
        "target_code": "  def __init__(self,\n               input_data,\n               name = None,\n               outputs = None):\n    \"\"\"Constructs a StatisticsGen component.\n",
        "target_code_len": 153,
        "diff_format": "@@ -41,5 +41,5 @@\n   def __init__(self,\n-               input_data: channel.Channel,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               input_data,\n+               name = None,\n+               outputs = None):\n     \"\"\"Constructs a StatisticsGen component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  def __init__(self,\n               input_data: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>",
        "target_code_with_indent": "  def __init__(self,\n               input_data,\n               name = None,\n               outputs = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/statistics_gen/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/statistics_gen/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/statistics_gen/component.py:63:8 Incompatible parameter type [6]: Expected `typing.Optional[base_component.ComponentOutputs]` for 6th parameter `outputs` to call `base_component.BaseComponent.__init__` but got `Dict[str, channel.Channel]`.",
    "message": " Expected `typing.Optional[base_component.ComponentOutputs]` for 6th parameter `outputs` to call `base_component.BaseComponent.__init__` but got `Dict[str, channel.Channel]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 63,
    "warning_line": "        outputs=outputs,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               input_data: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    \"\"\"Constructs a StatisticsGen component.\n",
        "source_code_len": 205,
        "target_code": "  def __init__(self,\n               input_data,\n               name = None,\n               outputs = None):\n    \"\"\"Constructs a StatisticsGen component.\n",
        "target_code_len": 153,
        "diff_format": "@@ -41,5 +41,5 @@\n   def __init__(self,\n-               input_data: channel.Channel,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               input_data,\n+               name = None,\n+               outputs = None):\n     \"\"\"Constructs a StatisticsGen component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  def __init__(self,\n               input_data: channel.Channel,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>",
        "target_code_with_indent": "  def __init__(self,\n               input_data,\n               name = None,\n               outputs = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/trainer/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/trainer/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/trainer/component.py:85:8 Incompatible parameter type [6]: Expected `Optional[base_component.ComponentOutputs]` for 6th parameter `outputs` to call `base_component.BaseComponent.__init__` but got `Optional[channel.Channel]`.",
    "message": " Expected `Optional[base_component.ComponentOutputs]` for 6th parameter `outputs` to call `base_component.BaseComponent.__init__` but got `Optional[channel.Channel]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 85,
    "warning_line": "        outputs=outputs,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               transformed_examples: channel.Channel,\n               transform_output: channel.Channel,\n               schema: channel.Channel,\n               module_file: Text,\n               train_args: trainer_pb2.TrainArgs,\n               eval_args: trainer_pb2.EvalArgs,\n               custom_config: Optional[Dict[Text, Any]] = None,\n               name: Optional[Text] = None,\n               outputs: Optional[channel.Channel] = None):\n    component_name = 'Trainer'\n",
        "source_code_len": 495,
        "target_code": "  def __init__(self,\n               transformed_examples,\n               transform_output,\n               schema,\n               module_file,\n               train_args,\n               eval_args,\n               custom_config = None,\n               name = None,\n               outputs = None):\n    component_name = 'Trainer'\n",
        "target_code_len": 323,
        "diff_format": "@@ -57,11 +57,11 @@\n   def __init__(self,\n-               transformed_examples: channel.Channel,\n-               transform_output: channel.Channel,\n-               schema: channel.Channel,\n-               module_file: Text,\n-               train_args: trainer_pb2.TrainArgs,\n-               eval_args: trainer_pb2.EvalArgs,\n-               custom_config: Optional[Dict[Text, Any]] = None,\n-               name: Optional[Text] = None,\n-               outputs: Optional[channel.Channel] = None):\n+               transformed_examples,\n+               transform_output,\n+               schema,\n+               module_file,\n+               train_args,\n+               eval_args,\n+               custom_config = None,\n+               name = None,\n+               outputs = None):\n     component_name = 'Trainer'\n",
        "source_code_with_indent": "  def __init__(self,\n               transformed_examples: channel.Channel,\n               transform_output: channel.Channel,\n               schema: channel.Channel,\n               module_file: Text,\n               train_args: trainer_pb2.TrainArgs,\n               eval_args: trainer_pb2.EvalArgs,\n               custom_config: Optional[Dict[Text, Any]] = None,\n               name: Optional[Text] = None,\n               outputs: Optional[channel.Channel] = None):\n    <IND>component_name = 'Trainer'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self,\n               transformed_examples,\n               transform_output,\n               schema,\n               module_file,\n               train_args,\n               eval_args,\n               custom_config = None,\n               name = None,\n               outputs = None):\n    <IND>component_name = 'Trainer'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/transform/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/transform/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/transform/component.py:60:15 Incompatible variable type [9]: name is declared to have type `str` but is used as type `None`.",
    "message": " name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 60,
    "warning_line": "               name: Text = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               input_data: channel.Channel,\n               schema: channel.Channel,\n               module_file: Text,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    component_name = 'Transform'\n",
        "source_code_len": 267,
        "target_code": "  def __init__(self,\n               input_data,\n               schema,\n               module_file,\n               name = None,\n               outputs = None):\n    component_name = 'Transform'\n",
        "target_code_len": 192,
        "diff_format": "@@ -56,7 +56,7 @@\n   def __init__(self,\n-               input_data: channel.Channel,\n-               schema: channel.Channel,\n-               module_file: Text,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               input_data,\n+               schema,\n+               module_file,\n+               name = None,\n+               outputs = None):\n     component_name = 'Transform'\n",
        "source_code_with_indent": "  def __init__(self,\n               input_data: channel.Channel,\n               schema: channel.Channel,\n               module_file: Text,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>component_name = 'Transform'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self,\n               input_data,\n               schema,\n               module_file,\n               name = None,\n               outputs = None):\n    <IND>component_name = 'Transform'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/transform/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/transform/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/transform/component.py:61:15 Incompatible variable type [9]: outputs is declared to have type `Dict[str, channel.Channel]` but is used as type `None`.",
    "message": " outputs is declared to have type `Dict[str, channel.Channel]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 61,
    "warning_line": "               outputs: Dict[Text, channel.Channel] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               input_data: channel.Channel,\n               schema: channel.Channel,\n               module_file: Text,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    component_name = 'Transform'\n",
        "source_code_len": 267,
        "target_code": "  def __init__(self,\n               input_data,\n               schema,\n               module_file,\n               name = None,\n               outputs = None):\n    component_name = 'Transform'\n",
        "target_code_len": 192,
        "diff_format": "@@ -56,7 +56,7 @@\n   def __init__(self,\n-               input_data: channel.Channel,\n-               schema: channel.Channel,\n-               module_file: Text,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               input_data,\n+               schema,\n+               module_file,\n+               name = None,\n+               outputs = None):\n     component_name = 'Transform'\n",
        "source_code_with_indent": "  def __init__(self,\n               input_data: channel.Channel,\n               schema: channel.Channel,\n               module_file: Text,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>component_name = 'Transform'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self,\n               input_data,\n               schema,\n               module_file,\n               name = None,\n               outputs = None):\n    <IND>component_name = 'Transform'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/transform/component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/transform/component.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/transform/component.py:76:8 Incompatible parameter type [6]: Expected `typing.Optional[base_component.ComponentOutputs]` for 6th parameter `outputs` to call `base_component.BaseComponent.__init__` but got `Dict[str, channel.Channel]`.",
    "message": " Expected `typing.Optional[base_component.ComponentOutputs]` for 6th parameter `outputs` to call `base_component.BaseComponent.__init__` but got `Dict[str, channel.Channel]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 76,
    "warning_line": "        outputs=outputs,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               input_data: channel.Channel,\n               schema: channel.Channel,\n               module_file: Text,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    component_name = 'Transform'\n",
        "source_code_len": 267,
        "target_code": "  def __init__(self,\n               input_data,\n               schema,\n               module_file,\n               name = None,\n               outputs = None):\n    component_name = 'Transform'\n",
        "target_code_len": 192,
        "diff_format": "@@ -56,7 +56,7 @@\n   def __init__(self,\n-               input_data: channel.Channel,\n-               schema: channel.Channel,\n-               module_file: Text,\n-               name: Text = None,\n-               outputs: Dict[Text, channel.Channel] = None):\n+               input_data,\n+               schema,\n+               module_file,\n+               name = None,\n+               outputs = None):\n     component_name = 'Transform'\n",
        "source_code_with_indent": "  def __init__(self,\n               input_data: channel.Channel,\n               schema: channel.Channel,\n               module_file: Text,\n               name: Text = None,\n               outputs: Dict[Text, channel.Channel] = None):\n    <IND>component_name = 'Transform'\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __init__(self,\n               input_data,\n               schema,\n               module_file,\n               name = None,\n               outputs = None):\n    <IND>component_name = 'Transform'\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/components/transform/executor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/components/transform/executor.py",
    "file_hunks_size": 23,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/components/transform/executor.py:280:10 Unsupported operand [58]: `>>` is not supported for operand types `str` and `typing.Any`.",
    "message": " `>>` is not supported for operand types `str` and `typing.Any`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 280,
    "warning_line": "          'ParseExamples' >>",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  )\n  def _ReadExamples(pipeline: beam.Pipeline,\n                    dataset: _Dataset) -> beam.pvalue.PCollection:\n    \"\"\"Reads examples from the given `dataset`.\n",
        "source_code_len": 164,
        "target_code": "  )\n  def _ReadExamples(pipeline,\n                    dataset):\n    \"\"\"Reads examples from the given `dataset`.\n",
        "target_code_len": 112,
        "diff_format": "@@ -257,4 +257,4 @@\n   )\n-  def _ReadExamples(pipeline: beam.Pipeline,\n-                    dataset: _Dataset) -> beam.pvalue.PCollection:\n+  def _ReadExamples(pipeline,\n+                    dataset):\n     \"\"\"Reads examples from the given `dataset`.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  )\n  def _ReadExamples(pipeline: beam.Pipeline,\n                    dataset: _Dataset) -> beam.pvalue.PCollection:\n    <IND>",
        "target_code_with_indent": "  )\n  def _ReadExamples(pipeline,\n                    dataset):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/base_component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/base_component.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/base_component.py:40:26 Unbound name [10]: Name `Text` is used but not defined in the current scope.",
    "message": " Name `Text` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 40,
    "warning_line": "              output_dir: Text,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __new__(cls,\n              output_dir: Text,\n              log_root: Text,\n              beam_pipeline_args: Optional[Text] = None):\n    cls.exec_properties = {\n",
        "source_code_len": 167,
        "target_code": "  def __new__(cls,\n              output_dir,\n              log_root,\n              beam_pipeline_args = None):\n    cls.exec_properties = {\n",
        "target_code_len": 139,
        "diff_format": "@@ -39,5 +39,5 @@\n   def __new__(cls,\n-              output_dir: Text,\n-              log_root: Text,\n-              beam_pipeline_args: Optional[Text] = None):\n+              output_dir,\n+              log_root,\n+              beam_pipeline_args = None):\n     cls.exec_properties = {\n",
        "source_code_with_indent": "  def __new__(cls,\n              output_dir: Text,\n              log_root: Text,\n              beam_pipeline_args: Optional[Text] = None):\n    <IND>cls.exec_properties = {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __new__(cls,\n              output_dir,\n              log_root,\n              beam_pipeline_args = None):\n    <IND>cls.exec_properties = {\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/base_component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/base_component.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/base_component.py:42:34 Unbound name [10]: Name `Optional` is used but not defined in the current scope.",
    "message": " Name `Optional` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 42,
    "warning_line": "              beam_pipeline_args: Optional[Text] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __new__(cls,\n              output_dir: Text,\n              log_root: Text,\n              beam_pipeline_args: Optional[Text] = None):\n    cls.exec_properties = {\n",
        "source_code_len": 167,
        "target_code": "  def __new__(cls,\n              output_dir,\n              log_root,\n              beam_pipeline_args = None):\n    cls.exec_properties = {\n",
        "target_code_len": 139,
        "diff_format": "@@ -39,5 +39,5 @@\n   def __new__(cls,\n-              output_dir: Text,\n-              log_root: Text,\n-              beam_pipeline_args: Optional[Text] = None):\n+              output_dir,\n+              log_root,\n+              beam_pipeline_args = None):\n     cls.exec_properties = {\n",
        "source_code_with_indent": "  def __new__(cls,\n              output_dir: Text,\n              log_root: Text,\n              beam_pipeline_args: Optional[Text] = None):\n    <IND>cls.exec_properties = {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "  def __new__(cls,\n              output_dir,\n              log_root,\n              beam_pipeline_args = None):\n    <IND>cls.exec_properties = {\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/base_component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/base_component.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/base_component.py:68:53 Unbound name [10]: Name `Dict` is used but not defined in the current scope.",
    "message": " Name `Dict` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 68,
    "warning_line": "  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],\n              output_dict: Dict[Text, List[types.TfxType]],\n              exec_properties: Dict[Text, Any]):\n    \"\"\"Creates a new component.\n",
        "source_code_len": 212,
        "target_code": "\n  def __new__(cls, component_name, input_dict,\n              output_dict,\n              exec_properties):\n    \"\"\"Creates a new component.\n",
        "target_code_len": 139,
        "diff_format": "@@ -67,5 +67,5 @@\n \n-  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],\n-              output_dict: Dict[Text, List[types.TfxType]],\n-              exec_properties: Dict[Text, Any]):\n+  def __new__(cls, component_name, input_dict,\n+              output_dict,\n+              exec_properties):\n     \"\"\"Creates a new component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],\n              output_dict: Dict[Text, List[types.TfxType]],\n              exec_properties: Dict[Text, Any]):\n    <IND>",
        "target_code_with_indent": "\n  def __new__(cls, component_name, input_dict,\n              output_dict,\n              exec_properties):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/base_component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/base_component.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/base_component.py:68:64 Unbound name [10]: Name `Any` is used but not defined in the current scope.",
    "message": " Name `Any` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 68,
    "warning_line": "  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],\n              output_dict: Dict[Text, List[types.TfxType]],\n              exec_properties: Dict[Text, Any]):\n    \"\"\"Creates a new component.\n",
        "source_code_len": 212,
        "target_code": "\n  def __new__(cls, component_name, input_dict,\n              output_dict,\n              exec_properties):\n    \"\"\"Creates a new component.\n",
        "target_code_len": 139,
        "diff_format": "@@ -67,5 +67,5 @@\n \n-  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],\n-              output_dict: Dict[Text, List[types.TfxType]],\n-              exec_properties: Dict[Text, Any]):\n+  def __new__(cls, component_name, input_dict,\n+              output_dict,\n+              exec_properties):\n     \"\"\"Creates a new component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],\n              output_dict: Dict[Text, List[types.TfxType]],\n              exec_properties: Dict[Text, Any]):\n    <IND>",
        "target_code_with_indent": "\n  def __new__(cls, component_name, input_dict,\n              output_dict,\n              exec_properties):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/base_component.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/base_component.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/base_component.py:69:38 Unbound name [10]: Name `List` is used but not defined in the current scope.",
    "message": " Name `List` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 69,
    "warning_line": "              output_dict: Dict[Text, List[types.TfxType]],",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],\n              output_dict: Dict[Text, List[types.TfxType]],\n              exec_properties: Dict[Text, Any]):\n    \"\"\"Creates a new component.\n",
        "source_code_len": 212,
        "target_code": "\n  def __new__(cls, component_name, input_dict,\n              output_dict,\n              exec_properties):\n    \"\"\"Creates a new component.\n",
        "target_code_len": 139,
        "diff_format": "@@ -67,5 +67,5 @@\n \n-  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],\n-              output_dict: Dict[Text, List[types.TfxType]],\n-              exec_properties: Dict[Text, Any]):\n+  def __new__(cls, component_name, input_dict,\n+              output_dict,\n+              exec_properties):\n     \"\"\"Creates a new component.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def __new__(cls, component_name: Text, input_dict: Dict[Text, Any],\n              output_dict: Dict[Text, List[types.TfxType]],\n              exec_properties: Dict[Text, Any]):\n    <IND>",
        "target_code_with_indent": "\n  def __new__(cls, component_name, input_dict,\n              output_dict,\n              exec_properties):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/container_runners.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/container_runners.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/container_runners.py:43:29 Unbound name [10]: Name `Text` is used but not defined in the current scope.",
    "message": " Name `Text` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 43,
    "warning_line": "def parse_tfx_type(json_str: Text):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef parse_tfx_type(json_str: Text):\n  \"\"\"Parses a list of artifacts and their types from json.\"\"\"\n",
        "source_code_len": 99,
        "target_code": "\ndef parse_tfx_type(json_str):\n  \"\"\"Parses a list of artifacts and their types from json.\"\"\"\n",
        "target_code_len": 93,
        "diff_format": "@@ -42,3 +42,3 @@\n \n-def parse_tfx_type(json_str: Text):\n+def parse_tfx_type(json_str):\n   \"\"\"Parses a list of artifacts and their types from json.\"\"\"\n",
        "source_code_with_indent": "\ndef parse_tfx_type(json_str: Text):\n  <IND>\"\"\"Parses a list of artifacts and their types from json.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef parse_tfx_type(json_str):\n  <IND>\"\"\"Parses a list of artifacts and their types from json.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/container_runners.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/container_runners.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/container_runners.py:64:27 Unbound name [10]: Name `Dict` is used but not defined in the current scope.",
    "message": " Name `Dict` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 64,
    "warning_line": "               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, executor_cls, name: Text,\n               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n               exec_properties: Dict[Text, Any]):\n    raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_len": 234,
        "target_code": "\n  def __init__(self, executor_cls, name,\n               input_dict, outputs,\n               exec_properties):\n    raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "target_code_len": 172,
        "diff_format": "@@ -62,5 +62,5 @@\n \n-  def __init__(self, executor_cls, name: Text,\n-               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n-               exec_properties: Dict[Text, Any]):\n+  def __init__(self, executor_cls, name,\n+               input_dict, outputs,\n+               exec_properties):\n     raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_with_indent": "\n  def __init__(self, executor_cls, name: Text,\n               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n               exec_properties: Dict[Text, Any]):\n    <IND>raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, executor_cls, name,\n               input_dict, outputs,\n               exec_properties):\n    <IND>raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/container_runners.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/container_runners.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/container_runners.py:64:38 Unbound name [10]: Name `List` is used but not defined in the current scope.",
    "message": " Name `List` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 64,
    "warning_line": "               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, executor_cls, name: Text,\n               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n               exec_properties: Dict[Text, Any]):\n    raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_len": 234,
        "target_code": "\n  def __init__(self, executor_cls, name,\n               input_dict, outputs,\n               exec_properties):\n    raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "target_code_len": 172,
        "diff_format": "@@ -62,5 +62,5 @@\n \n-  def __init__(self, executor_cls, name: Text,\n-               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n-               exec_properties: Dict[Text, Any]):\n+  def __init__(self, executor_cls, name,\n+               input_dict, outputs,\n+               exec_properties):\n     raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_with_indent": "\n  def __init__(self, executor_cls, name: Text,\n               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n               exec_properties: Dict[Text, Any]):\n    <IND>raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, executor_cls, name,\n               input_dict, outputs,\n               exec_properties):\n    <IND>raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/container_runners.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/container_runners.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/container_runners.py:65:43 Unbound name [10]: Name `Any` is used but not defined in the current scope.",
    "message": " Name `Any` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 65,
    "warning_line": "               exec_properties: Dict[Text, Any]):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, executor_cls, name: Text,\n               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n               exec_properties: Dict[Text, Any]):\n    raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_len": 234,
        "target_code": "\n  def __init__(self, executor_cls, name,\n               input_dict, outputs,\n               exec_properties):\n    raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "target_code_len": 172,
        "diff_format": "@@ -62,5 +62,5 @@\n \n-  def __init__(self, executor_cls, name: Text,\n-               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n-               exec_properties: Dict[Text, Any]):\n+  def __init__(self, executor_cls, name,\n+               input_dict, outputs,\n+               exec_properties):\n     raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_with_indent": "\n  def __init__(self, executor_cls, name: Text,\n               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n               exec_properties: Dict[Text, Any]):\n    <IND>raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, executor_cls, name,\n               input_dict, outputs,\n               exec_properties):\n    <IND>raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/container_runners.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/container_runners.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/container_runners.py:72:25 Unbound name [10]: Name `unicode` is used but not defined in the current scope.",
    "message": " Name `unicode` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 72,
    "warning_line": "      if isinstance(arg, unicode):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, executor_cls, name: Text,\n               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n               exec_properties: Dict[Text, Any]):\n    raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_len": 234,
        "target_code": "\n  def __init__(self, executor_cls, name,\n               input_dict, outputs,\n               exec_properties):\n    raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "target_code_len": 172,
        "diff_format": "@@ -62,5 +62,5 @@\n \n-  def __init__(self, executor_cls, name: Text,\n-               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n-               exec_properties: Dict[Text, Any]):\n+  def __init__(self, executor_cls, name,\n+               input_dict, outputs,\n+               exec_properties):\n     raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_with_indent": "\n  def __init__(self, executor_cls, name: Text,\n               input_dict: Dict[Text, List[types.TfxType]], outputs: Text,\n               exec_properties: Dict[Text, Any]):\n    <IND>raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n  def __init__(self, executor_cls, name,\n               input_dict, outputs,\n               exec_properties):\n    <IND>raw_args = exec_properties.get('beam_pipeline_args', [])\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/runner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/runner.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/runner.py:38:33 Unbound name [10]: Name `Optional` is used but not defined in the current scope.",
    "message": " Name `Optional` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 38,
    "warning_line": "  def __init__(self, output_dir: Optional[Text] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, output_dir: Optional[Text] = None):\n    \"\"\"Initializes KubeflowRunner for compiling a Kubeflow Pipeline.\n",
        "source_code_len": 127,
        "target_code": "\n  def __init__(self, output_dir = None):\n    \"\"\"Initializes KubeflowRunner for compiling a Kubeflow Pipeline.\n",
        "target_code_len": 111,
        "diff_format": "@@ -37,3 +37,3 @@\n \n-  def __init__(self, output_dir: Optional[Text] = None):\n+  def __init__(self, output_dir = None):\n     \"\"\"Initializes KubeflowRunner for compiling a Kubeflow Pipeline.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def __init__(self, output_dir: Optional[Text] = None):\n    <IND>",
        "target_code_with_indent": "\n  def __init__(self, output_dir = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/orchestration/kubeflow/runner.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/orchestration/kubeflow/runner.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/orchestration/kubeflow/runner.py:38:42 Unbound name [10]: Name `Text` is used but not defined in the current scope.",
    "message": " Name `Text` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 38,
    "warning_line": "  def __init__(self, output_dir: Optional[Text] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n  def __init__(self, output_dir: Optional[Text] = None):\n    \"\"\"Initializes KubeflowRunner for compiling a Kubeflow Pipeline.\n",
        "source_code_len": 127,
        "target_code": "\n  def __init__(self, output_dir = None):\n    \"\"\"Initializes KubeflowRunner for compiling a Kubeflow Pipeline.\n",
        "target_code_len": 111,
        "diff_format": "@@ -37,3 +37,3 @@\n \n-  def __init__(self, output_dir: Optional[Text] = None):\n+  def __init__(self, output_dir = None):\n     \"\"\"Initializes KubeflowRunner for compiling a Kubeflow Pipeline.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n  def __init__(self, output_dir: Optional[Text] = None):\n    <IND>",
        "target_code_with_indent": "\n  def __init__(self, output_dir = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/utils/channel.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/utils/channel.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/utils/channel.py:42:15 Incompatible variable type [9]: static_artifact_collection is declared to have type `Iterable[types.TfxType]` but is used as type `None`.",
    "message": " static_artifact_collection is declared to have type `Iterable[types.TfxType]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 42,
    "warning_line": "               static_artifact_collection: Iterable[types.TfxType] = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "  def __init__(self,\n               type_name: Text,\n               static_artifact_collection: Iterable[types.TfxType] = None):\n    \"\"\"Initialization of Channel.\n",
        "source_code_len": 163,
        "target_code": "  def __init__(self,\n               type_name,\n               static_artifact_collection = None):\n    \"\"\"Initialization of Channel.\n",
        "target_code_len": 132,
        "diff_format": "@@ -40,4 +40,4 @@\n   def __init__(self,\n-               type_name: Text,\n-               static_artifact_collection: Iterable[types.TfxType] = None):\n+               type_name,\n+               static_artifact_collection = None):\n     \"\"\"Initialization of Channel.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "  def __init__(self,\n               type_name: Text,\n               static_artifact_collection: Iterable[types.TfxType] = None):\n    <IND>",
        "target_code_with_indent": "  def __init__(self,\n               type_name,\n               static_artifact_collection = None):\n    <IND>"
      }
    ]
  },
  {
    "project": "tensorflow/tfx",
    "commit": "3d7bb6a0ae0aa0ed6269c2e1f4d2bb3e8bee2a93",
    "filename": "tfx/utils/io_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/tensorflow-tfx/tfx/utils/io_utils.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tfx/utils/io_utils.py:52:52 Incompatible parameter type [6]: Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `importlib.util.module_from_spec` but got `typing.Optional[importlib.machinery.ModuleSpec]`.",
    "message": " Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `importlib.util.module_from_spec` but got `typing.Optional[importlib.machinery.ModuleSpec]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "      user_module = importlib.util.module_from_spec(spec)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef import_func(module_path: Text, fn_name: Text) -> Callable:  # pylint: disable=g-bare-generic\n  \"\"\"Imports a function from a module provided as source file.\"\"\"\n",
        "source_code_len": 164,
        "target_code": "\ndef import_func(module_path, fn_name):  # pylint: disable=g-bare-generic\n  \"\"\"Imports a function from a module provided as source file.\"\"\"\n",
        "target_code_len": 140,
        "diff_format": "@@ -34,3 +34,3 @@\n \n-def import_func(module_path: Text, fn_name: Text) -> Callable:  # pylint: disable=g-bare-generic\n+def import_func(module_path, fn_name):  # pylint: disable=g-bare-generic\n   \"\"\"Imports a function from a module provided as source file.\"\"\"\n",
        "source_code_with_indent": "\ndef import_func(module_path: Text, fn_name: Text) -> Callable:  # pylint: disable=g-bare-generic\n  <IND>\"\"\"Imports a function from a module provided as source file.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef import_func(module_path, fn_name):  # pylint: disable=g-bare-generic\n  <IND>\"\"\"Imports a function from a module provided as source file.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]