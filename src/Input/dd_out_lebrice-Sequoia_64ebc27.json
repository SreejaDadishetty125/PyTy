[
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/baseline_method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/baseline_method.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/methods/baseline_method.py:69:17 Incompatible variable type [9]: hparams is declared to have type `sequoia.methods.models.baseline_model.baseline_model.BaselineModel.HParams` but is used as type `None`.",
    "message": " hparams is declared to have type `sequoia.methods.models.baseline_model.baseline_model.BaselineModel.HParams` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 69,
    "warning_line": "                 hparams: BaselineModel.HParams = None,"
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/baseline_method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/baseline_method.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/methods/baseline_method.py:202:27 Call error [29]: `sequoia.methods.models.baseline_model.baseline_model.BaselineModel` is not a function.",
    "message": " `sequoia.methods.models.baseline_model.baseline_model.BaselineModel` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 202,
    "warning_line": "            forward_pass = self.model(observations)"
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/baseline_method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/baseline_method.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/methods/baseline_method.py:225:8 Incompatible return type [7]: Expected `sequoia.methods.models.baseline_model.baseline_model.BaselineModel[]` but got `sequoia.methods.models.baseline_model.baseline_model.BaselineModel`.",
    "message": " Expected `sequoia.methods.models.baseline_model.baseline_model.BaselineModel[]` but got `sequoia.methods.models.baseline_model.baseline_model.BaselineModel`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 225,
    "warning_line": "        return BaselineModel(setting=setting, hparams=self.hparams, config=self.config)"
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/baseline_method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/baseline_method.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/methods/baseline_method.py:321:64 Incompatible parameter type [6]: Expected `Union[List[str], str]` for 1st positional only parameter to call `sequoia.utils.parseable.Parseable.from_args` but got `Optional[List[str]]`.",
    "message": " Expected `Union[List[str], str]` for 1st positional only parameter to call `sequoia.utils.parseable.Parseable.from_args` but got `Optional[List[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 321,
    "warning_line": "        new_hparams: BaselineModel.HParams = new_type.from_args(argv)"
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/models/baseline_model/base_model.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/models/baseline_model/base_model.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/methods/models/baseline_model/base_model.py:198:21 Unbound name [10]: Name `Space` is used but not defined in the current scope.",
    "message": " Name `Space` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 198,
    "warning_line": "        input_space: Space = self.representation_space"
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/models/baseline_model/baseline_model.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/models/baseline_model/baseline_model.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/methods/models/baseline_model/baseline_model.py:97:12 Incompatible parameter type [6]: Expected `typing.Tuple[sequoia.settings.base.objects.Observations, sequoia.settings.base.objects.Rewards]` for 1st positional only parameter to call `ClassIncrementalModel.shared_step` but got `typing.Tuple[sequoia.settings.base.objects.Observations, typing.Optional[sequoia.settings.base.objects.Rewards]]`.",
    "message": " Expected `typing.Tuple[sequoia.settings.base.objects.Observations, sequoia.settings.base.objects.Rewards]` for 1st positional only parameter to call `ClassIncrementalModel.shared_step` but got `typing.Tuple[sequoia.settings.base.objects.Observations, typing.Optional[sequoia.settings.base.objects.Rewards]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 97,
    "warning_line": "            batch,"
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/models/baseline_model/baseline_model.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/models/baseline_model/baseline_model.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/methods/models/baseline_model/baseline_model.py:133:12 Incompatible parameter type [6]: Expected `typing.Tuple[sequoia.settings.base.objects.Observations, sequoia.settings.base.objects.Rewards]` for 1st positional only parameter to call `ClassIncrementalModel.shared_step` but got `typing.Tuple[sequoia.settings.base.objects.Observations, typing.Optional[sequoia.settings.base.objects.Rewards]]`.",
    "message": " Expected `typing.Tuple[sequoia.settings.base.objects.Observations, sequoia.settings.base.objects.Rewards]` for 1st positional only parameter to call `ClassIncrementalModel.shared_step` but got `typing.Tuple[sequoia.settings.base.objects.Observations, typing.Optional[sequoia.settings.base.objects.Rewards]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 133,
    "warning_line": "            batch,"
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/models/baseline_model/baseline_model.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/models/baseline_model/baseline_model.py",
    "file_hunks_size": 15,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/methods/models/baseline_model/baseline_model.py:145:12 Incompatible parameter type [6]: Expected `typing.Tuple[sequoia.settings.base.objects.Observations, sequoia.settings.base.objects.Rewards]` for 1st positional only parameter to call `ClassIncrementalModel.shared_step` but got `typing.Tuple[sequoia.settings.base.objects.Observations, typing.Optional[sequoia.settings.base.objects.Rewards]]`.",
    "message": " Expected `typing.Tuple[sequoia.settings.base.objects.Observations, sequoia.settings.base.objects.Rewards]` for 1st positional only parameter to call `ClassIncrementalModel.shared_step` but got `typing.Tuple[sequoia.settings.base.objects.Observations, typing.Optional[sequoia.settings.base.objects.Rewards]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 145,
    "warning_line": "            batch,"
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/models/output_heads/rl/reinforce_head.py",
    "min_patch_found": false,
    "full_warning_msg": "sequoia/methods/models/output_heads/rl/reinforce_head.py:45:4 Inconsistent override [14]: `sequoia.methods.models.output_heads.rl.reinforce_head.ReinforceHead.get_loss` overrides method defined in `PolicyHead` inconsistently. Could not find parameter `actions` in overriding signature.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/models/output_heads/rl/reinforce_head.py'",
    "dd_fail": true
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/models/output_heads/rl/reinforce_head.py",
    "min_patch_found": false,
    "full_warning_msg": "sequoia/methods/models/output_heads/rl/reinforce_head.py:45:4 Inconsistent override [14]: `sequoia.methods.models.output_heads.rl.reinforce_head.ReinforceHead.get_loss` overrides method defined in `PolicyHead` inconsistently. Could not find parameter `rewards` in overriding signature.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/models/output_heads/rl/reinforce_head.py'",
    "dd_fail": true
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/models/output_heads/rl/reinforce_head.py",
    "min_patch_found": false,
    "full_warning_msg": "sequoia/methods/models/output_heads/rl/reinforce_head.py:47:8 Incompatible variable type [9]: actions is declared to have type `sequoia.methods.models.output_heads.classification_head.ClassificationOutput` but is used as type `Actions`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/models/output_heads/rl/reinforce_head.py'",
    "dd_fail": true
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/methods/models/output_heads/rl/reinforce_head.py",
    "min_patch_found": false,
    "full_warning_msg": "sequoia/methods/models/output_heads/rl/reinforce_head.py:49:8 Incompatible return type [7]: Expected `sequoia.common.loss.Loss` but got implicit return value of `None`.",
    "exception": "[Errno 2] No such file or directory: '/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/methods/models/output_heads/rl/reinforce_head.py'",
    "dd_fail": true
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/settings/active/rl/continual_rl_setting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/settings/active/rl/continual_rl_setting.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/settings/active/rl/continual_rl_setting.py:247:50 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 3rd positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 3rd positional only parameter to call `range.__init__` but got `Optional[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 247,
    "warning_line": "        for task_step in range(0, self.max_steps, self.steps_per_task):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def create_task_schedule(self, temp_env: MultiTaskEnvironment) -> Dict[int, Dict]:\n        task_schedule: Dict[int, Dict] = {}\n",
        "source_code_len": 132,
        "target_code": "\n    def create_task_schedule(self,\n                             temp_env: MultiTaskEnvironment,\n                             change_steps: List[int]) -> Dict[int, Dict]:\n        \"\"\" Create the task schedule, which maps from a step to the changes that\n        will occur in the environment when that step is reached.\n        \n        Uses the provided `temp_env` to generate the random tasks at the steps\n        given in `change_steps` (a list of integers).\n\n        Returns a dictionary mapping from integers (the steps) to the changes\n        that will occur in the env at that step.\n\n        TODO: IDEA: Instead of just setting env attributes, use the\n        `methodcaller` or `attrsetter` from the `operator` built-in package,\n        that way later when we want to add support for Meta-World, we can just\n        use `partial(methodcaller(\"set_task\"), task=\"new_task\")(env)` or\n        something like that (i.e. generalize from changing an attribute to\n        applying a function on the env, which would allow calling methods in\n        addition to setting attributes.)\n        \"\"\"        \n        task_schedule: Dict[int, Dict] = {}\n",
        "target_code_len": 1142,
        "diff_format": "@@ -242,3 +323,22 @@\n \n-    def create_task_schedule(self, temp_env: MultiTaskEnvironment) -> Dict[int, Dict]:\n+    def create_task_schedule(self,\n+                             temp_env: MultiTaskEnvironment,\n+                             change_steps: List[int]) -> Dict[int, Dict]:\n+        \"\"\" Create the task schedule, which maps from a step to the changes that\n+        will occur in the environment when that step is reached.\n+        \n+        Uses the provided `temp_env` to generate the random tasks at the steps\n+        given in `change_steps` (a list of integers).\n+\n+        Returns a dictionary mapping from integers (the steps) to the changes\n+        that will occur in the env at that step.\n+\n+        TODO: IDEA: Instead of just setting env attributes, use the\n+        `methodcaller` or `attrsetter` from the `operator` built-in package,\n+        that way later when we want to add support for Meta-World, we can just\n+        use `partial(methodcaller(\"set_task\"), task=\"new_task\")(env)` or\n+        something like that (i.e. generalize from changing an attribute to\n+        applying a function on the env, which would allow calling methods in\n+        addition to setting attributes.)\n+        \"\"\"        \n         task_schedule: Dict[int, Dict] = {}\n",
        "source_code_with_indent": "\n    <DED>def create_task_schedule(self, temp_env: MultiTaskEnvironment) -> Dict[int, Dict]:\n        <IND>task_schedule: Dict[int, Dict] = {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def create_task_schedule(self,\n                             temp_env: MultiTaskEnvironment,\n                             change_steps: List[int]) -> Dict[int, Dict]:\n        <IND>\"\"\" Create the task schedule, which maps from a step to the changes that\n        will occur in the environment when that step is reached.\n        \n        Uses the provided `temp_env` to generate the random tasks at the steps\n        given in `change_steps` (a list of integers).\n\n        Returns a dictionary mapping from integers (the steps) to the changes\n        that will occur in the env at that step.\n\n        TODO: IDEA: Instead of just setting env attributes, use the\n        `methodcaller` or `attrsetter` from the `operator` built-in package,\n        that way later when we want to add support for Meta-World, we can just\n        use `partial(methodcaller(\"set_task\"), task=\"new_task\")(env)` or\n        something like that (i.e. generalize from changing an attribute to\n        applying a function on the env, which would allow calling methods in\n        addition to setting attributes.)\n        \"\"\"        \n        task_schedule: Dict[int, Dict] = {}\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # intervals of `self.steps_per_task`\n        for task_step in range(0, self.max_steps, self.steps_per_task):\n            if task_step == 0:\n",
        "source_code_len": 148,
        "target_code": "        # intervals of `self.steps_per_task`\n        for task_step in change_steps:\n            if task_step == 0:\n",
        "target_code_len": 115,
        "diff_format": "@@ -246,3 +346,3 @@\n         # intervals of `self.steps_per_task`\n-        for task_step in range(0, self.max_steps, self.steps_per_task):\n+        for task_step in change_steps:\n             if task_step == 0:\n",
        "source_code_with_indent": "        # intervals of `self.steps_per_task`\n        for task_step in range(0, self.max_steps, self.steps_per_task):\n            <IND>if task_step == 0:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # intervals of `self.steps_per_task`\n        for task_step in change_steps:\n            <IND>if task_step == 0:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/settings/active/rl/continual_rl_setting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/settings/active/rl/continual_rl_setting.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/settings/active/rl/continual_rl_setting.py:721:8 Incompatible variable type [9]: episode_rewards is declared to have type `List[float]` but is used as type `List[List[Variable[_T]]]`.",
    "message": " episode_rewards is declared to have type `List[float]` but is used as type `List[List[Variable[_T]]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 721,
    "warning_line": "        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        assert nb_tasks >= 1\n        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n\n",
        "source_code_len": 237,
        "target_code": "        assert nb_tasks >= 1\n        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n\n",
        "target_code_len": 255,
        "diff_format": "@@ -720,5 +818,5 @@\n         assert nb_tasks >= 1\n-        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n-        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n-        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n+        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n+        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n+        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n \n",
        "source_code_with_indent": "        assert nb_tasks >= 1\n        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        assert nb_tasks >= 1\n        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/settings/active/rl/continual_rl_setting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/settings/active/rl/continual_rl_setting.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/settings/active/rl/continual_rl_setting.py:722:8 Incompatible variable type [9]: episode_lengths is declared to have type `List[int]` but is used as type `List[List[Variable[_T]]]`.",
    "message": " episode_lengths is declared to have type `List[int]` but is used as type `List[List[Variable[_T]]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 722,
    "warning_line": "        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        assert nb_tasks >= 1\n        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n\n",
        "source_code_len": 237,
        "target_code": "        assert nb_tasks >= 1\n        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n\n",
        "target_code_len": 255,
        "diff_format": "@@ -720,5 +818,5 @@\n         assert nb_tasks >= 1\n-        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n-        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n-        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n+        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n+        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n+        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n \n",
        "source_code_with_indent": "        assert nb_tasks >= 1\n        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        assert nb_tasks >= 1\n        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/settings/active/rl/continual_rl_setting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/settings/active/rl/continual_rl_setting.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/settings/active/rl/continual_rl_setting.py:723:30 Unbound name [10]: Name `Metrics` is used but not defined in the current scope.",
    "message": " Name `Metrics` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 723,
    "warning_line": "        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]"
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/settings/active/rl/continual_rl_setting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/settings/active/rl/continual_rl_setting.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/settings/active/rl/continual_rl_setting.py:735:12 Incompatible parameter type [6]: Expected `List[List[int]]` for 1st parameter `episode_lengths` to call `RLResults.__init__` but got `List[int]`.",
    "message": " Expected `List[List[int]]` for 1st parameter `episode_lengths` to call `RLResults.__init__` but got `List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 735,
    "warning_line": "            episode_lengths=episode_lengths,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        assert nb_tasks >= 1\n        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n\n",
        "source_code_len": 237,
        "target_code": "        assert nb_tasks >= 1\n        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n\n",
        "target_code_len": 255,
        "diff_format": "@@ -720,5 +818,5 @@\n         assert nb_tasks >= 1\n-        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n-        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n-        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n+        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n+        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n+        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n \n",
        "source_code_with_indent": "        assert nb_tasks >= 1\n        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        assert nb_tasks >= 1\n        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/settings/active/rl/continual_rl_setting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/settings/active/rl/continual_rl_setting.py",
    "file_hunks_size": 17,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/settings/active/rl/continual_rl_setting.py:736:12 Incompatible parameter type [6]: Expected `List[List[float]]` for 2nd parameter `episode_rewards` to call `RLResults.__init__` but got `List[float]`.",
    "message": " Expected `List[List[float]]` for 2nd parameter `episode_rewards` to call `RLResults.__init__` but got `List[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 736,
    "warning_line": "            episode_rewards=episode_rewards,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        assert nb_tasks >= 1\n        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n\n",
        "source_code_len": 237,
        "target_code": "        assert nb_tasks >= 1\n        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n\n",
        "target_code_len": 255,
        "diff_format": "@@ -720,5 +818,5 @@\n         assert nb_tasks >= 1\n-        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n-        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n-        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n+        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n+        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n+        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n \n",
        "source_code_with_indent": "        assert nb_tasks >= 1\n        episode_rewards: List[float] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[int] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[Metrics] = [[] for _ in range(nb_tasks)]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        assert nb_tasks >= 1\n        episode_rewards: List[List[float]] = [[] for _ in range(nb_tasks)]\n        episode_lengths: List[List[int]] = [[] for _ in range(nb_tasks)]\n        episode_metrics: List[List[Metrics]] = [[] for _ in range(nb_tasks)]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "lebrice/Sequoia",
    "commit": "64ebc272dc1c3180d7cc9f0c38645674f3cde79f",
    "filename": "sequoia/utils/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/lebrice-Sequoia/sequoia/utils/utils.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sequoia/utils/utils.py:422:23 Incompatible parameter type [6]: Expected `Union[os.PathLike[str], str]` for 1st positional only parameter to call `Path.__new__` but got `Optional[str]`.",
    "message": " Expected `Union[os.PathLike[str], str]` for 1st positional only parameter to call `Path.__new__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 422,
    "warning_line": "    source_path = Path(getsourcefile(cls)).absolute()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cwd = Path(os.getcwd())\n    source_path = Path(getsourcefile(cls)).absolute()\n    source_file = source_path.relative_to(cwd)\n    return source_file\n\n",
        "source_code_len": 153,
        "target_code": "    cwd = Path(os.getcwd())\n    source_file = getsourcefile(cls)\n    assert isinstance(source_file, str), f\"can't locate source file for {cls}?\"\n    source_path = Path(source_file).absolute()\n    try:\n        return source_path.relative_to(cwd)\n    except ValueError:\n        # If we can't find the relative path, for instance when sequoia is\n        # installed in site_packages (not with `pip install -e .``), give back\n        # the absolute path instead.\n        pass\n    return source_path\n\n",
        "target_code_len": 496,
        "diff_format": "@@ -421,5 +421,13 @@\n     cwd = Path(os.getcwd())\n-    source_path = Path(getsourcefile(cls)).absolute()\n-    source_file = source_path.relative_to(cwd)\n-    return source_file\n+    source_file = getsourcefile(cls)\n+    assert isinstance(source_file, str), f\"can't locate source file for {cls}?\"\n+    source_path = Path(source_file).absolute()\n+    try:\n+        return source_path.relative_to(cwd)\n+    except ValueError:\n+        # If we can't find the relative path, for instance when sequoia is\n+        # installed in site_packages (not with `pip install -e .``), give back\n+        # the absolute path instead.\n+        pass\n+    return source_path\n \n",
        "source_code_with_indent": "    <IND>cwd = Path(os.getcwd())\n    source_path = Path(getsourcefile(cls)).absolute()\n    source_file = source_path.relative_to(cwd)\n    return source_file\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>cwd = Path(os.getcwd())\n    source_file = getsourcefile(cls)\n    assert isinstance(source_file, str), f\"can't locate source file for {cls}?\"\n    source_path = Path(source_file).absolute()\n    try:\n        <IND>return source_path.relative_to(cwd)\n    <DED>except ValueError:\n        # If we can't find the relative path, for instance when sequoia is\n        # installed in site_packages (not with `pip install -e .``), give back\n        # the absolute path instead.\n        <IND>pass\n    <DED>return source_path\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]