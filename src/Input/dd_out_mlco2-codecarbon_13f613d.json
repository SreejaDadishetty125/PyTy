[
  {
    "project": "mlco2/codecarbon",
    "commit": "13f613dcf8342831f923787162d39906c9548927",
    "filename": "codecarbon/external/hardware.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mlco2-codecarbon/codecarbon/external/hardware.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "codecarbon/external/hardware.py:155:62 Incompatible parameter type [6]: Expected `Time` for 2nd positional only parameter to call `Power.from_energy_delta_and_delay` but got `float`.",
    "message": " Expected `Time` for 2nd positional only parameter to call `Power.from_energy_delta_and_delay` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 155,
    "warning_line": "            power = Power.from_energy_delta_and_delay(energy, last_duration)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            energy = self._get_energy_from_cpus(delay=last_duration)\n            power = Power.from_energy_delta_and_delay(energy, last_duration)\n            return power, energy\n",
        "source_code_len": 179,
        "target_code": "            energy = self._get_energy_from_cpus(delay=last_duration)\n            power = Power.from_energy_delta_and_delay(\n                energy, Time.from_seconds(last_duration)\n            )\n            return power, energy\n",
        "target_code_len": 228,
        "diff_format": "@@ -154,3 +154,5 @@\n             energy = self._get_energy_from_cpus(delay=last_duration)\n-            power = Power.from_energy_delta_and_delay(energy, last_duration)\n+            power = Power.from_energy_delta_and_delay(\n+                energy, Time.from_seconds(last_duration)\n+            )\n             return power, energy\n",
        "source_code_with_indent": "            <IND>energy = self._get_energy_from_cpus(delay=last_duration)\n            power = Power.from_energy_delta_and_delay(energy, last_duration)\n            return power, energy\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>energy = self._get_energy_from_cpus(delay=last_duration)\n            power = Power.from_energy_delta_and_delay(\n                energy, Time.from_seconds(last_duration)\n            )\n            return power, energy\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]