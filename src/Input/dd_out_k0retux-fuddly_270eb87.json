[
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:1595:14 Invalid type [31]: Expression `six.with_metaclass(framework.value_types.meta_int_str, framework.value_types.INT)` is not a valid type.",
    "message": " Expression `six.with_metaclass(framework.value_types.meta_int_str, framework.value_types.INT)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 1595,
    "warning_line": "class INT_str(with_metaclass(meta_int_str, INT)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass Fuzzy_INT(INT):\n    '''\n    Base class to be inherited and not used directly\n    '''\n    values = None\n    short_cformat = None\n\n    def __init__(self, endian=VT.BigEndian, supp_list=None):\n        self.endian = endian\n        if supp_list:\n            self.extend_value_list(supp_list)\n\n        assert(self.values is not None)\n        INT.__init__(self, values=self.values, determinist=True)\n\n    def make_private(self, forget_current_state):\n        self.values = copy.copy(self.values)\n\n    def is_compatible(self, integer):\n        if self.mini <= integer <= self.maxi:\n            return True\n        elif -((self.maxi + 1) // 2) <= integer <= ((self.maxi + 1) // 2) - 1:\n            return True\n        else:\n            return False\n\n    def _convert_value(self, val):\n        try:\n            string = struct.pack(VT.enc2struct[self.endian] + self.short_cformat, val)\n        except:\n            string = struct.pack(VT.enc2struct[self.endian] + self.alt_short_cformat, val)\n\n        return string\n\n\nclass INT_str(with_metaclass(meta_int_str, INT)):\n    endian = VT.Native\n\n",
        "source_code_len": 1089,
        "target_code": "\nclass INT_str(INT):\n    endian = VT.Native\n    usable = True\n\n",
        "target_code_len": 63,
        "diff_format": "@@ -1559,39 +1549,5 @@\n \n-class Fuzzy_INT(INT):\n-    '''\n-    Base class to be inherited and not used directly\n-    '''\n-    values = None\n-    short_cformat = None\n-\n-    def __init__(self, endian=VT.BigEndian, supp_list=None):\n-        self.endian = endian\n-        if supp_list:\n-            self.extend_value_list(supp_list)\n-\n-        assert(self.values is not None)\n-        INT.__init__(self, values=self.values, determinist=True)\n-\n-    def make_private(self, forget_current_state):\n-        self.values = copy.copy(self.values)\n-\n-    def is_compatible(self, integer):\n-        if self.mini <= integer <= self.maxi:\n-            return True\n-        elif -((self.maxi + 1) // 2) <= integer <= ((self.maxi + 1) // 2) - 1:\n-            return True\n-        else:\n-            return False\n-\n-    def _convert_value(self, val):\n-        try:\n-            string = struct.pack(VT.enc2struct[self.endian] + self.short_cformat, val)\n-        except:\n-            string = struct.pack(VT.enc2struct[self.endian] + self.alt_short_cformat, val)\n-\n-        return string\n-\n-\n-class INT_str(with_metaclass(meta_int_str, INT)):\n+class INT_str(INT):\n     endian = VT.Native\n+    usable = True\n \n",
        "source_code_with_indent": "\nclass Fuzzy_INT(INT):\n    <IND>'''\n    Base class to be inherited and not used directly\n    '''\n    values = None\n    short_cformat = None\n\n    def __init__(self, endian=VT.BigEndian, supp_list=None):\n        <IND>self.endian = endian\n        if supp_list:\n            <IND>self.extend_value_list(supp_list)\n\n        <DED>assert(self.values is not None)\n        INT.__init__(self, values=self.values, determinist=True)\n\n    <DED>def make_private(self, forget_current_state):\n        <IND>self.values = copy.copy(self.values)\n\n    <DED>def is_compatible(self, integer):\n        <IND>if self.mini <= integer <= self.maxi:\n            <IND>return True\n        <DED>elif -((self.maxi + 1) // 2) <= integer <= ((self.maxi + 1) // 2) - 1:\n            <IND>return True\n        <DED>else:\n            <IND>return False\n\n    <DED><DED>def _convert_value(self, val):\n        <IND>try:\n            <IND>string = struct.pack(VT.enc2struct[self.endian] + self.short_cformat, val)\n        <DED>except:\n            <IND>string = struct.pack(VT.enc2struct[self.endian] + self.alt_short_cformat, val)\n\n        <DED>return string\n\n\n<DED><DED>class INT_str(with_metaclass(meta_int_str, INT)):\n    <IND>endian = VT.Native\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nclass INT_str(INT):\n    <IND>endian = VT.Native\n    usable = True\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = 'B'\n    endian = VT.Native\n\n#class Fuzzy_INT8(Fuzzy_INT, metaclass=meta_8b):\nclass Fuzzy_INT8(with_metaclass(meta_8b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**8-1\n    values = [0xFF, 0, 0x01, 0x80, 0x7F]\n    short_cformat = 'B'\n    alt_short_cformat = 'b'\n\n\n#class INT16(VT, metaclass=meta_16b):\nclass INT16(with_metaclass(meta_16b, INT)):\n    usable = False\n\n\n",
        "source_code_len": 374,
        "target_code": "    cformat = 'B'\n    alt_cformat = 'b'\n    endian = VT.Native\n    usable = True\n\nclass INT16(INT):\n    fuzzy_values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    value_space_size = 2**16-1\n    size = 16\n    usable = False\n\n",
        "target_code_len": 212,
        "diff_format": "@@ -2616,17 +2571,11 @@\n     cformat = 'B'\n+    alt_cformat = 'b'\n     endian = VT.Native\n-\n-#class Fuzzy_INT8(Fuzzy_INT, metaclass=meta_8b):\n-class Fuzzy_INT8(with_metaclass(meta_8b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**8-1\n-    values = [0xFF, 0, 0x01, 0x80, 0x7F]\n-    short_cformat = 'B'\n-    alt_short_cformat = 'b'\n-\n-\n-#class INT16(VT, metaclass=meta_16b):\n-class INT16(with_metaclass(meta_16b, INT)):\n+    usable = True\n+\n+class INT16(INT):\n+    fuzzy_values = [0xFFFF, 0, 0x8000, 0x7FFF]\n+    value_space_size = 2**16-1\n+    size = 16\n     usable = False\n-\n \n",
        "source_code_with_indent": "    cformat = 'B'\n    endian = VT.Native\n\n#class Fuzzy_INT8(Fuzzy_INT, metaclass=meta_8b):\n<DED>class Fuzzy_INT8(with_metaclass(meta_8b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**8-1\n    values = [0xFF, 0, 0x01, 0x80, 0x7F]\n    short_cformat = 'B'\n    alt_short_cformat = 'b'\n\n\n#class INT16(VT, metaclass=meta_16b):\n<DED>class INT16(with_metaclass(meta_16b, INT)):\n    <IND>usable = False\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = 'B'\n    alt_cformat = 'b'\n    endian = VT.Native\n    usable = True\n\n<DED>class INT16(INT):\n    <IND>fuzzy_values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    value_space_size = 2**16-1\n    size = 16\n    usable = False\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<H'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT16(Fuzzy_INT, metaclass=meta_16b):\nclass Fuzzy_INT16(with_metaclass(meta_16b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**16-1\n    values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    short_cformat = 'H'\n    alt_short_cformat = 'h'\n\n# class Other_Fuzzy_INT16(Fuzzy_INT16):\n#     mini = 0\n#     maxi = 2**16-1\n#     values = [0xDEAD, 0xBEEF, 0xCAFE]\n#     short_cformat = 'H'\n#     alt_short_cformat = 'h'\n\n\n#class INT32(INT, metaclass=meta_32b):\nclass INT32(with_metaclass(meta_32b, INT)):\n    usable = False\n",
        "source_code_len": 559,
        "target_code": "    cformat = '<H'\n    alt_cformat = '<h'\n    endian = VT.LittleEndian\n    usable = True\n\nclass INT32(INT):\n    fuzzy_values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    value_space_size = 2**32-1\n    size = 32\n    usable = False\n",
        "target_code_len": 231,
        "diff_format": "@@ -2654,23 +2609,10 @@\n     cformat = '<H'\n+    alt_cformat = '<h'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT16(Fuzzy_INT, metaclass=meta_16b):\n-class Fuzzy_INT16(with_metaclass(meta_16b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**16-1\n-    values = [0xFFFF, 0, 0x8000, 0x7FFF]\n-    short_cformat = 'H'\n-    alt_short_cformat = 'h'\n-\n-# class Other_Fuzzy_INT16(Fuzzy_INT16):\n-#     mini = 0\n-#     maxi = 2**16-1\n-#     values = [0xDEAD, 0xBEEF, 0xCAFE]\n-#     short_cformat = 'H'\n-#     alt_short_cformat = 'h'\n-\n-\n-#class INT32(INT, metaclass=meta_32b):\n-class INT32(with_metaclass(meta_32b, INT)):\n+    usable = True\n+\n+class INT32(INT):\n+    fuzzy_values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n+    value_space_size = 2**32-1\n+    size = 32\n     usable = False\n",
        "source_code_with_indent": "    cformat = '<H'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT16(Fuzzy_INT, metaclass=meta_16b):\n<DED>class Fuzzy_INT16(with_metaclass(meta_16b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**16-1\n    values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    short_cformat = 'H'\n    alt_short_cformat = 'h'\n\n# class Other_Fuzzy_INT16(Fuzzy_INT16):\n#     mini = 0\n#     maxi = 2**16-1\n#     values = [0xDEAD, 0xBEEF, 0xCAFE]\n#     short_cformat = 'H'\n#     alt_short_cformat = 'h'\n\n\n#class INT32(INT, metaclass=meta_32b):\n<DED>class INT32(with_metaclass(meta_32b, INT)):\n    <IND>usable = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<H'\n    alt_cformat = '<h'\n    endian = VT.LittleEndian\n    usable = True\n\n<DED>class INT32(INT):\n    <IND>fuzzy_values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    value_space_size = 2**32-1\n    size = 32\n    usable = False\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<L'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT32(Fuzzy_INT, metaclass=meta_32b):\nclass Fuzzy_INT32(with_metaclass(meta_32b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**32-1\n    values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    short_cformat = 'L'\n    alt_short_cformat = 'l'\n\n# class Other_Fuzzy_INT32(Fuzzy_INT32):\n#     mini = 0\n#     maxi = 2**32-1\n#     values = [0xDEADBEEF, 0xAAAAAAAA]\n#     short_cformat = 'L'\n#     alt_short_cformat = 'l'\n\n\n#class INT64(INT, metaclass=meta_64b)\nclass INT64(with_metaclass(meta_64b, INT)):\n    usable = False\n",
        "source_code_len": 570,
        "target_code": "    cformat = '<L'\n    alt_cformat = '<l'\n    endian = VT.LittleEndian\n    usable = True\n\nclass INT64(INT):\n    fuzzy_values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    value_space_size = 2**64-1\n    size = 64\n    usable = False\n",
        "target_code_len": 275,
        "diff_format": "@@ -2699,23 +2647,10 @@\n     cformat = '<L'\n+    alt_cformat = '<l'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT32(Fuzzy_INT, metaclass=meta_32b):\n-class Fuzzy_INT32(with_metaclass(meta_32b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**32-1\n-    values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n-    short_cformat = 'L'\n-    alt_short_cformat = 'l'\n-\n-# class Other_Fuzzy_INT32(Fuzzy_INT32):\n-#     mini = 0\n-#     maxi = 2**32-1\n-#     values = [0xDEADBEEF, 0xAAAAAAAA]\n-#     short_cformat = 'L'\n-#     alt_short_cformat = 'l'\n-\n-\n-#class INT64(INT, metaclass=meta_64b)\n-class INT64(with_metaclass(meta_64b, INT)):\n+    usable = True\n+\n+class INT64(INT):\n+    fuzzy_values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n+    value_space_size = 2**64-1\n+    size = 64\n     usable = False\n",
        "source_code_with_indent": "    cformat = '<L'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT32(Fuzzy_INT, metaclass=meta_32b):\n<DED>class Fuzzy_INT32(with_metaclass(meta_32b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**32-1\n    values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    short_cformat = 'L'\n    alt_short_cformat = 'l'\n\n# class Other_Fuzzy_INT32(Fuzzy_INT32):\n#     mini = 0\n#     maxi = 2**32-1\n#     values = [0xDEADBEEF, 0xAAAAAAAA]\n#     short_cformat = 'L'\n#     alt_short_cformat = 'l'\n\n\n#class INT64(INT, metaclass=meta_64b)\n<DED>class INT64(with_metaclass(meta_64b, INT)):\n    <IND>usable = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<L'\n    alt_cformat = '<l'\n    endian = VT.LittleEndian\n    usable = True\n\n<DED>class INT64(INT):\n    <IND>fuzzy_values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    value_space_size = 2**64-1\n    size = 64\n    usable = False\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\nclass Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\nif __name__ == \"__main__\":\n\n    import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            obj[k] = v(min=1, max=10)\n        else:\n            obj[k] = v()\n        obj[k].get_value()\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13])\n        except TypeError:\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(min=0, max=2**7-1, determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n\n\n    print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c, c().get_value())\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c)\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')\n    for i in range(5):\n        print(i, t.get_value())\n    \n    print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n\n    print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_len": 5225,
        "target_code": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_len": 88,
        "diff_format": "@@ -2744,248 +2685,4 @@\n     cformat = '<Q'\n+    alt_cformat = '<q'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n-class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**64-1\n-    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n-    short_cformat = 'Q'\n-    alt_short_cformat = 'q'\n-\n-# class Other_Fuzzy_INT64(Fuzzy_INT64):\n-#     mini = 0\n-#     maxi = 2**64-1\n-#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n-#     short_cformat = 'Q'\n-#     alt_short_cformat = 'q'\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-\n-    import copy\n-\n-    d = copy.copy(meta_8b.compatible_class)\n-    d.update(meta_16b.compatible_class)\n-    d.update(meta_32b.compatible_class)\n-    d.update(meta_64b.compatible_class)\n-    d.update(meta_int_str.compatible_class)\n-    print(d)\n-    \n-    obj = {}\n-    for k, v in d.items():\n-        print('\\n***** [ %s ] *****\\n' % k)\n-\n-        if issubclass(v, INT_str):\n-            obj[k] = v(min=1, max=10)\n-        else:\n-            obj[k] = v()\n-        obj[k].get_value()\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13])\n-        except TypeError:\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(min=0, max=2**7-1, determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-\n-\n-    print('\\n*******************************\\n')\n-\n-\n-    t = SINT16_be()\n-    t.is_exhausted()\n-\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c, c().get_value())\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')        \n-    print('val: ', t.get_value())\n-\n-    print('\\n***\\n')\n-\n-    t = UINT16_le(values=range(100,400,4))\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c)\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')\n-    for i in range(5):\n-        print(i, t.get_value())\n-    \n-    print('\\n***\\n')\n-\n-    t = Fuzzy_INT16()\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-\n-    print('\\n***** [ String ] *****\\n')\n-\n-    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n-               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.get_value()\n-    t.get_value()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n-\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(min_sz=1, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n+    usable = True",
        "source_code_with_indent": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n<DED>class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\n<DED>if __name__ == \"__main__\":\n\n    <IND>import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        <IND>print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            <IND>obj[k] = v(min=1, max=10)\n        <DED>else:\n            <IND>obj[k] = v()\n        <DED>obj[k].get_value()\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13])\n        <DED>except TypeError:\n            <IND>obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(min=0, max=2**7-1, determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n\n\n    <DED><DED>print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c, c().get_value())\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c)\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')\n    for i in range(5):\n        <IND>print(i, t.get_value())\n    \n    <DED>print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n    <DED><DED>for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n\n    <DED><DED>print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:1727:20 Invalid type [31]: Expression `six.with_metaclass(framework.value_types.meta_int_str, framework.value_types.INT_str)` is not a valid type.",
    "message": " Expression `six.with_metaclass(framework.value_types.meta_int_str, framework.value_types.INT_str)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 1727,
    "warning_line": "class Fuzzy_INT_str(with_metaclass(meta_int_str, INT_str)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _convert_value(self, val):\n        ret = self._format_str.format(val).encode('utf8')\n        if self._reverse:\n            ret = ret[::-1]\n        return ret\n\n\n#class Fuzzy_INT_str(Fuzzy_INT, metaclass=meta_int_str):\nclass Fuzzy_INT_str(with_metaclass(meta_int_str, INT_str)):\n    values = [0, -1, -2**32, 2 ** 32 - 1, 2 ** 32,\n              b'%n'*8, b'%n'*100, b'\\\"%n\\\"'*100,\n              b'%s'*8, b'%s'*100, b'\\\"%s\\\"'*100]\n\n    def __init__(self):\n        assert(self.values is not None)\n        INT_str.__init__(self, values=self.values, determinist=True)\n\n    def is_compatible(self, integer):\n        return True\n\n    def pretty_print(self, max_size=None):\n        if self.drawn_val is None:\n            self.get_value()\n\n        return str(self.drawn_val)\n\n    def _convert_value(self, val):\n        if isinstance(val, int):\n            return INT_str._convert_value(self, val)\n        else:\n            assert isinstance(val, bytes)\n            return val\n\n\n",
        "source_code_len": 974,
        "target_code": "    def _convert_value(self, val):\n        if isinstance(val, int):\n            ret = self._format_str.format(val).encode('utf8')\n            if self._reverse:\n                ret = ret[::-1]\n            return ret\n        else:\n            # for some fuzzing case\n            assert isinstance(val, bytes)\n            return val\n\n",
        "target_code_len": 331,
        "diff_format": "@@ -1719,34 +1692,11 @@\n     def _convert_value(self, val):\n-        ret = self._format_str.format(val).encode('utf8')\n-        if self._reverse:\n-            ret = ret[::-1]\n-        return ret\n-\n-\n-#class Fuzzy_INT_str(Fuzzy_INT, metaclass=meta_int_str):\n-class Fuzzy_INT_str(with_metaclass(meta_int_str, INT_str)):\n-    values = [0, -1, -2**32, 2 ** 32 - 1, 2 ** 32,\n-              b'%n'*8, b'%n'*100, b'\\\"%n\\\"'*100,\n-              b'%s'*8, b'%s'*100, b'\\\"%s\\\"'*100]\n-\n-    def __init__(self):\n-        assert(self.values is not None)\n-        INT_str.__init__(self, values=self.values, determinist=True)\n-\n-    def is_compatible(self, integer):\n-        return True\n-\n-    def pretty_print(self, max_size=None):\n-        if self.drawn_val is None:\n-            self.get_value()\n-\n-        return str(self.drawn_val)\n-\n-    def _convert_value(self, val):\n         if isinstance(val, int):\n-            return INT_str._convert_value(self, val)\n-        else:\n+            ret = self._format_str.format(val).encode('utf8')\n+            if self._reverse:\n+                ret = ret[::-1]\n+            return ret\n+        else:\n+            # for some fuzzing case\n             assert isinstance(val, bytes)\n             return val\n-\n \n",
        "source_code_with_indent": "    <DED>def _convert_value(self, val):\n        <IND>ret = self._format_str.format(val).encode('utf8')\n        if self._reverse:\n            <IND>ret = ret[::-1]\n        <DED>return ret\n\n\n#class Fuzzy_INT_str(Fuzzy_INT, metaclass=meta_int_str):\n<DED><DED>class Fuzzy_INT_str(with_metaclass(meta_int_str, INT_str)):\n    <IND>values = [0, -1, -2**32, 2 ** 32 - 1, 2 ** 32,\n              b'%n'*8, b'%n'*100, b'\\\"%n\\\"'*100,\n              b'%s'*8, b'%s'*100, b'\\\"%s\\\"'*100]\n\n    def __init__(self):\n        <IND>assert(self.values is not None)\n        INT_str.__init__(self, values=self.values, determinist=True)\n\n    <DED>def is_compatible(self, integer):\n        <IND>return True\n\n    <DED>def pretty_print(self, max_size=None):\n        <IND>if self.drawn_val is None:\n            <IND>self.get_value()\n\n        <DED>return str(self.drawn_val)\n\n    <DED>def _convert_value(self, val):\n        <IND>if isinstance(val, int):\n            <IND>return INT_str._convert_value(self, val)\n        <DED>else:\n            <IND>assert isinstance(val, bytes)\n            return val\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def _convert_value(self, val):\n        <IND>if isinstance(val, int):\n            <IND>ret = self._format_str.format(val).encode('utf8')\n            if self._reverse:\n                <IND>ret = ret[::-1]\n            <DED>return ret\n        <DED>else:\n            # for some fuzzing case\n            <IND>assert isinstance(val, bytes)\n            return val\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2604:11 Invalid type [31]: Expression `six.with_metaclass(framework.value_types.meta_8b, framework.value_types.INT)` is not a valid type.",
    "message": " Expression `six.with_metaclass(framework.value_types.meta_8b, framework.value_types.INT)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2604,
    "warning_line": "class INT8(with_metaclass(meta_8b, INT)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n#class INT8(INT, metaclass=meta_8b):\nclass INT8(with_metaclass(meta_8b, INT)):\n    usable = False\n",
        "source_code_len": 99,
        "target_code": "\n\nclass INT8(INT):\n    fuzzy_values = [0xFF, 0, 0x01, 0x80, 0x7F]\n    value_space_size = 2**8-1\n    size = 8\n    usable = False\n",
        "target_code_len": 128,
        "diff_format": "@@ -2602,4 +2552,7 @@\n \n-#class INT8(INT, metaclass=meta_8b):\n-class INT8(with_metaclass(meta_8b, INT)):\n+\n+class INT8(INT):\n+    fuzzy_values = [0xFF, 0, 0x01, 0x80, 0x7F]\n+    value_space_size = 2**8-1\n+    size = 8\n     usable = False\n",
        "source_code_with_indent": "\n#class INT8(INT, metaclass=meta_8b):\n<DED><DED>class INT8(with_metaclass(meta_8b, INT)):\n    <IND>usable = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n\n<DED><DED>class INT8(INT):\n    <IND>fuzzy_values = [0xFF, 0, 0x01, 0x80, 0x7F]\n    value_space_size = 2**8-1\n    size = 8\n    usable = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2620:17 Invalid type [31]: Expression `six.with_metaclass(framework.value_types.meta_8b, framework.value_types.Fuzzy_INT)` is not a valid type.",
    "message": " Expression `six.with_metaclass(framework.value_types.meta_8b, framework.value_types.Fuzzy_INT)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2620,
    "warning_line": "class Fuzzy_INT8(with_metaclass(meta_8b, Fuzzy_INT)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = 'B'\n    endian = VT.Native\n\n#class Fuzzy_INT8(Fuzzy_INT, metaclass=meta_8b):\nclass Fuzzy_INT8(with_metaclass(meta_8b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**8-1\n    values = [0xFF, 0, 0x01, 0x80, 0x7F]\n    short_cformat = 'B'\n    alt_short_cformat = 'b'\n\n\n#class INT16(VT, metaclass=meta_16b):\nclass INT16(with_metaclass(meta_16b, INT)):\n    usable = False\n\n\n",
        "source_code_len": 374,
        "target_code": "    cformat = 'B'\n    alt_cformat = 'b'\n    endian = VT.Native\n    usable = True\n\nclass INT16(INT):\n    fuzzy_values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    value_space_size = 2**16-1\n    size = 16\n    usable = False\n\n",
        "target_code_len": 212,
        "diff_format": "@@ -2616,17 +2571,11 @@\n     cformat = 'B'\n+    alt_cformat = 'b'\n     endian = VT.Native\n-\n-#class Fuzzy_INT8(Fuzzy_INT, metaclass=meta_8b):\n-class Fuzzy_INT8(with_metaclass(meta_8b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**8-1\n-    values = [0xFF, 0, 0x01, 0x80, 0x7F]\n-    short_cformat = 'B'\n-    alt_short_cformat = 'b'\n-\n-\n-#class INT16(VT, metaclass=meta_16b):\n-class INT16(with_metaclass(meta_16b, INT)):\n+    usable = True\n+\n+class INT16(INT):\n+    fuzzy_values = [0xFFFF, 0, 0x8000, 0x7FFF]\n+    value_space_size = 2**16-1\n+    size = 16\n     usable = False\n-\n \n",
        "source_code_with_indent": "    cformat = 'B'\n    endian = VT.Native\n\n#class Fuzzy_INT8(Fuzzy_INT, metaclass=meta_8b):\n<DED>class Fuzzy_INT8(with_metaclass(meta_8b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**8-1\n    values = [0xFF, 0, 0x01, 0x80, 0x7F]\n    short_cformat = 'B'\n    alt_short_cformat = 'b'\n\n\n#class INT16(VT, metaclass=meta_16b):\n<DED>class INT16(with_metaclass(meta_16b, INT)):\n    <IND>usable = False\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = 'B'\n    alt_cformat = 'b'\n    endian = VT.Native\n    usable = True\n\n<DED>class INT16(INT):\n    <IND>fuzzy_values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    value_space_size = 2**16-1\n    size = 16\n    usable = False\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2629:12 Invalid type [31]: Expression `six.with_metaclass(framework.value_types.meta_16b, framework.value_types.INT)` is not a valid type.",
    "message": " Expression `six.with_metaclass(framework.value_types.meta_16b, framework.value_types.INT)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2629,
    "warning_line": "class INT16(with_metaclass(meta_16b, INT)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = 'B'\n    endian = VT.Native\n\n#class Fuzzy_INT8(Fuzzy_INT, metaclass=meta_8b):\nclass Fuzzy_INT8(with_metaclass(meta_8b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**8-1\n    values = [0xFF, 0, 0x01, 0x80, 0x7F]\n    short_cformat = 'B'\n    alt_short_cformat = 'b'\n\n\n#class INT16(VT, metaclass=meta_16b):\nclass INT16(with_metaclass(meta_16b, INT)):\n    usable = False\n\n\n",
        "source_code_len": 374,
        "target_code": "    cformat = 'B'\n    alt_cformat = 'b'\n    endian = VT.Native\n    usable = True\n\nclass INT16(INT):\n    fuzzy_values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    value_space_size = 2**16-1\n    size = 16\n    usable = False\n\n",
        "target_code_len": 212,
        "diff_format": "@@ -2616,17 +2571,11 @@\n     cformat = 'B'\n+    alt_cformat = 'b'\n     endian = VT.Native\n-\n-#class Fuzzy_INT8(Fuzzy_INT, metaclass=meta_8b):\n-class Fuzzy_INT8(with_metaclass(meta_8b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**8-1\n-    values = [0xFF, 0, 0x01, 0x80, 0x7F]\n-    short_cformat = 'B'\n-    alt_short_cformat = 'b'\n-\n-\n-#class INT16(VT, metaclass=meta_16b):\n-class INT16(with_metaclass(meta_16b, INT)):\n+    usable = True\n+\n+class INT16(INT):\n+    fuzzy_values = [0xFFFF, 0, 0x8000, 0x7FFF]\n+    value_space_size = 2**16-1\n+    size = 16\n     usable = False\n-\n \n",
        "source_code_with_indent": "    cformat = 'B'\n    endian = VT.Native\n\n#class Fuzzy_INT8(Fuzzy_INT, metaclass=meta_8b):\n<DED>class Fuzzy_INT8(with_metaclass(meta_8b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**8-1\n    values = [0xFF, 0, 0x01, 0x80, 0x7F]\n    short_cformat = 'B'\n    alt_short_cformat = 'b'\n\n\n#class INT16(VT, metaclass=meta_16b):\n<DED>class INT16(with_metaclass(meta_16b, INT)):\n    <IND>usable = False\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = 'B'\n    alt_cformat = 'b'\n    endian = VT.Native\n    usable = True\n\n<DED>class INT16(INT):\n    <IND>fuzzy_values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    value_space_size = 2**16-1\n    size = 16\n    usable = False\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2659:18 Invalid type [31]: Expression `six.with_metaclass(framework.value_types.meta_16b, framework.value_types.Fuzzy_INT)` is not a valid type.",
    "message": " Expression `six.with_metaclass(framework.value_types.meta_16b, framework.value_types.Fuzzy_INT)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2659,
    "warning_line": "class Fuzzy_INT16(with_metaclass(meta_16b, Fuzzy_INT)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<H'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT16(Fuzzy_INT, metaclass=meta_16b):\nclass Fuzzy_INT16(with_metaclass(meta_16b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**16-1\n    values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    short_cformat = 'H'\n    alt_short_cformat = 'h'\n\n# class Other_Fuzzy_INT16(Fuzzy_INT16):\n#     mini = 0\n#     maxi = 2**16-1\n#     values = [0xDEAD, 0xBEEF, 0xCAFE]\n#     short_cformat = 'H'\n#     alt_short_cformat = 'h'\n\n\n#class INT32(INT, metaclass=meta_32b):\nclass INT32(with_metaclass(meta_32b, INT)):\n    usable = False\n",
        "source_code_len": 559,
        "target_code": "    cformat = '<H'\n    alt_cformat = '<h'\n    endian = VT.LittleEndian\n    usable = True\n\nclass INT32(INT):\n    fuzzy_values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    value_space_size = 2**32-1\n    size = 32\n    usable = False\n",
        "target_code_len": 231,
        "diff_format": "@@ -2654,23 +2609,10 @@\n     cformat = '<H'\n+    alt_cformat = '<h'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT16(Fuzzy_INT, metaclass=meta_16b):\n-class Fuzzy_INT16(with_metaclass(meta_16b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**16-1\n-    values = [0xFFFF, 0, 0x8000, 0x7FFF]\n-    short_cformat = 'H'\n-    alt_short_cformat = 'h'\n-\n-# class Other_Fuzzy_INT16(Fuzzy_INT16):\n-#     mini = 0\n-#     maxi = 2**16-1\n-#     values = [0xDEAD, 0xBEEF, 0xCAFE]\n-#     short_cformat = 'H'\n-#     alt_short_cformat = 'h'\n-\n-\n-#class INT32(INT, metaclass=meta_32b):\n-class INT32(with_metaclass(meta_32b, INT)):\n+    usable = True\n+\n+class INT32(INT):\n+    fuzzy_values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n+    value_space_size = 2**32-1\n+    size = 32\n     usable = False\n",
        "source_code_with_indent": "    cformat = '<H'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT16(Fuzzy_INT, metaclass=meta_16b):\n<DED>class Fuzzy_INT16(with_metaclass(meta_16b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**16-1\n    values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    short_cformat = 'H'\n    alt_short_cformat = 'h'\n\n# class Other_Fuzzy_INT16(Fuzzy_INT16):\n#     mini = 0\n#     maxi = 2**16-1\n#     values = [0xDEAD, 0xBEEF, 0xCAFE]\n#     short_cformat = 'H'\n#     alt_short_cformat = 'h'\n\n\n#class INT32(INT, metaclass=meta_32b):\n<DED>class INT32(with_metaclass(meta_32b, INT)):\n    <IND>usable = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<H'\n    alt_cformat = '<h'\n    endian = VT.LittleEndian\n    usable = True\n\n<DED>class INT32(INT):\n    <IND>fuzzy_values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    value_space_size = 2**32-1\n    size = 32\n    usable = False\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\nclass Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\nif __name__ == \"__main__\":\n\n    import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            obj[k] = v(min=1, max=10)\n        else:\n            obj[k] = v()\n        obj[k].get_value()\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13])\n        except TypeError:\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(min=0, max=2**7-1, determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n\n\n    print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c, c().get_value())\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c)\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')\n    for i in range(5):\n        print(i, t.get_value())\n    \n    print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n\n    print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_len": 5225,
        "target_code": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_len": 88,
        "diff_format": "@@ -2744,248 +2685,4 @@\n     cformat = '<Q'\n+    alt_cformat = '<q'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n-class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**64-1\n-    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n-    short_cformat = 'Q'\n-    alt_short_cformat = 'q'\n-\n-# class Other_Fuzzy_INT64(Fuzzy_INT64):\n-#     mini = 0\n-#     maxi = 2**64-1\n-#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n-#     short_cformat = 'Q'\n-#     alt_short_cformat = 'q'\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-\n-    import copy\n-\n-    d = copy.copy(meta_8b.compatible_class)\n-    d.update(meta_16b.compatible_class)\n-    d.update(meta_32b.compatible_class)\n-    d.update(meta_64b.compatible_class)\n-    d.update(meta_int_str.compatible_class)\n-    print(d)\n-    \n-    obj = {}\n-    for k, v in d.items():\n-        print('\\n***** [ %s ] *****\\n' % k)\n-\n-        if issubclass(v, INT_str):\n-            obj[k] = v(min=1, max=10)\n-        else:\n-            obj[k] = v()\n-        obj[k].get_value()\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13])\n-        except TypeError:\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(min=0, max=2**7-1, determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-\n-\n-    print('\\n*******************************\\n')\n-\n-\n-    t = SINT16_be()\n-    t.is_exhausted()\n-\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c, c().get_value())\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')        \n-    print('val: ', t.get_value())\n-\n-    print('\\n***\\n')\n-\n-    t = UINT16_le(values=range(100,400,4))\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c)\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')\n-    for i in range(5):\n-        print(i, t.get_value())\n-    \n-    print('\\n***\\n')\n-\n-    t = Fuzzy_INT16()\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-\n-    print('\\n***** [ String ] *****\\n')\n-\n-    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n-               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.get_value()\n-    t.get_value()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n-\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(min_sz=1, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n+    usable = True",
        "source_code_with_indent": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n<DED>class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\n<DED>if __name__ == \"__main__\":\n\n    <IND>import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        <IND>print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            <IND>obj[k] = v(min=1, max=10)\n        <DED>else:\n            <IND>obj[k] = v()\n        <DED>obj[k].get_value()\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13])\n        <DED>except TypeError:\n            <IND>obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(min=0, max=2**7-1, determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n\n\n    <DED><DED>print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c, c().get_value())\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c)\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')\n    for i in range(5):\n        <IND>print(i, t.get_value())\n    \n    <DED>print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n    <DED><DED>for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n\n    <DED><DED>print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2675:12 Invalid type [31]: Expression `six.with_metaclass(framework.value_types.meta_32b, framework.value_types.INT)` is not a valid type.",
    "message": " Expression `six.with_metaclass(framework.value_types.meta_32b, framework.value_types.INT)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2675,
    "warning_line": "class INT32(with_metaclass(meta_32b, INT)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<H'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT16(Fuzzy_INT, metaclass=meta_16b):\nclass Fuzzy_INT16(with_metaclass(meta_16b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**16-1\n    values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    short_cformat = 'H'\n    alt_short_cformat = 'h'\n\n# class Other_Fuzzy_INT16(Fuzzy_INT16):\n#     mini = 0\n#     maxi = 2**16-1\n#     values = [0xDEAD, 0xBEEF, 0xCAFE]\n#     short_cformat = 'H'\n#     alt_short_cformat = 'h'\n\n\n#class INT32(INT, metaclass=meta_32b):\nclass INT32(with_metaclass(meta_32b, INT)):\n    usable = False\n",
        "source_code_len": 559,
        "target_code": "    cformat = '<H'\n    alt_cformat = '<h'\n    endian = VT.LittleEndian\n    usable = True\n\nclass INT32(INT):\n    fuzzy_values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    value_space_size = 2**32-1\n    size = 32\n    usable = False\n",
        "target_code_len": 231,
        "diff_format": "@@ -2654,23 +2609,10 @@\n     cformat = '<H'\n+    alt_cformat = '<h'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT16(Fuzzy_INT, metaclass=meta_16b):\n-class Fuzzy_INT16(with_metaclass(meta_16b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**16-1\n-    values = [0xFFFF, 0, 0x8000, 0x7FFF]\n-    short_cformat = 'H'\n-    alt_short_cformat = 'h'\n-\n-# class Other_Fuzzy_INT16(Fuzzy_INT16):\n-#     mini = 0\n-#     maxi = 2**16-1\n-#     values = [0xDEAD, 0xBEEF, 0xCAFE]\n-#     short_cformat = 'H'\n-#     alt_short_cformat = 'h'\n-\n-\n-#class INT32(INT, metaclass=meta_32b):\n-class INT32(with_metaclass(meta_32b, INT)):\n+    usable = True\n+\n+class INT32(INT):\n+    fuzzy_values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n+    value_space_size = 2**32-1\n+    size = 32\n     usable = False\n",
        "source_code_with_indent": "    cformat = '<H'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT16(Fuzzy_INT, metaclass=meta_16b):\n<DED>class Fuzzy_INT16(with_metaclass(meta_16b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**16-1\n    values = [0xFFFF, 0, 0x8000, 0x7FFF]\n    short_cformat = 'H'\n    alt_short_cformat = 'h'\n\n# class Other_Fuzzy_INT16(Fuzzy_INT16):\n#     mini = 0\n#     maxi = 2**16-1\n#     values = [0xDEAD, 0xBEEF, 0xCAFE]\n#     short_cformat = 'H'\n#     alt_short_cformat = 'h'\n\n\n#class INT32(INT, metaclass=meta_32b):\n<DED>class INT32(with_metaclass(meta_32b, INT)):\n    <IND>usable = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<H'\n    alt_cformat = '<h'\n    endian = VT.LittleEndian\n    usable = True\n\n<DED>class INT32(INT):\n    <IND>fuzzy_values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    value_space_size = 2**32-1\n    size = 32\n    usable = False\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\nclass Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\nif __name__ == \"__main__\":\n\n    import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            obj[k] = v(min=1, max=10)\n        else:\n            obj[k] = v()\n        obj[k].get_value()\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13])\n        except TypeError:\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(min=0, max=2**7-1, determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n\n\n    print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c, c().get_value())\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c)\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')\n    for i in range(5):\n        print(i, t.get_value())\n    \n    print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n\n    print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_len": 5225,
        "target_code": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_len": 88,
        "diff_format": "@@ -2744,248 +2685,4 @@\n     cformat = '<Q'\n+    alt_cformat = '<q'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n-class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**64-1\n-    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n-    short_cformat = 'Q'\n-    alt_short_cformat = 'q'\n-\n-# class Other_Fuzzy_INT64(Fuzzy_INT64):\n-#     mini = 0\n-#     maxi = 2**64-1\n-#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n-#     short_cformat = 'Q'\n-#     alt_short_cformat = 'q'\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-\n-    import copy\n-\n-    d = copy.copy(meta_8b.compatible_class)\n-    d.update(meta_16b.compatible_class)\n-    d.update(meta_32b.compatible_class)\n-    d.update(meta_64b.compatible_class)\n-    d.update(meta_int_str.compatible_class)\n-    print(d)\n-    \n-    obj = {}\n-    for k, v in d.items():\n-        print('\\n***** [ %s ] *****\\n' % k)\n-\n-        if issubclass(v, INT_str):\n-            obj[k] = v(min=1, max=10)\n-        else:\n-            obj[k] = v()\n-        obj[k].get_value()\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13])\n-        except TypeError:\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(min=0, max=2**7-1, determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-\n-\n-    print('\\n*******************************\\n')\n-\n-\n-    t = SINT16_be()\n-    t.is_exhausted()\n-\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c, c().get_value())\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')        \n-    print('val: ', t.get_value())\n-\n-    print('\\n***\\n')\n-\n-    t = UINT16_le(values=range(100,400,4))\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c)\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')\n-    for i in range(5):\n-        print(i, t.get_value())\n-    \n-    print('\\n***\\n')\n-\n-    t = Fuzzy_INT16()\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-\n-    print('\\n***** [ String ] *****\\n')\n-\n-    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n-               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.get_value()\n-    t.get_value()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n-\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(min_sz=1, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n+    usable = True",
        "source_code_with_indent": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n<DED>class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\n<DED>if __name__ == \"__main__\":\n\n    <IND>import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        <IND>print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            <IND>obj[k] = v(min=1, max=10)\n        <DED>else:\n            <IND>obj[k] = v()\n        <DED>obj[k].get_value()\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13])\n        <DED>except TypeError:\n            <IND>obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(min=0, max=2**7-1, determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n\n\n    <DED><DED>print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c, c().get_value())\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c)\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')\n    for i in range(5):\n        <IND>print(i, t.get_value())\n    \n    <DED>print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n    <DED><DED>for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n\n    <DED><DED>print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2704:18 Invalid type [31]: Expression `six.with_metaclass(framework.value_types.meta_32b, framework.value_types.Fuzzy_INT)` is not a valid type.",
    "message": " Expression `six.with_metaclass(framework.value_types.meta_32b, framework.value_types.Fuzzy_INT)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2704,
    "warning_line": "class Fuzzy_INT32(with_metaclass(meta_32b, Fuzzy_INT)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<L'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT32(Fuzzy_INT, metaclass=meta_32b):\nclass Fuzzy_INT32(with_metaclass(meta_32b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**32-1\n    values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    short_cformat = 'L'\n    alt_short_cformat = 'l'\n\n# class Other_Fuzzy_INT32(Fuzzy_INT32):\n#     mini = 0\n#     maxi = 2**32-1\n#     values = [0xDEADBEEF, 0xAAAAAAAA]\n#     short_cformat = 'L'\n#     alt_short_cformat = 'l'\n\n\n#class INT64(INT, metaclass=meta_64b)\nclass INT64(with_metaclass(meta_64b, INT)):\n    usable = False\n",
        "source_code_len": 570,
        "target_code": "    cformat = '<L'\n    alt_cformat = '<l'\n    endian = VT.LittleEndian\n    usable = True\n\nclass INT64(INT):\n    fuzzy_values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    value_space_size = 2**64-1\n    size = 64\n    usable = False\n",
        "target_code_len": 275,
        "diff_format": "@@ -2699,23 +2647,10 @@\n     cformat = '<L'\n+    alt_cformat = '<l'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT32(Fuzzy_INT, metaclass=meta_32b):\n-class Fuzzy_INT32(with_metaclass(meta_32b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**32-1\n-    values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n-    short_cformat = 'L'\n-    alt_short_cformat = 'l'\n-\n-# class Other_Fuzzy_INT32(Fuzzy_INT32):\n-#     mini = 0\n-#     maxi = 2**32-1\n-#     values = [0xDEADBEEF, 0xAAAAAAAA]\n-#     short_cformat = 'L'\n-#     alt_short_cformat = 'l'\n-\n-\n-#class INT64(INT, metaclass=meta_64b)\n-class INT64(with_metaclass(meta_64b, INT)):\n+    usable = True\n+\n+class INT64(INT):\n+    fuzzy_values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n+    value_space_size = 2**64-1\n+    size = 64\n     usable = False\n",
        "source_code_with_indent": "    cformat = '<L'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT32(Fuzzy_INT, metaclass=meta_32b):\n<DED>class Fuzzy_INT32(with_metaclass(meta_32b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**32-1\n    values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    short_cformat = 'L'\n    alt_short_cformat = 'l'\n\n# class Other_Fuzzy_INT32(Fuzzy_INT32):\n#     mini = 0\n#     maxi = 2**32-1\n#     values = [0xDEADBEEF, 0xAAAAAAAA]\n#     short_cformat = 'L'\n#     alt_short_cformat = 'l'\n\n\n#class INT64(INT, metaclass=meta_64b)\n<DED>class INT64(with_metaclass(meta_64b, INT)):\n    <IND>usable = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<L'\n    alt_cformat = '<l'\n    endian = VT.LittleEndian\n    usable = True\n\n<DED>class INT64(INT):\n    <IND>fuzzy_values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    value_space_size = 2**64-1\n    size = 64\n    usable = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2720:12 Invalid type [31]: Expression `six.with_metaclass(framework.value_types.meta_64b, framework.value_types.INT)` is not a valid type.",
    "message": " Expression `six.with_metaclass(framework.value_types.meta_64b, framework.value_types.INT)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2720,
    "warning_line": "class INT64(with_metaclass(meta_64b, INT)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<L'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT32(Fuzzy_INT, metaclass=meta_32b):\nclass Fuzzy_INT32(with_metaclass(meta_32b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**32-1\n    values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    short_cformat = 'L'\n    alt_short_cformat = 'l'\n\n# class Other_Fuzzy_INT32(Fuzzy_INT32):\n#     mini = 0\n#     maxi = 2**32-1\n#     values = [0xDEADBEEF, 0xAAAAAAAA]\n#     short_cformat = 'L'\n#     alt_short_cformat = 'l'\n\n\n#class INT64(INT, metaclass=meta_64b)\nclass INT64(with_metaclass(meta_64b, INT)):\n    usable = False\n",
        "source_code_len": 570,
        "target_code": "    cformat = '<L'\n    alt_cformat = '<l'\n    endian = VT.LittleEndian\n    usable = True\n\nclass INT64(INT):\n    fuzzy_values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    value_space_size = 2**64-1\n    size = 64\n    usable = False\n",
        "target_code_len": 275,
        "diff_format": "@@ -2699,23 +2647,10 @@\n     cformat = '<L'\n+    alt_cformat = '<l'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT32(Fuzzy_INT, metaclass=meta_32b):\n-class Fuzzy_INT32(with_metaclass(meta_32b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**32-1\n-    values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n-    short_cformat = 'L'\n-    alt_short_cformat = 'l'\n-\n-# class Other_Fuzzy_INT32(Fuzzy_INT32):\n-#     mini = 0\n-#     maxi = 2**32-1\n-#     values = [0xDEADBEEF, 0xAAAAAAAA]\n-#     short_cformat = 'L'\n-#     alt_short_cformat = 'l'\n-\n-\n-#class INT64(INT, metaclass=meta_64b)\n-class INT64(with_metaclass(meta_64b, INT)):\n+    usable = True\n+\n+class INT64(INT):\n+    fuzzy_values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n+    value_space_size = 2**64-1\n+    size = 64\n     usable = False\n",
        "source_code_with_indent": "    cformat = '<L'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT32(Fuzzy_INT, metaclass=meta_32b):\n<DED>class Fuzzy_INT32(with_metaclass(meta_32b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**32-1\n    values = [0xFFFFFFFF, 0, 0x80000000, 0x7FFFFFFF]\n    short_cformat = 'L'\n    alt_short_cformat = 'l'\n\n# class Other_Fuzzy_INT32(Fuzzy_INT32):\n#     mini = 0\n#     maxi = 2**32-1\n#     values = [0xDEADBEEF, 0xAAAAAAAA]\n#     short_cformat = 'L'\n#     alt_short_cformat = 'l'\n\n\n#class INT64(INT, metaclass=meta_64b)\n<DED>class INT64(with_metaclass(meta_64b, INT)):\n    <IND>usable = False\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<L'\n    alt_cformat = '<l'\n    endian = VT.LittleEndian\n    usable = True\n\n<DED>class INT64(INT):\n    <IND>fuzzy_values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    value_space_size = 2**64-1\n    size = 64\n    usable = False\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2749:18 Invalid type [31]: Expression `six.with_metaclass(framework.value_types.meta_64b, framework.value_types.Fuzzy_INT)` is not a valid type.",
    "message": " Expression `six.with_metaclass(framework.value_types.meta_64b, framework.value_types.Fuzzy_INT)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 2749,
    "warning_line": "class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\nclass Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\nif __name__ == \"__main__\":\n\n    import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            obj[k] = v(min=1, max=10)\n        else:\n            obj[k] = v()\n        obj[k].get_value()\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13])\n        except TypeError:\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(min=0, max=2**7-1, determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n\n\n    print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c, c().get_value())\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c)\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')\n    for i in range(5):\n        print(i, t.get_value())\n    \n    print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n\n    print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_len": 5225,
        "target_code": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_len": 88,
        "diff_format": "@@ -2744,248 +2685,4 @@\n     cformat = '<Q'\n+    alt_cformat = '<q'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n-class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**64-1\n-    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n-    short_cformat = 'Q'\n-    alt_short_cformat = 'q'\n-\n-# class Other_Fuzzy_INT64(Fuzzy_INT64):\n-#     mini = 0\n-#     maxi = 2**64-1\n-#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n-#     short_cformat = 'Q'\n-#     alt_short_cformat = 'q'\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-\n-    import copy\n-\n-    d = copy.copy(meta_8b.compatible_class)\n-    d.update(meta_16b.compatible_class)\n-    d.update(meta_32b.compatible_class)\n-    d.update(meta_64b.compatible_class)\n-    d.update(meta_int_str.compatible_class)\n-    print(d)\n-    \n-    obj = {}\n-    for k, v in d.items():\n-        print('\\n***** [ %s ] *****\\n' % k)\n-\n-        if issubclass(v, INT_str):\n-            obj[k] = v(min=1, max=10)\n-        else:\n-            obj[k] = v()\n-        obj[k].get_value()\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13])\n-        except TypeError:\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(min=0, max=2**7-1, determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-\n-\n-    print('\\n*******************************\\n')\n-\n-\n-    t = SINT16_be()\n-    t.is_exhausted()\n-\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c, c().get_value())\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')        \n-    print('val: ', t.get_value())\n-\n-    print('\\n***\\n')\n-\n-    t = UINT16_le(values=range(100,400,4))\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c)\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')\n-    for i in range(5):\n-        print(i, t.get_value())\n-    \n-    print('\\n***\\n')\n-\n-    t = Fuzzy_INT16()\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-\n-    print('\\n***** [ String ] *****\\n')\n-\n-    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n-               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.get_value()\n-    t.get_value()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n-\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(min_sz=1, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n+    usable = True",
        "source_code_with_indent": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n<DED>class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\n<DED>if __name__ == \"__main__\":\n\n    <IND>import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        <IND>print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            <IND>obj[k] = v(min=1, max=10)\n        <DED>else:\n            <IND>obj[k] = v()\n        <DED>obj[k].get_value()\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13])\n        <DED>except TypeError:\n            <IND>obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(min=0, max=2**7-1, determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n\n\n    <DED><DED>print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c, c().get_value())\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c)\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')\n    for i in range(5):\n        <IND>print(i, t.get_value())\n    \n    <DED>print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n    <DED><DED>for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n\n    <DED><DED>print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2839:4 Incompatible variable type [9]: t is declared to have type `SINT16_be` but is used as type `UINT16_le`.",
    "message": " t is declared to have type `SINT16_be` but is used as type `UINT16_le`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2839,
    "warning_line": "    t = UINT16_le(values=range(100,400,4))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\nclass Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\nif __name__ == \"__main__\":\n\n    import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            obj[k] = v(min=1, max=10)\n        else:\n            obj[k] = v()\n        obj[k].get_value()\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13])\n        except TypeError:\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(min=0, max=2**7-1, determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n\n\n    print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c, c().get_value())\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c)\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')\n    for i in range(5):\n        print(i, t.get_value())\n    \n    print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n\n    print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_len": 5225,
        "target_code": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_len": 88,
        "diff_format": "@@ -2744,248 +2685,4 @@\n     cformat = '<Q'\n+    alt_cformat = '<q'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n-class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**64-1\n-    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n-    short_cformat = 'Q'\n-    alt_short_cformat = 'q'\n-\n-# class Other_Fuzzy_INT64(Fuzzy_INT64):\n-#     mini = 0\n-#     maxi = 2**64-1\n-#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n-#     short_cformat = 'Q'\n-#     alt_short_cformat = 'q'\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-\n-    import copy\n-\n-    d = copy.copy(meta_8b.compatible_class)\n-    d.update(meta_16b.compatible_class)\n-    d.update(meta_32b.compatible_class)\n-    d.update(meta_64b.compatible_class)\n-    d.update(meta_int_str.compatible_class)\n-    print(d)\n-    \n-    obj = {}\n-    for k, v in d.items():\n-        print('\\n***** [ %s ] *****\\n' % k)\n-\n-        if issubclass(v, INT_str):\n-            obj[k] = v(min=1, max=10)\n-        else:\n-            obj[k] = v()\n-        obj[k].get_value()\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13])\n-        except TypeError:\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(min=0, max=2**7-1, determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-\n-\n-    print('\\n*******************************\\n')\n-\n-\n-    t = SINT16_be()\n-    t.is_exhausted()\n-\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c, c().get_value())\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')        \n-    print('val: ', t.get_value())\n-\n-    print('\\n***\\n')\n-\n-    t = UINT16_le(values=range(100,400,4))\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c)\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')\n-    for i in range(5):\n-        print(i, t.get_value())\n-    \n-    print('\\n***\\n')\n-\n-    t = Fuzzy_INT16()\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-\n-    print('\\n***** [ String ] *****\\n')\n-\n-    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n-               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.get_value()\n-    t.get_value()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n-\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(min_sz=1, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n+    usable = True",
        "source_code_with_indent": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n<DED>class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\n<DED>if __name__ == \"__main__\":\n\n    <IND>import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        <IND>print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            <IND>obj[k] = v(min=1, max=10)\n        <DED>else:\n            <IND>obj[k] = v()\n        <DED>obj[k].get_value()\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13])\n        <DED>except TypeError:\n            <IND>obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(min=0, max=2**7-1, determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n\n\n    <DED><DED>print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c, c().get_value())\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c)\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')\n    for i in range(5):\n        <IND>print(i, t.get_value())\n    \n    <DED>print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n    <DED><DED>for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n\n    <DED><DED>print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2855:4 Incompatible variable type [9]: t is declared to have type `SINT16_be` but is used as type `Fuzzy_INT16`.",
    "message": " t is declared to have type `SINT16_be` but is used as type `Fuzzy_INT16`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2855,
    "warning_line": "    t = Fuzzy_INT16()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\nclass Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\nif __name__ == \"__main__\":\n\n    import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            obj[k] = v(min=1, max=10)\n        else:\n            obj[k] = v()\n        obj[k].get_value()\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13])\n        except TypeError:\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(min=0, max=2**7-1, determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n\n\n    print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c, c().get_value())\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c)\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')\n    for i in range(5):\n        print(i, t.get_value())\n    \n    print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n\n    print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_len": 5225,
        "target_code": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_len": 88,
        "diff_format": "@@ -2744,248 +2685,4 @@\n     cformat = '<Q'\n+    alt_cformat = '<q'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n-class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**64-1\n-    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n-    short_cformat = 'Q'\n-    alt_short_cformat = 'q'\n-\n-# class Other_Fuzzy_INT64(Fuzzy_INT64):\n-#     mini = 0\n-#     maxi = 2**64-1\n-#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n-#     short_cformat = 'Q'\n-#     alt_short_cformat = 'q'\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-\n-    import copy\n-\n-    d = copy.copy(meta_8b.compatible_class)\n-    d.update(meta_16b.compatible_class)\n-    d.update(meta_32b.compatible_class)\n-    d.update(meta_64b.compatible_class)\n-    d.update(meta_int_str.compatible_class)\n-    print(d)\n-    \n-    obj = {}\n-    for k, v in d.items():\n-        print('\\n***** [ %s ] *****\\n' % k)\n-\n-        if issubclass(v, INT_str):\n-            obj[k] = v(min=1, max=10)\n-        else:\n-            obj[k] = v()\n-        obj[k].get_value()\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13])\n-        except TypeError:\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(min=0, max=2**7-1, determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-\n-\n-    print('\\n*******************************\\n')\n-\n-\n-    t = SINT16_be()\n-    t.is_exhausted()\n-\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c, c().get_value())\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')        \n-    print('val: ', t.get_value())\n-\n-    print('\\n***\\n')\n-\n-    t = UINT16_le(values=range(100,400,4))\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c)\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')\n-    for i in range(5):\n-        print(i, t.get_value())\n-    \n-    print('\\n***\\n')\n-\n-    t = Fuzzy_INT16()\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-\n-    print('\\n***** [ String ] *****\\n')\n-\n-    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n-               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.get_value()\n-    t.get_value()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n-\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(min_sz=1, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n+    usable = True",
        "source_code_with_indent": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n<DED>class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\n<DED>if __name__ == \"__main__\":\n\n    <IND>import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        <IND>print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            <IND>obj[k] = v(min=1, max=10)\n        <DED>else:\n            <IND>obj[k] = v()\n        <DED>obj[k].get_value()\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13])\n        <DED>except TypeError:\n            <IND>obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(min=0, max=2**7-1, determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n\n\n    <DED><DED>print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c, c().get_value())\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c)\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')\n    for i in range(5):\n        <IND>print(i, t.get_value())\n    \n    <DED>print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n    <DED><DED>for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n\n    <DED><DED>print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2869:4 Incompatible variable type [9]: t is declared to have type `SINT16_be` but is used as type `String`.",
    "message": " t is declared to have type `SINT16_be` but is used as type `String`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2869,
    "warning_line": "    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\nclass Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\nif __name__ == \"__main__\":\n\n    import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            obj[k] = v(min=1, max=10)\n        else:\n            obj[k] = v()\n        obj[k].get_value()\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13])\n        except TypeError:\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(min=0, max=2**7-1, determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n\n\n    print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c, c().get_value())\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c)\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')\n    for i in range(5):\n        print(i, t.get_value())\n    \n    print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n\n    print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_len": 5225,
        "target_code": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_len": 88,
        "diff_format": "@@ -2744,248 +2685,4 @@\n     cformat = '<Q'\n+    alt_cformat = '<q'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n-class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**64-1\n-    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n-    short_cformat = 'Q'\n-    alt_short_cformat = 'q'\n-\n-# class Other_Fuzzy_INT64(Fuzzy_INT64):\n-#     mini = 0\n-#     maxi = 2**64-1\n-#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n-#     short_cformat = 'Q'\n-#     alt_short_cformat = 'q'\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-\n-    import copy\n-\n-    d = copy.copy(meta_8b.compatible_class)\n-    d.update(meta_16b.compatible_class)\n-    d.update(meta_32b.compatible_class)\n-    d.update(meta_64b.compatible_class)\n-    d.update(meta_int_str.compatible_class)\n-    print(d)\n-    \n-    obj = {}\n-    for k, v in d.items():\n-        print('\\n***** [ %s ] *****\\n' % k)\n-\n-        if issubclass(v, INT_str):\n-            obj[k] = v(min=1, max=10)\n-        else:\n-            obj[k] = v()\n-        obj[k].get_value()\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13])\n-        except TypeError:\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(min=0, max=2**7-1, determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-\n-\n-    print('\\n*******************************\\n')\n-\n-\n-    t = SINT16_be()\n-    t.is_exhausted()\n-\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c, c().get_value())\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')        \n-    print('val: ', t.get_value())\n-\n-    print('\\n***\\n')\n-\n-    t = UINT16_le(values=range(100,400,4))\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c)\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')\n-    for i in range(5):\n-        print(i, t.get_value())\n-    \n-    print('\\n***\\n')\n-\n-    t = Fuzzy_INT16()\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-\n-    print('\\n***** [ String ] *****\\n')\n-\n-    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n-               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.get_value()\n-    t.get_value()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n-\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(min_sz=1, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n+    usable = True",
        "source_code_with_indent": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n<DED>class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\n<DED>if __name__ == \"__main__\":\n\n    <IND>import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        <IND>print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            <IND>obj[k] = v(min=1, max=10)\n        <DED>else:\n            <IND>obj[k] = v()\n        <DED>obj[k].get_value()\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13])\n        <DED>except TypeError:\n            <IND>obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(min=0, max=2**7-1, determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n\n\n    <DED><DED>print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c, c().get_value())\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c)\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')\n    for i in range(5):\n        <IND>print(i, t.get_value())\n    \n    <DED>print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n    <DED><DED>for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n\n    <DED><DED>print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2896:4 Incompatible variable type [9]: t is declared to have type `SINT16_be` but is used as type `String`.",
    "message": " t is declared to have type `SINT16_be` but is used as type `String`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2896,
    "warning_line": "    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\nclass Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\nif __name__ == \"__main__\":\n\n    import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            obj[k] = v(min=1, max=10)\n        else:\n            obj[k] = v()\n        obj[k].get_value()\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13])\n        except TypeError:\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(min=0, max=2**7-1, determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n\n\n    print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c, c().get_value())\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c)\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')\n    for i in range(5):\n        print(i, t.get_value())\n    \n    print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n\n    print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_len": 5225,
        "target_code": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_len": 88,
        "diff_format": "@@ -2744,248 +2685,4 @@\n     cformat = '<Q'\n+    alt_cformat = '<q'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n-class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**64-1\n-    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n-    short_cformat = 'Q'\n-    alt_short_cformat = 'q'\n-\n-# class Other_Fuzzy_INT64(Fuzzy_INT64):\n-#     mini = 0\n-#     maxi = 2**64-1\n-#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n-#     short_cformat = 'Q'\n-#     alt_short_cformat = 'q'\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-\n-    import copy\n-\n-    d = copy.copy(meta_8b.compatible_class)\n-    d.update(meta_16b.compatible_class)\n-    d.update(meta_32b.compatible_class)\n-    d.update(meta_64b.compatible_class)\n-    d.update(meta_int_str.compatible_class)\n-    print(d)\n-    \n-    obj = {}\n-    for k, v in d.items():\n-        print('\\n***** [ %s ] *****\\n' % k)\n-\n-        if issubclass(v, INT_str):\n-            obj[k] = v(min=1, max=10)\n-        else:\n-            obj[k] = v()\n-        obj[k].get_value()\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13])\n-        except TypeError:\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(min=0, max=2**7-1, determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-\n-\n-    print('\\n*******************************\\n')\n-\n-\n-    t = SINT16_be()\n-    t.is_exhausted()\n-\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c, c().get_value())\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')        \n-    print('val: ', t.get_value())\n-\n-    print('\\n***\\n')\n-\n-    t = UINT16_le(values=range(100,400,4))\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c)\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')\n-    for i in range(5):\n-        print(i, t.get_value())\n-    \n-    print('\\n***\\n')\n-\n-    t = Fuzzy_INT16()\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-\n-    print('\\n***** [ String ] *****\\n')\n-\n-    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n-               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.get_value()\n-    t.get_value()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n-\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(min_sz=1, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n+    usable = True",
        "source_code_with_indent": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n<DED>class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\n<DED>if __name__ == \"__main__\":\n\n    <IND>import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        <IND>print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            <IND>obj[k] = v(min=1, max=10)\n        <DED>else:\n            <IND>obj[k] = v()\n        <DED>obj[k].get_value()\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13])\n        <DED>except TypeError:\n            <IND>obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(min=0, max=2**7-1, determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n\n\n    <DED><DED>print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c, c().get_value())\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c)\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')\n    for i in range(5):\n        <IND>print(i, t.get_value())\n    \n    <DED>print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n    <DED><DED>for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n\n    <DED><DED>print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2935:4 Incompatible variable type [9]: t is declared to have type `SINT16_be` but is used as type `String`.",
    "message": " t is declared to have type `SINT16_be` but is used as type `String`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2935,
    "warning_line": "    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\nclass Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\nif __name__ == \"__main__\":\n\n    import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            obj[k] = v(min=1, max=10)\n        else:\n            obj[k] = v()\n        obj[k].get_value()\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13])\n        except TypeError:\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(min=0, max=2**7-1, determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n\n\n    print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c, c().get_value())\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c)\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')\n    for i in range(5):\n        print(i, t.get_value())\n    \n    print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n\n    print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_len": 5225,
        "target_code": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_len": 88,
        "diff_format": "@@ -2744,248 +2685,4 @@\n     cformat = '<Q'\n+    alt_cformat = '<q'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n-class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**64-1\n-    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n-    short_cformat = 'Q'\n-    alt_short_cformat = 'q'\n-\n-# class Other_Fuzzy_INT64(Fuzzy_INT64):\n-#     mini = 0\n-#     maxi = 2**64-1\n-#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n-#     short_cformat = 'Q'\n-#     alt_short_cformat = 'q'\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-\n-    import copy\n-\n-    d = copy.copy(meta_8b.compatible_class)\n-    d.update(meta_16b.compatible_class)\n-    d.update(meta_32b.compatible_class)\n-    d.update(meta_64b.compatible_class)\n-    d.update(meta_int_str.compatible_class)\n-    print(d)\n-    \n-    obj = {}\n-    for k, v in d.items():\n-        print('\\n***** [ %s ] *****\\n' % k)\n-\n-        if issubclass(v, INT_str):\n-            obj[k] = v(min=1, max=10)\n-        else:\n-            obj[k] = v()\n-        obj[k].get_value()\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13])\n-        except TypeError:\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(min=0, max=2**7-1, determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-\n-\n-    print('\\n*******************************\\n')\n-\n-\n-    t = SINT16_be()\n-    t.is_exhausted()\n-\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c, c().get_value())\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')        \n-    print('val: ', t.get_value())\n-\n-    print('\\n***\\n')\n-\n-    t = UINT16_le(values=range(100,400,4))\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c)\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')\n-    for i in range(5):\n-        print(i, t.get_value())\n-    \n-    print('\\n***\\n')\n-\n-    t = Fuzzy_INT16()\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-\n-    print('\\n***** [ String ] *****\\n')\n-\n-    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n-               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.get_value()\n-    t.get_value()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n-\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(min_sz=1, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n+    usable = True",
        "source_code_with_indent": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n<DED>class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\n<DED>if __name__ == \"__main__\":\n\n    <IND>import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        <IND>print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            <IND>obj[k] = v(min=1, max=10)\n        <DED>else:\n            <IND>obj[k] = v()\n        <DED>obj[k].get_value()\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13])\n        <DED>except TypeError:\n            <IND>obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(min=0, max=2**7-1, determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n\n\n    <DED><DED>print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c, c().get_value())\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c)\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')\n    for i in range(5):\n        <IND>print(i, t.get_value())\n    \n    <DED>print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n    <DED><DED>for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n\n    <DED><DED>print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "k0retux/fuddly",
    "commit": "270eb87a5129a18714b099fa0e8540206b098c65",
    "filename": "framework/value_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/k0retux-fuddly/framework/value_types.py",
    "file_hunks_size": 38,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "framework/value_types.py:2970:4 Incompatible variable type [9]: t is declared to have type `SINT16_be` but is used as type `String`.",
    "message": " t is declared to have type `SINT16_be` but is used as type `String`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 2970,
    "warning_line": "    t = String(min_sz=1, max_sz=10)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\nclass Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\nif __name__ == \"__main__\":\n\n    import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            obj[k] = v(min=1, max=10)\n        else:\n            obj[k] = v()\n        obj[k].get_value()\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13])\n        except TypeError:\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n        print('\\n********\\n')\n\n        try:\n            obj[k] = v(min=0, max=2**7-1, determinist=False)\n        except TypeError:\n            print(v().__class__)\n            obj[k] = v()\n\n        for i in range(8):\n            print(obj[k].get_value())\n\n\n\n    print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c, c().get_value())\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        if c != t.__class__:\n            print(c)\n    print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        print(c, c().get_value())\n    print('---')\n    for i in range(5):\n        print(i, t.get_value())\n    \n    print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n    for i in range(5):\n        print(i, t.get_value())\n        if t.is_exhausted():\n            print('fin iteration')\n\n\n    print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        print(t.get_value())\n        if t.is_exhausted():\n            break\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_len": 5225,
        "target_code": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_len": 88,
        "diff_format": "@@ -2744,248 +2685,4 @@\n     cformat = '<Q'\n+    alt_cformat = '<q'\n     endian = VT.LittleEndian\n-\n-\n-#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n-class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n-    mini = 0\n-    maxi = 2**64-1\n-    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n-    short_cformat = 'Q'\n-    alt_short_cformat = 'q'\n-\n-# class Other_Fuzzy_INT64(Fuzzy_INT64):\n-#     mini = 0\n-#     maxi = 2**64-1\n-#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n-#     short_cformat = 'Q'\n-#     alt_short_cformat = 'q'\n-\n-\n-\n-\n-if __name__ == \"__main__\":\n-\n-    import copy\n-\n-    d = copy.copy(meta_8b.compatible_class)\n-    d.update(meta_16b.compatible_class)\n-    d.update(meta_32b.compatible_class)\n-    d.update(meta_64b.compatible_class)\n-    d.update(meta_int_str.compatible_class)\n-    print(d)\n-    \n-    obj = {}\n-    for k, v in d.items():\n-        print('\\n***** [ %s ] *****\\n' % k)\n-\n-        if issubclass(v, INT_str):\n-            obj[k] = v(min=1, max=10)\n-        else:\n-            obj[k] = v()\n-        obj[k].get_value()\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13])\n-        except TypeError:\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-        print('\\n********\\n')\n-\n-        try:\n-            obj[k] = v(min=0, max=2**7-1, determinist=False)\n-        except TypeError:\n-            print(v().__class__)\n-            obj[k] = v()\n-\n-        for i in range(8):\n-            print(obj[k].get_value())\n-\n-\n-\n-    print('\\n*******************************\\n')\n-\n-\n-    t = SINT16_be()\n-    t.is_exhausted()\n-\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c, c().get_value())\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')        \n-    print('val: ', t.get_value())\n-\n-    print('\\n***\\n')\n-\n-    t = UINT16_le(values=range(100,400,4))\n-    print('size: ', t.size)\n-    print('class: ', t.__class__)\n-    print('compatible classes: ')\n-    for c in t.compat_cls.values():\n-        if c != t.__class__:\n-            print(c)\n-    print('fuzzy classes: ')\n-    for c in t.fuzzy_cls.values():\n-        print(c, c().get_value())\n-    print('---')\n-    for i in range(5):\n-        print(i, t.get_value())\n-    \n-    print('\\n***\\n')\n-\n-    t = Fuzzy_INT16()\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-    for i in range(5):\n-        print(i, t.get_value())\n-        if t.is_exhausted():\n-            print('fin iteration')\n-\n-\n-    print('\\n***** [ String ] *****\\n')\n-\n-    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n-               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    t.get_value()\n-    t.get_value()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n-\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.reset_state()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n-\n-    print('\\n====> New String\\n')\n-\n-    t = String(min_sz=1, max_sz=10)\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-    t.reset_state()\n-    t.switch_mode()\n-\n-    for i in range(30):\n-        print(t.get_value())\n-        if t.is_exhausted():\n-            break\n-\n-    print('\\n********\\n')\n-\n-    t.rewind()\n-    t.rewind()\n-    print(t.get_value())\n-    print(t.get_value())\n+    usable = True",
        "source_code_with_indent": "    cformat = '<Q'\n    endian = VT.LittleEndian\n\n\n#class Fuzzy_INT64(Fuzzy_INT, metaclass=meta_64b):\n<DED>class Fuzzy_INT64(with_metaclass(meta_64b, Fuzzy_INT)):\n    <IND>mini = 0\n    maxi = 2**64-1\n    values = [0xFFFFFFFFFFFFFFFF, 0, 0x8000000000000000, 0x7FFFFFFFFFFFFFFF, 0x1111111111111111]\n    short_cformat = 'Q'\n    alt_short_cformat = 'q'\n\n# class Other_Fuzzy_INT64(Fuzzy_INT64):\n#     mini = 0\n#     maxi = 2**64-1\n#     values = [0xDEADBEEFDEADBEEF, 0xAAAAAAAAAAAAAAAA]\n#     short_cformat = 'Q'\n#     alt_short_cformat = 'q'\n\n\n\n\n<DED>if __name__ == \"__main__\":\n\n    <IND>import copy\n\n    d = copy.copy(meta_8b.compatible_class)\n    d.update(meta_16b.compatible_class)\n    d.update(meta_32b.compatible_class)\n    d.update(meta_64b.compatible_class)\n    d.update(meta_int_str.compatible_class)\n    print(d)\n    \n    obj = {}\n    for k, v in d.items():\n        <IND>print('\\n***** [ %s ] *****\\n' % k)\n\n        if issubclass(v, INT_str):\n            <IND>obj[k] = v(min=1, max=10)\n        <DED>else:\n            <IND>obj[k] = v()\n        <DED>obj[k].get_value()\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13])\n        <DED>except TypeError:\n            <IND>obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(values=[0x11,0x12,0x13], determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n        <DED>print('\\n********\\n')\n\n        try:\n            <IND>obj[k] = v(min=0, max=2**7-1, determinist=False)\n        <DED>except TypeError:\n            <IND>print(v().__class__)\n            obj[k] = v()\n\n        <DED>for i in range(8):\n            <IND>print(obj[k].get_value())\n\n\n\n    <DED><DED>print('\\n*******************************\\n')\n\n\n    t = SINT16_be()\n    t.is_exhausted()\n\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c, c().get_value())\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')        \n    print('val: ', t.get_value())\n\n    print('\\n***\\n')\n\n    t = UINT16_le(values=range(100,400,4))\n    print('size: ', t.size)\n    print('class: ', t.__class__)\n    print('compatible classes: ')\n    for c in t.compat_cls.values():\n        <IND>if c != t.__class__:\n            <IND>print(c)\n    <DED><DED>print('fuzzy classes: ')\n    for c in t.fuzzy_cls.values():\n        <IND>print(c, c().get_value())\n    <DED>print('---')\n    for i in range(5):\n        <IND>print(i, t.get_value())\n    \n    <DED>print('\\n***\\n')\n\n    t = Fuzzy_INT16()\n    for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n    <DED><DED>for i in range(5):\n        <IND>print(i, t.get_value())\n        if t.is_exhausted():\n            <IND>print('fin iteration')\n\n\n    <DED><DED>print('\\n***** [ String ] *****\\n')\n\n    t = String(values=['AA', 'BBB', 'CCCC'], min_sz=1, max_sz=10,\n               extra_fuzzy_list=['XTRA_1', '', 'XTRA_2'])\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], min_sz=3, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.reset_state()\n    t.get_value()\n    t.get_value()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n====> New String\\n')\n\n    t = String(values=['AAA', 'BBBB', 'CCCCC'], max_sz=10)\n\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.reset_state()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n\n    print('\\n====> New String\\n')\n\n    t = String(min_sz=1, max_sz=10)\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n    t.reset_state()\n    t.switch_mode()\n\n    for i in range(30):\n        <IND>print(t.get_value())\n        if t.is_exhausted():\n            <IND>break\n\n    <DED><DED>print('\\n********\\n')\n\n    t.rewind()\n    t.rewind()\n    print(t.get_value())\n    print(t.get_value())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    cformat = '<Q'\n    alt_cformat = '<q'\n    endian = VT.LittleEndian\n    usable = True",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]