[
  {
    "project": "dagster-io/dagster",
    "commit": "b57b91ea7666da41a3dbc610116aed500c647d84",
    "filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dagster-io-dagster/python_modules/dagster/dagster/core/execution/plan/objects.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "python_modules/dagster/dagster/core/execution/plan/objects.py:107:12 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 107,
    "warning_line": "            check.failed(f\"Unexpected error setting: {self.error_source}\")",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n        else:\n            check.failed(f\"Unexpected error setting: {self.error_source}\")\n\n",
        "source_code_len": 281,
        "target_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        else:\n            return self.error.to_string()\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -103,6 +107,4 @@\n             return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n-        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n+        else:\n             return self.error.to_string()\n-        else:\n-            check.failed(f\"Unexpected error setting: {self.error_source}\")\n \n",
        "source_code_with_indent": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        <DED>elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            <IND>return self.error.to_string()\n        <DED>else:\n            <IND>check.failed(f\"Unexpected error setting: {self.error_source}\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        <DED>else:\n            <IND>return self.error.to_string()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]