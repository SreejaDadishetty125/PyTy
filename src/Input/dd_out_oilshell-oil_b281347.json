[
  {
    "project": "oilshell/oil",
    "commit": "b28134779e1ad6440d7ca7333bba01b4105ef614",
    "filename": "asdl/runtime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oilshell-oil/asdl/runtime.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "asdl/runtime.py:246:23 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `typing.Mapping.get` but got `str`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `typing.Mapping.get` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 246,
    "warning_line": "  if posix.environ.get('ASDL_TYPE_CHECK'):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    return s\n\n  # NOTE: ASDL_TYPE_CHECK=1 will be set for unit, spec, gold, wild tests, etc.\n  # On benchmarks and in production it can be off.\n  if posix.environ.get('ASDL_TYPE_CHECK'):\n    def __setattr__(self, name, value):\n      # None always OK for now?  Or should we have an asdl.UNDEF?\n      if value is not None:\n        expected = self.ASDL_TYPE.LookupFieldType(name)\n\n        #log('expected type %s for field %s', expected, name)\n\n        if not _CheckType(value, expected):\n          raise TypeError(\"Field %r should be of type %s, got %r (%s)\" %\n                          (name, expected, value, value.__class__))\n        global NUM_TYPE_CHECKS\n        NUM_TYPE_CHECKS += 1\n        \n        #log('set %s = %r', name, value)\n\n      # This is the way to do it for new-style calsses!\n      # https://stackoverflow.com/questions/7042152/how-do-i-properly-override-setattr-and-getattribute-on-new-style-classes\n      Obj.__setattr__(self, name, value)\n\n\n# Other possible dynamic checking:\n# - CheckUnassigned in the constructor?  Fields should be all initialized or\n# none.\n# - Maybe spids should never be mutated?  It can only be appended to?\n# - SimpleObj could deny all __setattr__?\n\n",
        "source_code_len": 1194,
        "target_code": "    return s\n\n",
        "target_code_len": 14,
        "diff_format": "@@ -242,31 +72,2 @@\n     return s\n-\n-  # NOTE: ASDL_TYPE_CHECK=1 will be set for unit, spec, gold, wild tests, etc.\n-  # On benchmarks and in production it can be off.\n-  if posix.environ.get('ASDL_TYPE_CHECK'):\n-    def __setattr__(self, name, value):\n-      # None always OK for now?  Or should we have an asdl.UNDEF?\n-      if value is not None:\n-        expected = self.ASDL_TYPE.LookupFieldType(name)\n-\n-        #log('expected type %s for field %s', expected, name)\n-\n-        if not _CheckType(value, expected):\n-          raise TypeError(\"Field %r should be of type %s, got %r (%s)\" %\n-                          (name, expected, value, value.__class__))\n-        global NUM_TYPE_CHECKS\n-        NUM_TYPE_CHECKS += 1\n-        \n-        #log('set %s = %r', name, value)\n-\n-      # This is the way to do it for new-style calsses!\n-      # https://stackoverflow.com/questions/7042152/how-do-i-properly-override-setattr-and-getattribute-on-new-style-classes\n-      Obj.__setattr__(self, name, value)\n-\n-\n-# Other possible dynamic checking:\n-# - CheckUnassigned in the constructor?  Fields should be all initialized or\n-# none.\n-# - Maybe spids should never be mutated?  It can only be appended to?\n-# - SimpleObj could deny all __setattr__?\n \n",
        "source_code_with_indent": "    return s\n\n  # NOTE: ASDL_TYPE_CHECK=1 will be set for unit, spec, gold, wild tests, etc.\n  # On benchmarks and in production it can be off.\n  <DED>if posix.environ.get('ASDL_TYPE_CHECK'):\n    <IND>def __setattr__(self, name, value):\n      # None always OK for now?  Or should we have an asdl.UNDEF?\n      <IND>if value is not None:\n        <IND>expected = self.ASDL_TYPE.LookupFieldType(name)\n\n        #log('expected type %s for field %s', expected, name)\n\n        if not _CheckType(value, expected):\n          <IND>raise TypeError(\"Field %r should be of type %s, got %r (%s)\" %\n                          (name, expected, value, value.__class__))\n        <DED>global NUM_TYPE_CHECKS\n        NUM_TYPE_CHECKS += 1\n        \n        #log('set %s = %r', name, value)\n\n      # This is the way to do it for new-style calsses!\n      # https://stackoverflow.com/questions/7042152/how-do-i-properly-override-setattr-and-getattribute-on-new-style-classes\n      <DED>Obj.__setattr__(self, name, value)\n\n\n# Other possible dynamic checking:\n# - CheckUnassigned in the constructor?  Fields should be all initialized or\n# none.\n# - Maybe spids should never be mutated?  It can only be appended to?\n# - SimpleObj could deny all __setattr__?\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    return s\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]