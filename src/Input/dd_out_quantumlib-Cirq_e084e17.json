[
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/circuits/circuit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/circuits/circuit.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/circuits/circuit.py:899:27 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 899,
    "warning_line": "    def _unitary_(self) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/circuits/circuit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/circuits/circuit.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/circuits/circuit.py:1428:12 Incompatible return type [7]: Expected `Iterable[Tuple[Variable[TKey], List[Variable[TOut]]]]` but got `typing.Generator[Tuple[Optional[Variable[TKey]], List[typing.Any]], None, None]`.",
    "message": " Expected `Iterable[Tuple[Variable[TKey], List[Variable[TOut]]]]` but got `typing.Generator[Tuple[Optional[Variable[TKey]], List[typing.Any]], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1428,
    "warning_line": "            yield prev_item_key, cur_items",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value: Callable[[TIn], TOut] = lambda e: e\n                           ) -> Iterable[Tuple[TKey, List[TOut]]]:\n    \"\"\"Groups runs of items that are identical according to a keying function.\n",
        "source_code_len": 321,
        "target_code": "\n@overload\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           ) -> Iterable[Tuple[TKey, List[TIn]]]:\n    pass\n\n\n@overload\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value: Callable[[TIn], TOut]\n                           ) -> Iterable[Tuple[TKey, List[TOut]]]:\n    pass\n\n\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value=lambda e: e):\n    \"\"\"Groups runs of items that are identical according to a keying function.\n",
        "target_code_len": 670,
        "diff_format": "@@ -1396,6 +1397,20 @@\n \n+@overload\n def _group_until_different(items: Iterable[TIn],\n                            key: Callable[[TIn], TKey],\n-                           value: Callable[[TIn], TOut] = lambda e: e\n+                           ) -> Iterable[Tuple[TKey, List[TIn]]]:\n+    pass\n+\n+\n+@overload\n+def _group_until_different(items: Iterable[TIn],\n+                           key: Callable[[TIn], TKey],\n+                           value: Callable[[TIn], TOut]\n                            ) -> Iterable[Tuple[TKey, List[TOut]]]:\n+    pass\n+\n+\n+def _group_until_different(items: Iterable[TIn],\n+                           key: Callable[[TIn], TKey],\n+                           value=lambda e: e):\n     \"\"\"Groups runs of items that are identical according to a keying function.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value: Callable[[TIn], TOut] = lambda e: e\n                           ) -> Iterable[Tuple[TKey, List[TOut]]]:\n    <IND>",
        "target_code_with_indent": "\n@overload\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           ) -> Iterable[Tuple[TKey, List[TIn]]]:\n    <IND>pass\n\n\n<DED>@overload\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value: Callable[[TIn], TOut]\n                           ) -> Iterable[Tuple[TKey, List[TOut]]]:\n    <IND>pass\n\n\n<DED>def _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value=lambda e: e):\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/circuits/circuit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/circuits/circuit.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/circuits/circuit.py:1434:8 Incompatible return type [7]: Expected `Iterable[Tuple[Variable[TKey], List[Variable[TOut]]]]` but got `typing.Generator[Tuple[Optional[Variable[TKey]], List[typing.Any]], None, None]`.",
    "message": " Expected `Iterable[Tuple[Variable[TKey], List[Variable[TOut]]]]` but got `typing.Generator[Tuple[Optional[Variable[TKey]], List[typing.Any]], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1434,
    "warning_line": "        yield prev_item_key, cur_items",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value: Callable[[TIn], TOut] = lambda e: e\n                           ) -> Iterable[Tuple[TKey, List[TOut]]]:\n    \"\"\"Groups runs of items that are identical according to a keying function.\n",
        "source_code_len": 321,
        "target_code": "\n@overload\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           ) -> Iterable[Tuple[TKey, List[TIn]]]:\n    pass\n\n\n@overload\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value: Callable[[TIn], TOut]\n                           ) -> Iterable[Tuple[TKey, List[TOut]]]:\n    pass\n\n\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value=lambda e: e):\n    \"\"\"Groups runs of items that are identical according to a keying function.\n",
        "target_code_len": 670,
        "diff_format": "@@ -1396,6 +1397,20 @@\n \n+@overload\n def _group_until_different(items: Iterable[TIn],\n                            key: Callable[[TIn], TKey],\n-                           value: Callable[[TIn], TOut] = lambda e: e\n+                           ) -> Iterable[Tuple[TKey, List[TIn]]]:\n+    pass\n+\n+\n+@overload\n+def _group_until_different(items: Iterable[TIn],\n+                           key: Callable[[TIn], TKey],\n+                           value: Callable[[TIn], TOut]\n                            ) -> Iterable[Tuple[TKey, List[TOut]]]:\n+    pass\n+\n+\n+def _group_until_different(items: Iterable[TIn],\n+                           key: Callable[[TIn], TKey],\n+                           value=lambda e: e):\n     \"\"\"Groups runs of items that are identical according to a keying function.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value: Callable[[TIn], TOut] = lambda e: e\n                           ) -> Iterable[Tuple[TKey, List[TOut]]]:\n    <IND>",
        "target_code_with_indent": "\n@overload\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           ) -> Iterable[Tuple[TKey, List[TIn]]]:\n    <IND>pass\n\n\n<DED>@overload\ndef _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value: Callable[[TIn], TOut]\n                           ) -> Iterable[Tuple[TKey, List[TOut]]]:\n    <IND>pass\n\n\n<DED>def _group_until_different(items: Iterable[TIn],\n                           key: Callable[[TIn], TKey],\n                           value=lambda e: e):\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/contrib/acquaintance/executor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/contrib/acquaintance/executor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/contrib/acquaintance/executor.py:45:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 45,
    "warning_line": "        \"\"\"The initial mapping of logical indices to qubits.\"\"\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom collections import defaultdict\nfrom typing import Dict, TYPE_CHECKING, Sequence\n\nfrom cirq import abc, circuits, ops\n\nfrom cirq.contrib.acquaintance.gates import AcquaintanceOpportunityGate\n",
        "source_code_len": 196,
        "target_code": "\nfrom typing import Dict, TYPE_CHECKING, Sequence\n\nimport abc\nfrom collections import defaultdict\n\nfrom cirq import circuits, ops\nfrom cirq.contrib.acquaintance.gates import AcquaintanceOpportunityGate\n",
        "target_code_len": 202,
        "diff_format": "@@ -14,7 +14,8 @@\n \n-from collections import defaultdict\n from typing import Dict, TYPE_CHECKING, Sequence\n \n-from cirq import abc, circuits, ops\n+import abc\n+from collections import defaultdict\n \n+from cirq import circuits, ops\n from cirq.contrib.acquaintance.gates import AcquaintanceOpportunityGate\n",
        "source_code_with_indent": "\nfrom collections import defaultdict\nfrom typing import Dict, TYPE_CHECKING, Sequence\n\nfrom cirq import abc, circuits, ops\n\nfrom cirq.contrib.acquaintance.gates import AcquaintanceOpportunityGate\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, TYPE_CHECKING, Sequence\n\nimport abc\nfrom collections import defaultdict\n\nfrom cirq import circuits, ops\nfrom cirq.contrib.acquaintance.gates import AcquaintanceOpportunityGate\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/contrib/acquaintance/executor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/contrib/acquaintance/executor.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/contrib/acquaintance/executor.py:52:8 Incompatible return type [7]: Expected `typing.Union[typing.Iterable[typing.Any], ops.raw_types.Operation]` but got implicit return value of `None`.",
    "message": " Expected `typing.Union[typing.Iterable[typing.Any], ops.raw_types.Operation]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 52,
    "warning_line": "        \"\"\"Gets the logical operations to apply to qubits.\"\"\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom collections import defaultdict\nfrom typing import Dict, TYPE_CHECKING, Sequence\n\nfrom cirq import abc, circuits, ops\n\nfrom cirq.contrib.acquaintance.gates import AcquaintanceOpportunityGate\n",
        "source_code_len": 196,
        "target_code": "\nfrom typing import Dict, TYPE_CHECKING, Sequence\n\nimport abc\nfrom collections import defaultdict\n\nfrom cirq import circuits, ops\nfrom cirq.contrib.acquaintance.gates import AcquaintanceOpportunityGate\n",
        "target_code_len": 202,
        "diff_format": "@@ -14,7 +14,8 @@\n \n-from collections import defaultdict\n from typing import Dict, TYPE_CHECKING, Sequence\n \n-from cirq import abc, circuits, ops\n+import abc\n+from collections import defaultdict\n \n+from cirq import circuits, ops\n from cirq.contrib.acquaintance.gates import AcquaintanceOpportunityGate\n",
        "source_code_with_indent": "\nfrom collections import defaultdict\nfrom typing import Dict, TYPE_CHECKING, Sequence\n\nfrom cirq import abc, circuits, ops\n\nfrom cirq.contrib.acquaintance.gates import AcquaintanceOpportunityGate\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Dict, TYPE_CHECKING, Sequence\n\nimport abc\nfrom collections import defaultdict\n\nfrom cirq import circuits, ops\nfrom cirq.contrib.acquaintance.gates import AcquaintanceOpportunityGate\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/experiments/google_v2_supremacy_circuit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/experiments/google_v2_supremacy_circuit.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/experiments/google_v2_supremacy_circuit.py:115:41 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[Variable[T]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[Variable[T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 115,
    "warning_line": "    return sequence[int(rand_gen() * len(sequence))]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import random\nfrom typing import Callable, Iterable, TypeVar\n\nimport cirq\nfrom cirq.circuits import InsertStrategy\nfrom cirq import ops\n\n\ndef google_v2_supremacy_circuit(qubits: Iterable[cirq.GridQubit],\n                               cz_depth: int,\n                               seed: int) -> cirq.Circuit:\n    \"\"\"\n",
        "source_code_len": 317,
        "target_code": "import random\nfrom typing import Callable, Iterable, TypeVar, cast, Sequence\n\nfrom cirq.circuits import InsertStrategy\nfrom cirq import circuits, ops, devices\n\n\ndef google_v2_supremacy_circuit(qubits: Iterable[devices.GridQubit],\n                                cz_depth: int,\n                                seed: int) -> circuits.Circuit:\n    \"\"\"\n",
        "target_code_len": 349,
        "diff_format": "@@ -15,12 +15,11 @@\n import random\n-from typing import Callable, Iterable, TypeVar\n+from typing import Callable, Iterable, TypeVar, cast, Sequence\n \n-import cirq\n from cirq.circuits import InsertStrategy\n-from cirq import ops\n+from cirq import circuits, ops, devices\n \n \n-def google_v2_supremacy_circuit(qubits: Iterable[cirq.GridQubit],\n-                               cz_depth: int,\n-                               seed: int) -> cirq.Circuit:\n+def google_v2_supremacy_circuit(qubits: Iterable[devices.GridQubit],\n+                                cz_depth: int,\n+                                seed: int) -> circuits.Circuit:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "import random\nfrom typing import Callable, Iterable, TypeVar\n\nimport cirq\nfrom cirq.circuits import InsertStrategy\nfrom cirq import ops\n\n\ndef google_v2_supremacy_circuit(qubits: Iterable[cirq.GridQubit],\n                               cz_depth: int,\n                               seed: int) -> cirq.Circuit:\n    <IND>",
        "target_code_with_indent": "import random\nfrom typing import Callable, Iterable, TypeVar, cast, Sequence\n\nfrom cirq.circuits import InsertStrategy\nfrom cirq import circuits, ops, devices\n\n\ndef google_v2_supremacy_circuit(qubits: Iterable[devices.GridQubit],\n                                cz_depth: int,\n                                seed: int) -> circuits.Circuit:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    circuit = cirq.Circuit()\n\n",
        "source_code_len": 31,
        "target_code": "\n    circuit = circuits.Circuit()\n\n",
        "target_code_len": 35,
        "diff_format": "@@ -45,3 +44,3 @@\n \n-    circuit = cirq.Circuit()\n+    circuit = circuits.Circuit()\n \n",
        "source_code_with_indent": "\n    circuit = cirq.Circuit()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    circuit = circuits.Circuit()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def google_v2_supremacy_circuit_grid(n_rows: int, n_cols: int,\n                                    cz_depth: int, seed: int\n                                    ) -> cirq.Circuit:\n    \"\"\"\n",
        "source_code_len": 187,
        "target_code": "def google_v2_supremacy_circuit_grid(n_rows: int, n_cols: int,\n                                     cz_depth: int, seed: int\n                                     ) -> circuits.Circuit:\n    \"\"\"\n",
        "target_code_len": 193,
        "diff_format": "@@ -83,4 +83,4 @@\n def google_v2_supremacy_circuit_grid(n_rows: int, n_cols: int,\n-                                    cz_depth: int, seed: int\n-                                    ) -> cirq.Circuit:\n+                                     cz_depth: int, seed: int\n+                                     ) -> circuits.Circuit:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def google_v2_supremacy_circuit_grid(n_rows: int, n_cols: int,\n                                    cz_depth: int, seed: int\n                                    ) -> cirq.Circuit:\n    <IND>",
        "target_code_with_indent": "<DED>def google_v2_supremacy_circuit_grid(n_rows: int, n_cols: int,\n                                     cz_depth: int, seed: int\n                                     ) -> circuits.Circuit:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    qubits = [cirq.GridQubit(i, j) for i in range(n_rows)\n              for j in range(n_cols)]\n",
        "source_code_len": 104,
        "target_code": "    \"\"\"\n    qubits = [devices.GridQubit(i, j) for i in range(n_rows)\n              for j in range(n_cols)]\n",
        "target_code_len": 107,
        "diff_format": "@@ -102,3 +102,3 @@\n     \"\"\"\n-    qubits = [cirq.GridQubit(i, j) for i in range(n_rows)\n+    qubits = [devices.GridQubit(i, j) for i in range(n_rows)\n               for j in range(n_cols)]\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    qubits = [cirq.GridQubit(i, j) for i in range(n_rows)\n              for j in range(n_cols)]\n",
        "target_code_with_indent": "\n    qubits = [devices.GridQubit(i, j) for i in range(n_rows)\n              for j in range(n_cols)]\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "T = TypeVar('T')\ndef _choice(rand_gen: Callable[[], float], sequence: Iterable[T]) -> T:\n    \"\"\"\n    Choose a random element from a non-empty sequence.\n\n",
        "source_code_len": 153,
        "target_code": "T = TypeVar('T')\n\n\ndef _choice(rand_gen: Callable[[], float], sequence: Sequence[T]) -> T:\n    \"\"\"Choose a random element from a non-empty sequence.\n\n",
        "target_code_len": 150,
        "diff_format": "@@ -108,5 +108,6 @@\n T = TypeVar('T')\n-def _choice(rand_gen: Callable[[], float], sequence: Iterable[T]) -> T:\n-    \"\"\"\n-    Choose a random element from a non-empty sequence.\n+\n+\n+def _choice(rand_gen: Callable[[], float], sequence: Sequence[T]) -> T:\n+    \"\"\"Choose a random element from a non-empty sequence.\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>T = TypeVar('T')\ndef _choice(rand_gen: Callable[[], float], sequence: Iterable[T]) -> T:\n    <IND>",
        "target_code_with_indent": "<DED>T = TypeVar('T')\n\n\ndef _choice(rand_gen: Callable[[], float], sequence: Sequence[T]) -> T:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _add_cz_layer(layer_index: int, circuit: cirq.Circuit) -> int:\n    cz_layer = None\n    while not cz_layer:\n        cz_layer = list(_make_cz_layer(circuit.all_qubits(), layer_index))\n        layer_index += 1\n",
        "source_code_len": 212,
        "target_code": "\ndef _add_cz_layer(layer_index: int, circuit: circuits.Circuit) -> int:\n    cz_layer = None\n    while not cz_layer:\n        qubits = cast(Iterable[devices.GridQubit], circuit.all_qubits())\n        cz_layer = list(_make_cz_layer(qubits, layer_index))\n        layer_index += 1\n",
        "target_code_len": 275,
        "diff_format": "@@ -117,6 +118,7 @@\n \n-def _add_cz_layer(layer_index: int, circuit: cirq.Circuit) -> int:\n+def _add_cz_layer(layer_index: int, circuit: circuits.Circuit) -> int:\n     cz_layer = None\n     while not cz_layer:\n-        cz_layer = list(_make_cz_layer(circuit.all_qubits(), layer_index))\n+        qubits = cast(Iterable[devices.GridQubit], circuit.all_qubits())\n+        cz_layer = list(_make_cz_layer(qubits, layer_index))\n         layer_index += 1\n",
        "source_code_with_indent": "\n<DED>def _add_cz_layer(layer_index: int, circuit: cirq.Circuit) -> int:\n    <IND>cz_layer = None\n    while not cz_layer:\n        <IND>cz_layer = list(_make_cz_layer(circuit.all_qubits(), layer_index))\n        layer_index += 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _add_cz_layer(layer_index: int, circuit: circuits.Circuit) -> int:\n    <IND>cz_layer = None\n    while not cz_layer:\n        <IND>qubits = cast(Iterable[devices.GridQubit], circuit.all_qubits())\n        cz_layer = list(_make_cz_layer(qubits, layer_index))\n        layer_index += 1\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _make_cz_layer(qubits: Iterable[cirq.GridQubit], layer_index: int\n                   ) -> Iterable[cirq.Operation]:\n    \"\"\"\n",
        "source_code_len": 129,
        "target_code": "\ndef _make_cz_layer(qubits: Iterable[devices.GridQubit], layer_index: int\n                   ) -> Iterable[ops.Operation]:\n    \"\"\"\n",
        "target_code_len": 131,
        "diff_format": "@@ -127,4 +129,4 @@\n \n-def _make_cz_layer(qubits: Iterable[cirq.GridQubit], layer_index: int\n-                   ) -> Iterable[cirq.Operation]:\n+def _make_cz_layer(qubits: Iterable[devices.GridQubit], layer_index: int\n+                   ) -> Iterable[ops.Operation]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _make_cz_layer(qubits: Iterable[cirq.GridQubit], layer_index: int\n                   ) -> Iterable[cirq.Operation]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def _make_cz_layer(qubits: Iterable[devices.GridQubit], layer_index: int\n                   ) -> Iterable[ops.Operation]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for q in qubits:\n        q2 = cirq.GridQubit(q.row + dir_row, q.col + dir_col)\n        if q2 not in qubits:\n",
        "source_code_len": 112,
        "target_code": "    for q in qubits:\n        q2 = devices.GridQubit(q.row + dir_row, q.col + dir_col)\n        if q2 not in qubits:\n",
        "target_code_len": 115,
        "diff_format": "@@ -179,3 +181,3 @@\n     for q in qubits:\n-        q2 = cirq.GridQubit(q.row + dir_row, q.col + dir_col)\n+        q2 = devices.GridQubit(q.row + dir_row, q.col + dir_col)\n         if q2 not in qubits:\n",
        "source_code_with_indent": "    for q in qubits:\n        <IND>q2 = cirq.GridQubit(q.row + dir_row, q.col + dir_col)\n        if q2 not in qubits:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for q in qubits:\n        <IND>q2 = devices.GridQubit(q.row + dir_row, q.col + dir_col)\n        if q2 not in qubits:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/experiments/google_v2_supremacy_circuit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/experiments/google_v2_supremacy_circuit.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/experiments/google_v2_supremacy_circuit.py:121:39 Incompatible parameter type [6]: Expected `Iterable[cirq.devices.grid_qubit.GridQubit]` for 1st positional only parameter to call `_make_cz_layer` but got `frozenset[ops.raw_types.QubitId]`.",
    "message": " Expected `Iterable[cirq.devices.grid_qubit.GridQubit]` for 1st positional only parameter to call `_make_cz_layer` but got `frozenset[ops.raw_types.QubitId]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 121,
    "warning_line": "        cz_layer = list(_make_cz_layer(circuit.all_qubits(), layer_index))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import random\nfrom typing import Callable, Iterable, TypeVar\n\nimport cirq\nfrom cirq.circuits import InsertStrategy\nfrom cirq import ops\n\n\ndef google_v2_supremacy_circuit(qubits: Iterable[cirq.GridQubit],\n                               cz_depth: int,\n                               seed: int) -> cirq.Circuit:\n    \"\"\"\n",
        "source_code_len": 317,
        "target_code": "import random\nfrom typing import Callable, Iterable, TypeVar, cast, Sequence\n\nfrom cirq.circuits import InsertStrategy\nfrom cirq import circuits, ops, devices\n\n\ndef google_v2_supremacy_circuit(qubits: Iterable[devices.GridQubit],\n                                cz_depth: int,\n                                seed: int) -> circuits.Circuit:\n    \"\"\"\n",
        "target_code_len": 349,
        "diff_format": "@@ -15,12 +15,11 @@\n import random\n-from typing import Callable, Iterable, TypeVar\n+from typing import Callable, Iterable, TypeVar, cast, Sequence\n \n-import cirq\n from cirq.circuits import InsertStrategy\n-from cirq import ops\n+from cirq import circuits, ops, devices\n \n \n-def google_v2_supremacy_circuit(qubits: Iterable[cirq.GridQubit],\n-                               cz_depth: int,\n-                               seed: int) -> cirq.Circuit:\n+def google_v2_supremacy_circuit(qubits: Iterable[devices.GridQubit],\n+                                cz_depth: int,\n+                                seed: int) -> circuits.Circuit:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "import random\nfrom typing import Callable, Iterable, TypeVar\n\nimport cirq\nfrom cirq.circuits import InsertStrategy\nfrom cirq import ops\n\n\ndef google_v2_supremacy_circuit(qubits: Iterable[cirq.GridQubit],\n                               cz_depth: int,\n                               seed: int) -> cirq.Circuit:\n    <IND>",
        "target_code_with_indent": "import random\nfrom typing import Callable, Iterable, TypeVar, cast, Sequence\n\nfrom cirq.circuits import InsertStrategy\nfrom cirq import circuits, ops, devices\n\n\ndef google_v2_supremacy_circuit(qubits: Iterable[devices.GridQubit],\n                                cz_depth: int,\n                                seed: int) -> circuits.Circuit:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    circuit = cirq.Circuit()\n\n",
        "source_code_len": 31,
        "target_code": "\n    circuit = circuits.Circuit()\n\n",
        "target_code_len": 35,
        "diff_format": "@@ -45,3 +44,3 @@\n \n-    circuit = cirq.Circuit()\n+    circuit = circuits.Circuit()\n \n",
        "source_code_with_indent": "\n    circuit = cirq.Circuit()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    circuit = circuits.Circuit()\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def google_v2_supremacy_circuit_grid(n_rows: int, n_cols: int,\n                                    cz_depth: int, seed: int\n                                    ) -> cirq.Circuit:\n    \"\"\"\n",
        "source_code_len": 187,
        "target_code": "def google_v2_supremacy_circuit_grid(n_rows: int, n_cols: int,\n                                     cz_depth: int, seed: int\n                                     ) -> circuits.Circuit:\n    \"\"\"\n",
        "target_code_len": 193,
        "diff_format": "@@ -83,4 +83,4 @@\n def google_v2_supremacy_circuit_grid(n_rows: int, n_cols: int,\n-                                    cz_depth: int, seed: int\n-                                    ) -> cirq.Circuit:\n+                                     cz_depth: int, seed: int\n+                                     ) -> circuits.Circuit:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "<DED>def google_v2_supremacy_circuit_grid(n_rows: int, n_cols: int,\n                                    cz_depth: int, seed: int\n                                    ) -> cirq.Circuit:\n    <IND>",
        "target_code_with_indent": "<DED>def google_v2_supremacy_circuit_grid(n_rows: int, n_cols: int,\n                                     cz_depth: int, seed: int\n                                     ) -> circuits.Circuit:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    qubits = [cirq.GridQubit(i, j) for i in range(n_rows)\n              for j in range(n_cols)]\n",
        "source_code_len": 104,
        "target_code": "    \"\"\"\n    qubits = [devices.GridQubit(i, j) for i in range(n_rows)\n              for j in range(n_cols)]\n",
        "target_code_len": 107,
        "diff_format": "@@ -102,3 +102,3 @@\n     \"\"\"\n-    qubits = [cirq.GridQubit(i, j) for i in range(n_rows)\n+    qubits = [devices.GridQubit(i, j) for i in range(n_rows)\n               for j in range(n_cols)]\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    qubits = [cirq.GridQubit(i, j) for i in range(n_rows)\n              for j in range(n_cols)]\n",
        "target_code_with_indent": "\n    qubits = [devices.GridQubit(i, j) for i in range(n_rows)\n              for j in range(n_cols)]\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _add_cz_layer(layer_index: int, circuit: cirq.Circuit) -> int:\n    cz_layer = None\n    while not cz_layer:\n        cz_layer = list(_make_cz_layer(circuit.all_qubits(), layer_index))\n        layer_index += 1\n",
        "source_code_len": 212,
        "target_code": "\ndef _add_cz_layer(layer_index: int, circuit: circuits.Circuit) -> int:\n    cz_layer = None\n    while not cz_layer:\n        qubits = cast(Iterable[devices.GridQubit], circuit.all_qubits())\n        cz_layer = list(_make_cz_layer(qubits, layer_index))\n        layer_index += 1\n",
        "target_code_len": 275,
        "diff_format": "@@ -117,6 +118,7 @@\n \n-def _add_cz_layer(layer_index: int, circuit: cirq.Circuit) -> int:\n+def _add_cz_layer(layer_index: int, circuit: circuits.Circuit) -> int:\n     cz_layer = None\n     while not cz_layer:\n-        cz_layer = list(_make_cz_layer(circuit.all_qubits(), layer_index))\n+        qubits = cast(Iterable[devices.GridQubit], circuit.all_qubits())\n+        cz_layer = list(_make_cz_layer(qubits, layer_index))\n         layer_index += 1\n",
        "source_code_with_indent": "\n<DED>def _add_cz_layer(layer_index: int, circuit: cirq.Circuit) -> int:\n    <IND>cz_layer = None\n    while not cz_layer:\n        <IND>cz_layer = list(_make_cz_layer(circuit.all_qubits(), layer_index))\n        layer_index += 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def _add_cz_layer(layer_index: int, circuit: circuits.Circuit) -> int:\n    <IND>cz_layer = None\n    while not cz_layer:\n        <IND>qubits = cast(Iterable[devices.GridQubit], circuit.all_qubits())\n        cz_layer = list(_make_cz_layer(qubits, layer_index))\n        layer_index += 1\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _make_cz_layer(qubits: Iterable[cirq.GridQubit], layer_index: int\n                   ) -> Iterable[cirq.Operation]:\n    \"\"\"\n",
        "source_code_len": 129,
        "target_code": "\ndef _make_cz_layer(qubits: Iterable[devices.GridQubit], layer_index: int\n                   ) -> Iterable[ops.Operation]:\n    \"\"\"\n",
        "target_code_len": 131,
        "diff_format": "@@ -127,4 +129,4 @@\n \n-def _make_cz_layer(qubits: Iterable[cirq.GridQubit], layer_index: int\n-                   ) -> Iterable[cirq.Operation]:\n+def _make_cz_layer(qubits: Iterable[devices.GridQubit], layer_index: int\n+                   ) -> Iterable[ops.Operation]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _make_cz_layer(qubits: Iterable[cirq.GridQubit], layer_index: int\n                   ) -> Iterable[cirq.Operation]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def _make_cz_layer(qubits: Iterable[devices.GridQubit], layer_index: int\n                   ) -> Iterable[ops.Operation]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    for q in qubits:\n        q2 = cirq.GridQubit(q.row + dir_row, q.col + dir_col)\n        if q2 not in qubits:\n",
        "source_code_len": 112,
        "target_code": "    for q in qubits:\n        q2 = devices.GridQubit(q.row + dir_row, q.col + dir_col)\n        if q2 not in qubits:\n",
        "target_code_len": 115,
        "diff_format": "@@ -179,3 +181,3 @@\n     for q in qubits:\n-        q2 = cirq.GridQubit(q.row + dir_row, q.col + dir_col)\n+        q2 = devices.GridQubit(q.row + dir_row, q.col + dir_col)\n         if q2 not in qubits:\n",
        "source_code_with_indent": "    for q in qubits:\n        <IND>q2 = cirq.GridQubit(q.row + dir_row, q.col + dir_col)\n        if q2 not in qubits:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    for q in qubits:\n        <IND>q2 = devices.GridQubit(q.row + dir_row, q.col + dir_col)\n        if q2 not in qubits:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/google/xmon_gates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/google/xmon_gates.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/google/xmon_gates.py:251:27 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 251,
    "warning_line": "    def _unitary_(self) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/linalg/predicates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/linalg/predicates.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/linalg/predicates.py:197:35 Invalid type [31]: Expression `typing.Tuple[(typing.Union[(slice, int, type(...))], ...)]` is not a valid type.",
    "message": " Expression `typing.Tuple[(typing.Union[(slice, int, type(...))], ...)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 197,
    "warning_line": "                              ) -> Tuple[Union[slice, int, type(...)], ...]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                              little_endian_qureg_value: int,\n                              ) -> Tuple[Union[slice, int, type(...)], ...]:\n    \"\"\"Returns an index corresponding to a desired subset of an np.ndarray.\n",
        "source_code_len": 215,
        "target_code": "                              little_endian_qureg_value: int,\n                              ) -> Tuple[Union[slice, int, 'ellipsis'], ...]:\n    \"\"\"Returns an index corresponding to a desired subset of an np.ndarray.\n",
        "target_code_len": 216,
        "diff_format": "@@ -196,3 +200,3 @@\n                               little_endian_qureg_value: int,\n-                              ) -> Tuple[Union[slice, int, type(...)], ...]:\n+                              ) -> Tuple[Union[slice, int, 'ellipsis'], ...]:\n     \"\"\"Returns an index corresponding to a desired subset of an np.ndarray.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                              little_endian_qureg_value: int,\n                              ) -> Tuple[Union[slice, int, type(...)], ...]:\n    <IND>",
        "target_code_with_indent": "                              little_endian_qureg_value: int,\n                              ) -> Tuple[Union[slice, int, 'ellipsis'], ...]:\n    <IND>"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/linalg/predicates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/linalg/predicates.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/linalg/predicates.py:233:23 Incompatible parameter type [6]: Expected `slice` for 2nd positional only parameter to call `list.__setitem__` but got `int`.",
    "message": " Expected `slice` for 2nd positional only parameter to call `list.__setitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 233,
    "warning_line": "        result[axis] = (little_endian_qureg_value >> k) & 1"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/linalg/predicates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/linalg/predicates.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/linalg/predicates.py:234:17 Incompatible parameter type [6]: Expected `slice` for 2nd positional only parameter to call `list.__setitem__` but got `ellipsis`.",
    "message": " Expected `slice` for 2nd positional only parameter to call `list.__setitem__` but got `ellipsis`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 234,
    "warning_line": "    result[-1] = Ellipsis"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/common_gates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/common_gates.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/common_gates.py:67:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 67,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/common_gates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/common_gates.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/common_gates.py:145:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 145,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/common_gates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/common_gates.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/common_gates.py:307:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 307,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/common_gates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/common_gates.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/common_gates.py:602:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 602,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/common_gates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/common_gates.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/common_gates.py:720:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 720,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/common_gates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/common_gates.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/common_gates.py:799:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 799,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/common_gates.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/common_gates.py",
    "file_hunks_size": 8,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/common_gates.py:910:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 910,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/controlled_gate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/controlled_gate.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/controlled_gate.py:118:27 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 118,
    "warning_line": "    def _unitary_(self) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/controlled_gate_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/controlled_gate_test.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/controlled_gate_test.py:109:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 109,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/controlled_gate_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/controlled_gate_test.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/controlled_gate_test.py:127:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 127,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/controlled_gate_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/controlled_gate_test.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/controlled_gate_test.py:158:8 Incompatible parameter type [6]: Expected `Sequence[float]` for 2nd parameter `exponents` to call `cirq.testing.circuit_compare.assert_apply_unitary_to_tensor_is_consistent_with_unitary` but got `Sequence[Union[cirq.value.symbol.Symbol, float]]`.",
    "message": " Expected `Sequence[float]` for 2nd parameter `exponents` to call `cirq.testing.circuit_compare.assert_apply_unitary_to_tensor_is_consistent_with_unitary` but got `Sequence[Union[cirq.value.symbol.Symbol, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 158,
    "warning_line": "        exponents=[1, 0.5, cirq.Symbol('s')])"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/eigen_gate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/eigen_gate.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/eigen_gate.py:211:27 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 211,
    "warning_line": "    def _unitary_(self) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/gate_features.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/gate_features.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/gate_features.py:50:8 Incompatible return type [7]: Expected `Variable[TSelf_ExtrapolatableEffect (bound to ExtrapolatableEffect)]` but got implicit return value of `None`.",
    "message": " Expected `Variable[TSelf_ExtrapolatableEffect (bound to ExtrapolatableEffect)]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 50,
    "warning_line": "        \"\"\"Augments, diminishes, or reverses the effect of the receiving gate.",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport string\n\nfrom cirq import abc, value\nfrom cirq.ops import op_tree, raw_types\n",
        "source_code_len": 84,
        "target_code": "\nimport abc\nimport string\n\nfrom cirq import value\nfrom cirq.ops import op_tree, raw_types\n",
        "target_code_len": 90,
        "diff_format": "@@ -23,5 +23,6 @@\n \n+import abc\n import string\n \n-from cirq import abc, value\n+from cirq import value\n from cirq.ops import op_tree, raw_types\n",
        "source_code_with_indent": "\nimport string\n\nfrom cirq import abc, value\nfrom cirq.ops import op_tree, raw_types\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport abc\nimport string\n\nfrom cirq import value\nfrom cirq.ops import op_tree, raw_types\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/gate_features.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/gate_features.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/gate_features.py:91:8 Incompatible return type [7]: Expected `Union[Iterable[typing.Any], raw_types.Operation]` but got implicit return value of `None`.",
    "message": " Expected `Union[Iterable[typing.Any], raw_types.Operation]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 91,
    "warning_line": "        \"\"\"Yields simpler operations for performing the receiving operation.\"\"\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport string\n\nfrom cirq import abc, value\nfrom cirq.ops import op_tree, raw_types\n",
        "source_code_len": 84,
        "target_code": "\nimport abc\nimport string\n\nfrom cirq import value\nfrom cirq.ops import op_tree, raw_types\n",
        "target_code_len": 90,
        "diff_format": "@@ -23,5 +23,6 @@\n \n+import abc\n import string\n \n-from cirq import abc, value\n+from cirq import value\n from cirq.ops import op_tree, raw_types\n",
        "source_code_with_indent": "\nimport string\n\nfrom cirq import abc, value\nfrom cirq.ops import op_tree, raw_types\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport abc\nimport string\n\nfrom cirq import value\nfrom cirq.ops import op_tree, raw_types\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/gate_features.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/gate_features.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/gate_features.py:100:8 Incompatible return type [7]: Expected `Union[Iterable[typing.Any], raw_types.Operation]` but got implicit return value of `None`.",
    "message": " Expected `Union[Iterable[typing.Any], raw_types.Operation]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 100,
    "warning_line": "        \"\"\"Yields operations for performing this gate on the given qubits.",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport string\n\nfrom cirq import abc, value\nfrom cirq.ops import op_tree, raw_types\n",
        "source_code_len": 84,
        "target_code": "\nimport abc\nimport string\n\nfrom cirq import value\nfrom cirq.ops import op_tree, raw_types\n",
        "target_code_len": 90,
        "diff_format": "@@ -23,5 +23,6 @@\n \n+import abc\n import string\n \n-from cirq import abc, value\n+from cirq import value\n from cirq.ops import op_tree, raw_types\n",
        "source_code_with_indent": "\nimport string\n\nfrom cirq import abc, value\nfrom cirq.ops import op_tree, raw_types\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport abc\nimport string\n\nfrom cirq import value\nfrom cirq.ops import op_tree, raw_types\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/gate_features.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/gate_features.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/gate_features.py:197:8 Incompatible return type [7]: Expected `TextDiagramInfo` but got implicit return value of `None`.",
    "message": " Expected `TextDiagramInfo` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 197,
    "warning_line": "        \"\"\"Describes how to draw something in a text diagram.",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport string\n\nfrom cirq import abc, value\nfrom cirq.ops import op_tree, raw_types\n",
        "source_code_len": 84,
        "target_code": "\nimport abc\nimport string\n\nfrom cirq import value\nfrom cirq.ops import op_tree, raw_types\n",
        "target_code_len": 90,
        "diff_format": "@@ -23,5 +23,6 @@\n \n+import abc\n import string\n \n-from cirq import abc, value\n+from cirq import value\n from cirq.ops import op_tree, raw_types\n",
        "source_code_with_indent": "\nimport string\n\nfrom cirq import abc, value\nfrom cirq.ops import op_tree, raw_types\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport abc\nimport string\n\nfrom cirq import value\nfrom cirq.ops import op_tree, raw_types\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/gate_features.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/gate_features.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/gate_features.py:220:8 Incompatible return type [7]: Expected `Variable[TSelf_PhaseableEffect (bound to PhaseableEffect)]` but got implicit return value of `None`.",
    "message": " Expected `Variable[TSelf_PhaseableEffect (bound to PhaseableEffect)]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 220,
    "warning_line": "        \"\"\"Returns a phased version of the effect.",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nimport string\n\nfrom cirq import abc, value\nfrom cirq.ops import op_tree, raw_types\n",
        "source_code_len": 84,
        "target_code": "\nimport abc\nimport string\n\nfrom cirq import value\nfrom cirq.ops import op_tree, raw_types\n",
        "target_code_len": 90,
        "diff_format": "@@ -23,5 +23,6 @@\n \n+import abc\n import string\n \n-from cirq import abc, value\n+from cirq import value\n from cirq.ops import op_tree, raw_types\n",
        "source_code_with_indent": "\nimport string\n\nfrom cirq import abc, value\nfrom cirq.ops import op_tree, raw_types\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nimport abc\nimport string\n\nfrom cirq import value\nfrom cirq.ops import op_tree, raw_types\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/gate_operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/gate_operation.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/gate_operation.py:141:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 141,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/ops/gate_operation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/gate_operation.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/gate_operation.py:149:27 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 149,
    "warning_line": "    def _unitary_(self) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/protocols/apply_unitary_to_tensor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/protocols/apply_unitary_to_tensor.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/protocols/apply_unitary_to_tensor.py:44:39 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 44,
    "warning_line": "                                  ) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/protocols/inverse_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/protocols/inverse_test.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/protocols/inverse_test.py:25:35 Invalid type [31]: Expression `type(NotImplemented)` is not a valid type.",
    "message": " Expression `type(NotImplemented)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 25,
    "warning_line": "    def __pow__(self, exponent) -> type(NotImplemented):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ReturnsNotImplemented:\n    def __pow__(self, exponent) -> type(NotImplemented):\n        return NotImplemented\n",
        "source_code_len": 116,
        "target_code": "class ReturnsNotImplemented:\n    def __pow__(self, exponent):\n        return NotImplemented\n",
        "target_code_len": 92,
        "diff_format": "@@ -24,3 +24,3 @@\n class ReturnsNotImplemented:\n-    def __pow__(self, exponent) -> type(NotImplemented):\n+    def __pow__(self, exponent):\n         return NotImplemented\n",
        "source_code_with_indent": "<DED>class ReturnsNotImplemented:\n    <IND>def __pow__(self, exponent) -> type(NotImplemented):\n        <IND>return NotImplemented\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class ReturnsNotImplemented:\n    <IND>def __pow__(self, exponent):\n        <IND>return NotImplemented\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/protocols/unitary.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/protocols/unitary.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/protocols/unitary.py:34:27 Invalid type [31]: Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "message": " Expression `typing.Union[(numpy.ndarray, type(NotImplemented))]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 34,
    "warning_line": "    def _unitary_(self) -> Union[np.ndarray, type(NotImplemented)]:"
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "e084e17b7d203d563241018931b7bea1c20148c0",
    "filename": "cirq/testing/random_circuit_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/testing/random_circuit_test.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/testing/random_circuit_test.py:62:45 Incompatible parameter type [6]: Expected `typing.Iterable[object]` for 1st positional only parameter to call `frozenset.issubset` but got `Union[Sequence[cirq.ops.raw_types.QubitId], int]`.",
    "message": " Expected `typing.Iterable[object]` for 1st positional only parameter to call `frozenset.issubset` but got `Union[Sequence[cirq.ops.raw_types.QubitId], int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 62,
    "warning_line": "        assert circuit.all_qubits().issubset(qubits)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        pass_qubits: bool):\n    qubits = cirq.LineQubit.range(n_qubits) if pass_qubits else n_qubits\n    circuit = random_circuit(qubits, n_moments, op_density, gate_domain)\n    if pass_qubits:\n        assert circuit.all_qubits().issubset(qubits)\n    assert len(circuit) == n_moments\n",
        "source_code_len": 300,
        "target_code": "                        pass_qubits: bool):\n    qubit_set = cirq.LineQubit.range(n_qubits)\n    qubit_arg = qubit_set if pass_qubits else n_qubits\n    circuit = random_circuit(qubit_arg, n_moments, op_density, gate_domain)\n    if qubit_arg is qubit_set:\n        assert circuit.all_qubits().issubset(qubit_set)\n    assert len(circuit) == n_moments\n",
        "target_code_len": 346,
        "diff_format": "@@ -58,6 +58,7 @@\n                         pass_qubits: bool):\n-    qubits = cirq.LineQubit.range(n_qubits) if pass_qubits else n_qubits\n-    circuit = random_circuit(qubits, n_moments, op_density, gate_domain)\n-    if pass_qubits:\n-        assert circuit.all_qubits().issubset(qubits)\n+    qubit_set = cirq.LineQubit.range(n_qubits)\n+    qubit_arg = qubit_set if pass_qubits else n_qubits\n+    circuit = random_circuit(qubit_arg, n_moments, op_density, gate_domain)\n+    if qubit_arg is qubit_set:\n+        assert circuit.all_qubits().issubset(qubit_set)\n     assert len(circuit) == n_moments\n",
        "source_code_with_indent": "                        pass_qubits: bool):\n    <IND>qubits = cirq.LineQubit.range(n_qubits) if pass_qubits else n_qubits\n    circuit = random_circuit(qubits, n_moments, op_density, gate_domain)\n    if pass_qubits:\n        <IND>assert circuit.all_qubits().issubset(qubits)\n    <DED>assert len(circuit) == n_moments\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        pass_qubits: bool):\n    <IND>qubit_set = cirq.LineQubit.range(n_qubits)\n    qubit_arg = qubit_set if pass_qubits else n_qubits\n    circuit = random_circuit(qubit_arg, n_moments, op_density, gate_domain)\n    if qubit_arg is qubit_set:\n        <IND>assert circuit.all_qubits().issubset(qubit_set)\n    <DED>assert len(circuit) == n_moments\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]