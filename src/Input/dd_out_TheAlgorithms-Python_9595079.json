[
  {
    "project": "TheAlgorithms/Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "divide_and_conquer/max_difference_pair.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/divide_and_conquer/max_difference_pair.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "divide_and_conquer/max_difference_pair.py:4:37 Invalid type [31]: Expression `(int, int)` is not a valid type.",
    "message": " Expression `(int, int)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 4,
    "warning_line": "def max_difference(a: List[int]) -> (int, int):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import List\n\n\ndef max_difference(a: List[int]) -> (int, int):\n    \"\"\"\n",
        "source_code_len": 82,
        "target_code": "def max_difference(a: list[int]) -> tuple[int, int]:\n    \"\"\"\n",
        "target_code_len": 61,
        "diff_format": "@@ -1,5 +1,2 @@\n-from typing import List\n-\n-\n-def max_difference(a: List[int]) -> (int, int):\n+def max_difference(a: list[int]) -> tuple[int, int]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "from typing import List\n\n\ndef max_difference(a: List[int]) -> (int, int):\n    <IND>",
        "target_code_with_indent": "def max_difference(a: list[int]) -> tuple[int, int]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/divide_and_conquer/strassen_matrix_multiplication.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "divide_and_conquer/strassen_matrix_multiplication.py:124:8 Incompatible return type [7]: Expected `typing.List[typing.Any]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
    "message": " Expected `typing.List[typing.Any]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 124,
    "warning_line": "        return matrix1, matrix2",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return matrix1, matrix2\n\n",
        "source_code_len": 107,
        "target_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return [matrix1, matrix2]\n\n",
        "target_code_len": 109,
        "diff_format": "@@ -123,3 +123,3 @@\n     if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n-        return matrix1, matrix2\n+        return [matrix1, matrix2]\n \n",
        "source_code_with_indent": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        <IND>return matrix1, matrix2\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        <IND>return [matrix1, matrix2]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "electronics/electric_power.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/electronics/electric_power.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electronics/electric_power.py:44:8 Incompatible return type [7]: Expected `typing.Tuple[typing.Any, ...]` but got implicit return value of `None`.",
    "message": " Expected `typing.Tuple[typing.Any, ...]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 44,
    "warning_line": "        return result(\"power\", float(round(abs(voltage * current), 2)))"
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "electronics/ohms_law.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/electronics/ohms_law.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electronics/ohms_law.py:34:8 Incompatible return type [7]: Expected `Dict[str, float]` but got implicit return value of `None`.",
    "message": " Expected `Dict[str, float]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 34,
    "warning_line": "        return {\"resistance\": voltage / current}",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return {\"resistance\": voltage / current}\n\n",
        "source_code_len": 50,
        "target_code": "        return {\"resistance\": voltage / current}\n    else:\n        raise ValueError(\"Exactly one argument must be 0\")\n\n",
        "target_code_len": 119,
        "diff_format": "@@ -34,2 +34,4 @@\n         return {\"resistance\": voltage / current}\n+    else:\n+        raise ValueError(\"Exactly one argument must be 0\")\n \n",
        "source_code_with_indent": "        <IND>return {\"resistance\": voltage / current}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return {\"resistance\": voltage / current}\n    <DED>else:\n        <IND>raise ValueError(\"Exactly one argument must be 0\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "quantum/ripple_adder_classic.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/quantum/ripple_adder_classic.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "quantum/ripple_adder_classic.py:9:49 Invalid type [31]: Expression `(qiskit.QuantumCircuit, str, str)` is not a valid type.",
    "message": " Expression `(qiskit.QuantumCircuit, str, str)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 9,
    "warning_line": "def store_two_classics(val1: int, val2: int) -> (QuantumCircuit, str, str):"
  }
]