[
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/api/mail/test_v0.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/api/mail/test_v0.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/api/mail/test_v0.py:22:19 Incompatible variable type [9]: sender is declared to have type `str` but is used as type `None`.",
    "message": " sender is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 22,
    "warning_line": "                   sender: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -4,5 +4,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "source_code_len": 338,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "target_code_len": 326,
        "diff_format": "@@ -21,8 +22,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/api/mail/test_v0.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/api/mail/test_v0.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/api/mail/test_v0.py:24:19 Incompatible variable type [9]: subject is declared to have type `str` but is used as type `None`.",
    "message": " subject is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 24,
    "warning_line": "                   subject: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -4,5 +4,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "source_code_len": 338,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "target_code_len": 326,
        "diff_format": "@@ -21,8 +22,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/api/mail/test_v0.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/api/mail/test_v0.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/api/mail/test_v0.py:25:19 Incompatible variable type [9]: text is declared to have type `str` but is used as type `None`.",
    "message": " text is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 25,
    "warning_line": "                   text: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -4,5 +4,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "source_code_len": 338,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "target_code_len": 326,
        "diff_format": "@@ -21,8 +22,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/api/mail/test_v0.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/api/mail/test_v0.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/api/mail/test_v0.py:26:19 Incompatible variable type [9]: html is declared to have type `str` but is used as type `None`.",
    "message": " html is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 26,
    "warning_line": "                   html: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -4,5 +4,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "source_code_len": 338,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "target_code_len": 326,
        "diff_format": "@@ -21,8 +22,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/api/mail/test_v0.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/api/mail/test_v0.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/api/mail/test_v0.py:36:19 Incompatible variable type [9]: sender is declared to have type `str` but is used as type `None`.",
    "message": " sender is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 36,
    "warning_line": "                   sender: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -4,5 +4,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        raise Exception('Bad client')\n",
        "source_code_len": 316,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        raise Exception('Bad client')\n",
        "target_code_len": 304,
        "diff_format": "@@ -35,8 +35,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         raise Exception('Bad client')\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>raise Exception('Bad client')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>raise Exception('Bad client')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/api/mail/test_v0.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/api/mail/test_v0.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/api/mail/test_v0.py:38:19 Incompatible variable type [9]: subject is declared to have type `str` but is used as type `None`.",
    "message": " subject is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 38,
    "warning_line": "                   subject: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -4,5 +4,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        raise Exception('Bad client')\n",
        "source_code_len": 316,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        raise Exception('Bad client')\n",
        "target_code_len": 304,
        "diff_format": "@@ -35,8 +35,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         raise Exception('Bad client')\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>raise Exception('Bad client')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>raise Exception('Bad client')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/api/mail/test_v0.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/api/mail/test_v0.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/api/mail/test_v0.py:39:19 Incompatible variable type [9]: text is declared to have type `str` but is used as type `None`.",
    "message": " text is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 39,
    "warning_line": "                   text: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -4,5 +4,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        raise Exception('Bad client')\n",
        "source_code_len": 316,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        raise Exception('Bad client')\n",
        "target_code_len": 304,
        "diff_format": "@@ -35,8 +35,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         raise Exception('Bad client')\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>raise Exception('Bad client')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>raise Exception('Bad client')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/api/mail/test_v0.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/api/mail/test_v0.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/api/mail/test_v0.py:40:19 Incompatible variable type [9]: html is declared to have type `str` but is used as type `None`.",
    "message": " html is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 40,
    "warning_line": "                   html: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -4,5 +4,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        raise Exception('Bad client')\n",
        "source_code_len": 316,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        raise Exception('Bad client')\n",
        "target_code_len": 304,
        "diff_format": "@@ -35,8 +35,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         raise Exception('Bad client')\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>raise Exception('Bad client')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>raise Exception('Bad client')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/utils/test_notification_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/utils/test_notification_utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/utils/test_notification_utils.py:27:19 Incompatible variable type [9]: sender is declared to have type `str` but is used as type `None`.",
    "message": " sender is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "                   sender: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -5,5 +5,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "source_code_len": 338,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "target_code_len": 326,
        "diff_format": "@@ -26,8 +27,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/utils/test_notification_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/utils/test_notification_utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/utils/test_notification_utils.py:29:19 Incompatible variable type [9]: subject is declared to have type `str` but is used as type `None`.",
    "message": " subject is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 29,
    "warning_line": "                   subject: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -5,5 +5,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "source_code_len": 338,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "target_code_len": 326,
        "diff_format": "@@ -26,8 +27,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/utils/test_notification_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/utils/test_notification_utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/utils/test_notification_utils.py:30:19 Incompatible variable type [9]: text is declared to have type `str` but is used as type `None`.",
    "message": " text is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 30,
    "warning_line": "                   text: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -5,5 +5,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "source_code_len": 338,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "target_code_len": 326,
        "diff_format": "@@ -26,8 +27,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "amundsen-io/amundsen",
    "commit": "7983b13824138acc3e30f732cc0136861c620e1b",
    "filename": "frontend/tests/unit/utils/test_notification_utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/amundsen-io-amundsen/frontend/tests/unit/utils/test_notification_utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "frontend/tests/unit/utils/test_notification_utils.py:31:19 Incompatible variable type [9]: html is declared to have type `str` but is used as type `None`.",
    "message": " html is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 31,
    "warning_line": "                   html: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_len": 76,
        "target_code": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -5,5 +5,6 @@\n import unittest\n+from unittest.mock import Mock\n \n from http import HTTPStatus\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n",
        "source_code_with_indent": "import unittest\n\nfrom http import HTTPStatus\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import unittest\nfrom unittest.mock import Mock\n\nfrom http import HTTPStatus\nfrom typing import Dict, List, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "source_code_len": 338,
        "target_code": "    def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        return make_response(jsonify({}), self.status_code)\n",
        "target_code_len": 326,
        "diff_format": "@@ -26,8 +27,7 @@\n     def send_email(self,\n-                   sender: str = None,\n-                   recipients: List = [],\n-                   subject: str = None,\n-                   text: str = None,\n-                   html: str = None,\n-                   optional_data: Dict = {}) -> Response:\n+                   html: str,\n+                   subject: str,\n+                   optional_data: Optional[Dict] = None,\n+                   recipients: Optional[List[str]] = None,\n+                   sender: Optional[str] = None) -> Response:\n         return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent": "    <DED>def send_email(self,\n                   sender: str = None,\n                   recipients: List = [],\n                   subject: str = None,\n                   text: str = None,\n                   html: str = None,\n                   optional_data: Dict = {}) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def send_email(self,\n                   html: str,\n                   subject: str,\n                   optional_data: Optional[Dict] = None,\n                   recipients: Optional[List[str]] = None,\n                   sender: Optional[str] = None) -> Response:\n        <IND>return make_response(jsonify({}), self.status_code)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]