[
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/confidence/model_linearity.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/confidence/model_linearity.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/confidence/model_linearity.py:263:70 Incompatible variable type [9]: method is declared to have type `str` but is used as type `None`.",
    "message": " method is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 263,
    "warning_line": "                       feature_range: Union[List, np.ndarray] = None, method: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nfrom time import time\nfrom typing import Tuple, Callable, Union, List\nfrom numpy.linalg import norm\nimport numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nimport string\n\n",
        "source_code_len": 196,
        "target_code": "import logging\nimport string\nfrom time import time\nfrom typing import Callable, List, Optional, Tuple, Union\n\nimport numpy as np\nfrom numpy.linalg import norm\nfrom sklearn.neighbors import NearestNeighbors\n\n",
        "target_code_len": 207,
        "diff_format": "@@ -1,8 +1,9 @@\n import logging\n+import string\n from time import time\n-from typing import Tuple, Callable, Union, List\n+from typing import Callable, List, Optional, Tuple, Union\n+\n+import numpy as np\n from numpy.linalg import norm\n-import numpy as np\n from sklearn.neighbors import NearestNeighbors\n-import string\n \n",
        "source_code_with_indent": "import logging\nfrom time import time\nfrom typing import Tuple, Callable, Union, List\nfrom numpy.linalg import norm\nimport numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nimport string\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nimport string\nfrom time import time\nfrom typing import Callable, List, Optional, Tuple, Union\n\nimport numpy as np\nfrom numpy.linalg import norm\nfrom sklearn.neighbors import NearestNeighbors\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _linearity_measure(predict_fn: Callable, x: np.ndarray, X_train: np.ndarray = None,\n                       feature_range: Union[List, np.ndarray] = None, method: str = None,\n                       epsilon: float = 0.04, nb_samples: int = 10, res: int = 100,\n                       alphas: np.ndarray = None, model_type: str = 'classifier', agg: str = 'global') -> np.ndarray:\n    \"\"\"Calculate the linearity measure of the model around an instance of interest x.\n",
        "source_code_len": 467,
        "target_code": "\ndef _linearity_measure(predict_fn: Callable,\n                       x: np.ndarray,\n                       X_train: Optional[np.ndarray] = None,\n                       feature_range: Optional[Union[List, np.ndarray]] = None,\n                       method: Optional[str] = None,\n                       epsilon: float = 0.04,\n                       nb_samples: int = 10,\n                       res: int = 100,\n                       alphas: Optional[np.ndarray] = None,\n                       model_type: str = 'classifier',\n                       agg: str = 'global') -> np.ndarray:\n    \"\"\"Calculate the linearity measure of the model around an instance of interest x.\n",
        "target_code_len": 668,
        "diff_format": "@@ -261,6 +262,13 @@\n \n-def _linearity_measure(predict_fn: Callable, x: np.ndarray, X_train: np.ndarray = None,\n-                       feature_range: Union[List, np.ndarray] = None, method: str = None,\n-                       epsilon: float = 0.04, nb_samples: int = 10, res: int = 100,\n-                       alphas: np.ndarray = None, model_type: str = 'classifier', agg: str = 'global') -> np.ndarray:\n+def _linearity_measure(predict_fn: Callable,\n+                       x: np.ndarray,\n+                       X_train: Optional[np.ndarray] = None,\n+                       feature_range: Optional[Union[List, np.ndarray]] = None,\n+                       method: Optional[str] = None,\n+                       epsilon: float = 0.04,\n+                       nb_samples: int = 10,\n+                       res: int = 100,\n+                       alphas: Optional[np.ndarray] = None,\n+                       model_type: str = 'classifier',\n+                       agg: str = 'global') -> np.ndarray:\n     \"\"\"Calculate the linearity measure of the model around an instance of interest x.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def _linearity_measure(predict_fn: Callable, x: np.ndarray, X_train: np.ndarray = None,\n                       feature_range: Union[List, np.ndarray] = None, method: str = None,\n                       epsilon: float = 0.04, nb_samples: int = 10, res: int = 100,\n                       alphas: np.ndarray = None, model_type: str = 'classifier', agg: str = 'global') -> np.ndarray:\n    <IND>",
        "target_code_with_indent": "\n<DED>def _linearity_measure(predict_fn: Callable,\n                       x: np.ndarray,\n                       X_train: Optional[np.ndarray] = None,\n                       feature_range: Optional[Union[List, np.ndarray]] = None,\n                       method: Optional[str] = None,\n                       epsilon: float = 0.04,\n                       nb_samples: int = 10,\n                       res: int = 100,\n                       alphas: Optional[np.ndarray] = None,\n                       model_type: str = 'classifier',\n                       agg: str = 'global') -> np.ndarray:\n    <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/confidence/trustscore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/confidence/trustscore.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/confidence/trustscore.py:12:62 Incompatible variable type [9]: filter_type is declared to have type `str` but is used as type `None`.",
    "message": " filter_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 12,
    "warning_line": "    def __init__(self, k_filter: int = 10, alpha: float = 0., filter_type: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nimport numpy as np\nfrom sklearn.neighbors import KDTree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom typing import Tuple, Any\n\n",
        "source_code_len": 153,
        "target_code": "import logging\nfrom typing import Any, Optional, Tuple\n\nimport numpy as np\nfrom sklearn.neighbors import KDTree, KNeighborsClassifier\n\n",
        "target_code_len": 135,
        "diff_format": "@@ -1,6 +1,6 @@\n import logging\n+from typing import Any, Optional, Tuple\n+\n import numpy as np\n-from sklearn.neighbors import KDTree\n-from sklearn.neighbors import KNeighborsClassifier\n-from typing import Tuple, Any\n+from sklearn.neighbors import KDTree, KNeighborsClassifier\n \n",
        "source_code_with_indent": "import logging\nimport numpy as np\nfrom sklearn.neighbors import KDTree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom typing import Tuple, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Optional, Tuple\n\nimport numpy as np\nfrom sklearn.neighbors import KDTree, KNeighborsClassifier\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nclass TrustScore(object):\n\n    def __init__(self, k_filter: int = 10, alpha: float = 0., filter_type: str = None,\n                 leaf_size: int = 40, metric: str = 'euclidean', dist_filter_type: str = 'point') -> None:\n        \"\"\"\n",
        "source_code_len": 234,
        "target_code": "\nclass TrustScore:\n\n    def __init__(self,\n                 k_filter: int = 10,\n                 alpha: float = 0.,\n                 filter_type: Optional[str] = None,\n                 leaf_size: int = 40,\n                 metric: str = 'euclidean',\n                 dist_filter_type: str = 'point') -> None:\n        \"\"\"\n",
        "target_code_len": 321,
        "diff_format": "@@ -9,6 +9,11 @@\n \n-class TrustScore(object):\n+class TrustScore:\n \n-    def __init__(self, k_filter: int = 10, alpha: float = 0., filter_type: str = None,\n-                 leaf_size: int = 40, metric: str = 'euclidean', dist_filter_type: str = 'point') -> None:\n+    def __init__(self,\n+                 k_filter: int = 10,\n+                 alpha: float = 0.,\n+                 filter_type: Optional[str] = None,\n+                 leaf_size: int = 40,\n+                 metric: str = 'euclidean',\n+                 dist_filter_type: str = 'point') -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nclass TrustScore(object):\n\n    <IND>def __init__(self, k_filter: int = 10, alpha: float = 0., filter_type: str = None,\n                 leaf_size: int = 40, metric: str = 'euclidean', dist_filter_type: str = 'point') -> None:\n        <IND>",
        "target_code_with_indent": "\nclass TrustScore:\n\n    <IND>def __init__(self,\n                 k_filter: int = 10,\n                 alpha: float = 0.,\n                 filter_type: Optional[str] = None,\n                 leaf_size: int = 40,\n                 metric: str = 'euclidean',\n                 dist_filter_type: str = 'point') -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/confidence/trustscore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/confidence/trustscore.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/confidence/trustscore.py:96:48 Incompatible variable type [9]: classes is declared to have type `int` but is used as type `None`.",
    "message": " classes is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 96,
    "warning_line": "    def fit(self, X: np.ndarray, Y: np.ndarray, classes: int = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nimport numpy as np\nfrom sklearn.neighbors import KDTree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom typing import Tuple, Any\n\n",
        "source_code_len": 153,
        "target_code": "import logging\nfrom typing import Any, Optional, Tuple\n\nimport numpy as np\nfrom sklearn.neighbors import KDTree, KNeighborsClassifier\n\n",
        "target_code_len": 135,
        "diff_format": "@@ -1,6 +1,6 @@\n import logging\n+from typing import Any, Optional, Tuple\n+\n import numpy as np\n-from sklearn.neighbors import KDTree\n-from sklearn.neighbors import KNeighborsClassifier\n-from typing import Tuple, Any\n+from sklearn.neighbors import KDTree, KNeighborsClassifier\n \n",
        "source_code_with_indent": "import logging\nimport numpy as np\nfrom sklearn.neighbors import KDTree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom typing import Tuple, Any\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom typing import Any, Optional, Tuple\n\nimport numpy as np\nfrom sklearn.neighbors import KDTree, KNeighborsClassifier\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def fit(self, X: np.ndarray, Y: np.ndarray, classes: int = None) -> None:\n        \"\"\"\n",
        "source_code_len": 91,
        "target_code": "\n    def fit(self, X: np.ndarray, Y: np.ndarray, classes: Optional[int] = None) -> None:\n        \"\"\"\n",
        "target_code_len": 101,
        "diff_format": "@@ -95,3 +100,3 @@\n \n-    def fit(self, X: np.ndarray, Y: np.ndarray, classes: int = None) -> None:\n+    def fit(self, X: np.ndarray, Y: np.ndarray, classes: Optional[int] = None) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def fit(self, X: np.ndarray, Y: np.ndarray, classes: int = None) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def fit(self, X: np.ndarray, Y: np.ndarray, classes: Optional[int] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/datasets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/datasets.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "alibi/datasets.py:53:39 Incompatible parameter type [6]: Expected `bytes` for 1st positional only parameter to call `BytesIO.__init__` but got `typing.Optional[bytes]`.",
    "message": " Expected `bytes` for 1st positional only parameter to call `BytesIO.__init__` but got `typing.Optional[bytes]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 53,
    "warning_line": "    tar = tarfile.open(fileobj=BytesIO(pkgutil.get_data(__name__, \"data/cats.tar.gz\")), mode='r:gz')",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    \"\"\"\n    tar = tarfile.open(fileobj=BytesIO(pkgutil.get_data(__name__, \"data/cats.tar.gz\")), mode='r:gz')\n    images = []\n",
        "source_code_len": 125,
        "target_code": "    \"\"\"\n    tar = tarfile.open(fileobj=BytesIO(pkgutil.get_data(__name__, \"data/cats.tar.gz\")),  # type: ignore[arg-type]\n                       mode='r:gz')\n    images = []\n",
        "target_code_len": 174,
        "diff_format": "@@ -52,3 +53,4 @@\n     \"\"\"\n-    tar = tarfile.open(fileobj=BytesIO(pkgutil.get_data(__name__, \"data/cats.tar.gz\")), mode='r:gz')\n+    tar = tarfile.open(fileobj=BytesIO(pkgutil.get_data(__name__, \"data/cats.tar.gz\")),  # type: ignore[arg-type]\n+                       mode='r:gz')\n     images = []\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    tar = tarfile.open(fileobj=BytesIO(pkgutil.get_data(__name__, \"data/cats.tar.gz\")), mode='r:gz')\n    images = []\n",
        "target_code_with_indent": "\n    tar = tarfile.open(fileobj=BytesIO(pkgutil.get_data(__name__, \"data/cats.tar.gz\")),  # type: ignore[arg-type]\n                       mode='r:gz')\n    images = []\n"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/datasets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/datasets.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/datasets.py:132:16 Incompatible variable type [9]: features_drop is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "message": " features_drop is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 132,
    "warning_line": "def fetch_adult(features_drop: list = None, return_X_y: bool = False, url_id: int = 0) -> \\"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/ale.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/ale.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/ale.py:92:37 Incompatible variable type [9]: features is declared to have type `List[int]` but is used as type `None`.",
    "message": " features is declared to have type `List[int]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 92,
    "warning_line": "    def explain(self, X: np.ndarray, features: List[int] = None, min_bin_points: int = 4) -> Explanation:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def explain(self, X: np.ndarray, features: List[int] = None, min_bin_points: int = 4) -> Explanation:\n        \"\"\"\n",
        "source_code_len": 119,
        "target_code": "\n    def explain(self, X: np.ndarray, features: Optional[List[int]] = None, min_bin_points: int = 4) -> Explanation:\n        \"\"\"\n",
        "target_code_len": 129,
        "diff_format": "@@ -91,3 +91,3 @@\n \n-    def explain(self, X: np.ndarray, features: List[int] = None, min_bin_points: int = 4) -> Explanation:\n+    def explain(self, X: np.ndarray, features: Optional[List[int]] = None, min_bin_points: int = 4) -> Explanation:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def explain(self, X: np.ndarray, features: List[int] = None, min_bin_points: int = 4) -> Explanation:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def explain(self, X: np.ndarray, features: Optional[List[int]] = None, min_bin_points: int = 4) -> Explanation:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            feature_names = self.feature_names\n            features = range(n_features)  # type: ignore\n\n",
        "source_code_len": 105,
        "target_code": "            feature_names = self.feature_names\n            features = list(range(n_features))\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -132,3 +132,3 @@\n             feature_names = self.feature_names\n-            features = range(n_features)  # type: ignore\n+            features = list(range(n_features))\n \n",
        "source_code_with_indent": "            <IND>feature_names = self.feature_names\n            features = range(n_features)  # type: ignore\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>feature_names = self.feature_names\n            features = list(range(n_features))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_base.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_base.py:27:8 Incompatible attribute type [8]: Attribute `samplers` declared in class `AnchorBaseBeam` has type `List[typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "message": " Attribute `samplers` declared in class `AnchorBaseBeam` has type `List[typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 27,
    "warning_line": "        self.samplers = None  # type: List[Callable]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nimport numpy as np\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Tuple, Set, Dict, List\n\nfrom alibi.utils.distributed import ActorPool, RAY_INSTALLED\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "source_code_len": 277,
        "target_code": "import logging\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Dict, List, Optional, Set, Tuple\n\nimport numpy as np\n\nfrom alibi.utils.distributed import RAY_INSTALLED, ActorPool\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "target_code_len": 288,
        "diff_format": "@@ -2,8 +2,9 @@\n import logging\n-import numpy as np\n from collections import defaultdict, namedtuple\n from functools import partial\n-from typing import Callable, Tuple, Set, Dict, List\n-\n-from alibi.utils.distributed import ActorPool, RAY_INSTALLED\n+from typing import Callable, Dict, List, Optional, Set, Tuple\n+\n+import numpy as np\n+\n+from alibi.utils.distributed import RAY_INSTALLED, ActorPool\n from alibi.utils.distributions import kl_bernoulli\n",
        "source_code_with_indent": "import logging\nimport numpy as np\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Tuple, Set, Dict, List\n\nfrom alibi.utils.distributed import ActorPool, RAY_INSTALLED\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Dict, List, Optional, Set, Tuple\n\nimport numpy as np\n\nfrom alibi.utils.distributed import RAY_INSTALLED, ActorPool\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.sample_fcn = samplers[0]\n        self.samplers = None  # type: List[Callable]\n        # Initial size (in batches) of data/raw data samples cache.\n",
        "source_code_len": 159,
        "target_code": "        self.sample_fcn = samplers[0]\n        self.samplers = None  # type: Optional[List[Callable]]\n        # Initial size (in batches) of data/raw data samples cache.\n",
        "target_code_len": 169,
        "diff_format": "@@ -26,3 +27,3 @@\n         self.sample_fcn = samplers[0]\n-        self.samplers = None  # type: List[Callable]\n+        self.samplers = None  # type: Optional[List[Callable]]\n         # Initial size (in batches) of data/raw data samples cache.\n",
        "source_code_with_indent": "        self.sample_fcn = samplers[0]\n        self.samplers = None  # type: List[Callable]\n        # Initial size (in batches) of data/raw data samples cache.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.sample_fcn = samplers[0]\n        self.samplers = None  # type: Optional[List[Callable]]\n        # Initial size (in batches) of data/raw data samples cache.\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 120,
        "target_code": "\n    def _get_coverage_samples(self, coverage_samples: int, samplers: Optional[List[Callable]] = None) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 130,
        "diff_format": "@@ -177,3 +178,3 @@\n \n-    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n+    def _get_coverage_samples(self, coverage_samples: int, samplers: Optional[List[Callable]] = None) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _get_coverage_samples(self, coverage_samples: int, samplers: Optional[List[Callable]] = None) -> np.ndarray:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 120,
        "target_code": "\n    def _get_coverage_samples(self, coverage_samples: int,  # type: ignore[override]\n                              samplers: List[Callable]) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 169,
        "diff_format": "@@ -837,3 +838,4 @@\n \n-    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n+    def _get_coverage_samples(self, coverage_samples: int,  # type: ignore[override]\n+                              samplers: List[Callable]) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _get_coverage_samples(self, coverage_samples: int,  # type: ignore[override]\n                              samplers: List[Callable]) -> np.ndarray:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_base.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_base.py:178:59 Incompatible variable type [9]: samplers is declared to have type `List[typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "message": " samplers is declared to have type `List[typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 178,
    "warning_line": "    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nimport numpy as np\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Tuple, Set, Dict, List\n\nfrom alibi.utils.distributed import ActorPool, RAY_INSTALLED\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "source_code_len": 277,
        "target_code": "import logging\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Dict, List, Optional, Set, Tuple\n\nimport numpy as np\n\nfrom alibi.utils.distributed import RAY_INSTALLED, ActorPool\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "target_code_len": 288,
        "diff_format": "@@ -2,8 +2,9 @@\n import logging\n-import numpy as np\n from collections import defaultdict, namedtuple\n from functools import partial\n-from typing import Callable, Tuple, Set, Dict, List\n-\n-from alibi.utils.distributed import ActorPool, RAY_INSTALLED\n+from typing import Callable, Dict, List, Optional, Set, Tuple\n+\n+import numpy as np\n+\n+from alibi.utils.distributed import RAY_INSTALLED, ActorPool\n from alibi.utils.distributions import kl_bernoulli\n",
        "source_code_with_indent": "import logging\nimport numpy as np\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Tuple, Set, Dict, List\n\nfrom alibi.utils.distributed import ActorPool, RAY_INSTALLED\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Dict, List, Optional, Set, Tuple\n\nimport numpy as np\n\nfrom alibi.utils.distributed import RAY_INSTALLED, ActorPool\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 120,
        "target_code": "\n    def _get_coverage_samples(self, coverage_samples: int, samplers: Optional[List[Callable]] = None) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 130,
        "diff_format": "@@ -177,3 +178,3 @@\n \n-    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n+    def _get_coverage_samples(self, coverage_samples: int, samplers: Optional[List[Callable]] = None) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _get_coverage_samples(self, coverage_samples: int, samplers: Optional[List[Callable]] = None) -> np.ndarray:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 120,
        "target_code": "\n    def _get_coverage_samples(self, coverage_samples: int,  # type: ignore[override]\n                              samplers: List[Callable]) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 169,
        "diff_format": "@@ -837,3 +838,4 @@\n \n-    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n+    def _get_coverage_samples(self, coverage_samples: int,  # type: ignore[override]\n+                              samplers: List[Callable]) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _get_coverage_samples(self, coverage_samples: int,  # type: ignore[override]\n                              samplers: List[Callable]) -> np.ndarray:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_base.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_base.py:613:20 Incompatible variable type [9]: max_anchor_size is declared to have type `int` but is used as type `None`.",
    "message": " max_anchor_size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 613,
    "warning_line": "                    max_anchor_size: int = None, stop_on_first: bool = False, batch_size: int = 100,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nimport numpy as np\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Tuple, Set, Dict, List\n\nfrom alibi.utils.distributed import ActorPool, RAY_INSTALLED\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "source_code_len": 277,
        "target_code": "import logging\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Dict, List, Optional, Set, Tuple\n\nimport numpy as np\n\nfrom alibi.utils.distributed import RAY_INSTALLED, ActorPool\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "target_code_len": 288,
        "diff_format": "@@ -2,8 +2,9 @@\n import logging\n-import numpy as np\n from collections import defaultdict, namedtuple\n from functools import partial\n-from typing import Callable, Tuple, Set, Dict, List\n-\n-from alibi.utils.distributed import ActorPool, RAY_INSTALLED\n+from typing import Callable, Dict, List, Optional, Set, Tuple\n+\n+import numpy as np\n+\n+from alibi.utils.distributed import RAY_INSTALLED, ActorPool\n from alibi.utils.distributions import kl_bernoulli\n",
        "source_code_with_indent": "import logging\nimport numpy as np\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Tuple, Set, Dict, List\n\nfrom alibi.utils.distributed import ActorPool, RAY_INSTALLED\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom collections import defaultdict, namedtuple\nfrom functools import partial\nfrom typing import Callable, Dict, List, Optional, Set, Tuple\n\nimport numpy as np\n\nfrom alibi.utils.distributed import RAY_INSTALLED, ActorPool\nfrom alibi.utils.distributions import kl_bernoulli\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    beam_size: int = 1, epsilon_stop: float = 0.05, min_samples_start: int = 100,\n                    max_anchor_size: int = None, stop_on_first: bool = False, batch_size: int = 100,\n                    coverage_samples: int = 10000, verbose: bool = False, verbose_every: int = 1,\n",
        "source_code_len": 297,
        "target_code": "                    beam_size: int = 1, epsilon_stop: float = 0.05, min_samples_start: int = 100,\n                    max_anchor_size: Optional[int] = None, stop_on_first: bool = False, batch_size: int = 100,\n                    coverage_samples: int = 10000, verbose: bool = False, verbose_every: int = 1,\n",
        "target_code_len": 307,
        "diff_format": "@@ -612,3 +613,3 @@\n                     beam_size: int = 1, epsilon_stop: float = 0.05, min_samples_start: int = 100,\n-                    max_anchor_size: int = None, stop_on_first: bool = False, batch_size: int = 100,\n+                    max_anchor_size: Optional[int] = None, stop_on_first: bool = False, batch_size: int = 100,\n                     coverage_samples: int = 10000, verbose: bool = False, verbose_every: int = 1,\n",
        "source_code_with_indent": "                    beam_size: int = 1, epsilon_stop: float = 0.05, min_samples_start: int = 100,\n                    max_anchor_size: int = None, stop_on_first: bool = False, batch_size: int = 100,\n                    coverage_samples: int = 10000, verbose: bool = False, verbose_every: int = 1,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    beam_size: int = 1, epsilon_stop: float = 0.05, min_samples_start: int = 100,\n                    max_anchor_size: Optional[int] = None, stop_on_first: bool = False, batch_size: int = 100,\n                    coverage_samples: int = 10000, verbose: bool = False, verbose_every: int = 1,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_base.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "alibi/explainers/anchor_base.py:838:59 Incompatible variable type [9]: samplers is declared to have type `List[typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "message": " samplers is declared to have type `List[typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 838,
    "warning_line": "    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 120,
        "target_code": "\n    def _get_coverage_samples(self, coverage_samples: int,  # type: ignore[override]\n                              samplers: List[Callable]) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 169,
        "diff_format": "@@ -837,3 +838,4 @@\n \n-    def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n+    def _get_coverage_samples(self, coverage_samples: int,  # type: ignore[override]\n+                              samplers: List[Callable]) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _get_coverage_samples(self, coverage_samples: int, samplers: List[Callable] = None) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _get_coverage_samples(self, coverage_samples: int,  # type: ignore[override]\n                              samplers: List[Callable]) -> np.ndarray:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_explanation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_explanation.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_explanation.py:21:20 Incompatible variable type [9]: partial_index is declared to have type `int` but is used as type `None`.",
    "message": " partial_index is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 21,
    "warning_line": "    def names(self, partial_index: int = None) -> list:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import numpy as np\nfrom typing import Union\n\n",
        "source_code_len": 45,
        "target_code": "from typing import Optional, Union\n\nimport numpy as np\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,3 +1,4 @@\n+from typing import Optional, Union\n+\n import numpy as np\n-from typing import Union\n \n",
        "source_code_with_indent": "import numpy as np\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional, Union\n\nimport numpy as np\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def names(self, partial_index: int = None) -> list:\n        \"\"\"\n",
        "source_code_len": 69,
        "target_code": "\n    def names(self, partial_index: Optional[int] = None) -> list:\n        \"\"\"\n",
        "target_code_len": 79,
        "diff_format": "@@ -20,3 +21,3 @@\n \n-    def names(self, partial_index: int = None) -> list:\n+    def names(self, partial_index: Optional[int] = None) -> list:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def names(self, partial_index: int = None) -> list:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def names(self, partial_index: Optional[int] = None) -> list:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_explanation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_explanation.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_explanation.py:39:23 Incompatible variable type [9]: partial_index is declared to have type `int` but is used as type `None`.",
    "message": " partial_index is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 39,
    "warning_line": "    def features(self, partial_index: int = None) -> list:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import numpy as np\nfrom typing import Union\n\n",
        "source_code_len": 45,
        "target_code": "from typing import Optional, Union\n\nimport numpy as np\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,3 +1,4 @@\n+from typing import Optional, Union\n+\n import numpy as np\n-from typing import Union\n \n",
        "source_code_with_indent": "import numpy as np\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional, Union\n\nimport numpy as np\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def features(self, partial_index: int = None) -> list:\n        \"\"\"\n",
        "source_code_len": 72,
        "target_code": "\n    def features(self, partial_index: Optional[int] = None) -> list:\n        \"\"\"\n",
        "target_code_len": 82,
        "diff_format": "@@ -38,3 +39,3 @@\n \n-    def features(self, partial_index: int = None) -> list:\n+    def features(self, partial_index: Optional[int] = None) -> list:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def features(self, partial_index: int = None) -> list:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def features(self, partial_index: Optional[int] = None) -> list:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_explanation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_explanation.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_explanation.py:57:24 Incompatible variable type [9]: partial_index is declared to have type `int` but is used as type `None`.",
    "message": " partial_index is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 57,
    "warning_line": "    def precision(self, partial_index: int = None) -> float:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import numpy as np\nfrom typing import Union\n\n",
        "source_code_len": 45,
        "target_code": "from typing import Optional, Union\n\nimport numpy as np\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,3 +1,4 @@\n+from typing import Optional, Union\n+\n import numpy as np\n-from typing import Union\n \n",
        "source_code_with_indent": "import numpy as np\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional, Union\n\nimport numpy as np\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def precision(self, partial_index: int = None) -> float:\n        \"\"\"\n",
        "source_code_len": 74,
        "target_code": "\n    def precision(self, partial_index: Optional[int] = None) -> float:\n        \"\"\"\n",
        "target_code_len": 84,
        "diff_format": "@@ -56,3 +57,3 @@\n \n-    def precision(self, partial_index: int = None) -> float:\n+    def precision(self, partial_index: Optional[int] = None) -> float:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def precision(self, partial_index: int = None) -> float:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def precision(self, partial_index: Optional[int] = None) -> float:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_explanation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_explanation.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_explanation.py:78:23 Incompatible variable type [9]: partial_index is declared to have type `int` but is used as type `None`.",
    "message": " partial_index is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 78,
    "warning_line": "    def coverage(self, partial_index: int = None) -> float:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import numpy as np\nfrom typing import Union\n\n",
        "source_code_len": 45,
        "target_code": "from typing import Optional, Union\n\nimport numpy as np\n\n",
        "target_code_len": 56,
        "diff_format": "@@ -1,3 +1,4 @@\n+from typing import Optional, Union\n+\n import numpy as np\n-from typing import Union\n \n",
        "source_code_with_indent": "import numpy as np\nfrom typing import Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional, Union\n\nimport numpy as np\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def coverage(self, partial_index: int = None) -> float:\n        \"\"\"\n",
        "source_code_len": 73,
        "target_code": "\n    def coverage(self, partial_index: Optional[int] = None) -> float:\n        \"\"\"\n",
        "target_code_len": 83,
        "diff_format": "@@ -77,3 +78,3 @@\n \n-    def coverage(self, partial_index: int = None) -> float:\n+    def coverage(self, partial_index: Optional[int] = None) -> float:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED><DED>def coverage(self, partial_index: int = None) -> float:\n        <IND>",
        "target_code_with_indent": "\n    <DED><DED>def coverage(self, partial_index: Optional[int] = None) -> float:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_explanation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_explanation.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_explanation.py:100:53 Incompatible variable type [9]: partial_index is declared to have type `int` but is used as type `None`.",
    "message": " partial_index is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 100,
    "warning_line": "                 only_same_prediction: bool = False, partial_index: int = None) -> Union[list, np.ndarray]:"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_image.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_image.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_image.py:307:17 Incompatible variable type [9]: segmentation_kwargs is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " segmentation_kwargs is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 307,
    "warning_line": "                 segmentation_kwargs: dict = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\n\nimport numpy as np\n\nfrom functools import partial\nfrom typing import Any, Callable, List, Union, Tuple, Type\n\nfrom alibi.utils.wrappers import ArgmaxTransformer\nfrom alibi.api.interfaces import Explainer, Explanation\nfrom alibi.api.defaults import DEFAULT_META_ANCHOR, DEFAULT_DATA_ANCHOR_IMG\nfrom alibi.exceptions import AlibiPredictorCallException, AlibiPredictorReturnTypeError\nfrom .anchor_base import AnchorBaseBeam\nfrom .anchor_explanation import AnchorExplanation\nfrom skimage.segmentation import felzenszwalb, slic, quickshift\n\n",
        "source_code_len": 552,
        "target_code": "import logging\nfrom functools import partial\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\n\nimport numpy as np\nfrom skimage.segmentation import felzenszwalb, quickshift, slic\n\nfrom alibi.api.defaults import DEFAULT_DATA_ANCHOR_IMG, DEFAULT_META_ANCHOR\nfrom alibi.api.interfaces import Explainer, Explanation\nfrom alibi.exceptions import (AlibiPredictorCallException,\n                              AlibiPredictorReturnTypeError)\nfrom alibi.utils.wrappers import ArgmaxTransformer\n\nfrom .anchor_base import AnchorBaseBeam\nfrom .anchor_explanation import AnchorExplanation\n\n",
        "target_code_len": 600,
        "diff_format": "@@ -2,15 +2,16 @@\n import logging\n+from functools import partial\n+from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\n \n import numpy as np\n-\n-from functools import partial\n-from typing import Any, Callable, List, Union, Tuple, Type\n-\n+from skimage.segmentation import felzenszwalb, quickshift, slic\n+\n+from alibi.api.defaults import DEFAULT_DATA_ANCHOR_IMG, DEFAULT_META_ANCHOR\n+from alibi.api.interfaces import Explainer, Explanation\n+from alibi.exceptions import (AlibiPredictorCallException,\n+                              AlibiPredictorReturnTypeError)\n from alibi.utils.wrappers import ArgmaxTransformer\n-from alibi.api.interfaces import Explainer, Explanation\n-from alibi.api.defaults import DEFAULT_META_ANCHOR, DEFAULT_DATA_ANCHOR_IMG\n-from alibi.exceptions import AlibiPredictorCallException, AlibiPredictorReturnTypeError\n+\n from .anchor_base import AnchorBaseBeam\n from .anchor_explanation import AnchorExplanation\n-from skimage.segmentation import felzenszwalb, slic, quickshift\n \n",
        "source_code_with_indent": "import logging\n\nimport numpy as np\n\nfrom functools import partial\nfrom typing import Any, Callable, List, Union, Tuple, Type\n\nfrom alibi.utils.wrappers import ArgmaxTransformer\nfrom alibi.api.interfaces import Explainer, Explanation\nfrom alibi.api.defaults import DEFAULT_META_ANCHOR, DEFAULT_DATA_ANCHOR_IMG\nfrom alibi.exceptions import AlibiPredictorCallException, AlibiPredictorReturnTypeError\nfrom .anchor_base import AnchorBaseBeam\nfrom .anchor_explanation import AnchorExplanation\nfrom skimage.segmentation import felzenszwalb, slic, quickshift\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom functools import partial\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\n\nimport numpy as np\nfrom skimage.segmentation import felzenszwalb, quickshift, slic\n\nfrom alibi.api.defaults import DEFAULT_DATA_ANCHOR_IMG, DEFAULT_META_ANCHOR\nfrom alibi.api.interfaces import Explainer, Explanation\nfrom alibi.exceptions import (AlibiPredictorCallException,\n                              AlibiPredictorReturnTypeError)\nfrom alibi.utils.wrappers import ArgmaxTransformer\n\nfrom .anchor_base import AnchorBaseBeam\nfrom .anchor_explanation import AnchorExplanation\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 segmentation_fn: Any = 'slic',\n                 segmentation_kwargs: dict = None,\n                 images_background: np.ndarray = None,\n                 seed: int = None) -> None:\n        \"\"\"\n",
        "source_code_len": 210,
        "target_code": "                 segmentation_fn: Any = 'slic',\n                 segmentation_kwargs: Optional[dict] = None,\n                 images_background: Optional[np.ndarray] = None,\n                 seed: Optional[int] = None) -> None:\n        \"\"\"\n",
        "target_code_len": 240,
        "diff_format": "@@ -306,5 +307,5 @@\n                  segmentation_fn: Any = 'slic',\n-                 segmentation_kwargs: dict = None,\n-                 images_background: np.ndarray = None,\n-                 seed: int = None) -> None:\n+                 segmentation_kwargs: Optional[dict] = None,\n+                 images_background: Optional[np.ndarray] = None,\n+                 seed: Optional[int] = None) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 segmentation_fn: Any = 'slic',\n                 segmentation_kwargs: dict = None,\n                 images_background: np.ndarray = None,\n                 seed: int = None) -> None:\n        <IND>",
        "target_code_with_indent": "                 segmentation_fn: Any = 'slic',\n                 segmentation_kwargs: Optional[dict] = None,\n                 images_background: Optional[np.ndarray] = None,\n                 seed: Optional[int] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_image.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_image.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_image.py:309:17 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 309,
    "warning_line": "                 seed: int = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\n\nimport numpy as np\n\nfrom functools import partial\nfrom typing import Any, Callable, List, Union, Tuple, Type\n\nfrom alibi.utils.wrappers import ArgmaxTransformer\nfrom alibi.api.interfaces import Explainer, Explanation\nfrom alibi.api.defaults import DEFAULT_META_ANCHOR, DEFAULT_DATA_ANCHOR_IMG\nfrom alibi.exceptions import AlibiPredictorCallException, AlibiPredictorReturnTypeError\nfrom .anchor_base import AnchorBaseBeam\nfrom .anchor_explanation import AnchorExplanation\nfrom skimage.segmentation import felzenszwalb, slic, quickshift\n\n",
        "source_code_len": 552,
        "target_code": "import logging\nfrom functools import partial\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\n\nimport numpy as np\nfrom skimage.segmentation import felzenszwalb, quickshift, slic\n\nfrom alibi.api.defaults import DEFAULT_DATA_ANCHOR_IMG, DEFAULT_META_ANCHOR\nfrom alibi.api.interfaces import Explainer, Explanation\nfrom alibi.exceptions import (AlibiPredictorCallException,\n                              AlibiPredictorReturnTypeError)\nfrom alibi.utils.wrappers import ArgmaxTransformer\n\nfrom .anchor_base import AnchorBaseBeam\nfrom .anchor_explanation import AnchorExplanation\n\n",
        "target_code_len": 600,
        "diff_format": "@@ -2,15 +2,16 @@\n import logging\n+from functools import partial\n+from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\n \n import numpy as np\n-\n-from functools import partial\n-from typing import Any, Callable, List, Union, Tuple, Type\n-\n+from skimage.segmentation import felzenszwalb, quickshift, slic\n+\n+from alibi.api.defaults import DEFAULT_DATA_ANCHOR_IMG, DEFAULT_META_ANCHOR\n+from alibi.api.interfaces import Explainer, Explanation\n+from alibi.exceptions import (AlibiPredictorCallException,\n+                              AlibiPredictorReturnTypeError)\n from alibi.utils.wrappers import ArgmaxTransformer\n-from alibi.api.interfaces import Explainer, Explanation\n-from alibi.api.defaults import DEFAULT_META_ANCHOR, DEFAULT_DATA_ANCHOR_IMG\n-from alibi.exceptions import AlibiPredictorCallException, AlibiPredictorReturnTypeError\n+\n from .anchor_base import AnchorBaseBeam\n from .anchor_explanation import AnchorExplanation\n-from skimage.segmentation import felzenszwalb, slic, quickshift\n \n",
        "source_code_with_indent": "import logging\n\nimport numpy as np\n\nfrom functools import partial\nfrom typing import Any, Callable, List, Union, Tuple, Type\n\nfrom alibi.utils.wrappers import ArgmaxTransformer\nfrom alibi.api.interfaces import Explainer, Explanation\nfrom alibi.api.defaults import DEFAULT_META_ANCHOR, DEFAULT_DATA_ANCHOR_IMG\nfrom alibi.exceptions import AlibiPredictorCallException, AlibiPredictorReturnTypeError\nfrom .anchor_base import AnchorBaseBeam\nfrom .anchor_explanation import AnchorExplanation\nfrom skimage.segmentation import felzenszwalb, slic, quickshift\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom functools import partial\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\n\nimport numpy as np\nfrom skimage.segmentation import felzenszwalb, quickshift, slic\n\nfrom alibi.api.defaults import DEFAULT_DATA_ANCHOR_IMG, DEFAULT_META_ANCHOR\nfrom alibi.api.interfaces import Explainer, Explanation\nfrom alibi.exceptions import (AlibiPredictorCallException,\n                              AlibiPredictorReturnTypeError)\nfrom alibi.utils.wrappers import ArgmaxTransformer\n\nfrom .anchor_base import AnchorBaseBeam\nfrom .anchor_explanation import AnchorExplanation\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 segmentation_fn: Any = 'slic',\n                 segmentation_kwargs: dict = None,\n                 images_background: np.ndarray = None,\n                 seed: int = None) -> None:\n        \"\"\"\n",
        "source_code_len": 210,
        "target_code": "                 segmentation_fn: Any = 'slic',\n                 segmentation_kwargs: Optional[dict] = None,\n                 images_background: Optional[np.ndarray] = None,\n                 seed: Optional[int] = None) -> None:\n        \"\"\"\n",
        "target_code_len": 240,
        "diff_format": "@@ -306,5 +307,5 @@\n                  segmentation_fn: Any = 'slic',\n-                 segmentation_kwargs: dict = None,\n-                 images_background: np.ndarray = None,\n-                 seed: int = None) -> None:\n+                 segmentation_kwargs: Optional[dict] = None,\n+                 images_background: Optional[np.ndarray] = None,\n+                 seed: Optional[int] = None) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 segmentation_fn: Any = 'slic',\n                 segmentation_kwargs: dict = None,\n                 images_background: np.ndarray = None,\n                 seed: int = None) -> None:\n        <IND>",
        "target_code_with_indent": "                 segmentation_fn: Any = 'slic',\n                 segmentation_kwargs: Optional[dict] = None,\n                 images_background: Optional[np.ndarray] = None,\n                 seed: Optional[int] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_image.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_image.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_image.py:444:16 Incompatible variable type [9]: max_anchor_size is declared to have type `int` but is used as type `None`.",
    "message": " max_anchor_size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 444,
    "warning_line": "                max_anchor_size: int = None,"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_tabular.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_tabular.py:25:17 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 25,
    "warning_line": "                 seed: int = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 categorical_features: List[int], feature_names: list, feature_values: dict, n_covered_ex: int = 10,\n                 seed: int = None) -> None:\n        \"\"\"\n",
        "source_code_len": 173,
        "target_code": "                 categorical_features: List[int], feature_names: list, feature_values: dict, n_covered_ex: int = 10,\n                 seed: Optional[int] = None) -> None:\n        \"\"\"\n",
        "target_code_len": 183,
        "diff_format": "@@ -24,3 +30,3 @@\n                  categorical_features: List[int], feature_names: list, feature_values: dict, n_covered_ex: int = 10,\n-                 seed: int = None) -> None:\n+                 seed: Optional[int] = None) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 categorical_features: List[int], feature_names: list, feature_values: dict, n_covered_ex: int = 10,\n                 seed: int = None) -> None:\n        <IND>",
        "target_code_with_indent": "                 categorical_features: List[int], feature_names: list, feature_values: dict, n_covered_ex: int = 10,\n                 seed: Optional[int] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_tabular.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_tabular.py:50:8 Incompatible attribute type [8]: Attribute `instance_label` declared in class `TabularSampler` has type `int` but is used as type `None`.",
    "message": " Attribute `instance_label` declared in class `TabularSampler` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 50,
    "warning_line": "        self.instance_label = None  # type: int"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_tabular.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_tabular.py:666:17 Incompatible variable type [9]: categorical_names is declared to have type `Dict[int, List[str]]` but is used as type `None`.",
    "message": " categorical_names is declared to have type `Dict[int, List[str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 666,
    "warning_line": "                 categorical_names: Dict[int, List[str]] = None,"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_tabular.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_tabular.py:669:17 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 669,
    "warning_line": "                 seed: int = None) -> None:"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_tabular.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "alibi/explainers/anchor_tabular.py:730:4 Inconsistent override [14]: `alibi.explainers.anchor_tabular.AnchorTabular.fit` overrides method defined in `FitMixin` inconsistently. Could not find parameter `X` in overriding signature.",
    "message": " `alibi.explainers.anchor_tabular.AnchorTabular.fit` overrides method defined in `FitMixin` inconsistently. Could not find parameter `X` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 730,
    "warning_line": "    def fit(self, train_data: np.ndarray, disc_perc: Tuple[Union[int, float], ...] = (25, 50, 75),  # type:ignore",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    def fit(self, train_data: np.ndarray, disc_perc: Tuple[Union[int, float], ...] = (25, 50, 75),  # type:ignore\n            **kwargs) -> \"AnchorTabular\":\n",
        "source_code_len": 157,
        "target_code": "\n    def fit(self,  # type: ignore[override]\n            train_data: np.ndarray,\n            disc_perc: Tuple[Union[int, float], ...] = (25, 50, 75),\n            **kwargs) -> \"AnchorTabular\":\n",
        "target_code_len": 192,
        "diff_format": "@@ -729,3 +736,5 @@\n \n-    def fit(self, train_data: np.ndarray, disc_perc: Tuple[Union[int, float], ...] = (25, 50, 75),  # type:ignore\n+    def fit(self,  # type: ignore[override]\n+            train_data: np.ndarray,\n+            disc_perc: Tuple[Union[int, float], ...] = (25, 50, 75),\n             **kwargs) -> \"AnchorTabular\":\n",
        "source_code_with_indent": "\n    <DED>def fit(self, train_data: np.ndarray, disc_perc: Tuple[Union[int, float], ...] = (25, 50, 75),  # type:ignore\n            **kwargs) -> \"AnchorTabular\":\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def fit(self,  # type: ignore[override]\n            train_data: np.ndarray,\n            disc_perc: Tuple[Union[int, float], ...] = (25, 50, 75),\n            **kwargs) -> \"AnchorTabular\":\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_tabular.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_tabular.py:792:16 Incompatible variable type [9]: max_anchor_size is declared to have type `int` but is used as type `None`.",
    "message": " max_anchor_size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 792,
    "warning_line": "                max_anchor_size: int = None,"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_tabular.py",
    "file_hunks_size": 24,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_tabular.py:1011:38 Call error [29]: `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "message": " `Optional[typing.Callable[..., typing.Any]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 1011,
    "warning_line": "            ord_predictor = lambda x: predictor(ord_to_ohe(x, self.cat_vars_ord)[0])  # noqa: E731",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @predictor.setter\n    def predictor(self, predictor: Optional[Callable]) -> None:\n        # if input is one-hot encoded\n        if self.ohe:\n            # this predictor expects ordinal/labels encoded categorical variables\n            ord_predictor = lambda x: predictor(ord_to_ohe(x, self.cat_vars_ord)[0])  # noqa: E731\n            self._predictor = self._transform_predictor(ord_predictor) if predictor else None\n\n            # this predictor expects one-hot encoded categorical variable\n            self._ohe_predictor = self._transform_ohe_predictor(predictor) if predictor else None\n\n        else:\n            # set the predictor\n            self._predictor = self._transform_predictor(predictor) if predictor else None\n\n",
        "source_code_len": 731,
        "target_code": "    @predictor.setter\n    def predictor(self, predictor: Optional[Callable]) -> None:  # Optional here because in saving.py we set it to None\n        # deal with the case from saving.py first\n        # TODO: how do we prevent users from passing predictor=None? Probably beartype.\n        if predictor is None:\n            self._predictor = None\n            if self.ohe:\n                self._ohe_predictor = None\n        else:\n            # if input is one-hot encoded\n            if self.ohe:\n                # this predictor expects ordinal/labels encoded categorical variables\n                ord_predictor = lambda x: predictor(ord_to_ohe(x, self.cat_vars_ord)[0])  # noqa: E731\n                self._predictor = self._transform_predictor(ord_predictor)\n\n                # this predictor expects one-hot encoded categorical variable\n                self._ohe_predictor = self._transform_ohe_predictor(predictor)\n\n            else:\n                # set the predictor\n                self._predictor = self._transform_predictor(predictor)\n\n",
        "target_code_len": 1043,
        "diff_format": "@@ -1006,15 +1015,22 @@\n     @predictor.setter\n-    def predictor(self, predictor: Optional[Callable]) -> None:\n-        # if input is one-hot encoded\n-        if self.ohe:\n-            # this predictor expects ordinal/labels encoded categorical variables\n-            ord_predictor = lambda x: predictor(ord_to_ohe(x, self.cat_vars_ord)[0])  # noqa: E731\n-            self._predictor = self._transform_predictor(ord_predictor) if predictor else None\n-\n-            # this predictor expects one-hot encoded categorical variable\n-            self._ohe_predictor = self._transform_ohe_predictor(predictor) if predictor else None\n-\n+    def predictor(self, predictor: Optional[Callable]) -> None:  # Optional here because in saving.py we set it to None\n+        # deal with the case from saving.py first\n+        # TODO: how do we prevent users from passing predictor=None? Probably beartype.\n+        if predictor is None:\n+            self._predictor = None\n+            if self.ohe:\n+                self._ohe_predictor = None\n         else:\n-            # set the predictor\n-            self._predictor = self._transform_predictor(predictor) if predictor else None\n+            # if input is one-hot encoded\n+            if self.ohe:\n+                # this predictor expects ordinal/labels encoded categorical variables\n+                ord_predictor = lambda x: predictor(ord_to_ohe(x, self.cat_vars_ord)[0])  # noqa: E731\n+                self._predictor = self._transform_predictor(ord_predictor)\n+\n+                # this predictor expects one-hot encoded categorical variable\n+                self._ohe_predictor = self._transform_ohe_predictor(predictor)\n+\n+            else:\n+                # set the predictor\n+                self._predictor = self._transform_predictor(predictor)\n \n",
        "source_code_with_indent": "    <DED>@predictor.setter\n    def predictor(self, predictor: Optional[Callable]) -> None:\n        # if input is one-hot encoded\n        <IND>if self.ohe:\n            # this predictor expects ordinal/labels encoded categorical variables\n            <IND>ord_predictor = lambda x: predictor(ord_to_ohe(x, self.cat_vars_ord)[0])  # noqa: E731\n            self._predictor = self._transform_predictor(ord_predictor) if predictor else None\n\n            # this predictor expects one-hot encoded categorical variable\n            self._ohe_predictor = self._transform_ohe_predictor(predictor) if predictor else None\n\n        <DED>else:\n            # set the predictor\n            <IND>self._predictor = self._transform_predictor(predictor) if predictor else None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@predictor.setter\n    def predictor(self, predictor: Optional[Callable]) -> None:  # Optional here because in saving.py we set it to None\n        # deal with the case from saving.py first\n        # TODO: how do we prevent users from passing predictor=None? Probably beartype.\n        <IND>if predictor is None:\n            <IND>self._predictor = None\n            if self.ohe:\n                <IND>self._ohe_predictor = None\n        <DED><DED>else:\n            # if input is one-hot encoded\n            <IND>if self.ohe:\n                # this predictor expects ordinal/labels encoded categorical variables\n                <IND>ord_predictor = lambda x: predictor(ord_to_ohe(x, self.cat_vars_ord)[0])  # noqa: E731\n                self._predictor = self._transform_predictor(ord_predictor)\n\n                # this predictor expects one-hot encoded categorical variable\n                self._ohe_predictor = self._transform_ohe_predictor(predictor)\n\n            <DED>else:\n                # set the predictor\n                <IND>self._predictor = self._transform_predictor(predictor)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_tabular.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_tabular.py:1059:70 Incompatible variable type [9]: categorical_names is declared to have type `Dict[int, List[str]]` but is used as type `None`.",
    "message": " categorical_names is declared to have type `Dict[int, List[str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1059,
    "warning_line": "    def __init__(self, predictor: Callable, feature_names: List[str], categorical_names: Dict[int, List[str]] = None,"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_tabular.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_tabular.py:1060:74 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1060,
    "warning_line": "                 dtype: Type[np.generic] = np.float32, ohe: bool = False, seed: int = None) -> None:"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/anchor_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/anchor_tabular.py",
    "file_hunks_size": 24,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/anchor_tabular.py:1138:16 Incompatible variable type [9]: max_anchor_size is declared to have type `int` but is used as type `None`.",
    "message": " max_anchor_size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1138,
    "warning_line": "                max_anchor_size: int = None,"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/backends/cfrl_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/backends/cfrl_tabular.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/backends/cfrl_tabular.py:428:24 Incompatible variable type [9]: feature_types is declared to have type `Dict[str, typing.Type[typing.Any]]` but is used as type `None`.",
    "message": " feature_types is declared to have type `Dict[str, typing.Type[typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 428,
    "warning_line": "                        feature_types: Dict[str, type] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                        category_map: Dict[int, List[str]],\n                        feature_types: Dict[str, type] = None\n                        ) -> Tuple[Callable[[np.ndarray], np.ndarray], Callable[[np.ndarray], np.ndarray]]:\n",
        "source_code_len": 230,
        "target_code": "                        category_map: Dict[int, List[str]],\n                        feature_types: Optional[Dict[str, type]] = None\n                        ) -> Tuple[Callable[[np.ndarray], np.ndarray], Callable[[np.ndarray], np.ndarray]]:\n",
        "target_code_len": 240,
        "diff_format": "@@ -427,3 +427,3 @@\n                         category_map: Dict[int, List[str]],\n-                        feature_types: Dict[str, type] = None\n+                        feature_types: Optional[Dict[str, type]] = None\n                         ) -> Tuple[Callable[[np.ndarray], np.ndarray], Callable[[np.ndarray], np.ndarray]]:\n",
        "source_code_with_indent": "                        category_map: Dict[int, List[str]],\n                        feature_types: Dict[str, type] = None\n                        ) -> Tuple[Callable[[np.ndarray], np.ndarray], Callable[[np.ndarray], np.ndarray]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                        category_map: Dict[int, List[str]],\n                        feature_types: Optional[Dict[str, type]] = None\n                        ) -> Tuple[Callable[[np.ndarray], np.ndarray], Callable[[np.ndarray], np.ndarray]]:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        for i, fn in enumerate(feature_names):\n            type = feature_types[fn] if fn in feature_types else float\n            np_X_inv[:, i] = np_X_inv[:, i].astype(type)\n",
        "source_code_len": 175,
        "target_code": "        for i, fn in enumerate(feature_names):\n            type = feature_types[fn] if fn in feature_types else float  # type: ignore[index,operator]\n            np_X_inv[:, i] = np_X_inv[:, i].astype(type)\n",
        "target_code_len": 207,
        "diff_format": "@@ -508,3 +508,3 @@\n         for i, fn in enumerate(feature_names):\n-            type = feature_types[fn] if fn in feature_types else float\n+            type = feature_types[fn] if fn in feature_types else float  # type: ignore[index,operator]\n             np_X_inv[:, i] = np_X_inv[:, i].astype(type)\n",
        "source_code_with_indent": "        for i, fn in enumerate(feature_names):\n            <IND>type = feature_types[fn] if fn in feature_types else float\n            np_X_inv[:, i] = np_X_inv[:, i].astype(type)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        for i, fn in enumerate(feature_names):\n            <IND>type = feature_types[fn] if fn in feature_types else float  # type: ignore[index,operator]\n            np_X_inv[:, i] = np_X_inv[:, i].astype(type)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/backends/cfrl_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/backends/cfrl_tabular.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/backends/cfrl_tabular.py:560:37 Incompatible variable type [9]: ranges is declared to have type `Dict[str, List[float]]` but is used as type `None`.",
    "message": " ranges is declared to have type `Dict[str, List[float]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 560,
    "warning_line": "                                     ranges: Dict[str, List[float]] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                     stats: Dict[int, Dict[str, float]],\n                                     ranges: Dict[str, List[float]] = None,\n                                     immutable_features: List[str] = None,\n                                     diverse=False) -> List[np.ndarray]:\n",
        "source_code_len": 297,
        "target_code": "                                     stats: Dict[int, Dict[str, float]],\n                                     ranges: Optional[Dict[str, List[float]]] = None,\n                                     immutable_features: Optional[List[str]] = None,\n                                     diverse=False) -> List[np.ndarray]:\n",
        "target_code_len": 317,
        "diff_format": "@@ -559,4 +559,4 @@\n                                      stats: Dict[int, Dict[str, float]],\n-                                     ranges: Dict[str, List[float]] = None,\n-                                     immutable_features: List[str] = None,\n+                                     ranges: Optional[Dict[str, List[float]]] = None,\n+                                     immutable_features: Optional[List[str]] = None,\n                                      diverse=False) -> List[np.ndarray]:\n",
        "source_code_with_indent": "                                     stats: Dict[int, Dict[str, float]],\n                                     ranges: Dict[str, List[float]] = None,\n                                     immutable_features: List[str] = None,\n                                     diverse=False) -> List[np.ndarray]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                     stats: Dict[int, Dict[str, float]],\n                                     ranges: Optional[Dict[str, List[float]]] = None,\n                                     immutable_features: Optional[List[str]] = None,\n                                     diverse=False) -> List[np.ndarray]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/backends/cfrl_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/backends/cfrl_tabular.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/backends/cfrl_tabular.py:561:37 Incompatible variable type [9]: immutable_features is declared to have type `List[str]` but is used as type `None`.",
    "message": " immutable_features is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 561,
    "warning_line": "                                     immutable_features: List[str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                     stats: Dict[int, Dict[str, float]],\n                                     ranges: Dict[str, List[float]] = None,\n                                     immutable_features: List[str] = None,\n                                     diverse=False) -> List[np.ndarray]:\n",
        "source_code_len": 297,
        "target_code": "                                     stats: Dict[int, Dict[str, float]],\n                                     ranges: Optional[Dict[str, List[float]]] = None,\n                                     immutable_features: Optional[List[str]] = None,\n                                     diverse=False) -> List[np.ndarray]:\n",
        "target_code_len": 317,
        "diff_format": "@@ -559,4 +559,4 @@\n                                      stats: Dict[int, Dict[str, float]],\n-                                     ranges: Dict[str, List[float]] = None,\n-                                     immutable_features: List[str] = None,\n+                                     ranges: Optional[Dict[str, List[float]]] = None,\n+                                     immutable_features: Optional[List[str]] = None,\n                                      diverse=False) -> List[np.ndarray]:\n",
        "source_code_with_indent": "                                     stats: Dict[int, Dict[str, float]],\n                                     ranges: Dict[str, List[float]] = None,\n                                     immutable_features: List[str] = None,\n                                     diverse=False) -> List[np.ndarray]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                     stats: Dict[int, Dict[str, float]],\n                                     ranges: Optional[Dict[str, List[float]]] = None,\n                                     immutable_features: Optional[List[str]] = None,\n                                     diverse=False) -> List[np.ndarray]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/backends/cfrl_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/backends/cfrl_tabular.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/backends/cfrl_tabular.py:677:39 Incompatible variable type [9]: immutable_features is declared to have type `List[str]` but is used as type `None`.",
    "message": " immutable_features is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 677,
    "warning_line": "                                       immutable_features: List[str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
        "source_code_len": 227,
        "target_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: Optional[List[str]] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
        "target_code_len": 237,
        "diff_format": "@@ -676,3 +676,3 @@\n                                        category_map: Dict[int, List[str]],\n-                                       immutable_features: List[str] = None,\n+                                       immutable_features: Optional[List[str]] = None,\n                                        diverse=False) -> List[np.ndarray]:\n",
        "source_code_with_indent": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: Optional[List[str]] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/backends/cfrl_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/backends/cfrl_tabular.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/backends/cfrl_tabular.py:756:27 Incompatible variable type [9]: ranges is declared to have type `Dict[str, List[float]]` but is used as type `None`.",
    "message": " ranges is declared to have type `Dict[str, List[float]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 756,
    "warning_line": "                           ranges: Dict[str, List[float]] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                           stats: Dict[int, Dict[str, float]],\n                           ranges: Dict[str, List[float]] = None,\n                           immutable_features: List[str] = None,\n                           diverse=False) -> np.ndarray:\n",
        "source_code_len": 251,
        "target_code": "                           stats: Dict[int, Dict[str, float]],\n                           ranges: Optional[Dict[str, List[float]]] = None,\n                           immutable_features: Optional[List[str]] = None,\n                           diverse=False) -> np.ndarray:\n",
        "target_code_len": 271,
        "diff_format": "@@ -755,4 +755,4 @@\n                            stats: Dict[int, Dict[str, float]],\n-                           ranges: Dict[str, List[float]] = None,\n-                           immutable_features: List[str] = None,\n+                           ranges: Optional[Dict[str, List[float]]] = None,\n+                           immutable_features: Optional[List[str]] = None,\n                            diverse=False) -> np.ndarray:\n",
        "source_code_with_indent": "                           stats: Dict[int, Dict[str, float]],\n                           ranges: Dict[str, List[float]] = None,\n                           immutable_features: List[str] = None,\n                           diverse=False) -> np.ndarray:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                           stats: Dict[int, Dict[str, float]],\n                           ranges: Optional[Dict[str, List[float]]] = None,\n                           immutable_features: Optional[List[str]] = None,\n                           diverse=False) -> np.ndarray:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/backends/cfrl_tabular.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/backends/cfrl_tabular.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/backends/cfrl_tabular.py:757:27 Incompatible variable type [9]: immutable_features is declared to have type `List[str]` but is used as type `None`.",
    "message": " immutable_features is declared to have type `List[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 757,
    "warning_line": "                           immutable_features: List[str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                           stats: Dict[int, Dict[str, float]],\n                           ranges: Dict[str, List[float]] = None,\n                           immutable_features: List[str] = None,\n                           diverse=False) -> np.ndarray:\n",
        "source_code_len": 251,
        "target_code": "                           stats: Dict[int, Dict[str, float]],\n                           ranges: Optional[Dict[str, List[float]]] = None,\n                           immutable_features: Optional[List[str]] = None,\n                           diverse=False) -> np.ndarray:\n",
        "target_code_len": 271,
        "diff_format": "@@ -755,4 +755,4 @@\n                            stats: Dict[int, Dict[str, float]],\n-                           ranges: Dict[str, List[float]] = None,\n-                           immutable_features: List[str] = None,\n+                           ranges: Optional[Dict[str, List[float]]] = None,\n+                           immutable_features: Optional[List[str]] = None,\n                            diverse=False) -> np.ndarray:\n",
        "source_code_with_indent": "                           stats: Dict[int, Dict[str, float]],\n                           ranges: Dict[str, List[float]] = None,\n                           immutable_features: List[str] = None,\n                           diverse=False) -> np.ndarray:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                           stats: Dict[int, Dict[str, float]],\n                           ranges: Optional[Dict[str, List[float]]] = None,\n                           immutable_features: Optional[List[str]] = None,\n                           diverse=False) -> np.ndarray:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/cem.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/cem.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/cem.py:32:17 Incompatible variable type [9]: write_dir is declared to have type `str` but is used as type `None`.",
    "message": " write_dir is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "                 write_dir: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.api.defaults import DEFAULT_META_CEM, DEFAULT_DATA_CEM\nimport copy\nimport logging\nimport numpy as np\nimport sys\nimport tensorflow.compat.v1 as tf\nfrom typing import Any, Callable, Tuple, Union\n\n",
        "source_code_len": 271,
        "target_code": "import copy\nimport logging\nimport sys\nfrom typing import Any, Callable, Optional, Tuple, Union\n\nimport numpy as np\nimport tensorflow.compat.v1 as tf\n\nfrom alibi.api.defaults import DEFAULT_DATA_CEM, DEFAULT_META_CEM\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\n\n",
        "target_code_len": 283,
        "diff_format": "@@ -1,9 +1,11 @@\n-from alibi.api.interfaces import Explainer, Explanation, FitMixin\n-from alibi.api.defaults import DEFAULT_META_CEM, DEFAULT_DATA_CEM\n import copy\n import logging\n+import sys\n+from typing import Any, Callable, Optional, Tuple, Union\n+\n import numpy as np\n-import sys\n import tensorflow.compat.v1 as tf\n-from typing import Any, Callable, Tuple, Union\n+\n+from alibi.api.defaults import DEFAULT_DATA_CEM, DEFAULT_META_CEM\n+from alibi.api.interfaces import Explainer, Explanation, FitMixin\n \n",
        "source_code_with_indent": "from alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.api.defaults import DEFAULT_META_CEM, DEFAULT_DATA_CEM\nimport copy\nimport logging\nimport numpy as np\nimport sys\nimport tensorflow.compat.v1 as tf\nfrom typing import Any, Callable, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import copy\nimport logging\nimport sys\nfrom typing import Any, Callable, Optional, Tuple, Union\n\nimport numpy as np\nimport tensorflow.compat.v1 as tf\n\nfrom alibi.api.defaults import DEFAULT_DATA_CEM, DEFAULT_META_CEM\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 update_num_grad: int = 1,\n                 no_info_val: Union[float, np.ndarray] = None,\n                 write_dir: str = None,\n                 sess: tf.Session = None) -> None:\n        \"\"\"\n",
        "source_code_len": 209,
        "target_code": "                 update_num_grad: int = 1,\n                 no_info_val: Optional[Union[float, np.ndarray]] = None,\n                 write_dir: Optional[str] = None,\n                 sess: Optional[tf.Session] = None) -> None:\n        \"\"\"\n",
        "target_code_len": 239,
        "diff_format": "@@ -30,5 +32,5 @@\n                  update_num_grad: int = 1,\n-                 no_info_val: Union[float, np.ndarray] = None,\n-                 write_dir: str = None,\n-                 sess: tf.Session = None) -> None:\n+                 no_info_val: Optional[Union[float, np.ndarray]] = None,\n+                 write_dir: Optional[str] = None,\n+                 sess: Optional[tf.Session] = None) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 update_num_grad: int = 1,\n                 no_info_val: Union[float, np.ndarray] = None,\n                 write_dir: str = None,\n                 sess: tf.Session = None) -> None:\n        <IND>",
        "target_code_with_indent": "                 update_num_grad: int = 1,\n                 no_info_val: Optional[Union[float, np.ndarray]] = None,\n                 write_dir: Optional[str] = None,\n                 sess: Optional[tf.Session] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/cfproto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/cfproto.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/cfproto.py:44:17 Incompatible variable type [9]: cat_vars is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " cat_vars is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "                 cat_vars: dict = None,"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/cfproto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/cfproto.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/cfproto.py:54:17 Incompatible variable type [9]: write_dir is declared to have type `str` but is used as type `None`.",
    "message": " write_dir is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 54,
    "warning_line": "                 write_dir: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nimport numpy as np\nimport sys\nimport tensorflow.compat.v1 as tf\nfrom typing import Any, Callable, Dict, Tuple, Union, Sequence\n\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.api.defaults import DEFAULT_META_CFP, DEFAULT_DATA_CFP\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, mvdm, multidim_scaling\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import ohe_to_ord_shape, ord_to_num, num_to_ord, ohe_to_ord, ord_to_ohe\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "source_code_len": 642,
        "target_code": "import logging\nimport sys\nfrom typing import Any, Callable, Dict, Optional, Sequence, Tuple, Union\n\nimport numpy as np\nimport tensorflow.compat.v1 as tf\n\nfrom alibi.api.defaults import DEFAULT_DATA_CFP, DEFAULT_META_CFP\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, multidim_scaling, mvdm\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import (num_to_ord, ohe_to_ord, ohe_to_ord_shape,\n                                 ord_to_num, ord_to_ohe)\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "target_code_len": 688,
        "diff_format": "@@ -2,14 +2,16 @@\n import logging\n+import sys\n+from typing import Any, Callable, Dict, Optional, Sequence, Tuple, Union\n+\n import numpy as np\n-import sys\n import tensorflow.compat.v1 as tf\n-from typing import Any, Callable, Dict, Tuple, Union, Sequence\n-\n+\n+from alibi.api.defaults import DEFAULT_DATA_CFP, DEFAULT_META_CFP\n from alibi.api.interfaces import Explainer, Explanation, FitMixin\n-from alibi.api.defaults import DEFAULT_META_CFP, DEFAULT_DATA_CFP\n from alibi.confidence import TrustScore\n from alibi.utils.discretizer import Discretizer\n-from alibi.utils.distance import abdm, mvdm, multidim_scaling\n+from alibi.utils.distance import abdm, multidim_scaling, mvdm\n from alibi.utils.gradients import perturb\n-from alibi.utils.mapping import ohe_to_ord_shape, ord_to_num, num_to_ord, ohe_to_ord, ord_to_ohe\n+from alibi.utils.mapping import (num_to_ord, ohe_to_ord, ohe_to_ord_shape,\n+                                 ord_to_num, ord_to_ohe)\n from alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "source_code_with_indent": "import logging\nimport numpy as np\nimport sys\nimport tensorflow.compat.v1 as tf\nfrom typing import Any, Callable, Dict, Tuple, Union, Sequence\n\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.api.defaults import DEFAULT_META_CFP, DEFAULT_DATA_CFP\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, mvdm, multidim_scaling\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import ohe_to_ord_shape, ord_to_num, num_to_ord, ohe_to_ord, ord_to_ohe\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nimport sys\nfrom typing import Any, Callable, Dict, Optional, Sequence, Tuple, Union\n\nimport numpy as np\nimport tensorflow.compat.v1 as tf\n\nfrom alibi.api.defaults import DEFAULT_DATA_CFP, DEFAULT_META_CFP\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, multidim_scaling, mvdm\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import (num_to_ord, ohe_to_ord, ohe_to_ord_shape,\n                                 ord_to_num, ord_to_ohe)\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 update_num_grad: int = 1,\n                 write_dir: str = None,\n                 sess: tf.Session = None) -> None:\n        \"\"\"\n",
        "source_code_len": 146,
        "target_code": "                 update_num_grad: int = 1,\n                 write_dir: Optional[str] = None,\n                 sess: Optional[tf.Session] = None) -> None:\n        \"\"\"\n",
        "target_code_len": 166,
        "diff_format": "@@ -53,4 +55,4 @@\n                  update_num_grad: int = 1,\n-                 write_dir: str = None,\n-                 sess: tf.Session = None) -> None:\n+                 write_dir: Optional[str] = None,\n+                 sess: Optional[tf.Session] = None) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 update_num_grad: int = 1,\n                 write_dir: str = None,\n                 sess: tf.Session = None) -> None:\n        <IND>",
        "target_code_with_indent": "                 update_num_grad: int = 1,\n                 write_dir: Optional[str] = None,\n                 sess: Optional[tf.Session] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/cfproto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/cfproto.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/cfproto.py:657:42 Incompatible variable type [9]: trustscore_kwargs is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " trustscore_kwargs is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 657,
    "warning_line": "    def fit(self, train_data: np.ndarray, trustscore_kwargs: dict = None, d_type: str = 'abdm',"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/cfproto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/cfproto.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/cfproto.py:658:12 Incompatible variable type [9]: w is declared to have type `float` but is used as type `None`.",
    "message": " w is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 658,
    "warning_line": "            w: float = None, disc_perc: Sequence[Union[int, float]] = (25, 50, 75), standardize_cat_vars: bool = False,"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/cfproto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/cfproto.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/cfproto.py:829:22 Incompatible variable type [9]: cat_vars_ord is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " cat_vars_ord is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 829,
    "warning_line": "                      cat_vars_ord: dict = None) -> np.ndarray:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def get_gradients(self, X: np.ndarray, Y: np.ndarray, grads_shape: tuple,\n                      cat_vars_ord: dict = None) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 154,
        "target_code": "    def get_gradients(self, X: np.ndarray, Y: np.ndarray, grads_shape: tuple,\n                      cat_vars_ord: dict) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 147,
        "diff_format": "@@ -828,3 +841,3 @@\n     def get_gradients(self, X: np.ndarray, Y: np.ndarray, grads_shape: tuple,\n-                      cat_vars_ord: dict = None) -> np.ndarray:\n+                      cat_vars_ord: dict) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>def get_gradients(self, X: np.ndarray, Y: np.ndarray, grads_shape: tuple,\n                      cat_vars_ord: dict = None) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "    <DED>def get_gradients(self, X: np.ndarray, Y: np.ndarray, grads_shape: tuple,\n                      cat_vars_ord: dict) -> np.ndarray:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/cfproto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/cfproto.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/cfproto.py:936:51 Incompatible variable type [9]: target_class is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "message": " target_class is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 936,
    "warning_line": "    def attack(self, X: np.ndarray, Y: np.ndarray, target_class: list = None, k: int = None, k_type: str = 'mean',"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/cfproto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/cfproto.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/cfproto.py:936:78 Incompatible variable type [9]: k is declared to have type `int` but is used as type `None`.",
    "message": " k is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 936,
    "warning_line": "    def attack(self, X: np.ndarray, Y: np.ndarray, target_class: list = None, k: int = None, k_type: str = 'mean',"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/cfproto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/cfproto.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/cfproto.py:1259:59 Incompatible variable type [9]: target_class is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "message": " target_class is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1259,
    "warning_line": "    def explain(self, X: np.ndarray, Y: np.ndarray = None, target_class: list = None, k: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nimport numpy as np\nimport sys\nimport tensorflow.compat.v1 as tf\nfrom typing import Any, Callable, Dict, Tuple, Union, Sequence\n\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.api.defaults import DEFAULT_META_CFP, DEFAULT_DATA_CFP\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, mvdm, multidim_scaling\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import ohe_to_ord_shape, ord_to_num, num_to_ord, ohe_to_ord, ord_to_ohe\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "source_code_len": 642,
        "target_code": "import logging\nimport sys\nfrom typing import Any, Callable, Dict, Optional, Sequence, Tuple, Union\n\nimport numpy as np\nimport tensorflow.compat.v1 as tf\n\nfrom alibi.api.defaults import DEFAULT_DATA_CFP, DEFAULT_META_CFP\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, multidim_scaling, mvdm\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import (num_to_ord, ohe_to_ord, ohe_to_ord_shape,\n                                 ord_to_num, ord_to_ohe)\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "target_code_len": 688,
        "diff_format": "@@ -2,14 +2,16 @@\n import logging\n+import sys\n+from typing import Any, Callable, Dict, Optional, Sequence, Tuple, Union\n+\n import numpy as np\n-import sys\n import tensorflow.compat.v1 as tf\n-from typing import Any, Callable, Dict, Tuple, Union, Sequence\n-\n+\n+from alibi.api.defaults import DEFAULT_DATA_CFP, DEFAULT_META_CFP\n from alibi.api.interfaces import Explainer, Explanation, FitMixin\n-from alibi.api.defaults import DEFAULT_META_CFP, DEFAULT_DATA_CFP\n from alibi.confidence import TrustScore\n from alibi.utils.discretizer import Discretizer\n-from alibi.utils.distance import abdm, mvdm, multidim_scaling\n+from alibi.utils.distance import abdm, multidim_scaling, mvdm\n from alibi.utils.gradients import perturb\n-from alibi.utils.mapping import ohe_to_ord_shape, ord_to_num, num_to_ord, ohe_to_ord, ord_to_ohe\n+from alibi.utils.mapping import (num_to_ord, ohe_to_ord, ohe_to_ord_shape,\n+                                 ord_to_num, ord_to_ohe)\n from alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "source_code_with_indent": "import logging\nimport numpy as np\nimport sys\nimport tensorflow.compat.v1 as tf\nfrom typing import Any, Callable, Dict, Tuple, Union, Sequence\n\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.api.defaults import DEFAULT_META_CFP, DEFAULT_DATA_CFP\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, mvdm, multidim_scaling\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import ohe_to_ord_shape, ord_to_num, num_to_ord, ohe_to_ord, ord_to_ohe\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nimport sys\nfrom typing import Any, Callable, Dict, Optional, Sequence, Tuple, Union\n\nimport numpy as np\nimport tensorflow.compat.v1 as tf\n\nfrom alibi.api.defaults import DEFAULT_DATA_CFP, DEFAULT_META_CFP\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, multidim_scaling, mvdm\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import (num_to_ord, ohe_to_ord, ohe_to_ord_shape,\n                                 ord_to_num, ord_to_ohe)\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def attack(self, X: np.ndarray, Y: np.ndarray, target_class: list = None, k: int = None, k_type: str = 'mean',\n               threshold: float = 0., verbose: bool = False, print_every: int = 100, log_every: int = 100) \\\n            -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n        \"\"\"\n",
        "source_code_len": 302,
        "target_code": "\n    def attack(self, X: np.ndarray, Y: np.ndarray, target_class: Optional[list] = None, k: Optional[int] = None,\n               k_type: str = 'mean', threshold: float = 0., verbose: bool = False, print_every: int = 100,\n               log_every: int = 100) -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n        \"\"\"\n",
        "target_code_len": 323,
        "diff_format": "@@ -935,5 +947,5 @@\n \n-    def attack(self, X: np.ndarray, Y: np.ndarray, target_class: list = None, k: int = None, k_type: str = 'mean',\n-               threshold: float = 0., verbose: bool = False, print_every: int = 100, log_every: int = 100) \\\n-            -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n+    def attack(self, X: np.ndarray, Y: np.ndarray, target_class: Optional[list] = None, k: Optional[int] = None,\n+               k_type: str = 'mean', threshold: float = 0., verbose: bool = False, print_every: int = 100,\n+               log_every: int = 100) -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def attack(self, X: np.ndarray, Y: np.ndarray, target_class: list = None, k: int = None, k_type: str = 'mean',\n               threshold: float = 0., verbose: bool = False, print_every: int = 100, log_every: int = 100)            -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def attack(self, X: np.ndarray, Y: np.ndarray, target_class: Optional[list] = None, k: Optional[int] = None,\n               k_type: str = 'mean', threshold: float = 0., verbose: bool = False, print_every: int = 100,\n               log_every: int = 100) -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def explain(self, X: np.ndarray, Y: np.ndarray = None, target_class: list = None, k: int = None,\n                k_type: str = 'mean', threshold: float = 0., verbose: bool = False,\n                print_every: int = 100, log_every: int = 100) -> Explanation:\n        \"\"\"\n",
        "source_code_len": 276,
        "target_code": "\n    def explain(self,\n                X: np.ndarray,\n                Y: Optional[np.ndarray] = None,\n                target_class: Optional[list] = None,\n                k: Optional[int] = None,\n                k_type: str = 'mean',\n                threshold: float = 0.,\n                verbose: bool = False,\n                print_every: int = 100,\n                log_every: int = 100) -> Explanation:\n        \"\"\"\n",
        "target_code_len": 418,
        "diff_format": "@@ -1258,5 +1271,12 @@\n \n-    def explain(self, X: np.ndarray, Y: np.ndarray = None, target_class: list = None, k: int = None,\n-                k_type: str = 'mean', threshold: float = 0., verbose: bool = False,\n-                print_every: int = 100, log_every: int = 100) -> Explanation:\n+    def explain(self,\n+                X: np.ndarray,\n+                Y: Optional[np.ndarray] = None,\n+                target_class: Optional[list] = None,\n+                k: Optional[int] = None,\n+                k_type: str = 'mean',\n+                threshold: float = 0.,\n+                verbose: bool = False,\n+                print_every: int = 100,\n+                log_every: int = 100) -> Explanation:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def explain(self, X: np.ndarray, Y: np.ndarray = None, target_class: list = None, k: int = None,\n                k_type: str = 'mean', threshold: float = 0., verbose: bool = False,\n                print_every: int = 100, log_every: int = 100) -> Explanation:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def explain(self,\n                X: np.ndarray,\n                Y: Optional[np.ndarray] = None,\n                target_class: Optional[list] = None,\n                k: Optional[int] = None,\n                k_type: str = 'mean',\n                threshold: float = 0.,\n                verbose: bool = False,\n                print_every: int = 100,\n                log_every: int = 100) -> Explanation:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/cfproto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/cfproto.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/cfproto.py:1259:86 Incompatible variable type [9]: k is declared to have type `int` but is used as type `None`.",
    "message": " k is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1259,
    "warning_line": "    def explain(self, X: np.ndarray, Y: np.ndarray = None, target_class: list = None, k: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nimport numpy as np\nimport sys\nimport tensorflow.compat.v1 as tf\nfrom typing import Any, Callable, Dict, Tuple, Union, Sequence\n\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.api.defaults import DEFAULT_META_CFP, DEFAULT_DATA_CFP\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, mvdm, multidim_scaling\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import ohe_to_ord_shape, ord_to_num, num_to_ord, ohe_to_ord, ord_to_ohe\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "source_code_len": 642,
        "target_code": "import logging\nimport sys\nfrom typing import Any, Callable, Dict, Optional, Sequence, Tuple, Union\n\nimport numpy as np\nimport tensorflow.compat.v1 as tf\n\nfrom alibi.api.defaults import DEFAULT_DATA_CFP, DEFAULT_META_CFP\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, multidim_scaling, mvdm\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import (num_to_ord, ohe_to_ord, ohe_to_ord_shape,\n                                 ord_to_num, ord_to_ohe)\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "target_code_len": 688,
        "diff_format": "@@ -2,14 +2,16 @@\n import logging\n+import sys\n+from typing import Any, Callable, Dict, Optional, Sequence, Tuple, Union\n+\n import numpy as np\n-import sys\n import tensorflow.compat.v1 as tf\n-from typing import Any, Callable, Dict, Tuple, Union, Sequence\n-\n+\n+from alibi.api.defaults import DEFAULT_DATA_CFP, DEFAULT_META_CFP\n from alibi.api.interfaces import Explainer, Explanation, FitMixin\n-from alibi.api.defaults import DEFAULT_META_CFP, DEFAULT_DATA_CFP\n from alibi.confidence import TrustScore\n from alibi.utils.discretizer import Discretizer\n-from alibi.utils.distance import abdm, mvdm, multidim_scaling\n+from alibi.utils.distance import abdm, multidim_scaling, mvdm\n from alibi.utils.gradients import perturb\n-from alibi.utils.mapping import ohe_to_ord_shape, ord_to_num, num_to_ord, ohe_to_ord, ord_to_ohe\n+from alibi.utils.mapping import (num_to_ord, ohe_to_ord, ohe_to_ord_shape,\n+                                 ord_to_num, ord_to_ohe)\n from alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "source_code_with_indent": "import logging\nimport numpy as np\nimport sys\nimport tensorflow.compat.v1 as tf\nfrom typing import Any, Callable, Dict, Tuple, Union, Sequence\n\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.api.defaults import DEFAULT_META_CFP, DEFAULT_DATA_CFP\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, mvdm, multidim_scaling\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import ohe_to_ord_shape, ord_to_num, num_to_ord, ohe_to_ord, ord_to_ohe\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nimport sys\nfrom typing import Any, Callable, Dict, Optional, Sequence, Tuple, Union\n\nimport numpy as np\nimport tensorflow.compat.v1 as tf\n\nfrom alibi.api.defaults import DEFAULT_DATA_CFP, DEFAULT_META_CFP\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.confidence import TrustScore\nfrom alibi.utils.discretizer import Discretizer\nfrom alibi.utils.distance import abdm, multidim_scaling, mvdm\nfrom alibi.utils.gradients import perturb\nfrom alibi.utils.mapping import (num_to_ord, ohe_to_ord, ohe_to_ord_shape,\n                                 ord_to_num, ord_to_ohe)\nfrom alibi.utils.tf import argmax_grad, argmin_grad, one_hot_grad, round_grad\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def attack(self, X: np.ndarray, Y: np.ndarray, target_class: list = None, k: int = None, k_type: str = 'mean',\n               threshold: float = 0., verbose: bool = False, print_every: int = 100, log_every: int = 100) \\\n            -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n        \"\"\"\n",
        "source_code_len": 302,
        "target_code": "\n    def attack(self, X: np.ndarray, Y: np.ndarray, target_class: Optional[list] = None, k: Optional[int] = None,\n               k_type: str = 'mean', threshold: float = 0., verbose: bool = False, print_every: int = 100,\n               log_every: int = 100) -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n        \"\"\"\n",
        "target_code_len": 323,
        "diff_format": "@@ -935,5 +947,5 @@\n \n-    def attack(self, X: np.ndarray, Y: np.ndarray, target_class: list = None, k: int = None, k_type: str = 'mean',\n-               threshold: float = 0., verbose: bool = False, print_every: int = 100, log_every: int = 100) \\\n-            -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n+    def attack(self, X: np.ndarray, Y: np.ndarray, target_class: Optional[list] = None, k: Optional[int] = None,\n+               k_type: str = 'mean', threshold: float = 0., verbose: bool = False, print_every: int = 100,\n+               log_every: int = 100) -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def attack(self, X: np.ndarray, Y: np.ndarray, target_class: list = None, k: int = None, k_type: str = 'mean',\n               threshold: float = 0., verbose: bool = False, print_every: int = 100, log_every: int = 100)            -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def attack(self, X: np.ndarray, Y: np.ndarray, target_class: Optional[list] = None, k: Optional[int] = None,\n               k_type: str = 'mean', threshold: float = 0., verbose: bool = False, print_every: int = 100,\n               log_every: int = 100) -> Tuple[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def explain(self, X: np.ndarray, Y: np.ndarray = None, target_class: list = None, k: int = None,\n                k_type: str = 'mean', threshold: float = 0., verbose: bool = False,\n                print_every: int = 100, log_every: int = 100) -> Explanation:\n        \"\"\"\n",
        "source_code_len": 276,
        "target_code": "\n    def explain(self,\n                X: np.ndarray,\n                Y: Optional[np.ndarray] = None,\n                target_class: Optional[list] = None,\n                k: Optional[int] = None,\n                k_type: str = 'mean',\n                threshold: float = 0.,\n                verbose: bool = False,\n                print_every: int = 100,\n                log_every: int = 100) -> Explanation:\n        \"\"\"\n",
        "target_code_len": 418,
        "diff_format": "@@ -1258,5 +1271,12 @@\n \n-    def explain(self, X: np.ndarray, Y: np.ndarray = None, target_class: list = None, k: int = None,\n-                k_type: str = 'mean', threshold: float = 0., verbose: bool = False,\n-                print_every: int = 100, log_every: int = 100) -> Explanation:\n+    def explain(self,\n+                X: np.ndarray,\n+                Y: Optional[np.ndarray] = None,\n+                target_class: Optional[list] = None,\n+                k: Optional[int] = None,\n+                k_type: str = 'mean',\n+                threshold: float = 0.,\n+                verbose: bool = False,\n+                print_every: int = 100,\n+                log_every: int = 100) -> Explanation:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def explain(self, X: np.ndarray, Y: np.ndarray = None, target_class: list = None, k: int = None,\n                k_type: str = 'mean', threshold: float = 0., verbose: bool = False,\n                print_every: int = 100, log_every: int = 100) -> Explanation:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def explain(self,\n                X: np.ndarray,\n                Y: Optional[np.ndarray] = None,\n                target_class: Optional[list] = None,\n                k: Optional[int] = None,\n                k_type: str = 'mean',\n                threshold: float = 0.,\n                verbose: bool = False,\n                print_every: int = 100,\n                log_every: int = 100) -> Explanation:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/counterfactual.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/counterfactual.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/counterfactual.py:93:17 Incompatible variable type [9]: write_dir is declared to have type `str` but is used as type `None`.",
    "message": " write_dir is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 93,
    "warning_line": "                 write_dir: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 decay: bool = True,\n                 write_dir: str = None,\n                 debug: bool = False,\n                 sess: tf.Session = None) -> None:\n        \"\"\"\n",
        "source_code_len": 178,
        "target_code": "                 decay: bool = True,\n                 write_dir: Optional[str] = None,\n                 debug: bool = False,\n                 sess: Optional[tf.Session] = None) -> None:\n        \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -92,5 +93,5 @@\n                  decay: bool = True,\n-                 write_dir: str = None,\n+                 write_dir: Optional[str] = None,\n                  debug: bool = False,\n-                 sess: tf.Session = None) -> None:\n+                 sess: Optional[tf.Session] = None) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 decay: bool = True,\n                 write_dir: str = None,\n                 debug: bool = False,\n                 sess: tf.Session = None) -> None:\n        <IND>",
        "target_code_with_indent": "                 decay: bool = True,\n                 write_dir: Optional[str] = None,\n                 debug: bool = False,\n                 sess: Optional[tf.Session] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/shap_wrappers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/shap_wrappers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/shap_wrappers.py:285:17 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 285,
    "warning_line": "                 seed: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import logging\nimport shap\n\n",
        "source_code_len": 28,
        "target_code": "import logging\nfrom functools import partial\nfrom typing import (TYPE_CHECKING, Any, Callable, Dict, List, Optional,\n                    Sequence, Tuple, Union)\n\n",
        "target_code_len": 162,
        "diff_format": "@@ -2,3 +2,5 @@\n import logging\n-import shap\n+from functools import partial\n+from typing import (TYPE_CHECKING, Any, Callable, Dict, List, Optional,\n+                    Sequence, Tuple, Union)\n \n",
        "source_code_with_indent": "import logging\nimport shap\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import logging\nfrom functools import partial\nfrom typing import (TYPE_CHECKING, Any, Callable, Dict, List, Optional,\n                    Sequence, Tuple, Union)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import pandas as pd\n\nfrom alibi.api.defaults import DEFAULT_META_KERNEL_SHAP, DEFAULT_DATA_KERNEL_SHAP, DEFAULT_META_TREE_SHAP, \\\n    DEFAULT_DATA_TREE_SHAP\nfrom alibi.api.interfaces import Explanation, Explainer, FitMixin\nfrom alibi.utils.wrappers import methdispatch\nfrom alibi.utils.distributed import DistributedExplainer\nfrom functools import partial\nfrom scipy import sparse\n",
        "source_code_len": 381,
        "target_code": "import pandas as pd\nimport shap\nimport shap.utils._legacy as shap_utils\nfrom scipy import sparse\n",
        "target_code_len": 97,
        "diff_format": "@@ -6,9 +8,4 @@\n import pandas as pd\n-\n-from alibi.api.defaults import DEFAULT_META_KERNEL_SHAP, DEFAULT_DATA_KERNEL_SHAP, DEFAULT_META_TREE_SHAP, \\\n-    DEFAULT_DATA_TREE_SHAP\n-from alibi.api.interfaces import Explanation, Explainer, FitMixin\n-from alibi.utils.wrappers import methdispatch\n-from alibi.utils.distributed import DistributedExplainer\n-from functools import partial\n+import shap\n+import shap.utils._legacy as shap_utils\n from scipy import sparse\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent": "import pandas as pd\nimport shap\nimport shap.utils._legacy as shap_utils\nfrom scipy import sparse\n",
        "target_code_with_indent_exact_match": true,
        "source_code_with_indent": "import pandas as pd\n\nfrom alibi.api.defaults import DEFAULT_META_KERNEL_SHAP, DEFAULT_DATA_KERNEL_SHAP, DEFAULT_META_TREE_SHAP,    DEFAULT_DATA_TREE_SHAP\nfrom alibi.api.interfaces import Explanation, Explainer, FitMixin\nfrom alibi.utils.wrappers import methdispatch\nfrom alibi.utils.distributed import DistributedExplainer\nfrom functools import partial\nfrom scipy import sparse\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from shap import KernelExplainer\nfrom typing import Any, Callable, Dict, List, Optional, Sequence, Union, Tuple, TYPE_CHECKING\n\nimport shap.utils._legacy as shap_utils\n\n",
        "source_code_len": 169,
        "target_code": "from shap import KernelExplainer\n\nfrom alibi.api.defaults import (DEFAULT_DATA_KERNEL_SHAP,\n                                DEFAULT_DATA_TREE_SHAP,\n                                DEFAULT_META_KERNEL_SHAP,\n                                DEFAULT_META_TREE_SHAP)\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.utils.distributed import DistributedExplainer\nfrom alibi.utils.wrappers import methdispatch\n\n",
        "target_code_len": 432,
        "diff_format": "@@ -16,5 +13,10 @@\n from shap import KernelExplainer\n-from typing import Any, Callable, Dict, List, Optional, Sequence, Union, Tuple, TYPE_CHECKING\n-\n-import shap.utils._legacy as shap_utils\n+\n+from alibi.api.defaults import (DEFAULT_DATA_KERNEL_SHAP,\n+                                DEFAULT_DATA_TREE_SHAP,\n+                                DEFAULT_META_KERNEL_SHAP,\n+                                DEFAULT_META_TREE_SHAP)\n+from alibi.api.interfaces import Explainer, Explanation, FitMixin\n+from alibi.utils.distributed import DistributedExplainer\n+from alibi.utils.wrappers import methdispatch\n \n",
        "source_code_with_indent": "from shap import KernelExplainer\nfrom typing import Any, Callable, Dict, List, Optional, Sequence, Union, Tuple, TYPE_CHECKING\n\nimport shap.utils._legacy as shap_utils\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from shap import KernelExplainer\n\nfrom alibi.api.defaults import (DEFAULT_DATA_KERNEL_SHAP,\n                                DEFAULT_DATA_TREE_SHAP,\n                                DEFAULT_META_KERNEL_SHAP,\n                                DEFAULT_META_TREE_SHAP)\nfrom alibi.api.interfaces import Explainer, Explanation, FitMixin\nfrom alibi.utils.distributed import DistributedExplainer\nfrom alibi.utils.wrappers import methdispatch\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 link: str = 'identity',\n                 feature_names: Union[List[str], Tuple[str], None] = None,\n                 categorical_names: Optional[Dict[int, List[str]]] = None,\n                 task: str = 'classification',\n                 seed: int = None,\n                 distributed_opts: Optional[Dict] = None\n",
        "source_code_len": 330,
        "target_code": "                 link: str = 'identity',\n                 feature_names: Optional[Union[List[str], Tuple[str]]] = None,\n                 categorical_names: Optional[Dict[int, List[str]]] = None,\n                 task: str = 'classification',\n                 seed: Optional[int] = None,\n                 distributed_opts: Optional[Dict] = None\n",
        "target_code_len": 344,
        "diff_format": "@@ -281,6 +285,6 @@\n                  link: str = 'identity',\n-                 feature_names: Union[List[str], Tuple[str], None] = None,\n+                 feature_names: Optional[Union[List[str], Tuple[str]]] = None,\n                  categorical_names: Optional[Dict[int, List[str]]] = None,\n                  task: str = 'classification',\n-                 seed: int = None,\n+                 seed: Optional[int] = None,\n                  distributed_opts: Optional[Dict] = None\n",
        "source_code_with_indent": "                 link: str = 'identity',\n                 feature_names: Union[List[str], Tuple[str], None] = None,\n                 categorical_names: Optional[Dict[int, List[str]]] = None,\n                 task: str = 'classification',\n                 seed: int = None,\n                 distributed_opts: Optional[Dict] = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 link: str = 'identity',\n                 feature_names: Optional[Union[List[str], Tuple[str]]] = None,\n                 categorical_names: Optional[Dict[int, List[str]]] = None,\n                 task: str = 'classification',\n                 seed: Optional[int] = None,\n                 distributed_opts: Optional[Dict] = None\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        explainer_args = (self.predictor, self.background_data)\n        explainer_kwargs = {'link': self.link}  # type: Dict[str, Union[str, int]]\n        # distribute computation\n",
        "source_code_len": 180,
        "target_code": "        explainer_args = (self.predictor, self.background_data)\n        explainer_kwargs = {'link': self.link}  # type: Dict[str, Union[str, int, None]]\n        # distribute computation\n",
        "target_code_len": 186,
        "diff_format": "@@ -745,3 +747,3 @@\n         explainer_args = (self.predictor, self.background_data)\n-        explainer_kwargs = {'link': self.link}  # type: Dict[str, Union[str, int]]\n+        explainer_kwargs = {'link': self.link}  # type: Dict[str, Union[str, int, None]]\n         # distribute computation\n",
        "source_code_with_indent": "        explainer_args = (self.predictor, self.background_data)\n        explainer_kwargs = {'link': self.link}  # type: Dict[str, Union[str, int]]\n        # distribute computation\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        explainer_args = (self.predictor, self.background_data)\n        explainer_kwargs = {'link': self.link}  # type: Dict[str, Union[str, int, None]]\n        # distribute computation\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/shap_wrappers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/shap_wrappers.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/shap_wrappers.py:363:8 Incompatible attribute type [8]: Attribute `_explainer` declared in class `KernelShap` has type `Union[DistributedExplainer, KernelExplainerWrapper]` but is used as type `None`.",
    "message": " Attribute `_explainer` declared in class `KernelShap` has type `Union[DistributedExplainer, KernelExplainerWrapper]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 363,
    "warning_line": "        self._explainer = None  # type: Union[KernelExplainerWrapper, DistributedExplainer]"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/shap_wrappers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/shap_wrappers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/shap_wrappers.py:734:67 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[Union[List[int], Tuple[int]]]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[Union[List[int], Tuple[int]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 734,
    "warning_line": "            group_names = ['group_{}'.format(i) for i in range(len(groups))]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._check_inputs(background_data, group_names, groups, weights)\n        if self.create_group_names:\n            group_names = ['group_{}'.format(i) for i in range(len(groups))]\n",
        "source_code_len": 187,
        "target_code": "        self._check_inputs(background_data, group_names, groups, weights)\n        if self.create_group_names and groups:\n            group_names = ['group_{}'.format(i) for i in range(len(groups))]\n",
        "target_code_len": 198,
        "diff_format": "@@ -732,3 +734,3 @@\n         self._check_inputs(background_data, group_names, groups, weights)\n-        if self.create_group_names:\n+        if self.create_group_names and groups:\n             group_names = ['group_{}'.format(i) for i in range(len(groups))]\n",
        "source_code_with_indent": "        <DED>self._check_inputs(background_data, group_names, groups, weights)\n        if self.create_group_names:\n            <IND>group_names = ['group_{}'.format(i) for i in range(len(groups))]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>self._check_inputs(background_data, group_names, groups, weights)\n        if self.create_group_names and groups:\n            <IND>group_names = ['group_{}'.format(i) for i in range(len(groups))]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/shap_wrappers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/shap_wrappers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/shap_wrappers.py:783:16 Incompatible variable type [9]: cat_vars_start_idx is declared to have type `Sequence[int]` but is used as type `None`.",
    "message": " cat_vars_start_idx is declared to have type `Sequence[int]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 783,
    "warning_line": "                cat_vars_start_idx: Sequence[int] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                summarise_result: bool = False,\n                cat_vars_start_idx: Sequence[int] = None,\n                cat_vars_enc_dim: Sequence[int] = None,\n                **kwargs) -> Explanation:\n",
        "source_code_len": 204,
        "target_code": "                summarise_result: bool = False,\n                cat_vars_start_idx: Optional[Sequence[int]] = None,\n                cat_vars_enc_dim: Optional[Sequence[int]] = None,\n                **kwargs) -> Explanation:\n",
        "target_code_len": 224,
        "diff_format": "@@ -782,4 +784,4 @@\n                 summarise_result: bool = False,\n-                cat_vars_start_idx: Sequence[int] = None,\n-                cat_vars_enc_dim: Sequence[int] = None,\n+                cat_vars_start_idx: Optional[Sequence[int]] = None,\n+                cat_vars_enc_dim: Optional[Sequence[int]] = None,\n                 **kwargs) -> Explanation:\n",
        "source_code_with_indent": "                summarise_result: bool = False,\n                cat_vars_start_idx: Sequence[int] = None,\n                cat_vars_enc_dim: Sequence[int] = None,\n                **kwargs) -> Explanation:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                summarise_result: bool = False,\n                cat_vars_start_idx: Optional[Sequence[int]] = None,\n                cat_vars_enc_dim: Optional[Sequence[int]] = None,\n                **kwargs) -> Explanation:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/shap_wrappers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/shap_wrappers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/shap_wrappers.py:784:16 Incompatible variable type [9]: cat_vars_enc_dim is declared to have type `Sequence[int]` but is used as type `None`.",
    "message": " cat_vars_enc_dim is declared to have type `Sequence[int]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 784,
    "warning_line": "                cat_vars_enc_dim: Sequence[int] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                summarise_result: bool = False,\n                cat_vars_start_idx: Sequence[int] = None,\n                cat_vars_enc_dim: Sequence[int] = None,\n                **kwargs) -> Explanation:\n",
        "source_code_len": 204,
        "target_code": "                summarise_result: bool = False,\n                cat_vars_start_idx: Optional[Sequence[int]] = None,\n                cat_vars_enc_dim: Optional[Sequence[int]] = None,\n                **kwargs) -> Explanation:\n",
        "target_code_len": 224,
        "diff_format": "@@ -782,4 +784,4 @@\n                 summarise_result: bool = False,\n-                cat_vars_start_idx: Sequence[int] = None,\n-                cat_vars_enc_dim: Sequence[int] = None,\n+                cat_vars_start_idx: Optional[Sequence[int]] = None,\n+                cat_vars_enc_dim: Optional[Sequence[int]] = None,\n                 **kwargs) -> Explanation:\n",
        "source_code_with_indent": "                summarise_result: bool = False,\n                cat_vars_start_idx: Sequence[int] = None,\n                cat_vars_enc_dim: Sequence[int] = None,\n                **kwargs) -> Explanation:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                summarise_result: bool = False,\n                cat_vars_start_idx: Optional[Sequence[int]] = None,\n                cat_vars_enc_dim: Optional[Sequence[int]] = None,\n                **kwargs) -> Explanation:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/shap_wrappers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/explainers/shap_wrappers.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/explainers/shap_wrappers.py:1004:17 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1004,
    "warning_line": "                 seed: int = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 model_output: str = 'raw',\n                 feature_names: Union[List[str], Tuple[str], None] = None,\n                 categorical_names: Optional[Dict[int, List[str]]] = None,\n                 task: str = 'classification',\n                 seed: int = None):\n        \"\"\"\n",
        "source_code_len": 289,
        "target_code": "                 model_output: str = 'raw',\n                 feature_names: Optional[Union[List[str], Tuple[str]]] = None,\n                 categorical_names: Optional[Dict[int, List[str]]] = None,\n                 task: str = 'classification',\n                 seed: Optional[int] = None):\n        \"\"\"\n",
        "target_code_len": 303,
        "diff_format": "@@ -1000,6 +1002,6 @@\n                  model_output: str = 'raw',\n-                 feature_names: Union[List[str], Tuple[str], None] = None,\n+                 feature_names: Optional[Union[List[str], Tuple[str]]] = None,\n                  categorical_names: Optional[Dict[int, List[str]]] = None,\n                  task: str = 'classification',\n-                 seed: int = None):\n+                 seed: Optional[int] = None):\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                 model_output: str = 'raw',\n                 feature_names: Union[List[str], Tuple[str], None] = None,\n                 categorical_names: Optional[Dict[int, List[str]]] = None,\n                 task: str = 'classification',\n                 seed: int = None):\n        <IND>",
        "target_code_with_indent": "                 model_output: str = 'raw',\n                 feature_names: Optional[Union[List[str], Tuple[str]]] = None,\n                 categorical_names: Optional[Dict[int, List[str]]] = None,\n                 task: str = 'classification',\n                 seed: Optional[int] = None):\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/models/pytorch/model.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/models/pytorch/model.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/models/pytorch/model.py:52:19 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[float]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[List[float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "            if len(loss_weights) != len(loss):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # check if the number of weights is the same as the number of partial losses\n            if len(loss_weights) != len(loss):\n                raise ValueError(\"The number of loss weights differs from the number of losses\")\n",
        "source_code_len": 233,
        "target_code": "            # check if the number of weights is the same as the number of partial losses\n            if len(self.loss_weights) != len(loss):\n                raise ValueError(\"The number of loss weights differs from the number of losses\")\n",
        "target_code_len": 238,
        "diff_format": "@@ -51,3 +51,3 @@\n             # check if the number of weights is the same as the number of partial losses\n-            if len(loss_weights) != len(loss):\n+            if len(self.loss_weights) != len(loss):\n                 raise ValueError(\"The number of loss weights differs from the number of losses\")\n",
        "source_code_with_indent": "            # check if the number of weights is the same as the number of partial losses\n            <IND>if len(loss_weights) != len(loss):\n                <IND>raise ValueError(\"The number of loss weights differs from the number of losses\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # check if the number of weights is the same as the number of partial losses\n            <IND>if len(self.loss_weights) != len(loss):\n                <IND>raise ValueError(\"The number of loss weights differs from the number of losses\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/tests/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/tests/utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/tests/utils.py:18:17 Incompatible variable type [9]: model_type is declared to have type `str` but is used as type `None`.",
    "message": " model_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 18,
    "warning_line": "                 model_type: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import numpy as np\n\nfrom contextlib import contextmanager\n\n",
        "source_code_len": 59,
        "target_code": "from contextlib import contextmanager\nfrom typing import Optional\n\nimport numpy as np\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -1,4 +1,5 @@\n+from contextlib import contextmanager\n+from typing import Optional\n+\n import numpy as np\n-\n-from contextlib import contextmanager\n \n",
        "source_code_with_indent": "import numpy as np\n\nfrom contextlib import contextmanager\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import Optional\n\nimport numpy as np\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 out_type: str = 'proba',\n                 model_type: str = None,\n                 seed: int = None,\n                 ) -> None:\n",
        "source_code_len": 146,
        "target_code": "                 out_type: str = 'proba',\n                 model_type: Optional[str] = None,\n                 seed: Optional[int] = None,\n                 ) -> None:\n",
        "target_code_len": 166,
        "diff_format": "@@ -17,4 +18,4 @@\n                  out_type: str = 'proba',\n-                 model_type: str = None,\n-                 seed: int = None,\n+                 model_type: Optional[str] = None,\n+                 seed: Optional[int] = None,\n                  ) -> None:\n",
        "source_code_with_indent": "                 out_type: str = 'proba',\n                 model_type: str = None,\n                 seed: int = None,\n                 ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 out_type: str = 'proba',\n                 model_type: Optional[str] = None,\n                 seed: Optional[int] = None,\n                 ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/tests/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/tests/utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/tests/utils.py:19:17 Incompatible variable type [9]: seed is declared to have type `int` but is used as type `None`.",
    "message": " seed is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 19,
    "warning_line": "                 seed: int = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import numpy as np\n\nfrom contextlib import contextmanager\n\n",
        "source_code_len": 59,
        "target_code": "from contextlib import contextmanager\nfrom typing import Optional\n\nimport numpy as np\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -1,4 +1,5 @@\n+from contextlib import contextmanager\n+from typing import Optional\n+\n import numpy as np\n-\n-from contextlib import contextmanager\n \n",
        "source_code_with_indent": "import numpy as np\n\nfrom contextlib import contextmanager\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import Optional\n\nimport numpy as np\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 out_type: str = 'proba',\n                 model_type: str = None,\n                 seed: int = None,\n                 ) -> None:\n",
        "source_code_len": 146,
        "target_code": "                 out_type: str = 'proba',\n                 model_type: Optional[str] = None,\n                 seed: Optional[int] = None,\n                 ) -> None:\n",
        "target_code_len": 166,
        "diff_format": "@@ -17,4 +18,4 @@\n                  out_type: str = 'proba',\n-                 model_type: str = None,\n-                 seed: int = None,\n+                 model_type: Optional[str] = None,\n+                 seed: Optional[int] = None,\n                  ) -> None:\n",
        "source_code_with_indent": "                 out_type: str = 'proba',\n                 model_type: str = None,\n                 seed: int = None,\n                 ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 out_type: str = 'proba',\n                 model_type: Optional[str] = None,\n                 seed: Optional[int] = None,\n                 ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/tests/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/tests/utils.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/tests/utils.py:58:31 Incompatible variable type [9]: Unable to unpack `None`, expected a tuple.",
    "message": " Unable to unpack `None`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 58,
    "warning_line": "    def _generate_probas(self, sz: tuple = None, *args, **kwargs) -> np.ndarray:"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/tests/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/tests/utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/tests/utils.py:91:31 Incompatible variable type [9]: Unable to unpack `None`, expected a tuple.",
    "message": " Unable to unpack `None`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 91,
    "warning_line": "    def _generate_labels(self, sz: tuple = None, *args, **kwargs) -> np.ndarray:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import numpy as np\n\nfrom contextlib import contextmanager\n\n",
        "source_code_len": 59,
        "target_code": "from contextlib import contextmanager\nfrom typing import Optional\n\nimport numpy as np\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -1,4 +1,5 @@\n+from contextlib import contextmanager\n+from typing import Optional\n+\n import numpy as np\n-\n-from contextlib import contextmanager\n \n",
        "source_code_with_indent": "import numpy as np\n\nfrom contextlib import contextmanager\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import Optional\n\nimport numpy as np\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _generate_labels(self, sz: tuple = None, *args, **kwargs) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 94,
        "target_code": "\n    def _generate_labels(self, sz: Optional[tuple] = None, *args, **kwargs) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 104,
        "diff_format": "@@ -90,3 +91,3 @@\n \n-    def _generate_labels(self, sz: tuple = None, *args, **kwargs) -> np.ndarray:\n+    def _generate_labels(self, sz: Optional[tuple] = None, *args, **kwargs) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _generate_labels(self, sz: tuple = None, *args, **kwargs) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _generate_labels(self, sz: Optional[tuple] = None, *args, **kwargs) -> np.ndarray:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/tests/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/tests/utils.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/tests/utils.py:99:31 Incompatible variable type [9]: Unable to unpack `None`, expected a tuple.",
    "message": " Unable to unpack `None`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 99,
    "warning_line": "    def _generate_logits(self, sz: tuple = None, *args, **kwargs) -> np.ndarray:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import numpy as np\n\nfrom contextlib import contextmanager\n\n",
        "source_code_len": 59,
        "target_code": "from contextlib import contextmanager\nfrom typing import Optional\n\nimport numpy as np\n\n",
        "target_code_len": 87,
        "diff_format": "@@ -1,4 +1,5 @@\n+from contextlib import contextmanager\n+from typing import Optional\n+\n import numpy as np\n-\n-from contextlib import contextmanager\n \n",
        "source_code_with_indent": "import numpy as np\n\nfrom contextlib import contextmanager\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import Optional\n\nimport numpy as np\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _generate_logits(self, sz: tuple = None, *args, **kwargs) -> np.ndarray:\n        \"\"\"\n",
        "source_code_len": 94,
        "target_code": "\n    def _generate_logits(self, sz: Optional[tuple] = None, *args, **kwargs) -> np.ndarray:\n        \"\"\"\n",
        "target_code_len": 104,
        "diff_format": "@@ -98,3 +99,3 @@\n \n-    def _generate_logits(self, sz: tuple = None, *args, **kwargs) -> np.ndarray:\n+    def _generate_logits(self, sz: Optional[tuple] = None, *args, **kwargs) -> np.ndarray:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _generate_logits(self, sz: tuple = None, *args, **kwargs) -> np.ndarray:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _generate_logits(self, sz: Optional[tuple] = None, *args, **kwargs) -> np.ndarray:\n        <IND>"
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/utils/distance.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/utils/distance.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/utils/distance.py:167:21 Incompatible variable type [9]: Unable to unpack `None`, expected a tuple.",
    "message": " Unable to unpack `None`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 167,
    "warning_line": "                     feature_range: tuple = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def multidim_scaling(d_pair: dict,\n                     n_components: int = 2,\n",
        "source_code_len": 79,
        "target_code": "def multidim_scaling(d_pair: dict,\n                     feature_range: tuple,\n                     n_components: int = 2,\n",
        "target_code_len": 122,
        "diff_format": "@@ -163,2 +164,3 @@\n def multidim_scaling(d_pair: dict,\n+                     feature_range: tuple,\n                      n_components: int = 2,\n",
        "source_code_with_indent": "<DED>def multidim_scaling(d_pair: dict,\n                     n_components: int = 2,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def multidim_scaling(d_pair: dict,\n                     feature_range: tuple,\n                     n_components: int = 2,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "                     standardize_cat_vars: bool = True,\n                     feature_range: tuple = None,\n                     smooth: float = 1.,\n",
        "source_code_len": 147,
        "target_code": "                     standardize_cat_vars: bool = True,\n                     smooth: float = 1.,\n",
        "target_code_len": 97,
        "diff_format": "@@ -166,3 +168,2 @@\n                      standardize_cat_vars: bool = True,\n-                     feature_range: tuple = None,\n                      smooth: float = 1.,\n",
        "source_code_with_indent": "                     standardize_cat_vars: bool = True,\n                     feature_range: tuple = None,\n                     smooth: float = 1.,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                     standardize_cat_vars: bool = True,\n                     smooth: float = 1.,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/utils/mapping.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/utils/mapping.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "alibi/utils/mapping.py:5:35 Incompatible variable type [9]: cat_vars is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " cat_vars is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 5,
    "warning_line": "def ohe_to_ord_shape(shape: tuple, cat_vars: dict = None, is_ohe: bool = False) -> tuple:"
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/utils/tests/test_distributed.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/utils/tests/test_distributed.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "alibi/utils/tests/test_distributed.py:149:0 Incompatible variable type [9]: batch_size is declared to have type `List[int]` but is used as type `List[Optional[int]]`.",
    "message": " batch_size is declared to have type `List[int]` but is used as type `List[Optional[int]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 149,
    "warning_line": "batch_size = [None, 1, 2]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\nbatch_size = [None, 1, 2]\nncpus = [2]\n",
        "source_code_len": 39,
        "target_code": "\nbatch_size = [None, 1, 2]  # type: ignore\nncpus = [2]\n",
        "target_code_len": 55,
        "diff_format": "@@ -148,3 +148,3 @@\n \n-batch_size = [None, 1, 2]\n+batch_size = [None, 1, 2]  # type: ignore\n ncpus = [2]\n",
        "source_code_with_indent": "\n<DED>batch_size = [None, 1, 2]\nncpus = [2]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>batch_size = [None, 1, 2]  # type: ignore\nncpus = [2]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/utils/tests/test_distributed.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-alibi/alibi/utils/tests/test_distributed.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "alibi/utils/tests/test_distributed.py:260:0 Incompatible variable type [9]: actor_cpu_fraction is declared to have type `List[float]` but is used as type `List[Optional[float]]`.",
    "message": " actor_cpu_fraction is declared to have type `List[float]` but is used as type `List[Optional[float]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 260,
    "warning_line": "actor_cpu_fraction = [1.0, 0.5, None]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "ncpus = [1, len(explainer_init_kwargs[0])]  # set so that both the error raising inputs and correct inputs are tested\nactor_cpu_fraction = [1.0, 0.5, None]\nkeys = ['batch_size', 'n_cpus', 'actor_cpu_fraction']\n",
        "source_code_len": 210,
        "target_code": "ncpus = [1, len(explainer_init_kwargs[0])]  # set so that both the error raising inputs and correct inputs are tested\n# TODO: check that redefining these (type: ignore) actually makes the tests run with the right parameters\nactor_cpu_fraction = [1.0, 0.5, None]  # type: ignore\nkeys = ['batch_size', 'n_cpus', 'actor_cpu_fraction']\n",
        "target_code_len": 332,
        "diff_format": "@@ -259,3 +257,4 @@\n ncpus = [1, len(explainer_init_kwargs[0])]  # set so that both the error raising inputs and correct inputs are tested\n-actor_cpu_fraction = [1.0, 0.5, None]\n+# TODO: check that redefining these (type: ignore) actually makes the tests run with the right parameters\n+actor_cpu_fraction = [1.0, 0.5, None]  # type: ignore\n keys = ['batch_size', 'n_cpus', 'actor_cpu_fraction']\n",
        "source_code_with_indent": "ncpus = [1, len(explainer_init_kwargs[0])]  # set so that both the error raising inputs and correct inputs are tested\nactor_cpu_fraction = [1.0, 0.5, None]\nkeys = ['batch_size', 'n_cpus', 'actor_cpu_fraction']\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "ncpus = [1, len(explainer_init_kwargs[0])]  # set so that both the error raising inputs and correct inputs are tested\n# TODO: check that redefining these (type: ignore) actually makes the tests run with the right parameters\nactor_cpu_fraction = [1.0, 0.5, None]  # type: ignore\nkeys = ['batch_size', 'n_cpus', 'actor_cpu_fraction']\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]