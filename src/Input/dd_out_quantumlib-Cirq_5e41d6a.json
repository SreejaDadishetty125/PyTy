[
  {
    "project": "quantumlib/Cirq",
    "commit": "5e41d6a13553d6193917f59af77ac8a52cf5ff92",
    "filename": "cirq/circuits/circuit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/circuits/circuit.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/circuits/circuit.py:97:12 Incompatible variable type [9]: max_distance is declared to have type `int` but is used as type `float`.",
    "message": " max_distance is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 97,
    "warning_line": "            max_distance = float('inf')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        if max_distance is None:\n            max_distance = float('inf')\n        elif max_distance < 0:\n            raise ValueError('Negative max_distance: {}'.format(max_distance))\n\n        # Don't bother searching indices past the end of the list.\n        max_distance = int(\n            min(max_distance, len(self.moments) - start_moment_index))\n\n",
        "source_code_len": 363,
        "target_code": "        \"\"\"\n        max_circuit_distance = len(self.moments) - start_moment_index\n        if max_distance is None:\n            max_distance = max_circuit_distance\n        elif max_distance < 0:\n            raise ValueError('Negative max_distance: {}'.format(max_distance))\n        else:\n            max_distance = min(max_distance, max_circuit_distance)\n\n",
        "target_code_len": 355,
        "diff_format": "@@ -95,10 +95,9 @@\n         \"\"\"\n+        max_circuit_distance = len(self.moments) - start_moment_index\n         if max_distance is None:\n-            max_distance = float('inf')\n+            max_distance = max_circuit_distance\n         elif max_distance < 0:\n             raise ValueError('Negative max_distance: {}'.format(max_distance))\n-\n-        # Don't bother searching indices past the end of the list.\n-        max_distance = int(\n-            min(max_distance, len(self.moments) - start_moment_index))\n+        else:\n+            max_distance = min(max_distance, max_circuit_distance)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        if max_distance is None:\n            <IND>max_distance = float('inf')\n        <DED>elif max_distance < 0:\n            <IND>raise ValueError('Negative max_distance: {}'.format(max_distance))\n\n        # Don't bother searching indices past the end of the list.\n        <DED>max_distance = int(\n            min(max_distance, len(self.moments) - start_moment_index))\n\n",
        "target_code_with_indent": "\n        max_circuit_distance = len(self.moments) - start_moment_index\n        if max_distance is None:\n            <IND>max_distance = max_circuit_distance\n        <DED>elif max_distance < 0:\n            <IND>raise ValueError('Negative max_distance: {}'.format(max_distance))\n        <DED>else:\n            <IND>max_distance = min(max_distance, max_circuit_distance)\n\n"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "5e41d6a13553d6193917f59af77ac8a52cf5ff92",
    "filename": "cirq/circuits/circuit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/circuits/circuit.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/circuits/circuit.py:140:8 Incompatible variable type [9]: max_distance is declared to have type `Optional[int]` but is used as type `float`.",
    "message": " max_distance is declared to have type `Optional[int]` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 140,
    "warning_line": "        max_distance = min(end_moment_index, max_distance)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        if max_distance is None:\n            max_distance = float('inf')\n        elif max_distance < 0:\n            raise ValueError('Negative max_distance: {}'.format(max_distance))\n\n        if end_moment_index is None:\n            end_moment_index = len(self.moments)\n\n        # Don't bother searching indices past the start of the list.\n        max_distance = min(end_moment_index, max_distance)\n\n",
        "source_code_len": 412,
        "target_code": "        \"\"\"\n        if end_moment_index is None:\n            end_moment_index = len(self.moments)\n\n        if max_distance is None:\n            max_distance = len(self.moments)\n        elif max_distance < 0:\n            raise ValueError('Negative max_distance: {}'.format(max_distance))\n        else:\n            max_distance = min(end_moment_index, max_distance)\n\n",
        "target_code_len": 365,
        "diff_format": "@@ -130,12 +129,11 @@\n         \"\"\"\n+        if end_moment_index is None:\n+            end_moment_index = len(self.moments)\n+\n         if max_distance is None:\n-            max_distance = float('inf')\n+            max_distance = len(self.moments)\n         elif max_distance < 0:\n             raise ValueError('Negative max_distance: {}'.format(max_distance))\n-\n-        if end_moment_index is None:\n-            end_moment_index = len(self.moments)\n-\n-        # Don't bother searching indices past the start of the list.\n-        max_distance = min(end_moment_index, max_distance)\n+        else:\n+            max_distance = min(end_moment_index, max_distance)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        if max_distance is None:\n            <IND>max_distance = float('inf')\n        <DED>elif max_distance < 0:\n            <IND>raise ValueError('Negative max_distance: {}'.format(max_distance))\n\n        <DED>if end_moment_index is None:\n            <IND>end_moment_index = len(self.moments)\n\n        # Don't bother searching indices past the start of the list.\n        <DED>max_distance = min(end_moment_index, max_distance)\n\n",
        "target_code_with_indent": "\n        if end_moment_index is None:\n            <IND>end_moment_index = len(self.moments)\n\n        <DED>if max_distance is None:\n            <IND>max_distance = len(self.moments)\n        <DED>elif max_distance < 0:\n            <IND>raise ValueError('Negative max_distance: {}'.format(max_distance))\n        <DED>else:\n            <IND>max_distance = min(end_moment_index, max_distance)\n\n"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "5e41d6a13553d6193917f59af77ac8a52cf5ff92",
    "filename": "cirq/circuits/circuit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/circuits/circuit.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/circuits/circuit.py:146:12 Incompatible variable type [9]: max_distance is declared to have type `Optional[int]` but is used as type `float`.",
    "message": " max_distance is declared to have type `Optional[int]` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 146,
    "warning_line": "            max_distance -= d",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        if max_distance is None:\n            max_distance = float('inf')\n        elif max_distance < 0:\n            raise ValueError('Negative max_distance: {}'.format(max_distance))\n\n        if end_moment_index is None:\n            end_moment_index = len(self.moments)\n\n        # Don't bother searching indices past the start of the list.\n        max_distance = min(end_moment_index, max_distance)\n\n",
        "source_code_len": 412,
        "target_code": "        \"\"\"\n        if end_moment_index is None:\n            end_moment_index = len(self.moments)\n\n        if max_distance is None:\n            max_distance = len(self.moments)\n        elif max_distance < 0:\n            raise ValueError('Negative max_distance: {}'.format(max_distance))\n        else:\n            max_distance = min(end_moment_index, max_distance)\n\n",
        "target_code_len": 365,
        "diff_format": "@@ -130,12 +129,11 @@\n         \"\"\"\n+        if end_moment_index is None:\n+            end_moment_index = len(self.moments)\n+\n         if max_distance is None:\n-            max_distance = float('inf')\n+            max_distance = len(self.moments)\n         elif max_distance < 0:\n             raise ValueError('Negative max_distance: {}'.format(max_distance))\n-\n-        if end_moment_index is None:\n-            end_moment_index = len(self.moments)\n-\n-        # Don't bother searching indices past the start of the list.\n-        max_distance = min(end_moment_index, max_distance)\n+        else:\n+            max_distance = min(end_moment_index, max_distance)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        if max_distance is None:\n            <IND>max_distance = float('inf')\n        <DED>elif max_distance < 0:\n            <IND>raise ValueError('Negative max_distance: {}'.format(max_distance))\n\n        <DED>if end_moment_index is None:\n            <IND>end_moment_index = len(self.moments)\n\n        # Don't bother searching indices past the start of the list.\n        <DED>max_distance = min(end_moment_index, max_distance)\n\n",
        "target_code_with_indent": "\n        if end_moment_index is None:\n            <IND>end_moment_index = len(self.moments)\n\n        <DED>if max_distance is None:\n            <IND>max_distance = len(self.moments)\n        <DED>elif max_distance < 0:\n            <IND>raise ValueError('Negative max_distance: {}'.format(max_distance))\n        <DED>else:\n            <IND>max_distance = min(end_moment_index, max_distance)\n\n"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "5e41d6a13553d6193917f59af77ac8a52cf5ff92",
    "filename": "cirq/circuits/circuit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/circuits/circuit.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/circuits/circuit.py:152:63 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `float`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `range.__init__` but got `float`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 152,
    "warning_line": "                                                for k in range(max_distance)))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        if max_distance is None:\n            max_distance = float('inf')\n        elif max_distance < 0:\n            raise ValueError('Negative max_distance: {}'.format(max_distance))\n\n        if end_moment_index is None:\n            end_moment_index = len(self.moments)\n\n        # Don't bother searching indices past the start of the list.\n        max_distance = min(end_moment_index, max_distance)\n\n",
        "source_code_len": 412,
        "target_code": "        \"\"\"\n        if end_moment_index is None:\n            end_moment_index = len(self.moments)\n\n        if max_distance is None:\n            max_distance = len(self.moments)\n        elif max_distance < 0:\n            raise ValueError('Negative max_distance: {}'.format(max_distance))\n        else:\n            max_distance = min(end_moment_index, max_distance)\n\n",
        "target_code_len": 365,
        "diff_format": "@@ -130,12 +129,11 @@\n         \"\"\"\n+        if end_moment_index is None:\n+            end_moment_index = len(self.moments)\n+\n         if max_distance is None:\n-            max_distance = float('inf')\n+            max_distance = len(self.moments)\n         elif max_distance < 0:\n             raise ValueError('Negative max_distance: {}'.format(max_distance))\n-\n-        if end_moment_index is None:\n-            end_moment_index = len(self.moments)\n-\n-        # Don't bother searching indices past the start of the list.\n-        max_distance = min(end_moment_index, max_distance)\n+        else:\n+            max_distance = min(end_moment_index, max_distance)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        if max_distance is None:\n            <IND>max_distance = float('inf')\n        <DED>elif max_distance < 0:\n            <IND>raise ValueError('Negative max_distance: {}'.format(max_distance))\n\n        <DED>if end_moment_index is None:\n            <IND>end_moment_index = len(self.moments)\n\n        # Don't bother searching indices past the start of the list.\n        <DED>max_distance = min(end_moment_index, max_distance)\n\n",
        "target_code_with_indent": "\n        if end_moment_index is None:\n            <IND>end_moment_index = len(self.moments)\n\n        <DED>if max_distance is None:\n            <IND>max_distance = len(self.moments)\n        <DED>elif max_distance < 0:\n            <IND>raise ValueError('Negative max_distance: {}'.format(max_distance))\n        <DED>else:\n            <IND>max_distance = min(end_moment_index, max_distance)\n\n"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "5e41d6a13553d6193917f59af77ac8a52cf5ff92",
    "filename": "cirq/circuits/circuit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/circuits/circuit.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/circuits/circuit.py:282:8 Incompatible return type [7]: Expected `Set[ops.raw_types.QubitId]` but got `frozenset[typing.Any]`.",
    "message": " Expected `Set[ops.raw_types.QubitId]` but got `frozenset[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 282,
    "warning_line": "        return frozenset(q for m in self.moments for q in m.qubits)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Any, Callable, Dict, Iterable, Optional, Sequence, Set\n\n",
        "source_code_len": 76,
        "target_code": "\nfrom typing import Any, Callable, Dict, FrozenSet, Iterable, Optional, Sequence\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -16,3 +16,3 @@\n \n-from typing import Any, Callable, Dict, Iterable, Optional, Sequence, Set\n+from typing import Any, Callable, Dict, FrozenSet, Iterable, Optional, Sequence\n \n",
        "source_code_with_indent": "\nfrom typing import Any, Callable, Dict, Iterable, Optional, Sequence, Set\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Any, Callable, Dict, FrozenSet, Iterable, Optional, Sequence\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def qubits(self) -> Set[QubitId]:\n        \"\"\"Returns the qubits acted upon by Operations in this circuit.\"\"\"\n",
        "source_code_len": 114,
        "target_code": "\n    def qubits(self) -> FrozenSet[QubitId]:\n        \"\"\"Returns the qubits acted upon by Operations in this circuit.\"\"\"\n",
        "target_code_len": 120,
        "diff_format": "@@ -279,3 +277,3 @@\n \n-    def qubits(self) -> Set[QubitId]:\n+    def qubits(self) -> FrozenSet[QubitId]:\n         \"\"\"Returns the qubits acted upon by Operations in this circuit.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def qubits(self) -> Set[QubitId]:\n        <IND>\"\"\"Returns the qubits acted upon by Operations in this circuit.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def qubits(self) -> FrozenSet[QubitId]:\n        <IND>\"\"\"Returns the qubits acted upon by Operations in this circuit.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "5e41d6a13553d6193917f59af77ac8a52cf5ff92",
    "filename": "cirq/google/decompositions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/google/decompositions.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/google/decompositions.py:151:8 Incompatible return type [7]: Expected `List[ops.gate_features.SingleQubitGate]` but got `List[ExpWGate]`.",
    "message": " Expected `List[ops.gate_features.SingleQubitGate]` but got `List[ExpWGate]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 151,
    "warning_line": "        return ["
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "5e41d6a13553d6193917f59af77ac8a52cf5ff92",
    "filename": "cirq/google/merge_rotations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/google/merge_rotations.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/google/merge_rotations.py:81:8 Incompatible variable type [9]: gates is declared to have type `Iterable[ops.gate_features.KnownMatrixGate]` but is used as type `List[ops.gate_features.SingleQubitGate]`.",
    "message": " gates is declared to have type `Iterable[ops.gate_features.KnownMatrixGate]` but is used as type `List[ops.gate_features.SingleQubitGate]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 81,
    "warning_line": "        gates = single_qubit_matrix_to_native_gates(matrix, self.tolerance)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        gates = single_qubit_matrix_to_native_gates(matrix, self.tolerance)\n        return [gate(qubit) for gate in gates]\n",
        "source_code_len": 124,
        "target_code": "\n        out_gates = single_qubit_matrix_to_native_gates(matrix, self.tolerance)\n        return [gate(qubit) for gate in out_gates]\n",
        "target_code_len": 132,
        "diff_format": "@@ -80,3 +80,3 @@\n \n-        gates = single_qubit_matrix_to_native_gates(matrix, self.tolerance)\n-        return [gate(qubit) for gate in gates]\n+        out_gates = single_qubit_matrix_to_native_gates(matrix, self.tolerance)\n+        return [gate(qubit) for gate in out_gates]\n",
        "source_code_with_indent": "\n        <DED>gates = single_qubit_matrix_to_native_gates(matrix, self.tolerance)\n        return [gate(qubit) for gate in gates]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>out_gates = single_qubit_matrix_to_native_gates(matrix, self.tolerance)\n        return [gate(qubit) for gate in out_gates]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "5e41d6a13553d6193917f59af77ac8a52cf5ff92",
    "filename": "cirq/google/sim/xmon_simulator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/google/sim/xmon_simulator.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/google/sim/xmon_simulator.py:338:51 Incompatible parameter type [6]: Expected `DefaultDict[typing.Any, typing.Any]` for 3rd positional only parameter to call `StepResult.__init__` but got `Dict[Variable[_KT], Variable[_VT]]`.",
    "message": " Expected `DefaultDict[typing.Any, typing.Any]` for 3rd positional only parameter to call `StepResult.__init__` but got `Dict[Variable[_KT], Variable[_VT]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 338,
    "warning_line": "        return StepResult(a._stepper, a.qubit_map, new_measurements)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            qubit_map: Dict,\n            measurements: DefaultDict) -> None:\n        self.qubit_map = qubit_map or {}\n",
        "source_code_len": 118,
        "target_code": "            qubit_map: Dict,\n            measurements: Dict[str, List[bool]]) -> None:\n        self.qubit_map = qubit_map or {}\n",
        "target_code_len": 128,
        "diff_format": "@@ -269,3 +269,3 @@\n             qubit_map: Dict,\n-            measurements: DefaultDict) -> None:\n+            measurements: Dict[str, List[bool]]) -> None:\n         self.qubit_map = qubit_map or {}\n",
        "source_code_with_indent": "            qubit_map: Dict,\n            measurements: DefaultDict) -> None:\n        <IND>self.qubit_map = qubit_map or {}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            qubit_map: Dict,\n            measurements: Dict[str, List[bool]]) -> None:\n        <IND>self.qubit_map = qubit_map or {}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "5e41d6a13553d6193917f59af77ac8a52cf5ff92",
    "filename": "cirq/google/sim/xmon_simulator_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/google/sim/xmon_simulator_test.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/google/sim/xmon_simulator_test.py:385:8 Incompatible return type [7]: Expected `cirq.ops.op_tree.OP_TREE (resolves to typing.Union[typing.Iterable[op_tree.OP_TREE], raw_types.Operation])` but got `typing.Generator[UnsupportedGate, None, None]`.",
    "message": " Expected `cirq.ops.op_tree.OP_TREE (resolves to typing.Union[typing.Iterable[op_tree.OP_TREE], raw_types.Operation])` but got `typing.Generator[UnsupportedGate, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 385,
    "warning_line": "        yield UnsupportedGate(qubit)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        yield Z(qubit)\n        yield UnsupportedGate(qubit)\n\n",
        "source_code_len": 61,
        "target_code": "        yield Z(qubit)\n        yield UnsupportedGate().on(qubit)\n\n",
        "target_code_len": 66,
        "diff_format": "@@ -384,3 +384,3 @@\n         yield Z(qubit)\n-        yield UnsupportedGate(qubit)\n+        yield UnsupportedGate().on(qubit)\n \n",
        "source_code_with_indent": "        yield Z(qubit)\n        yield UnsupportedGate(qubit)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        yield Z(qubit)\n        yield UnsupportedGate().on(qubit)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "5e41d6a13553d6193917f59af77ac8a52cf5ff92",
    "filename": "cirq/ops/raw_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/raw_types.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "cirq/ops/raw_types.py:138:16 Unsupported operand [58]: `**` is not supported for operand types `Gate` and `float`.",
    "message": " `**` is not supported for operand types `Gate` and `float`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 138,
    "warning_line": "        return (self.gate ** power).on(*self.qubits)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        \"\"\"\n        return (self.gate ** power).on(*self.qubits)\n",
        "source_code_len": 65,
        "target_code": "        \"\"\"\n        return (self.gate ** power).on(*self.qubits)  # type: ignore\n",
        "target_code_len": 81,
        "diff_format": "@@ -137,2 +137,2 @@\n         \"\"\"\n-        return (self.gate ** power).on(*self.qubits)\n+        return (self.gate ** power).on(*self.qubits)  # type: ignore\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return (self.gate ** power).on(*self.qubits)\n",
        "target_code_with_indent": "\n        return (self.gate ** power).on(*self.qubits)  # type: ignore\n"
      }
    ]
  }
]