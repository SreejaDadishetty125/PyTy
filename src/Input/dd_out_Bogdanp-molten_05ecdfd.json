[
  {
    "project": "Bogdanp/molten",
    "commit": "05ecdfd7c91459525028422db285515802c34ba2",
    "filename": "molten/contrib/prometheus.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bogdanp-molten/molten/contrib/prometheus.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "molten/contrib/prometheus.py:67:48 Incompatible parameter type [6]: Expected `typing.Optional[str]` for 3rd parameter `content` to call `molten.http.response.Response.__init__` but got `BytesIO`.",
    "message": " Expected `typing.Optional[str]` for 3rd parameter `content` to call `molten.http.response.Response.__init__` but got `BytesIO`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 67,
    "warning_line": "    return Response(HTTP_200, headers=_HEADERS, content=BytesIO(generate_latest(registry)))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    multiprocess.MultiProcessCollector(registry)\n    return Response(HTTP_200, headers=_HEADERS, content=BytesIO(generate_latest(registry)))\n\n",
        "source_code_len": 142,
        "target_code": "    multiprocess.MultiProcessCollector(registry)\n    return Response(HTTP_200, headers=_HEADERS, stream=BytesIO(generate_latest(registry)))\n\n",
        "target_code_len": 141,
        "diff_format": "@@ -66,3 +66,3 @@\n     multiprocess.MultiProcessCollector(registry)\n-    return Response(HTTP_200, headers=_HEADERS, content=BytesIO(generate_latest(registry)))\n+    return Response(HTTP_200, headers=_HEADERS, stream=BytesIO(generate_latest(registry)))\n \n",
        "source_code_with_indent": "    multiprocess.MultiProcessCollector(registry)\n    return Response(HTTP_200, headers=_HEADERS, content=BytesIO(generate_latest(registry)))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    multiprocess.MultiProcessCollector(registry)\n    return Response(HTTP_200, headers=_HEADERS, stream=BytesIO(generate_latest(registry)))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bogdanp/molten",
    "commit": "05ecdfd7c91459525028422db285515802c34ba2",
    "filename": "molten/contrib/request_id.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bogdanp-molten/molten/contrib/request_id.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "molten/contrib/request_id.py:41:4 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 41,
    "warning_line": "    STATE.request_id = request_id"
  },
  {
    "project": "Bogdanp/molten",
    "commit": "05ecdfd7c91459525028422db285515802c34ba2",
    "filename": "molten/contrib/websockets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bogdanp-molten/molten/contrib/websockets.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "molten/contrib/websockets.py:183:92 Incompatible variable type [9]: mask is declared to have type `bytearray` but is used as type `bytes`.",
    "message": " mask is declared to have type `bytearray` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 183,
    "warning_line": "    def __init__(self, fin: bool = False, flags: int = 0, opcode: int = 0, length: int = 0, mask: bytearray = b\"\") -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, fin: bool = False, flags: int = 0, opcode: int = 0, length: int = 0, mask: bytearray = b\"\") -> None:\n        self.fin = fin\n",
        "source_code_len": 148,
        "target_code": "\n    def __init__(self, fin: bool = False, flags: int = 0, opcode: int = 0, length: int = 0, mask: Optional[bytearray] = None) -> None:  # noqa\n        self.fin = fin\n",
        "target_code_len": 167,
        "diff_format": "@@ -182,3 +182,3 @@\n \n-    def __init__(self, fin: bool = False, flags: int = 0, opcode: int = 0, length: int = 0, mask: bytearray = b\"\") -> None:\n+    def __init__(self, fin: bool = False, flags: int = 0, opcode: int = 0, length: int = 0, mask: Optional[bytearray] = None) -> None:  # noqa\n         self.fin = fin\n",
        "source_code_with_indent": "\n    def __init__(self, fin: bool = False, flags: int = 0, opcode: int = 0, length: int = 0, mask: bytearray = b\"\") -> None:\n        <IND>self.fin = fin\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, fin: bool = False, flags: int = 0, opcode: int = 0, length: int = 0, mask: Optional[bytearray] = None) -> None:  # noqa\n        <IND>self.fin = fin\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bogdanp/molten",
    "commit": "05ecdfd7c91459525028422db285515802c34ba2",
    "filename": "molten/contrib/websockets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bogdanp-molten/molten/contrib/websockets.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "molten/contrib/websockets.py:332:35 Incompatible parameter type [6]: Expected `bytes` for 2nd positional only parameter to call `_DataFrame.__init__` but got `memoryview`.",
    "message": " Expected `bytes` for 2nd positional only parameter to call `_DataFrame.__init__` but got `memoryview`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 332,
    "warning_line": "        frame = _DataFrame(header, data)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        header = _DataFrameHeader(fin=True, opcode=OPCODES_BY_MESSAGE[type(self)], length=len(data))\n        frame = _DataFrame(header, data)\n        frame.to_stream(stream)\n",
        "source_code_len": 174,
        "target_code": "        header = _DataFrameHeader(fin=True, opcode=OPCODES_BY_MESSAGE[type(self)], length=len(data))\n        frame = _DataFrame(header, data)  # type: ignore\n        frame.to_stream(stream)\n",
        "target_code_len": 190,
        "diff_format": "@@ -331,3 +331,3 @@\n         header = _DataFrameHeader(fin=True, opcode=OPCODES_BY_MESSAGE[type(self)], length=len(data))\n-        frame = _DataFrame(header, data)\n+        frame = _DataFrame(header, data)  # type: ignore\n         frame.to_stream(stream)\n",
        "source_code_with_indent": "        header = _DataFrameHeader(fin=True, opcode=OPCODES_BY_MESSAGE[type(self)], length=len(data))\n        frame = _DataFrame(header, data)\n        frame.to_stream(stream)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        header = _DataFrameHeader(fin=True, opcode=OPCODES_BY_MESSAGE[type(self)], length=len(data))\n        frame = _DataFrame(header, data)  # type: ignore\n        frame.to_stream(stream)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Bogdanp/molten",
    "commit": "05ecdfd7c91459525028422db285515802c34ba2",
    "filename": "molten/contrib/websockets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bogdanp-molten/molten/contrib/websockets.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "molten/contrib/websockets.py:480:31 Incompatible parameter type [6]: Expected `Optional[CloseMessage]` for 1st positional only parameter to call `Websocket.close` but got `Message`.",
    "message": " Expected `Optional[CloseMessage]` for 1st positional only parameter to call `Websocket.close` but got `Message`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 480,
    "warning_line": "                    self.close(CloseMessage.from_frame(frame))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def close(self, message: Optional[CloseMessage] = None) -> None:\n        \"\"\"Close this websocket and send a close message to the client.\n",
        "source_code_len": 142,
        "target_code": "\n    def close(self, message: Optional[Message] = None) -> None:\n        \"\"\"Close this websocket and send a close message to the client.\n",
        "target_code_len": 137,
        "diff_format": "@@ -509,3 +509,3 @@\n \n-    def close(self, message: Optional[CloseMessage] = None) -> None:\n+    def close(self, message: Optional[Message] = None) -> None:\n         \"\"\"Close this websocket and send a close message to the client.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def close(self, message: Optional[CloseMessage] = None) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def close(self, message: Optional[Message] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "Bogdanp/molten",
    "commit": "05ecdfd7c91459525028422db285515802c34ba2",
    "filename": "molten/contrib/websockets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Bogdanp-molten/molten/contrib/websockets.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "molten/contrib/websockets.py:702:39 Incompatible parameter type [6]: Expected `Union[typing.List[str], str]` for 2nd positional only parameter to call `dict.__setitem__` but got `bytes`.",
    "message": " Expected `Union[typing.List[str], str]` for 2nd positional only parameter to call `dict.__setitem__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 702,
    "warning_line": "        headers[\"sec-websocket-key\"] = b64encode(b\"a\" * 16)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        headers[\"upgrade\"] = \"websocket\"\n        headers[\"sec-websocket-key\"] = b64encode(b\"a\" * 16)\n        headers[\"sec-websocket-version\"] = \"13\"\n",
        "source_code_len": 149,
        "target_code": "        headers[\"upgrade\"] = \"websocket\"\n        headers[\"sec-websocket-key\"] = b64encode(b\"a\" * 16).decode()\n        headers[\"sec-websocket-version\"] = \"13\"\n",
        "target_code_len": 158,
        "diff_format": "@@ -701,3 +702,3 @@\n         headers[\"upgrade\"] = \"websocket\"\n-        headers[\"sec-websocket-key\"] = b64encode(b\"a\" * 16)\n+        headers[\"sec-websocket-key\"] = b64encode(b\"a\" * 16).decode()\n         headers[\"sec-websocket-version\"] = \"13\"\n",
        "source_code_with_indent": "        headers[\"upgrade\"] = \"websocket\"\n        headers[\"sec-websocket-key\"] = b64encode(b\"a\" * 16)\n        headers[\"sec-websocket-version\"] = \"13\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        headers[\"upgrade\"] = \"websocket\"\n        headers[\"sec-websocket-key\"] = b64encode(b\"a\" * 16).decode()\n        headers[\"sec-websocket-version\"] = \"13\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]