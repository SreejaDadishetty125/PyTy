[
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/cdr/clifford_training_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/cdr/clifford_training_data.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/cdr/clifford_training_data.py:173:8 Incompatible parameter type [6]: Expected `Optional[float]` for 4th positional only parameter to call `_select` but got `Union[typing.Dict[typing.Any, typing.Any], float]`.",
    "message": " Expected `Optional[float]` for 4th positional only parameter to call `_select` but got `Union[typing.Dict[typing.Any, typing.Any], float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 173,
    "warning_line": "        sigma_select,"
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/cdr/clifford_training_data.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/cdr/clifford_training_data.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/cdr/clifford_training_data.py:181:8 Incompatible parameter type [6]: Expected `float` for 3rd positional only parameter to call `_replace` but got `Union[typing.Dict[typing.Any, typing.Any], float]`.",
    "message": " Expected `float` for 3rd positional only parameter to call `_replace` but got `Union[typing.Dict[typing.Any, typing.Any], float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 181,
    "warning_line": "        sigma_replace,"
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/pec/types/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/pec/types/types.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/pec/types/types.py:425:47 Incompatible parameter type [6]: Expected `typing.Callable[[Variable[_T1]], Variable[_S]]` for 1st positional only parameter to call `map.__init__` but got `typing.Callable(abs)[[typing.SupportsAbs[Variable[_T]]], Variable[_T]]`.",
    "message": " Expected `typing.Callable[[Variable[_T1]], Variable[_S]]` for 1st positional only parameter to call `map.__init__` but got `typing.Callable(abs)[[typing.SupportsAbs[Variable[_T]]], Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 425,
    "warning_line": "        self._distribution = np.array(list(map(abs, self.coeffs))) / self.norm",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        self._norm = sum(abs(coeff) for coeff in self.coeffs)\n        self._distribution = np.array(list(map(abs, self.coeffs))) / self.norm\n\n",
        "source_code_len": 142,
        "target_code": "        self._norm = sum(abs(coeff) for coeff in self.coeffs)\n        self._distribution = (\n            np.array(\n                list(\n                    map(\n                        abs,  # type: ignore\n                        self.coeffs,\n                    )\n                )\n            )\n            / self.norm\n        )\n\n",
        "target_code_len": 333,
        "diff_format": "@@ -424,3 +426,13 @@\n         self._norm = sum(abs(coeff) for coeff in self.coeffs)\n-        self._distribution = np.array(list(map(abs, self.coeffs))) / self.norm\n+        self._distribution = (\n+            np.array(\n+                list(\n+                    map(\n+                        abs,  # type: ignore\n+                        self.coeffs,\n+                    )\n+                )\n+            )\n+            / self.norm\n+        )\n \n",
        "source_code_with_indent": "        self._norm = sum(abs(coeff) for coeff in self.coeffs)\n        self._distribution = np.array(list(map(abs, self.coeffs))) / self.norm\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._norm = sum(abs(coeff) for coeff in self.coeffs)\n        self._distribution = (\n            np.array(\n                list(\n                    map(\n                        abs,  # type: ignore\n                        self.coeffs,\n                    )\n                )\n            )\n            / self.norm\n        )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/pec/types/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/pec/types/types.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/pec/types/types.py:437:8 Incompatible return type [7]: Expected `Tuple[NoisyOperation]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[NoisyOperation]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 437,
    "warning_line": "        return tuple(self._basis_expansion.keys())",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def noisy_operations(self) -> Tuple[NoisyOperation]:\n        return tuple(self._basis_expansion.keys())\n",
        "source_code_len": 122,
        "target_code": "    @property\n    def noisy_operations(self) -> Tuple[NoisyOperation, ...]:\n        return tuple(self._basis_expansion.keys())\n",
        "target_code_len": 127,
        "diff_format": "@@ -435,3 +447,3 @@\n     @property\n-    def noisy_operations(self) -> Tuple[NoisyOperation]:\n+    def noisy_operations(self) -> Tuple[NoisyOperation, ...]:\n         return tuple(self._basis_expansion.keys())\n",
        "source_code_with_indent": "    <DED>@property\n    def noisy_operations(self) -> Tuple[NoisyOperation]:\n        <IND>return tuple(self._basis_expansion.keys())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def noisy_operations(self) -> Tuple[NoisyOperation, ...]:\n        <IND>return tuple(self._basis_expansion.keys())\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/pec/types/types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/pec/types/types.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/pec/types/types.py:441:8 Incompatible return type [7]: Expected `Tuple[float]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `Tuple[float]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 441,
    "warning_line": "        return tuple(self._basis_expansion.values())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from itertools import product\nfrom typing import Any, Dict, List, Optional, Sequence, Set, Tuple, Union\n\n",
        "source_code_len": 105,
        "target_code": "from itertools import product\nfrom typing import Any, cast, Dict, List, Optional, Sequence, Set, Tuple, Union\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -18,3 +18,3 @@\n from itertools import product\n-from typing import Any, Dict, List, Optional, Sequence, Set, Tuple, Union\n+from typing import Any, cast, Dict, List, Optional, Sequence, Set, Tuple, Union\n \n",
        "source_code_with_indent": "from itertools import product\nfrom typing import Any, Dict, List, Optional, Sequence, Set, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from itertools import product\nfrom typing import Any, cast, Dict, List, Optional, Sequence, Set, Tuple, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def coeffs(self) -> Tuple[float]:\n        return tuple(self._basis_expansion.values())\n\n",
        "source_code_len": 106,
        "target_code": "    @property\n    def coeffs(self) -> Tuple[float, ...]:\n        return tuple(cast(List[float], self._basis_expansion.values()))\n\n",
        "target_code_len": 130,
        "diff_format": "@@ -439,4 +451,4 @@\n     @property\n-    def coeffs(self) -> Tuple[float]:\n-        return tuple(self._basis_expansion.values())\n+    def coeffs(self) -> Tuple[float, ...]:\n+        return tuple(cast(List[float], self._basis_expansion.values()))\n \n",
        "source_code_with_indent": "    <DED>@property\n    def coeffs(self) -> Tuple[float]:\n        <IND>return tuple(self._basis_expansion.values())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def coeffs(self) -> Tuple[float, ...]:\n        <IND>return tuple(cast(List[float], self._basis_expansion.values()))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:781:4 Inconsistent override [14]: `mitiq.zne.inference.PolyFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.PolyFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 781,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -780,3 +786,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:781:4 Inconsistent override [14]: `mitiq.zne.inference.PolyFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.PolyFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 781,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -780,3 +786,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:854:4 Inconsistent override [14]: `mitiq.zne.inference.RichardsonFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.RichardsonFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 854,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -853,3 +859,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:854:4 Inconsistent override [14]: `mitiq.zne.inference.RichardsonFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.RichardsonFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 854,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -853,3 +859,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:922:4 Inconsistent override [14]: `mitiq.zne.inference.FakeNodesFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.FakeNodesFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 922,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -921,3 +927,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:922:4 Inconsistent override [14]: `mitiq.zne.inference.FakeNodesFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.FakeNodesFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 922,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -921,3 +927,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:1029:4 Inconsistent override [14]: `mitiq.zne.inference.LinearFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.LinearFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1029,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -1028,3 +1031,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:1029:4 Inconsistent override [14]: `mitiq.zne.inference.LinearFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.LinearFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1029,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -1028,3 +1031,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:1114:4 Inconsistent override [14]: `mitiq.zne.inference.ExpFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.ExpFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1114,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -1113,3 +1116,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:1114:4 Inconsistent override [14]: `mitiq.zne.inference.ExpFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.ExpFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1114,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -1113,3 +1116,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:1235:4 Inconsistent override [14]: `mitiq.zne.inference.PolyExpFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.PolyExpFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Variable(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1235,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -1234,3 +1237,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/inference.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/inference.py",
    "file_hunks_size": 20,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mitiq/zne/inference.py:1235:4 Inconsistent override [14]: `mitiq.zne.inference.PolyExpFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "message": " `mitiq.zne.inference.PolyExpFactory.extrapolate` overrides method defined in `BatchedFactory` inconsistently. Could not find parameter `Keywords(unknown)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1235,
    "warning_line": "    def extrapolate(",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    @staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_len": 79,
        "target_code": "    @staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_len": 95,
        "diff_format": "@@ -1234,3 +1237,3 @@\n     @staticmethod\n-    def extrapolate(\n+    def extrapolate(  # type: ignore\n         scale_factors: Sequence[float],\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(\n        scale_factors: Sequence[float],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def extrapolate(  # type: ignore\n        scale_factors: Sequence[float],\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/scaling/folding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/scaling/folding.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/scaling/folding.py:622:8 Incompatible parameter type [6]: Expected `List[int]` for 2nd positional only parameter to call `_apply_fold_mask` but got `List[float]`.",
    "message": " Expected `List[int]` for 2nd positional only parameter to call `_apply_fold_mask` but got `List[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 622,
    "warning_line": "        num_folds_mask,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    seed: Optional[int] = None,\n) -> List[float]:\n    r\"\"\"Returns a list of integers determining how many times each gate a\n",
        "source_code_len": 124,
        "target_code": "    seed: Optional[int] = None,\n) -> List[int]:\n    r\"\"\"Returns a list of integers determining how many times each gate a\n",
        "target_code_len": 122,
        "diff_format": "@@ -385,3 +377,3 @@\n     seed: Optional[int] = None,\n-) -> List[float]:\n+) -> List[int]:\n     r\"\"\"Returns a list of integers determining how many times each gate a\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    seed: Optional[int] = None,\n) -> List[float]:\n    <IND>",
        "target_code_with_indent": "    seed: Optional[int] = None,\n) -> List[int]:\n    <IND>"
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/scaling/folding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/scaling/folding.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/scaling/folding.py:699:8 Incompatible parameter type [6]: Expected `List[int]` for 2nd positional only parameter to call `_apply_fold_mask` but got `List[float]`.",
    "message": " Expected `List[int]` for 2nd positional only parameter to call `_apply_fold_mask` but got `List[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 699,
    "warning_line": "        num_folds_mask,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    seed: Optional[int] = None,\n) -> List[float]:\n    r\"\"\"Returns a list of integers determining how many times each gate a\n",
        "source_code_len": 124,
        "target_code": "    seed: Optional[int] = None,\n) -> List[int]:\n    r\"\"\"Returns a list of integers determining how many times each gate a\n",
        "target_code_len": 122,
        "diff_format": "@@ -385,3 +377,3 @@\n     seed: Optional[int] = None,\n-) -> List[float]:\n+) -> List[int]:\n     r\"\"\"Returns a list of integers determining how many times each gate a\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    seed: Optional[int] = None,\n) -> List[float]:\n    <IND>",
        "target_code_with_indent": "    seed: Optional[int] = None,\n) -> List[int]:\n    <IND>"
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/scaling/folding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/scaling/folding.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/scaling/folding.py:779:8 Incompatible parameter type [6]: Expected `List[int]` for 2nd positional only parameter to call `_apply_fold_mask` but got `List[float]`.",
    "message": " Expected `List[int]` for 2nd positional only parameter to call `_apply_fold_mask` but got `List[float]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 779,
    "warning_line": "        num_folds_mask,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    seed: Optional[int] = None,\n) -> List[float]:\n    r\"\"\"Returns a list of integers determining how many times each gate a\n",
        "source_code_len": 124,
        "target_code": "    seed: Optional[int] = None,\n) -> List[int]:\n    r\"\"\"Returns a list of integers determining how many times each gate a\n",
        "target_code_len": 122,
        "diff_format": "@@ -385,3 +377,3 @@\n     seed: Optional[int] = None,\n-) -> List[float]:\n+) -> List[int]:\n     r\"\"\"Returns a list of integers determining how many times each gate a\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    seed: Optional[int] = None,\n) -> List[float]:\n    <IND>",
        "target_code_with_indent": "    seed: Optional[int] = None,\n) -> List[int]:\n    <IND>"
      }
    ]
  },
  {
    "project": "unitaryfund/mitiq",
    "commit": "58fdff01d53c0b9cf9b068d60e005c094ca6ffcb",
    "filename": "mitiq/zne/scaling/parameter.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/unitaryfund-mitiq/mitiq/zne/scaling/parameter.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mitiq/zne/scaling/parameter.py:76:25 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[typing.Any]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 76,
    "warning_line": "    if num_qubits != len(qubits):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Optional, Callable, Iterable\nimport numpy as np\n",
        "source_code_len": 68,
        "target_code": "\nfrom typing import Optional, Callable, List, cast\nimport numpy as np\n",
        "target_code_len": 70,
        "diff_format": "@@ -15,3 +15,3 @@\n \n-from typing import Optional, Callable, Iterable\n+from typing import Optional, Callable, List, cast\n import numpy as np\n",
        "source_code_with_indent": "\nfrom typing import Optional, Callable, Iterable\nimport numpy as np\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional, Callable, List, cast\nimport numpy as np\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def _generate_parameter_calibration_circuit(\n    qubits: Iterable, depth: int, gate: EigenGate\n) -> Circuit:\n",
        "source_code_len": 109,
        "target_code": "def _generate_parameter_calibration_circuit(\n    qubits: List[Qid], depth: int, gate: EigenGate\n) -> Circuit:\n",
        "target_code_len": 110,
        "diff_format": "@@ -57,3 +56,3 @@\n def _generate_parameter_calibration_circuit(\n-    qubits: Iterable, depth: int, gate: EigenGate\n+    qubits: List[Qid], depth: int, gate: EigenGate\n ) -> Circuit:\n",
        "source_code_with_indent": "<DED>def _generate_parameter_calibration_circuit(\n    qubits: Iterable, depth: int, gate: EigenGate\n) -> Circuit:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def _generate_parameter_calibration_circuit(\n    qubits: List[Qid], depth: int, gate: EigenGate\n) -> Circuit:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]