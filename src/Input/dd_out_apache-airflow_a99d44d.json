[
  {
    "project": "apache/airflow",
    "commit": "a99d44d678bfc89a5b8f30cb83df457011aa7a1d",
    "filename": "airflow/operators/datetime.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/operators/datetime.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/operators/datetime.py:106:7 Unsupported operand [58]: `<` is not supported for operand types `typing.Optional[datetime.datetime]` and `typing.Optional[datetime.datetime]`.",
    "message": " `<` is not supported for operand types `typing.Optional[datetime.datetime]` and `typing.Optional[datetime.datetime]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 106,
    "warning_line": "    if upper < lower:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    if any(date is None for date in (lower, upper)):\n        return lower, upper\n",
        "source_code_len": 82,
        "target_code": "\n    if lower is None or upper is None:\n        return lower, upper\n",
        "target_code_len": 68,
        "diff_format": "@@ -102,3 +102,3 @@\n \n-    if any(date is None for date in (lower, upper)):\n+    if lower is None or upper is None:\n         return lower, upper\n",
        "source_code_with_indent": "\n    <DED>if any(date is None for date in (lower, upper)):\n        <IND>return lower, upper\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>if lower is None or upper is None:\n        <IND>return lower, upper\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "a99d44d678bfc89a5b8f30cb83df457011aa7a1d",
    "filename": "airflow/operators/weekday.py",
    "min_patch_found": false,
    "full_warning_msg": "airflow/operators/weekday.py:66:55 Incompatible parameter type [6]: Expected `Union[typing.List[WeekDay], typing.List[str], typing.Set[WeekDay], typing.Set[str], WeekDay, str]` for 1st positional only parameter to call `WeekDay.validate_week_day` but got `Union[Iterable[str], str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "apache/airflow",
    "commit": "a99d44d678bfc89a5b8f30cb83df457011aa7a1d",
    "filename": "airflow/sensors/external_task.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/sensors/external_task.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/sensors/external_task.py:135:19 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[str]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Iterable[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 135,
    "warning_line": "            if len(external_task_ids) > len(set(external_task_ids)):"
  },
  {
    "project": "apache/airflow",
    "commit": "a99d44d678bfc89a5b8f30cb83df457011aa7a1d",
    "filename": "airflow/sensors/external_task.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/sensors/external_task.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/sensors/external_task.py:241:32 Incompatible parameter type [6]: Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[Iterable[str]]`.",
    "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[Iterable[str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 241,
    "warning_line": "            count = count / len(self.external_task_ids)"
  },
  {
    "project": "apache/airflow",
    "commit": "a99d44d678bfc89a5b8f30cb83df457011aa7a1d",
    "filename": "airflow/sensors/external_task.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/sensors/external_task.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/sensors/external_task.py:269:47 Incompatible parameter type [6]: Expected `typing.Callable[..., typing.Any]` for 1st positional only parameter to call `make_kwargs_callable` but got `Optional[typing.Callable[..., typing.Any]]`.",
    "message": " Expected `typing.Callable[..., typing.Any]` for 1st positional only parameter to call `make_kwargs_callable` but got `Optional[typing.Callable[..., typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 269,
    "warning_line": "        kwargs_callable = make_kwargs_callable(self.execution_date_fn)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        kwargs[\"context\"] = context\n        kwargs_callable = make_kwargs_callable(self.execution_date_fn)\n",
        "source_code_len": 107,
        "target_code": "        kwargs[\"context\"] = context\n        if TYPE_CHECKING:\n            assert self.execution_date_fn is not None\n        kwargs_callable = make_kwargs_callable(self.execution_date_fn)\n",
        "target_code_len": 187,
        "diff_format": "@@ -268,2 +267,4 @@\n         kwargs[\"context\"] = context\n+        if TYPE_CHECKING:\n+            assert self.execution_date_fn is not None\n         kwargs_callable = make_kwargs_callable(self.execution_date_fn)\n",
        "source_code_with_indent": "        kwargs[\"context\"] = context\n        kwargs_callable = make_kwargs_callable(self.execution_date_fn)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        kwargs[\"context\"] = context\n        if TYPE_CHECKING:\n            <IND>assert self.execution_date_fn is not None\n        <DED>kwargs_callable = make_kwargs_callable(self.execution_date_fn)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "a99d44d678bfc89a5b8f30cb83df457011aa7a1d",
    "filename": "airflow/utils/operator_helpers.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/utils/operator_helpers.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/utils/operator_helpers.py:115:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `Mapping[typing.Any, typing.Any]`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `Mapping[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 115,
    "warning_line": "        return kwargs",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from datetime import datetime\nfrom typing import Callable, Dict, List, Mapping, Tuple, Union\n\n",
        "source_code_len": 94,
        "target_code": "from datetime import datetime\nfrom typing import Any, Callable, Dict, Mapping, Sequence, TypeVar\n\nR = TypeVar(\"R\")\n\n",
        "target_code_len": 116,
        "diff_format": "@@ -19,3 +19,5 @@\n from datetime import datetime\n-from typing import Callable, Dict, List, Mapping, Tuple, Union\n+from typing import Any, Callable, Dict, Mapping, Sequence, TypeVar\n+\n+R = TypeVar(\"R\")\n \n",
        "source_code_with_indent": "from datetime import datetime\nfrom typing import Callable, Dict, List, Mapping, Tuple, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from datetime import datetime\nfrom typing import Any, Callable, Dict, Mapping, Sequence, TypeVar\n\nR = TypeVar(\"R\")\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef determine_kwargs(func: Callable, args: Union[Tuple, List], kwargs: Mapping) -> Dict:\n    \"\"\"\n",
        "source_code_len": 98,
        "target_code": "\ndef determine_kwargs(\n    func: Callable[..., Any],\n    args: Sequence[Any],\n    kwargs: Mapping[str, Any],\n) -> Mapping[str, Any]:\n    \"\"\"\n",
        "target_code_len": 141,
        "diff_format": "@@ -90,3 +92,7 @@\n \n-def determine_kwargs(func: Callable, args: Union[Tuple, List], kwargs: Mapping) -> Dict:\n+def determine_kwargs(\n+    func: Callable[..., Any],\n+    args: Sequence[Any],\n+    kwargs: Mapping[str, Any],\n+) -> Mapping[str, Any]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def determine_kwargs(func: Callable, args: Union[Tuple, List], kwargs: Mapping) -> Dict:\n    <IND>",
        "target_code_with_indent": "\n<DED>def determine_kwargs(\n    func: Callable[..., Any],\n    args: Sequence[Any],\n    kwargs: Mapping[str, Any],\n) -> Mapping[str, Any]:\n    <IND>"
      }
    ]
  }
]