[
  {
    "project": "life4/deal",
    "commit": "ea9535baedc8ec3f39e57507c4ca40cfa0ba919b",
    "filename": "deal/linter/_cli.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_cli.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deal/linter/_cli.py:70:29 Incompatible parameter type [6]: Expected `typing.Optional[typing.Sequence[str]]` for 1st positional only parameter to call `ArgumentParser.parse_args` but got `Iterable[typing.Any]`.",
    "message": " Expected `typing.Optional[typing.Sequence[str]]` for 1st positional only parameter to call `ArgumentParser.parse_args` but got `Iterable[typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 70,
    "warning_line": "    args = parser.parse_args(argv)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from textwrap import dedent, indent\nfrom typing import Iterable, Iterator, Union\n\n",
        "source_code_len": 82,
        "target_code": "from textwrap import dedent, indent\nfrom typing import Iterable, Iterator, Sequence, Union\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -5,3 +5,3 @@\n from textwrap import dedent, indent\n-from typing import Iterable, Iterator, Union\n+from typing import Iterable, Iterator, Sequence, Union\n \n",
        "source_code_with_indent": "from textwrap import dedent, indent\nfrom typing import Iterable, Iterator, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from textwrap import dedent, indent\nfrom typing import Iterable, Iterator, Sequence, Union\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef main(argv: Iterable) -> int:\n    parser = get_parser()\n",
        "source_code_len": 60,
        "target_code": "\ndef main(argv: Sequence[str]) -> int:\n    parser = get_parser()\n",
        "target_code_len": 65,
        "diff_format": "@@ -67,3 +67,3 @@\n \n-def main(argv: Iterable) -> int:\n+def main(argv: Sequence[str]) -> int:\n     parser = get_parser()\n",
        "source_code_with_indent": "\n<DED>def main(argv: Iterable) -> int:\n    <IND>parser = get_parser()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def main(argv: Sequence[str]) -> int:\n    <IND>parser = get_parser()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "life4/deal",
    "commit": "ea9535baedc8ec3f39e57507c4ca40cfa0ba919b",
    "filename": "deal/linter/_extractors/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_extractors/common.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deal/linter/_extractors/common.py:60:15 Unsupported operand [58]: `+` is not supported for operand types `Optional[str]` and `str`.",
    "message": " `+` is not supported for operand types `Optional[str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 60,
    "warning_line": "        return get_name(expr.expr) + '.' + expr.attrname",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(expr, astroid.Attribute):\n        return get_name(expr.expr) + '.' + expr.attrname\n    if isinstance(expr, ast.Attribute):\n        return get_name(expr.value) + '.' + expr.attr\n\n",
        "source_code_len": 196,
        "target_code": "    if isinstance(expr, astroid.Attribute):\n        left = get_name(expr.expr)\n        if left is None:\n            return None\n        return left + '.' + expr.attrname\n    if isinstance(expr, ast.Attribute):\n        left = get_name(expr.value)\n        if left is None:\n            return None\n        return left + '.' + expr.attr\n\n",
        "target_code_len": 334,
        "diff_format": "@@ -59,5 +59,11 @@\n     if isinstance(expr, astroid.Attribute):\n-        return get_name(expr.expr) + '.' + expr.attrname\n+        left = get_name(expr.expr)\n+        if left is None:\n+            return None\n+        return left + '.' + expr.attrname\n     if isinstance(expr, ast.Attribute):\n-        return get_name(expr.value) + '.' + expr.attr\n+        left = get_name(expr.value)\n+        if left is None:\n+            return None\n+        return left + '.' + expr.attr\n \n",
        "source_code_with_indent": "    <DED>if isinstance(expr, astroid.Attribute):\n        <IND>return get_name(expr.expr) + '.' + expr.attrname\n    <DED>if isinstance(expr, ast.Attribute):\n        <IND>return get_name(expr.value) + '.' + expr.attr\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if isinstance(expr, astroid.Attribute):\n        <IND>left = get_name(expr.expr)\n        if left is None:\n            <IND>return None\n        <DED>return left + '.' + expr.attrname\n    <DED>if isinstance(expr, ast.Attribute):\n        <IND>left = get_name(expr.value)\n        if left is None:\n            <IND>return None\n        <DED>return left + '.' + expr.attr\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "life4/deal",
    "commit": "ea9535baedc8ec3f39e57507c4ca40cfa0ba919b",
    "filename": "deal/linter/_extractors/common.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_extractors/common.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deal/linter/_extractors/common.py:62:15 Unsupported operand [58]: `+` is not supported for operand types `Optional[str]` and `str`.",
    "message": " `+` is not supported for operand types `Optional[str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 62,
    "warning_line": "        return get_name(expr.value) + '.' + expr.attr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    if isinstance(expr, astroid.Attribute):\n        return get_name(expr.expr) + '.' + expr.attrname\n    if isinstance(expr, ast.Attribute):\n        return get_name(expr.value) + '.' + expr.attr\n\n",
        "source_code_len": 196,
        "target_code": "    if isinstance(expr, astroid.Attribute):\n        left = get_name(expr.expr)\n        if left is None:\n            return None\n        return left + '.' + expr.attrname\n    if isinstance(expr, ast.Attribute):\n        left = get_name(expr.value)\n        if left is None:\n            return None\n        return left + '.' + expr.attr\n\n",
        "target_code_len": 334,
        "diff_format": "@@ -59,5 +59,11 @@\n     if isinstance(expr, astroid.Attribute):\n-        return get_name(expr.expr) + '.' + expr.attrname\n+        left = get_name(expr.expr)\n+        if left is None:\n+            return None\n+        return left + '.' + expr.attrname\n     if isinstance(expr, ast.Attribute):\n-        return get_name(expr.value) + '.' + expr.attr\n+        left = get_name(expr.value)\n+        if left is None:\n+            return None\n+        return left + '.' + expr.attr\n \n",
        "source_code_with_indent": "    <DED>if isinstance(expr, astroid.Attribute):\n        <IND>return get_name(expr.expr) + '.' + expr.attrname\n    <DED>if isinstance(expr, ast.Attribute):\n        <IND>return get_name(expr.value) + '.' + expr.attr\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>if isinstance(expr, astroid.Attribute):\n        <IND>left = get_name(expr.expr)\n        if left is None:\n            <IND>return None\n        <DED>return left + '.' + expr.attrname\n    <DED>if isinstance(expr, ast.Attribute):\n        <IND>left = get_name(expr.value)\n        if left is None:\n            <IND>return None\n        <DED>return left + '.' + expr.attr\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "life4/deal",
    "commit": "ea9535baedc8ec3f39e57507c4ca40cfa0ba919b",
    "filename": "deal/linter/_extractors/exceptions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_extractors/exceptions.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "deal/linter/_extractors/exceptions.py:27:36 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `getattr` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `getattr` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 27,
    "warning_line": "            exc = getattr(builtins, name, name)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            name = get_name(expr.exc)\n            # raise instance\n            if not name and isinstance(expr.exc, TOKENS.CALL):\n                name = get_name(expr.exc.func)\n",
        "source_code_len": 177,
        "target_code": "            name = get_name(expr.exc)\n            if not name:\n                # raised a value, too tricky\n                if not isinstance(expr.exc, TOKENS.CALL):\n                    continue\n                # raised an instance of an exception\n                name = get_name(expr.exc.func)\n",
        "target_code_len": 295,
        "diff_format": "@@ -21,4 +21,7 @@\n             name = get_name(expr.exc)\n-            # raise instance\n-            if not name and isinstance(expr.exc, TOKENS.CALL):\n+            if not name:\n+                # raised a value, too tricky\n+                if not isinstance(expr.exc, TOKENS.CALL):\n+                    continue\n+                # raised an instance of an exception\n                 name = get_name(expr.exc.func)\n",
        "source_code_with_indent": "            <IND>name = get_name(expr.exc)\n            # raise instance\n            if not name and isinstance(expr.exc, TOKENS.CALL):\n                <IND>name = get_name(expr.exc.func)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>name = get_name(expr.exc)\n            if not name:\n                # raised a value, too tricky\n                <IND>if not isinstance(expr.exc, TOKENS.CALL):\n                    <IND>continue\n                # raised an instance of an exception\n                <DED>name = get_name(expr.exc.func)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "life4/deal",
    "commit": "ea9535baedc8ec3f39e57507c4ca40cfa0ba919b",
    "filename": "deal/linter/_rules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_rules.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "deal/linter/_rules.py:68:43 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `Error.__init__` but got `int`.",
    "message": " Expected `str` for 2nd positional only parameter to call `Error.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 68,
    "warning_line": "                yield Error(text=result, **error_info)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            if isinstance(result, str):\n                yield Error(text=result, **error_info)\n                continue\n            if not result:\n                yield Error(text=self.message, **error_info)\n\n",
        "source_code_len": 209,
        "target_code": "            if isinstance(result, str):\n                yield Error(text=result, **error_info)  # type: ignore\n                continue\n            if not result:\n                yield Error(text=self.message, **error_info)  # type: ignore\n\n",
        "target_code_len": 241,
        "diff_format": "@@ -67,6 +67,6 @@\n             if isinstance(result, str):\n-                yield Error(text=result, **error_info)\n+                yield Error(text=result, **error_info)  # type: ignore\n                 continue\n             if not result:\n-                yield Error(text=self.message, **error_info)\n+                yield Error(text=self.message, **error_info)  # type: ignore\n \n",
        "source_code_with_indent": "            if isinstance(result, str):\n                <IND>yield Error(text=result, **error_info)\n                continue\n            <DED>if not result:\n                <IND>yield Error(text=self.message, **error_info)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if isinstance(result, str):\n                <IND>yield Error(text=result, **error_info)  # type: ignore\n                continue\n            <DED>if not result:\n                <IND>yield Error(text=self.message, **error_info)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "life4/deal",
    "commit": "ea9535baedc8ec3f39e57507c4ca40cfa0ba919b",
    "filename": "deal/linter/_rules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/life4-deal/deal/linter/_rules.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "deal/linter/_rules.py:71:49 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `Error.__init__` but got `int`.",
    "message": " Expected `str` for 2nd positional only parameter to call `Error.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 71,
    "warning_line": "                yield Error(text=self.message, **error_info)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            if isinstance(result, str):\n                yield Error(text=result, **error_info)\n                continue\n            if not result:\n                yield Error(text=self.message, **error_info)\n\n",
        "source_code_len": 209,
        "target_code": "            if isinstance(result, str):\n                yield Error(text=result, **error_info)  # type: ignore\n                continue\n            if not result:\n                yield Error(text=self.message, **error_info)  # type: ignore\n\n",
        "target_code_len": 241,
        "diff_format": "@@ -67,6 +67,6 @@\n             if isinstance(result, str):\n-                yield Error(text=result, **error_info)\n+                yield Error(text=result, **error_info)  # type: ignore\n                 continue\n             if not result:\n-                yield Error(text=self.message, **error_info)\n+                yield Error(text=self.message, **error_info)  # type: ignore\n \n",
        "source_code_with_indent": "            if isinstance(result, str):\n                <IND>yield Error(text=result, **error_info)\n                continue\n            <DED>if not result:\n                <IND>yield Error(text=self.message, **error_info)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            if isinstance(result, str):\n                <IND>yield Error(text=result, **error_info)  # type: ignore\n                continue\n            <DED>if not result:\n                <IND>yield Error(text=self.message, **error_info)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]