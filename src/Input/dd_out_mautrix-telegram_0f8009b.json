[
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/__main__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/__main__.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/__main__.py:116:23 Unsupported operand [58]: `+` is not supported for operand types `typing.List[typing.Awaitable[int]]` and `typing.List[typing.Awaitable[User]]`.",
    "message": " `+` is not supported for operand types `typing.List[typing.Awaitable[int]]` and `typing.List[typing.Awaitable[User]]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 116,
    "warning_line": "                       init_user(context) +"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/abstract_user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/abstract_user.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/abstract_user.py:70:8 Incompatible attribute type [8]: Attribute `tgid` declared in class `AbstractUser` has type `int` but is used as type `None`.",
    "message": " Attribute `tgid` declared in class `AbstractUser` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 70,
    "warning_line": "        self.tgid = None  # type: int"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/bot.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/bot.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/bot.py:84:8 Incompatible attribute type [8]: Attribute `mxid` declared in class `AbstractUser` has type `str` but is used as type `None`.",
    "message": " Attribute `mxid` declared in class `AbstractUser` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 84,
    "warning_line": "        self.mxid = pu.Puppet.get_mxid_from_id(self.tgid)"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/bot.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/bot.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/bot.py:253:4 Inconsistent override [15]: `mautrix_telegram.bot.Bot.update` overrides method defined in `AbstractUser` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, None]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, bool]`.",
    "message": " `mautrix_telegram.bot.Bot.update` overrides method defined in `AbstractUser` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, None]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, bool]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 253,
    "warning_line": "    async def update(self, update) -> None:"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/handler.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/handler.py:133:8 Incompatible return type [7]: Expected `None` but got `CommandHandler`.",
    "message": " Expected `None` but got `CommandHandler`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 133,
    "warning_line": "        return handler"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/handler.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/handler.py:135:4 Incompatible return type [7]: Expected `None` but got `Optional[typing.Callable[[Named(func, typing.Callable[[CommandEvent], None])], None]]`.",
    "message": " Expected `None` but got `Optional[typing.Callable[[Named(func, typing.Callable[[CommandEvent], None])], None]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 135,
    "warning_line": "    return decorator if _func is None else decorator(_func)"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/handler.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/handler.py:152:12 Incompatible variable type [9]: command is declared to have type `str` but is used as type `CommandHandler`.",
    "message": " command is declared to have type `str` but is used as type `CommandHandler`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 152,
    "warning_line": "            command = command_handlers[command]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        try:\n            command = command_handlers[command]\n        except KeyError:\n",
        "source_code_len": 86,
        "target_code": "        try:\n            command_handler = command_handlers[command]\n        except KeyError:\n",
        "target_code_len": 94,
        "diff_format": "@@ -151,3 +162,3 @@\n         try:\n-            command = command_handlers[command]\n+            command_handler = command_handlers[command]\n         except KeyError:\n",
        "source_code_with_indent": "        try:\n            <IND>command = command_handlers[command]\n        <DED>except KeyError:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        try:\n            <IND>command_handler = command_handlers[command]\n        <DED>except KeyError:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/handler.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/handler.py:159:16 Incompatible variable type [9]: command is declared to have type `str` but is used as type `CommandHandler`.",
    "message": " command is declared to have type `str` but is used as type `CommandHandler`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 159,
    "warning_line": "                command = command_handlers[\"unknown-command\"]"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/meta.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/meta.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/meta.py:26:8 Incompatible attribute type [8]: Attribute `command_status` declared in class `mautrix_telegram.user.User` has type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " Attribute `command_status` declared in class `mautrix_telegram.user.User` has type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 26,
    "warning_line": "        evt.sender.command_status = None"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/meta.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/meta.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/meta.py:58:8 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 58,
    "warning_line": "        return \"This is a management room: prefixing commands with `$cmdprefix` is not required.\""
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/meta.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/meta.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/meta.py:60:8 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 60,
    "warning_line": "        return (\"**This is a portal room**: you must always prefix commands with `$cmdprefix`.\\n\""
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/meta.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/meta.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/meta.py:62:4 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 62,
    "warning_line": "    return \"**This is not a management room**: you must prefix commands with `$cmdprefix`.\""
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/meta.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/meta.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/meta.py:69:27 Unsupported operand [58]: `+` is not supported for operand types `None` and `str`.",
    "message": " `+` is not supported for operand types `None` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 69,
    "warning_line": "    return await evt.reply(_get_management_status(evt) + \"\\n\" + await _get_help_text(evt))"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/telegram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/telegram.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/telegram.py:98:12 Incompatible return type [7]: Expected `None` but got `typing.Tuple[None, typing.Any]`.",
    "message": " Expected `None` but got `typing.Tuple[None, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 98,
    "warning_line": "            return None, await evt.reply(\"Invalid invite link.\")"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/telegram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/telegram.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/telegram.py:100:12 Incompatible return type [7]: Expected `None` but got `typing.Tuple[None, typing.Any]`.",
    "message": " Expected `None` but got `typing.Tuple[None, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 100,
    "warning_line": "            return None, await evt.reply(\"Invite link expired.\")"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/telegram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/telegram.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/telegram.py:102:12 Incompatible return type [7]: Expected `None` but got `typing.Tuple[typing.Any, None]`.",
    "message": " Expected `None` but got `typing.Tuple[typing.Any, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 102,
    "warning_line": "            return (await evt.sender.client(ImportChatInviteRequest(invite_hash))), None"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/telegram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/telegram.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/telegram.py:104:12 Incompatible return type [7]: Expected `None` but got `typing.Tuple[None, typing.Any]`.",
    "message": " Expected `None` but got `typing.Tuple[None, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 104,
    "warning_line": "            return None, await evt.reply(\"You are already in that chat.\")"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/telegram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/telegram.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/telegram.py:108:12 Incompatible return type [7]: Expected `None` but got `typing.Tuple[None, typing.Any]`.",
    "message": " Expected `None` but got `typing.Tuple[None, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 108,
    "warning_line": "            return None, await evt.reply(\"Channel/supergroup not found.\")"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/telegram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/telegram.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/telegram.py:109:8 Incompatible return type [7]: Expected `None` but got `typing.Tuple[typing.Any, None]`.",
    "message": " Expected `None` but got `typing.Tuple[typing.Any, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 109,
    "warning_line": "        return await evt.sender.client(JoinChannelRequest(channel)), None"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/commands/telegram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/commands/telegram.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/commands/telegram.py:119:12 Unbound name [10]: Name `re` is used but not defined in the current scope.",
    "message": " Name `re` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 119,
    "warning_line": "    regex = re.compile(r\"(?:https?://)?t(?:elegram)?\\.(?:dog|me)(?:joinchat/)?/(.+)\")"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/config.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/config.py:102:8 Incompatible attribute type [8]: Attribute `_registration` declared in class `Config` has type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "message": " Attribute `_registration` declared in class `Config` has type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 102,
    "warning_line": "        self._registration = None  # type: dict",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Tuple, Any, Optional\nfrom ruamel.yaml import YAML\n",
        "source_code_len": 142,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Any, Dict, Optional, Tuple\nfrom ruamel.yaml import YAML\n",
        "target_code_len": 148,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import Tuple, Any, Optional\n+from typing import Any, Dict, Optional, Tuple\n from ruamel.yaml import YAML\n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Tuple, Any, Optional\nfrom ruamel.yaml import YAML\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Any, Dict, Optional, Tuple\nfrom ruamel.yaml import YAML\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.base_path = base_path  # type: str\n        self._registration = None  # type: dict\n\n",
        "source_code_len": 97,
        "target_code": "        self.base_path = base_path  # type: str\n        self._registration = None  # type: Optional[Dict]\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -101,3 +101,3 @@\n         self.base_path = base_path  # type: str\n-        self._registration = None  # type: dict\n+        self._registration = None  # type: Optional[Dict]\n \n",
        "source_code_with_indent": "        self.base_path = base_path  # type: str\n        self._registration = None  # type: dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.base_path = base_path  # type: str\n        self._registration = None  # type: Optional[Dict]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/context.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/context.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/context.py:50:8 Incompatible return type [7]: Expected `None` but got `typing.Generator[Config, None, None]`.",
    "message": " Expected `None` but got `typing.Generator[Config, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 50,
    "warning_line": "        yield self.config",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import TYPE_CHECKING, Optional\n\n",
        "source_code_len": 117,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Generator, Optional, Tuple, Union, TYPE_CHECKING\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import TYPE_CHECKING, Optional\n+from typing import Generator, Optional, Tuple, Union, TYPE_CHECKING\n \n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import TYPE_CHECKING, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Generator, Optional, Tuple, Union, TYPE_CHECKING\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __iter__(self) -> None:\n        yield self.az\n        yield self.db\n        yield self.config\n        yield self.loop\n        yield self.bot\n",
        "source_code_len": 150,
        "target_code": "\n    @property\n    def core(self) -> Tuple['AppService', 'scoped_session', 'Config',\n                            'asyncio.AbstractEventLoop', Optional['Bot']]:\n        return (self.az, self.db, self.config, self.loop, self.bot)\n",
        "target_code_len": 228,
        "diff_format": "@@ -46,7 +46,5 @@\n \n-    def __iter__(self) -> None:\n-        yield self.az\n-        yield self.db\n-        yield self.config\n-        yield self.loop\n-        yield self.bot\n+    @property\n+    def core(self) -> Tuple['AppService', 'scoped_session', 'Config',\n+                            'asyncio.AbstractEventLoop', Optional['Bot']]:\n+        return (self.az, self.db, self.config, self.loop, self.bot)\n",
        "source_code_with_indent": "\n    <DED>def __iter__(self) -> None:\n        <IND>yield self.az\n        yield self.db\n        yield self.config\n        yield self.loop\n        yield self.bot\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@property\n    def core(self) -> Tuple['AppService', 'scoped_session', 'Config',\n                            'asyncio.AbstractEventLoop', Optional['Bot']]:\n        <IND>return (self.az, self.db, self.config, self.loop, self.bot)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/context.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/context.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/context.py:51:8 Incompatible return type [7]: Expected `None` but got `typing.Generator[asyncio.events.AbstractEventLoop, None, None]`.",
    "message": " Expected `None` but got `typing.Generator[asyncio.events.AbstractEventLoop, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 51,
    "warning_line": "        yield self.loop",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import TYPE_CHECKING, Optional\n\n",
        "source_code_len": 117,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Generator, Optional, Tuple, Union, TYPE_CHECKING\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import TYPE_CHECKING, Optional\n+from typing import Generator, Optional, Tuple, Union, TYPE_CHECKING\n \n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import TYPE_CHECKING, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Generator, Optional, Tuple, Union, TYPE_CHECKING\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __iter__(self) -> None:\n        yield self.az\n        yield self.db\n        yield self.config\n        yield self.loop\n        yield self.bot\n",
        "source_code_len": 150,
        "target_code": "\n    @property\n    def core(self) -> Tuple['AppService', 'scoped_session', 'Config',\n                            'asyncio.AbstractEventLoop', Optional['Bot']]:\n        return (self.az, self.db, self.config, self.loop, self.bot)\n",
        "target_code_len": 228,
        "diff_format": "@@ -46,7 +46,5 @@\n \n-    def __iter__(self) -> None:\n-        yield self.az\n-        yield self.db\n-        yield self.config\n-        yield self.loop\n-        yield self.bot\n+    @property\n+    def core(self) -> Tuple['AppService', 'scoped_session', 'Config',\n+                            'asyncio.AbstractEventLoop', Optional['Bot']]:\n+        return (self.az, self.db, self.config, self.loop, self.bot)\n",
        "source_code_with_indent": "\n    <DED>def __iter__(self) -> None:\n        <IND>yield self.az\n        yield self.db\n        yield self.config\n        yield self.loop\n        yield self.bot\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@property\n    def core(self) -> Tuple['AppService', 'scoped_session', 'Config',\n                            'asyncio.AbstractEventLoop', Optional['Bot']]:\n        <IND>return (self.az, self.db, self.config, self.loop, self.bot)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/context.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/context.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/context.py:52:8 Incompatible return type [7]: Expected `None` but got `typing.Generator[Optional[Bot], None, None]`.",
    "message": " Expected `None` but got `typing.Generator[Optional[Bot], None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 52,
    "warning_line": "        yield self.bot",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import TYPE_CHECKING, Optional\n\n",
        "source_code_len": 117,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Generator, Optional, Tuple, Union, TYPE_CHECKING\n\n",
        "target_code_len": 142,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import TYPE_CHECKING, Optional\n+from typing import Generator, Optional, Tuple, Union, TYPE_CHECKING\n \n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import TYPE_CHECKING, Optional\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Generator, Optional, Tuple, Union, TYPE_CHECKING\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __iter__(self) -> None:\n        yield self.az\n        yield self.db\n        yield self.config\n        yield self.loop\n        yield self.bot\n",
        "source_code_len": 150,
        "target_code": "\n    @property\n    def core(self) -> Tuple['AppService', 'scoped_session', 'Config',\n                            'asyncio.AbstractEventLoop', Optional['Bot']]:\n        return (self.az, self.db, self.config, self.loop, self.bot)\n",
        "target_code_len": 228,
        "diff_format": "@@ -46,7 +46,5 @@\n \n-    def __iter__(self) -> None:\n-        yield self.az\n-        yield self.db\n-        yield self.config\n-        yield self.loop\n-        yield self.bot\n+    @property\n+    def core(self) -> Tuple['AppService', 'scoped_session', 'Config',\n+                            'asyncio.AbstractEventLoop', Optional['Bot']]:\n+        return (self.az, self.db, self.config, self.loop, self.bot)\n",
        "source_code_with_indent": "\n    <DED>def __iter__(self) -> None:\n        <IND>yield self.az\n        yield self.db\n        yield self.config\n        yield self.loop\n        yield self.bot\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>@property\n    def core(self) -> Tuple['AppService', 'scoped_session', 'Config',\n                            'asyncio.AbstractEventLoop', Optional['Bot']]:\n        <IND>return (self.az, self.db, self.config, self.loop, self.bot)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py:83:4 Inconsistent override [14]: `mautrix_telegram.formatter.from_matrix.parser_htmlparser.MatrixParser.handle_starttag` overrides method defined in `HTMLParser` inconsistently. Parameter of type `List[Tuple[str, str]]` is not a supertype of the overridden parameter `List[Tuple[str, Optional[str]]]`.",
    "message": " `mautrix_telegram.formatter.from_matrix.parser_htmlparser.MatrixParser.handle_starttag` overrides method defined in `HTMLParser` inconsistently. Parameter of type `List[Tuple[str, str]]` is not a supertype of the overridden parameter `List[Tuple[str, Optional[str]]]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 83,
    "warning_line": "    def handle_starttag(self, tag: str, attrs: List[Tuple[str, str]]):"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py:87:8 Incompatible variable type [9]: attrs is declared to have type `List[Tuple[str, str]]` but is used as type `Dict[str, str]`.",
    "message": " attrs is declared to have type `List[Tuple[str, str]]` but is used as type `Dict[str, str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 87,
    "warning_line": "        attrs = dict(attrs)"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py:88:36 Invalid type [31]: Expression `type(telethon.tl.types.TypeMessageEntity)` is not a valid type.",
    "message": " Expression `type(telethon.tl.types.TypeMessageEntity)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 88,
    "warning_line": "        entity_type = None  # type: type(TypeMessageEntity)"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py:99:41 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 99,
    "warning_line": "                    pre.language = attrs[\"class\"][len(\"language-\"):]"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py:115:28 Incompatible parameter type [6]: Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 115,
    "warning_line": "                url = attrs[\"href\"]"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_htmlparser.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_htmlparser.py:118:47 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `MatrixParser._parse_url` but got `Tuple[str, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `MatrixParser._parse_url` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 118,
    "warning_line": "            entity_type, url = self._parse_url(url, args)"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_lxml.py:123:34 Invalid type [31]: Expression `type(telethon.tl.types.TypeMessageEntity)` is not a valid type.",
    "message": " Expression `type(telethon.tl.types.TypeMessageEntity)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 123,
    "warning_line": "    def format(self, entity_type: type(TypeMessageEntity), offset: int = None, length: int = None,"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_lxml.py:201:41 Incompatible parameter type [6]: Expected `List[Union[TelegramMessage, str]]` for 1st positional only parameter to call `TelegramMessage.join` but got `List[TelegramMessage]`.",
    "message": " Expected `List[Union[TelegramMessage, str]]` for 1st positional only parameter to call `TelegramMessage.join` but got `List[TelegramMessage]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 201,
    "warning_line": "            child = TelegramMessage.join(parts, \"\\n\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional, List, Tuple, Union, Callable\nfrom lxml import html\n",
        "source_code_len": 153,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Callable, List, Optional, Sequence, Tuple, Type, Union\nfrom lxml import html\n",
        "target_code_len": 169,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import Optional, List, Tuple, Union, Callable\n+from typing import Callable, List, Optional, Sequence, Tuple, Type, Union\n from lxml import html\n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional, List, Tuple, Union, Callable\nfrom lxml import html\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Callable, List, Optional, Sequence, Tuple, Type, Union\nfrom lxml import html\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n        main = TelegramMessage()\n",
        "source_code_len": 152,
        "target_code": "    @staticmethod\n    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n             separator: str = \" \") -> \"TelegramMessage\":\n        main = TelegramMessage()\n",
        "target_code_len": 169,
        "diff_format": "@@ -160,3 +160,4 @@\n     @staticmethod\n-    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n+    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n+             separator: str = \" \") -> \"TelegramMessage\":\n         main = TelegramMessage()\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n        <IND>main = TelegramMessage()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n             separator: str = \" \") -> \"TelegramMessage\":\n        <IND>main = TelegramMessage()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_lxml.py:203:36 Incompatible parameter type [6]: Expected `List[Union[TelegramMessage, str]]` for 1st positional only parameter to call `TelegramMessage.join` but got `List[TelegramMessage]`.",
    "message": " Expected `List[Union[TelegramMessage, str]]` for 1st positional only parameter to call `TelegramMessage.join` but got `List[TelegramMessage]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 203,
    "warning_line": "        return TelegramMessage.join(children, \"\\n\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional, List, Tuple, Union, Callable\nfrom lxml import html\n",
        "source_code_len": 153,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Callable, List, Optional, Sequence, Tuple, Type, Union\nfrom lxml import html\n",
        "target_code_len": 169,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import Optional, List, Tuple, Union, Callable\n+from typing import Callable, List, Optional, Sequence, Tuple, Type, Union\n from lxml import html\n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional, List, Tuple, Union, Callable\nfrom lxml import html\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Callable, List, Optional, Sequence, Tuple, Type, Union\nfrom lxml import html\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n        main = TelegramMessage()\n",
        "source_code_len": 152,
        "target_code": "    @staticmethod\n    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n             separator: str = \" \") -> \"TelegramMessage\":\n        main = TelegramMessage()\n",
        "target_code_len": 169,
        "diff_format": "@@ -160,3 +160,4 @@\n     @staticmethod\n-    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n+    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n+             separator: str = \" \") -> \"TelegramMessage\":\n         main = TelegramMessage()\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n        <IND>main = TelegramMessage()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n             separator: str = \" \") -> \"TelegramMessage\":\n        <IND>main = TelegramMessage()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_lxml.py:210:36 Incompatible parameter type [6]: Expected `List[Union[TelegramMessage, str]]` for 1st positional only parameter to call `TelegramMessage.join` but got `List[TelegramMessage]`.",
    "message": " Expected `List[Union[TelegramMessage, str]]` for 1st positional only parameter to call `TelegramMessage.join` but got `List[TelegramMessage]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 210,
    "warning_line": "        return TelegramMessage.join(children, \"\\n\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional, List, Tuple, Union, Callable\nfrom lxml import html\n",
        "source_code_len": 153,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Callable, List, Optional, Sequence, Tuple, Type, Union\nfrom lxml import html\n",
        "target_code_len": 169,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import Optional, List, Tuple, Union, Callable\n+from typing import Callable, List, Optional, Sequence, Tuple, Type, Union\n from lxml import html\n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional, List, Tuple, Union, Callable\nfrom lxml import html\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Callable, List, Optional, Sequence, Tuple, Type, Union\nfrom lxml import html\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n        main = TelegramMessage()\n",
        "source_code_len": 152,
        "target_code": "    @staticmethod\n    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n             separator: str = \" \") -> \"TelegramMessage\":\n        main = TelegramMessage()\n",
        "target_code_len": 169,
        "diff_format": "@@ -160,3 +160,4 @@\n     @staticmethod\n-    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n+    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n+             separator: str = \" \") -> \"TelegramMessage\":\n         main = TelegramMessage()\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n        <IND>main = TelegramMessage()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n             separator: str = \" \") -> \"TelegramMessage\":\n        <IND>main = TelegramMessage()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_lxml.py:217:36 Incompatible parameter type [6]: Expected `List[Union[TelegramMessage, str]]` for 1st positional only parameter to call `TelegramMessage.join` but got `List[TelegramMessage]`.",
    "message": " Expected `List[Union[TelegramMessage, str]]` for 1st positional only parameter to call `TelegramMessage.join` but got `List[TelegramMessage]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 217,
    "warning_line": "        return TelegramMessage.join(children, \"\").prepend(prefix)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional, List, Tuple, Union, Callable\nfrom lxml import html\n",
        "source_code_len": 153,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Callable, List, Optional, Sequence, Tuple, Type, Union\nfrom lxml import html\n",
        "target_code_len": 169,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import Optional, List, Tuple, Union, Callable\n+from typing import Callable, List, Optional, Sequence, Tuple, Type, Union\n from lxml import html\n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional, List, Tuple, Union, Callable\nfrom lxml import html\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Callable, List, Optional, Sequence, Tuple, Type, Union\nfrom lxml import html\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n        main = TelegramMessage()\n",
        "source_code_len": 152,
        "target_code": "    @staticmethod\n    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n             separator: str = \" \") -> \"TelegramMessage\":\n        main = TelegramMessage()\n",
        "target_code_len": 169,
        "diff_format": "@@ -160,3 +160,4 @@\n     @staticmethod\n-    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n+    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n+             separator: str = \" \") -> \"TelegramMessage\":\n         main = TelegramMessage()\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n        <IND>main = TelegramMessage()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n             separator: str = \" \") -> \"TelegramMessage\":\n        <IND>main = TelegramMessage()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_matrix/parser_lxml.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_matrix/parser_lxml.py:337:36 Incompatible parameter type [6]: Expected `List[Union[TelegramMessage, str]]` for 1st positional only parameter to call `TelegramMessage.join` but got `List[TelegramMessage]`.",
    "message": " Expected `List[Union[TelegramMessage, str]]` for 1st positional only parameter to call `TelegramMessage.join` but got `List[TelegramMessage]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 337,
    "warning_line": "        return TelegramMessage.join(cls.node_to_tmessages(node, strip_linebreaks))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional, List, Tuple, Union, Callable\nfrom lxml import html\n",
        "source_code_len": 153,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Callable, List, Optional, Sequence, Tuple, Type, Union\nfrom lxml import html\n",
        "target_code_len": 169,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import Optional, List, Tuple, Union, Callable\n+from typing import Callable, List, Optional, Sequence, Tuple, Type, Union\n from lxml import html\n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional, List, Tuple, Union, Callable\nfrom lxml import html\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Callable, List, Optional, Sequence, Tuple, Type, Union\nfrom lxml import html\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @staticmethod\n    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n        main = TelegramMessage()\n",
        "source_code_len": 152,
        "target_code": "    @staticmethod\n    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n             separator: str = \" \") -> \"TelegramMessage\":\n        main = TelegramMessage()\n",
        "target_code_len": 169,
        "diff_format": "@@ -160,3 +160,4 @@\n     @staticmethod\n-    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n+    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n+             separator: str = \" \") -> \"TelegramMessage\":\n         main = TelegramMessage()\n",
        "source_code_with_indent": "    <DED>@staticmethod\n    def join(items: List[Union[str, \"TelegramMessage\"]], separator: str = \" \") -> \"TelegramMessage\":\n        <IND>main = TelegramMessage()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@staticmethod\n    def join(items: Sequence[Union[str, \"TelegramMessage\"]],\n             separator: str = \" \") -> \"TelegramMessage\":\n        <IND>main = TelegramMessage()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_telegram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_telegram.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mautrix_telegram/formatter/from_telegram.py:43:4 Incompatible variable type [9]: htmldiff is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "message": " htmldiff is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 43,
    "warning_line": "    htmldiff = None  # type: function",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "except ImportError:\n    htmldiff = None  # type: function\n\n",
        "source_code_len": 59,
        "target_code": "except ImportError:\n    htmldiff = None  # type: ignore\n\n",
        "target_code_len": 57,
        "diff_format": "@@ -42,3 +43,3 @@\n except ImportError:\n-    htmldiff = None  # type: function\n+    htmldiff = None  # type: ignore\n \n",
        "source_code_with_indent": "<DED>except ImportError:\n    <IND>htmldiff = None  # type: function\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>except ImportError:\n    <IND>htmldiff = None  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_telegram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_telegram.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_telegram.py:209:4 Incompatible return type [7]: Expected `Tuple[str, str, typing.Dict[typing.Any, typing.Any]]` but got `Tuple[Optional[str], Optional[str], typing.Dict[typing.Any, typing.Any]]`.",
    "message": " Expected `Tuple[str, str, typing.Dict[typing.Any, typing.Any]]` but got `Tuple[Optional[str], Optional[str], typing.Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 209,
    "warning_line": "    return remove_surrogates(text), remove_surrogates(html), relates_to"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/formatter/from_telegram.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/formatter/from_telegram.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/formatter/from_telegram.py:216:8 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 216,
    "warning_line": "        log.exception(\"Failed to convert Telegram format:\\n\"",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                      text, entities)\n\n",
        "source_code_len": 39,
        "target_code": "                      text, entities)\n    return \"[failed conversion in _telegram_entities_to_matrix]\"\n\n",
        "target_code_len": 104,
        "diff_format": "@@ -219,2 +220,3 @@\n                       text, entities)\n+    return \"[failed conversion in _telegram_entities_to_matrix]\"\n \n",
        "source_code_with_indent": "                      text, entities)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                      text, entities)\n    <DED>return \"[failed conversion in _telegram_entities_to_matrix]\"\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/portal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/portal.py",
    "file_hunks_size": 45,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/portal.py:113:8 Incompatible attribute type [8]: Attribute `mxid` declared in class `Portal` has type `str` but is used as type `Optional[str]`.",
    "message": " Attribute `mxid` declared in class `Portal` has type `str` but is used as type `Optional[str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 113,
    "warning_line": "        self.mxid = mxid  # type: str"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/portal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/portal.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/portal.py:119:8 Incompatible attribute type [8]: Attribute `title` declared in class `Portal` has type `str` but is used as type `Optional[str]`.",
    "message": " Attribute `title` declared in class `Portal` has type `str` but is used as type `Optional[str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 119,
    "warning_line": "        self.title = title  # type: str",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.megagroup = megagroup  # type: bool\n        self.title = title  # type: str\n        self.about = about  # type: str\n",
        "source_code_len": 129,
        "target_code": "        self.megagroup = megagroup  # type: bool\n        self.title = title  # type: Optional[str]\n        self.about = about  # type: str\n",
        "target_code_len": 139,
        "diff_format": "@@ -118,3 +118,3 @@\n         self.megagroup = megagroup  # type: bool\n-        self.title = title  # type: str\n+        self.title = title  # type: Optional[str]\n         self.about = about  # type: str\n",
        "source_code_with_indent": "        self.megagroup = megagroup  # type: bool\n        self.title = title  # type: str\n        self.about = about  # type: str\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.megagroup = megagroup  # type: bool\n        self.title = title  # type: Optional[str]\n        self.about = about  # type: str\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/portal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/portal.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/portal.py:164:8 Incompatible return type [7]: Expected `bool` but got `Union[Bot, bool]`.",
    "message": " Expected `bool` but got `Union[Bot, bool]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 164,
    "warning_line": "        return self.bot and self.bot.is_in_chat(self.tgid)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def has_bot(self) -> bool:\n        return self.bot and self.bot.is_in_chat(self.tgid)\n\n",
        "source_code_len": 91,
        "target_code": "    def has_bot(self) -> bool:\n        return bool(self.bot and self.bot.is_in_chat(self.tgid))\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -163,3 +163,3 @@\n     def has_bot(self) -> bool:\n-        return self.bot and self.bot.is_in_chat(self.tgid)\n+        return bool(self.bot and self.bot.is_in_chat(self.tgid))\n \n",
        "source_code_with_indent": "    def has_bot(self) -> bool:\n        <IND>return self.bot and self.bot.is_in_chat(self.tgid)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def has_bot(self) -> bool:\n        <IND>return bool(self.bot and self.bot.is_in_chat(self.tgid))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/portal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/portal.py",
    "file_hunks_size": 45,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/portal.py:325:12 Incompatible attribute type [8]: Attribute `title` declared in class `Portal` has type `str` but is used as type `None`.",
    "message": " Attribute `title` declared in class `Portal` has type `str` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 325,
    "warning_line": "            self.title = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.megagroup = megagroup  # type: bool\n        self.title = title  # type: str\n        self.about = about  # type: str\n",
        "source_code_len": 129,
        "target_code": "        self.megagroup = megagroup  # type: bool\n        self.title = title  # type: Optional[str]\n        self.about = about  # type: str\n",
        "target_code_len": 139,
        "diff_format": "@@ -118,3 +118,3 @@\n         self.megagroup = megagroup  # type: bool\n-        self.title = title  # type: str\n+        self.title = title  # type: Optional[str]\n         self.about = about  # type: str\n",
        "source_code_with_indent": "        self.megagroup = megagroup  # type: bool\n        self.title = title  # type: str\n        self.about = about  # type: str\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.megagroup = megagroup  # type: bool\n        self.title = title  # type: Optional[str]\n        self.about = about  # type: str\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/portal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/portal.py",
    "file_hunks_size": 45,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/portal.py:967:8 Incompatible variable type [9]: deleter is declared to have type `u.User` but is used as type `Union[Bot, u.User]`.",
    "message": " deleter is declared to have type `u.User` but is used as type `Union[Bot, u.User]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 967,
    "warning_line": "        deleter = deleter if not await deleter.needs_relaybot(self) else self.bot"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/portal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/portal.py",
    "file_hunks_size": 45,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/portal.py:1339:39 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `Portal.optional_send_lock` but got `None`.",
    "message": " Expected `int` for 1st positional only parameter to call `Portal.optional_send_lock` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1339,
    "warning_line": "        lock = self.optional_send_lock(sender.tgid if sender else None)"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/portal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/portal.py",
    "file_hunks_size": 45,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/portal.py:1386:39 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `Portal.optional_send_lock` but got `None`.",
    "message": " Expected `int` for 1st positional only parameter to call `Portal.optional_send_lock` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1386,
    "warning_line": "        lock = self.optional_send_lock(sender.tgid if sender else None)"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/portal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/portal.py",
    "file_hunks_size": 45,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/portal.py:1739:36 Incompatible variable type [9]: tg_receiver is declared to have type `int` but is used as type `None`.",
    "message": " tg_receiver is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1739,
    "warning_line": "    def get_by_tgid(cls, tgid: int, tg_receiver: int = None, peer_type: str = None"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/portal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/portal.py",
    "file_hunks_size": 45,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/portal.py:1762:22 Incompatible variable type [9]: receiver_id is declared to have type `int` but is used as type `None`.",
    "message": " receiver_id is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1762,
    "warning_line": "                      receiver_id: int = None, create: bool = True) -> Optional[\"Portal\"]:"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:83:8 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 83,
    "warning_line": "        return True"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:110:8 Incompatible return type [7]: Expected `None` but got `int`.",
    "message": " Expected `None` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 110,
    "warning_line": "        return 0"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:114:12 Incompatible return type [7]: Expected `None` but got `int`.",
    "message": " Expected `None` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 114,
    "warning_line": "            return 0"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:122:16 Incompatible return type [7]: Expected `None` but got `int`.",
    "message": " Expected `None` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 122,
    "warning_line": "                return 2"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:123:12 Incompatible return type [7]: Expected `None` but got `int`.",
    "message": " Expected `None` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 123,
    "warning_line": "            return 1"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:126:8 Incompatible return type [7]: Expected `None` but got `int`.",
    "message": " Expected `None` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 126,
    "warning_line": "        return 0"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:187:8 Incompatible return type [7]: Expected `None` but got `List[typing.Any]`.",
    "message": " Expected `None` but got `List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 187,
    "warning_line": "        return new_events",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def filter_events(self, events) -> None:\n        new_events = []\n",
        "source_code_len": 70,
        "target_code": "\n    def filter_events(self, events: List[Dict]) -> List:\n        new_events = []\n",
        "target_code_len": 82,
        "diff_format": "@@ -161,3 +181,3 @@\n \n-    def filter_events(self, events) -> None:\n+    def filter_events(self, events: List[Dict]) -> List:\n         new_events = []\n",
        "source_code_with_indent": "\n    <DED>def filter_events(self, events) -> None:\n        <IND>new_events = []\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def filter_events(self, events: List[Dict]) -> List:\n        <IND>new_events = []\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:257:8 Incompatible return type [7]: Expected `None` but got `Puppet`.",
    "message": " Expected `None` but got `Puppet`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 257,
    "warning_line": "        return Puppet(db_puppet.id, db_puppet.access_token, db_puppet.custom_mxid,"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:281:8 Incompatible return type [7]: Expected `None` but got `float`.",
    "message": " Expected `None` but got `float`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 281,
    "warning_line": "        return round(similarity * 1000) / 10"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:338:12 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 338,
    "warning_line": "            return True"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:341:12 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 341,
    "warning_line": "            return True"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:351:16 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 351,
    "warning_line": "                return True"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:352:8 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 352,
    "warning_line": "        return False"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:387:12 Incompatible return type [7]: Expected `None` but got `Puppet`.",
    "message": " Expected `None` but got `Puppet`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 387,
    "warning_line": "            return cls.by_custom_mxid[mxid]"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:400:8 Incompatible return type [7]: Expected `None` but got `List[Optional[Puppet]]`.",
    "message": " Expected `None` but got `List[Optional[Puppet]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 400,
    "warning_line": "        return [cls.by_custom_mxid[puppet.mxid]"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:409:12 Incompatible return type [7]: Expected `None` but got `int`.",
    "message": " Expected `None` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 409,
    "warning_line": "            return int(match.group(1))"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/puppet.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/puppet.py",
    "file_hunks_size": 31,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/puppet.py:414:8 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 414,
    "warning_line": "        return f\"@{cls.username_template.format(userid=tgid)}:{cls.hs_domain}\""
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/sqlstatestore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/sqlstatestore.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/sqlstatestore.py:71:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `None`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 71,
    "warning_line": "        return self._get_user_profile(room, user).dict()"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/sqlstatestore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/sqlstatestore.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/sqlstatestore.py:100:8 Incompatible return type [7]: Expected `bool` but got `None`.",
    "message": " Expected `bool` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 100,
    "warning_line": "        return self._get_room_state(room).has_power_levels"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/sqlstatestore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/sqlstatestore.py",
    "file_hunks_size": 11,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/sqlstatestore.py:103:8 Incompatible return type [7]: Expected `Dict[typing.Any, typing.Any]` but got `None`.",
    "message": " Expected `Dict[typing.Any, typing.Any]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 103,
    "warning_line": "        return self._get_room_state(room).power_levels"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:55:8 Incompatible attribute type [8]: Attribute `tgid` declared in class `User` has type `int` but is used as type `Optional[int]`.",
    "message": " Attribute `tgid` declared in class `User` has type `int` but is used as type `Optional[int]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 55,
    "warning_line": "        self.tgid = tgid  # type: int"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:62:8 Incompatible attribute type [8]: Attribute `db_portals` declared in class `User` has type `List[DBPortal]` but is used as type `Optional[List[DBPortal]]`.",
    "message": " Attribute `db_portals` declared in class `User` has type `List[DBPortal]` but is used as type `Optional[List[DBPortal]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 62,
    "warning_line": "        self.db_portals = db_portals  # type: List[DBPortal]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.portals = {}  # type: Dict[Tuple[int, int], po.Portal]\n        self.db_portals = db_portals  # type: List[DBPortal]\n        self._db_instance = db_instance  # type: DBUser\n\n        self.command_status = None  # type: dict\n\n",
        "source_code_len": 236,
        "target_code": "        self.portals = {}  # type: Dict[Tuple[int, int], po.Portal]\n        self.db_portals = db_portals or []  # type: List[DBPortal]\n        self._db_instance = db_instance  # type: Optional[DBUser]\n\n        self.command_status = None  # type: Dict\n\n",
        "target_code_len": 252,
        "diff_format": "@@ -61,6 +62,6 @@\n         self.portals = {}  # type: Dict[Tuple[int, int], po.Portal]\n-        self.db_portals = db_portals  # type: List[DBPortal]\n-        self._db_instance = db_instance  # type: DBUser\n-\n-        self.command_status = None  # type: dict\n+        self.db_portals = db_portals or []  # type: List[DBPortal]\n+        self._db_instance = db_instance  # type: Optional[DBUser]\n+\n+        self.command_status = None  # type: Dict\n \n",
        "source_code_with_indent": "        self.portals = {}  # type: Dict[Tuple[int, int], po.Portal]\n        self.db_portals = db_portals  # type: List[DBPortal]\n        self._db_instance = db_instance  # type: DBUser\n\n        self.command_status = None  # type: dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.portals = {}  # type: Dict[Tuple[int, int], po.Portal]\n        self.db_portals = db_portals or []  # type: List[DBPortal]\n        self._db_instance = db_instance  # type: Optional[DBUser]\n\n        self.command_status = None  # type: Dict\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:63:8 Incompatible attribute type [8]: Attribute `_db_instance` declared in class `User` has type `DBUser` but is used as type `Optional[DBUser]`.",
    "message": " Attribute `_db_instance` declared in class `User` has type `DBUser` but is used as type `Optional[DBUser]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 63,
    "warning_line": "        self._db_instance = db_instance  # type: DBUser",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.portals = {}  # type: Dict[Tuple[int, int], po.Portal]\n        self.db_portals = db_portals  # type: List[DBPortal]\n        self._db_instance = db_instance  # type: DBUser\n\n        self.command_status = None  # type: dict\n\n",
        "source_code_len": 236,
        "target_code": "        self.portals = {}  # type: Dict[Tuple[int, int], po.Portal]\n        self.db_portals = db_portals or []  # type: List[DBPortal]\n        self._db_instance = db_instance  # type: Optional[DBUser]\n\n        self.command_status = None  # type: Dict\n\n",
        "target_code_len": 252,
        "diff_format": "@@ -61,6 +62,6 @@\n         self.portals = {}  # type: Dict[Tuple[int, int], po.Portal]\n-        self.db_portals = db_portals  # type: List[DBPortal]\n-        self._db_instance = db_instance  # type: DBUser\n-\n-        self.command_status = None  # type: dict\n+        self.db_portals = db_portals or []  # type: List[DBPortal]\n+        self._db_instance = db_instance  # type: Optional[DBUser]\n+\n+        self.command_status = None  # type: Dict\n \n",
        "source_code_with_indent": "        self.portals = {}  # type: Dict[Tuple[int, int], po.Portal]\n        self.db_portals = db_portals  # type: List[DBPortal]\n        self._db_instance = db_instance  # type: DBUser\n\n        self.command_status = None  # type: dict\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.portals = {}  # type: Dict[Tuple[int, int], po.Portal]\n        self.db_portals = db_portals or []  # type: List[DBPortal]\n        self._db_instance = db_instance  # type: Optional[DBUser]\n\n        self.command_status = None  # type: Dict\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:172:4 Inconsistent override [15]: `mautrix_telegram.user.User.update` overrides method defined in `AbstractUser` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, None]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, bool]`.",
    "message": " `mautrix_telegram.user.User.update` overrides method defined in `AbstractUser` inconsistently. Returned type `typing.Coroutine[typing.Any, typing.Any, None]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, bool]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 172,
    "warning_line": "    async def update(self, update: TypeUpdate) -> None:"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:190:29 Incompatible parameter type [6]: Expected `po.Portal` for 1st positional only parameter to call `User.register_portal` but got `Optional[po.Portal]`.",
    "message": " Expected `po.Portal` for 1st positional only parameter to call `User.register_portal` but got `Optional[po.Portal]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 190,
    "warning_line": "        self.register_portal(portal)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def update(self, update: TypeUpdate) -> None:\n        if not self.is_bot:\n            return\n\n",
        "source_code_len": 105,
        "target_code": "\n    async def update(self, update: TypeUpdate) -> bool:\n        if not self.is_bot:\n            return False\n\n",
        "target_code_len": 111,
        "diff_format": "@@ -171,5 +172,5 @@\n \n-    async def update(self, update: TypeUpdate) -> None:\n+    async def update(self, update: TypeUpdate) -> bool:\n         if not self.is_bot:\n-            return\n+            return False\n \n",
        "source_code_with_indent": "\n    <DED><DED>async def update(self, update: TypeUpdate) -> None:\n        <IND>if not self.is_bot:\n            <IND>return\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>async def update(self, update: TypeUpdate) -> bool:\n        <IND>if not self.is_bot:\n            <IND>return False\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        else:\n            return\n\n        self.register_portal(portal)\n\n",
        "source_code_len": 72,
        "target_code": "        else:\n            return False\n\n        if portal:\n            self.register_portal(portal)\n\n        return True\n\n",
        "target_code_len": 122,
        "diff_format": "@@ -187,5 +188,8 @@\n         else:\n-            return\n-\n-        self.register_portal(portal)\n+            return False\n+\n+        if portal:\n+            self.register_portal(portal)\n+\n+        return True\n \n",
        "source_code_with_indent": "        <DED>else:\n            <IND>return\n\n        <DED>self.register_portal(portal)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>else:\n            <IND>return False\n\n        <DED>if portal:\n            <IND>self.register_portal(portal)\n\n        <DED>return True\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:195:4 Inconsistent override [15]: `mautrix_telegram.user.User.ensure_started` overrides method defined in `AbstractUser` inconsistently. Returned type `Awaitable[User]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, AbstractUser]`.",
    "message": " `mautrix_telegram.user.User.ensure_started` overrides method defined in `AbstractUser` inconsistently. Returned type `Awaitable[User]` is not a subtype of the overridden return `typing.Coroutine[typing.Any, typing.Any, AbstractUser]`.",
    "rule_id": "Inconsistent override [15]",
    "warning_line_no": 195,
    "warning_line": "    def ensure_started(self, even_if_no_session: bool = False) -> \"Awaitable[User]\":"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:196:8 Incompatible return type [7]: Expected `Awaitable[User]` but got `typing.Coroutine[typing.Any, typing.Any, AbstractUser]`.",
    "message": " Expected `Awaitable[User]` but got `typing.Coroutine[typing.Any, typing.Any, AbstractUser]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 196,
    "warning_line": "        return super().ensure_started(even_if_no_session)"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:237:12 Incompatible attribute type [8]: Attribute `tgid` declared in class `User` has type `int` but is used as type `None`.",
    "message": " Attribute `tgid` declared in class `User` has type `int` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 237,
    "warning_line": "            self.tgid = None"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:241:12 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 241,
    "warning_line": "            return False",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def log_out(self) -> None:\n        puppet = pu.Puppet.get(self.tgid)\n",
        "source_code_len": 80,
        "target_code": "\n    async def log_out(self) -> bool:\n        puppet = pu.Puppet.get(self.tgid)\n",
        "target_code_len": 80,
        "diff_format": "@@ -217,3 +221,3 @@\n \n-    async def log_out(self) -> None:\n+    async def log_out(self) -> bool:\n         puppet = pu.Puppet.get(self.tgid)\n",
        "source_code_with_indent": "\n    <DED><DED>async def log_out(self) -> None:\n        <IND>puppet = pu.Puppet.get(self.tgid)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>async def log_out(self) -> bool:\n        <IND>puppet = pu.Puppet.get(self.tgid)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:243:8 Incompatible return type [7]: Expected `None` but got `bool`.",
    "message": " Expected `None` but got `bool`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 243,
    "warning_line": "        return True",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    async def log_out(self) -> None:\n        puppet = pu.Puppet.get(self.tgid)\n",
        "source_code_len": 80,
        "target_code": "\n    async def log_out(self) -> bool:\n        puppet = pu.Puppet.get(self.tgid)\n",
        "target_code_len": 80,
        "diff_format": "@@ -217,3 +221,3 @@\n \n-    async def log_out(self) -> None:\n+    async def log_out(self) -> bool:\n         puppet = pu.Puppet.get(self.tgid)\n",
        "source_code_with_indent": "\n    <DED><DED>async def log_out(self) -> None:\n        <IND>puppet = pu.Puppet.get(self.tgid)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>async def log_out(self) -> bool:\n        <IND>puppet = pu.Puppet.get(self.tgid)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:250:15 Unsupported operand [58]: `>=` is not supported for operand types `None` and `int`.",
    "message": " `>=` is not supported for operand types `None` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 250,
    "warning_line": "            if similarity >= min_similarity:"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/user.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/user.py",
    "file_hunks_size": 12,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/user.py:251:32 Incompatible parameter type [6]: Expected `Tuple[pu.Puppet, int]` for 1st positional only parameter to call `list.append` but got `Tuple[pu.Puppet, None]`.",
    "message": " Expected `Tuple[pu.Puppet, int]` for 1st positional only parameter to call `list.append` but got `Tuple[pu.Puppet, None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 251,
    "warning_line": "                results.append((contact, similarity))"
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/util/format_duration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/util/format_duration.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/util/format_duration.py:24:8 Incompatible return type [7]: Expected `None` but got `str`.",
    "message": " Expected `None` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 24,
    "warning_line": "        return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def format_duration(seconds: int) -> str:\n    def pluralize(count, singular) -> None:\n        return singular if count == 1 else singular + \"s\"\n\n    def include(count, word) -> None:\n        return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "source_code_len": 255,
        "target_code": "def format_duration(seconds: int) -> str:\n    def pluralize(count: int, singular: str) -> str:\n        return singular if count == 1 else singular + \"s\"\n\n    def include(count: int, word: str) -> str:\n        return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "target_code_len": 273,
        "diff_format": "@@ -19,6 +19,6 @@\n def format_duration(seconds: int) -> str:\n-    def pluralize(count, singular) -> None:\n+    def pluralize(count: int, singular: str) -> str:\n         return singular if count == 1 else singular + \"s\"\n \n-    def include(count, word) -> None:\n+    def include(count: int, word: str) -> str:\n         return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "source_code_with_indent": "def format_duration(seconds: int) -> str:\n    <IND>def pluralize(count, singular) -> None:\n        <IND>return singular if count == 1 else singular + \"s\"\n\n    <DED>def include(count, word) -> None:\n        <IND>return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def format_duration(seconds: int) -> str:\n    <IND>def pluralize(count: int, singular: str) -> str:\n        <IND>return singular if count == 1 else singular + \"s\"\n\n    <DED>def include(count: int, word: str) -> str:\n        <IND>return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/util/format_duration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/util/format_duration.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/util/format_duration.py:35:44 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `str.join` but got `typing.List[None]`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `str.join` but got `typing.List[None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 35,
    "warning_line": "        return \"{} and {}\".format(\", \".join(parts[:-1]), parts[-1])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def format_duration(seconds: int) -> str:\n    def pluralize(count, singular) -> None:\n        return singular if count == 1 else singular + \"s\"\n\n    def include(count, word) -> None:\n        return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "source_code_len": 255,
        "target_code": "def format_duration(seconds: int) -> str:\n    def pluralize(count: int, singular: str) -> str:\n        return singular if count == 1 else singular + \"s\"\n\n    def include(count: int, word: str) -> str:\n        return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "target_code_len": 273,
        "diff_format": "@@ -19,6 +19,6 @@\n def format_duration(seconds: int) -> str:\n-    def pluralize(count, singular) -> None:\n+    def pluralize(count: int, singular: str) -> str:\n         return singular if count == 1 else singular + \"s\"\n \n-    def include(count, word) -> None:\n+    def include(count: int, word: str) -> str:\n         return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "source_code_with_indent": "def format_duration(seconds: int) -> str:\n    <IND>def pluralize(count, singular) -> None:\n        <IND>return singular if count == 1 else singular + \"s\"\n\n    <DED>def include(count, word) -> None:\n        <IND>return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def format_duration(seconds: int) -> str:\n    <IND>def pluralize(count: int, singular: str) -> str:\n        <IND>return singular if count == 1 else singular + \"s\"\n\n    <DED>def include(count: int, word: str) -> str:\n        <IND>return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/util/format_duration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/util/format_duration.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/util/format_duration.py:36:24 Incompatible parameter type [6]: Expected `typing.Iterable[str]` for 1st positional only parameter to call `str.join` but got `typing.List[None]`.",
    "message": " Expected `typing.Iterable[str]` for 1st positional only parameter to call `str.join` but got `typing.List[None]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "    return \" and \".join(parts)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def format_duration(seconds: int) -> str:\n    def pluralize(count, singular) -> None:\n        return singular if count == 1 else singular + \"s\"\n\n    def include(count, word) -> None:\n        return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "source_code_len": 255,
        "target_code": "def format_duration(seconds: int) -> str:\n    def pluralize(count: int, singular: str) -> str:\n        return singular if count == 1 else singular + \"s\"\n\n    def include(count: int, word: str) -> str:\n        return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "target_code_len": 273,
        "diff_format": "@@ -19,6 +19,6 @@\n def format_duration(seconds: int) -> str:\n-    def pluralize(count, singular) -> None:\n+    def pluralize(count: int, singular: str) -> str:\n         return singular if count == 1 else singular + \"s\"\n \n-    def include(count, word) -> None:\n+    def include(count: int, word: str) -> str:\n         return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "source_code_with_indent": "def format_duration(seconds: int) -> str:\n    <IND>def pluralize(count, singular) -> None:\n        <IND>return singular if count == 1 else singular + \"s\"\n\n    <DED>def include(count, word) -> None:\n        <IND>return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "def format_duration(seconds: int) -> str:\n    <IND>def pluralize(count: int, singular: str) -> str:\n        <IND>return singular if count == 1 else singular + \"s\"\n\n    <DED>def include(count: int, word: str) -> str:\n        <IND>return f\"{count} {pluralize(count, word)}\" if count > 0 else \"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/util/signed_token.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/util/signed_token.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/util/signed_token.py:32:4 Incompatible variable type [9]: payload is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `bytes`.",
    "message": " payload is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 32,
    "warning_line": "    payload = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional\nimport json\n",
        "source_code_len": 113,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Dict, Optional\nimport json\n",
        "target_code_len": 119,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import Optional\n+from typing import Dict, Optional\n import json\n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional\nimport json\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Dict, Optional\nimport json\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef sign_token(key: str, payload: dict) -> str:\n    payload = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n    checksum = _get_checksum(key, payload)\n    return f\"{checksum}:{payload.decode('utf-8')}\"\n\n\ndef verify_token(key: str, data: str) -> Optional[dict]:\n    if not data:\n",
        "source_code_len": 295,
        "target_code": "\ndef sign_token(key: str, payload: Dict) -> str:\n    payload_b64 = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n    checksum = _get_checksum(key, payload_b64)\n    return f\"{checksum}:{payload_b64.decode('utf-8')}\"\n\n\ndef verify_token(key: str, data: str) -> Optional[Dict]:\n    if not data:\n",
        "target_code_len": 307,
        "diff_format": "@@ -30,9 +30,9 @@\n \n-def sign_token(key: str, payload: dict) -> str:\n-    payload = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n-    checksum = _get_checksum(key, payload)\n-    return f\"{checksum}:{payload.decode('utf-8')}\"\n+def sign_token(key: str, payload: Dict) -> str:\n+    payload_b64 = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n+    checksum = _get_checksum(key, payload_b64)\n+    return f\"{checksum}:{payload_b64.decode('utf-8')}\"\n \n \n-def verify_token(key: str, data: str) -> Optional[dict]:\n+def verify_token(key: str, data: str) -> Optional[Dict]:\n     if not data:\n",
        "source_code_with_indent": "\n<DED>def sign_token(key: str, payload: dict) -> str:\n    <IND>payload = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n    checksum = _get_checksum(key, payload)\n    return f\"{checksum}:{payload.decode('utf-8')}\"\n\n\n<DED>def verify_token(key: str, data: str) -> Optional[dict]:\n    <IND>if not data:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def sign_token(key: str, payload: Dict) -> str:\n    <IND>payload_b64 = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n    checksum = _get_checksum(key, payload_b64)\n    return f\"{checksum}:{payload_b64.decode('utf-8')}\"\n\n\n<DED>def verify_token(key: str, data: str) -> Optional[Dict]:\n    <IND>if not data:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/telegram",
    "commit": "0f8009b1e91bf580ee2de868fe0b44288374e314",
    "filename": "mautrix_telegram/util/signed_token.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-telegram/mautrix_telegram/util/signed_token.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mautrix_telegram/util/signed_token.py:33:34 Incompatible parameter type [6]: Expected `bytes` for 2nd positional only parameter to call `_get_checksum` but got `typing.Dict[typing.Any, typing.Any]`.",
    "message": " Expected `bytes` for 2nd positional only parameter to call `_get_checksum` but got `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 33,
    "warning_line": "    checksum = _get_checksum(key, payload)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional\nimport json\n",
        "source_code_len": 113,
        "target_code": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Dict, Optional\nimport json\n",
        "target_code_len": 119,
        "diff_format": "@@ -16,3 +16,3 @@\n # along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-from typing import Optional\n+from typing import Dict, Optional\n import json\n",
        "source_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Optional\nimport json\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "# along with this program.  If not, see <https://www.gnu.org/licenses/>.\nfrom typing import Dict, Optional\nimport json\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef sign_token(key: str, payload: dict) -> str:\n    payload = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n    checksum = _get_checksum(key, payload)\n    return f\"{checksum}:{payload.decode('utf-8')}\"\n\n\ndef verify_token(key: str, data: str) -> Optional[dict]:\n    if not data:\n",
        "source_code_len": 295,
        "target_code": "\ndef sign_token(key: str, payload: Dict) -> str:\n    payload_b64 = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n    checksum = _get_checksum(key, payload_b64)\n    return f\"{checksum}:{payload_b64.decode('utf-8')}\"\n\n\ndef verify_token(key: str, data: str) -> Optional[Dict]:\n    if not data:\n",
        "target_code_len": 307,
        "diff_format": "@@ -30,9 +30,9 @@\n \n-def sign_token(key: str, payload: dict) -> str:\n-    payload = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n-    checksum = _get_checksum(key, payload)\n-    return f\"{checksum}:{payload.decode('utf-8')}\"\n+def sign_token(key: str, payload: Dict) -> str:\n+    payload_b64 = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n+    checksum = _get_checksum(key, payload_b64)\n+    return f\"{checksum}:{payload_b64.decode('utf-8')}\"\n \n \n-def verify_token(key: str, data: str) -> Optional[dict]:\n+def verify_token(key: str, data: str) -> Optional[Dict]:\n     if not data:\n",
        "source_code_with_indent": "\n<DED>def sign_token(key: str, payload: dict) -> str:\n    <IND>payload = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n    checksum = _get_checksum(key, payload)\n    return f\"{checksum}:{payload.decode('utf-8')}\"\n\n\n<DED>def verify_token(key: str, data: str) -> Optional[dict]:\n    <IND>if not data:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def sign_token(key: str, payload: Dict) -> str:\n    <IND>payload_b64 = base64.urlsafe_b64encode(json.dumps(payload).encode(\"utf-8\"))\n    checksum = _get_checksum(key, payload_b64)\n    return f\"{checksum}:{payload_b64.decode('utf-8')}\"\n\n\n<DED>def verify_token(key: str, data: str) -> Optional[Dict]:\n    <IND>if not data:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]