[
  {
    "project": "electrumsv/electrumsv",
    "commit": "69ae8616e50b7a7f804aa02948cd71af2934a032",
    "filename": "electrumsv/keystore.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/keystore.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/keystore.py:685:39 Incompatible parameter type [6]: Expected `Union[BIP32_KeyStore, Hardware_KeyStore, Old_KeyStore]` for 1st positional only parameter to call `Multisig_KeyStore.add_cosigner_keystore` but got `KeyStore`.",
    "message": " Expected `Union[BIP32_KeyStore, Hardware_KeyStore, Old_KeyStore]` for 1st positional only parameter to call `Multisig_KeyStore.add_cosigner_keystore` but got `KeyStore`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 685,
    "warning_line": "            self.add_cosigner_keystore(keystore)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            keystore = instantiate_keystore(derivation_type, derivation_data)\n            self.add_cosigner_keystore(keystore)\n",
        "source_code_len": 127,
        "target_code": "            keystore = instantiate_keystore(derivation_type, derivation_data)\n            keystore = cast(MultisigChildKeyStoreType, keystore)\n            self.add_cosigner_keystore(keystore)\n",
        "target_code_len": 192,
        "diff_format": "@@ -684,2 +684,3 @@\n             keystore = instantiate_keystore(derivation_type, derivation_data)\n+            keystore = cast(MultisigChildKeyStoreType, keystore)\n             self.add_cosigner_keystore(keystore)\n",
        "source_code_with_indent": "            keystore = instantiate_keystore(derivation_type, derivation_data)\n            self.add_cosigner_keystore(keystore)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            keystore = instantiate_keystore(derivation_type, derivation_data)\n            keystore = cast(MultisigChildKeyStoreType, keystore)\n            self.add_cosigner_keystore(keystore)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "69ae8616e50b7a7f804aa02948cd71af2934a032",
    "filename": "electrumsv/transaction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/transaction.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/transaction.py:660:61 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 660,
    "warning_line": "                    txin.script_type = ScriptType(input_data[i]['script_type'])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if version == 1:\n            input_data: Optional[Dict[str, Any]] = data.get('inputs')\n            if input_data is not None:\n",
        "source_code_len": 134,
        "target_code": "        if version == 1:\n            input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n            if input_data is not None:\n",
        "target_code_len": 140,
        "diff_format": "@@ -655,3 +655,3 @@\n         if version == 1:\n-            input_data: Optional[Dict[str, Any]] = data.get('inputs')\n+            input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n             if input_data is not None:\n",
        "source_code_with_indent": "        if version == 1:\n            <IND>input_data: Optional[Dict[str, Any]] = data.get('inputs')\n            if input_data is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if version == 1:\n            <IND>input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n            if input_data is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "69ae8616e50b7a7f804aa02948cd71af2934a032",
    "filename": "electrumsv/transaction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/transaction.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/transaction.py:661:52 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 661,
    "warning_line": "                    txin.threshold = int(input_data[i]['threshold'])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if version == 1:\n            input_data: Optional[Dict[str, Any]] = data.get('inputs')\n            if input_data is not None:\n",
        "source_code_len": 134,
        "target_code": "        if version == 1:\n            input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n            if input_data is not None:\n",
        "target_code_len": 140,
        "diff_format": "@@ -655,3 +655,3 @@\n         if version == 1:\n-            input_data: Optional[Dict[str, Any]] = data.get('inputs')\n+            input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n             if input_data is not None:\n",
        "source_code_with_indent": "        if version == 1:\n            <IND>input_data: Optional[Dict[str, Any]] = data.get('inputs')\n            if input_data is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if version == 1:\n            <IND>input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n            if input_data is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "69ae8616e50b7a7f804aa02948cd71af2934a032",
    "filename": "electrumsv/transaction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/transaction.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/transaction.py:662:48 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 662,
    "warning_line": "                    txin.value = int(input_data[i]['value'])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if version == 1:\n            input_data: Optional[Dict[str, Any]] = data.get('inputs')\n            if input_data is not None:\n",
        "source_code_len": 134,
        "target_code": "        if version == 1:\n            input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n            if input_data is not None:\n",
        "target_code_len": 140,
        "diff_format": "@@ -655,3 +655,3 @@\n         if version == 1:\n-            input_data: Optional[Dict[str, Any]] = data.get('inputs')\n+            input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n             if input_data is not None:\n",
        "source_code_with_indent": "        if version == 1:\n            <IND>input_data: Optional[Dict[str, Any]] = data.get('inputs')\n            if input_data is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if version == 1:\n            <IND>input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n            if input_data is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "69ae8616e50b7a7f804aa02948cd71af2934a032",
    "filename": "electrumsv/transaction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/transaction.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/transaction.py:663:77 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 663,
    "warning_line": "                    txin.signatures = [ bytes.fromhex(v) for v in input_data[i]['signatures'] ]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if version == 1:\n            input_data: Optional[Dict[str, Any]] = data.get('inputs')\n            if input_data is not None:\n",
        "source_code_len": 134,
        "target_code": "        if version == 1:\n            input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n            if input_data is not None:\n",
        "target_code_len": 140,
        "diff_format": "@@ -655,3 +655,3 @@\n         if version == 1:\n-            input_data: Optional[Dict[str, Any]] = data.get('inputs')\n+            input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n             if input_data is not None:\n",
        "source_code_with_indent": "        if version == 1:\n            <IND>input_data: Optional[Dict[str, Any]] = data.get('inputs')\n            if input_data is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if version == 1:\n            <IND>input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n            if input_data is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "69ae8616e50b7a7f804aa02948cd71af2934a032",
    "filename": "electrumsv/transaction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/transaction.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/transaction.py:664:83 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 664,
    "warning_line": "                    txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if version == 1:\n            input_data: Optional[Dict[str, Any]] = data.get('inputs')\n            if input_data is not None:\n",
        "source_code_len": 134,
        "target_code": "        if version == 1:\n            input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n            if input_data is not None:\n",
        "target_code_len": 140,
        "diff_format": "@@ -655,3 +655,3 @@\n         if version == 1:\n-            input_data: Optional[Dict[str, Any]] = data.get('inputs')\n+            input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n             if input_data is not None:\n",
        "source_code_with_indent": "        if version == 1:\n            <IND>input_data: Optional[Dict[str, Any]] = data.get('inputs')\n            if input_data is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if version == 1:\n            <IND>input_data: Optional[List[Dict[str, Any]]] = data.get('inputs')\n            if input_data is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "69ae8616e50b7a7f804aa02948cd71af2934a032",
    "filename": "electrumsv/transaction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/transaction.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/transaction.py:669:63 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 669,
    "warning_line": "                    txout.script_type = ScriptType(output_data[i]['script_type'])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]\n            output_data: Optional[Dict[str, Any]] = data.get('outputs')\n            if output_data is not None:\n",
        "source_code_len": 212,
        "target_code": "                    txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]\n            output_data: Optional[List[Dict[str, Any]]] = data.get('outputs')\n            if output_data is not None:\n",
        "target_code_len": 218,
        "diff_format": "@@ -664,3 +664,3 @@\n                     txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]\n-            output_data: Optional[Dict[str, Any]] = data.get('outputs')\n+            output_data: Optional[List[Dict[str, Any]]] = data.get('outputs')\n             if output_data is not None:\n",
        "source_code_with_indent": "                    txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]\n            <DED><DED>output_data: Optional[Dict[str, Any]] = data.get('outputs')\n            if output_data is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]\n            <DED><DED>output_data: Optional[List[Dict[str, Any]]] = data.get('outputs')\n            if output_data is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "electrumsv/electrumsv",
    "commit": "69ae8616e50b7a7f804aa02948cd71af2934a032",
    "filename": "electrumsv/transaction.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/electrumsv-electrumsv/electrumsv/transaction.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "electrumsv/transaction.py:671:45 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "message": " Expected `str` for 1st positional only parameter to call `dict.__getitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 671,
    "warning_line": "                        for v in output_data[i]['x_pubkeys']]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                    txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]\n            output_data: Optional[Dict[str, Any]] = data.get('outputs')\n            if output_data is not None:\n",
        "source_code_len": 212,
        "target_code": "                    txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]\n            output_data: Optional[List[Dict[str, Any]]] = data.get('outputs')\n            if output_data is not None:\n",
        "target_code_len": 218,
        "diff_format": "@@ -664,3 +664,3 @@\n                     txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]\n-            output_data: Optional[Dict[str, Any]] = data.get('outputs')\n+            output_data: Optional[List[Dict[str, Any]]] = data.get('outputs')\n             if output_data is not None:\n",
        "source_code_with_indent": "                    txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]\n            <DED><DED>output_data: Optional[Dict[str, Any]] = data.get('outputs')\n            if output_data is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    txin.x_pubkeys = [ XPublicKey.from_dict(v) for v in input_data[i]['x_pubkeys']]\n            <DED><DED>output_data: Optional[List[Dict[str, Any]]] = data.get('outputs')\n            if output_data is not None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]