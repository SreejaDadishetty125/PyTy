[
  {
    "project": "irmen/synthesizer",
    "commit": "ab2a97692028356d8d146d5adc9b66286df40daa",
    "filename": "synthplayer/streaming.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-synthesizer/synthplayer/streaming.py",
    "file_hunks_size": 14,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "synthplayer/streaming.py:239:23 Incompatible variable type [9]: wave_file is declared to have type `Union[BinaryIO, str]` but is used as type `None`.",
    "message": " wave_file is declared to have type `Union[BinaryIO, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 239,
    "warning_line": "    def __init__(self, wave_file: Union[str, BinaryIO]=None, name: str=\"\") -> None:"
  },
  {
    "project": "irmen/synthesizer",
    "commit": "ab2a97692028356d8d146d5adc9b66286df40daa",
    "filename": "synthplayer/streaming.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-synthesizer/synthplayer/streaming.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "synthplayer/streaming.py:377:36 Incompatible parameter type [6]: Expected `Iterable[SampleFilter]` for 2nd positional only parameter to call `StreamMixer.add_stream` but got `None`.",
    "message": " Expected `Iterable[SampleFilter]` for 2nd positional only parameter to call `StreamMixer.add_stream` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 377,
    "warning_line": "            self.add_stream(stream, None, endless)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n        ws = wave.open(stream, 'r')\n",
        "source_code_len": 206,
        "target_code": "\n    def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n        ws = wave.open(stream, 'r')\n",
        "target_code_len": 232,
        "diff_format": "@@ -378,4 +380,4 @@\n \n-    def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n-                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n+    def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n+                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n         ws = wave.open(stream, 'r')\n",
        "source_code_with_indent": "\n    <DED><DED>def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n        <IND>ws = wave.open(stream, 'r')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n        <IND>ws = wave.open(stream, 'r')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/synthesizer",
    "commit": "ab2a97692028356d8d146d5adc9b66286df40daa",
    "filename": "synthplayer/streaming.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-synthesizer/synthplayer/streaming.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "synthplayer/streaming.py:379:43 Incompatible variable type [9]: filters is declared to have type `Iterable[SampleFilter]` but is used as type `None`.",
    "message": " filters is declared to have type `Iterable[SampleFilter]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 379,
    "warning_line": "    def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n        ws = wave.open(stream, 'r')\n",
        "source_code_len": 206,
        "target_code": "\n    def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n        ws = wave.open(stream, 'r')\n",
        "target_code_len": 232,
        "diff_format": "@@ -378,4 +380,4 @@\n \n-    def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n-                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n+    def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n+                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n         ws = wave.open(stream, 'r')\n",
        "source_code_with_indent": "\n    <DED><DED>def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n        <IND>ws = wave.open(stream, 'r')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n        <IND>ws = wave.open(stream, 'r')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/synthesizer",
    "commit": "ab2a97692028356d8d146d5adc9b66286df40daa",
    "filename": "synthplayer/streaming.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-synthesizer/synthplayer/streaming.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "synthplayer/streaming.py:380:40 Incompatible variable type [9]: end_callback is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "message": " end_callback is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 380,
    "warning_line": "                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n        ws = wave.open(stream, 'r')\n",
        "source_code_len": 206,
        "target_code": "\n    def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n        ws = wave.open(stream, 'r')\n",
        "target_code_len": 232,
        "diff_format": "@@ -378,4 +380,4 @@\n \n-    def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n-                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n+    def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n+                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n         ws = wave.open(stream, 'r')\n",
        "source_code_with_indent": "\n    <DED><DED>def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n        <IND>ws = wave.open(stream, 'r')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n        <IND>ws = wave.open(stream, 'r')\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "irmen/synthesizer",
    "commit": "ab2a97692028356d8d146d5adc9b66286df40daa",
    "filename": "synthplayer/streaming.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/irmen-synthesizer/synthplayer/streaming.py",
    "file_hunks_size": 14,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "synthplayer/streaming.py:399:41 Incompatible variable type [9]: end_callback is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "message": " end_callback is declared to have type `typing.Callable[[], None]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 399,
    "warning_line": "    def add_sample(self, sample: Sample, end_callback: Callable[[], None]=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n        ws = wave.open(stream, 'r')\n",
        "source_code_len": 206,
        "target_code": "\n    def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n        ws = wave.open(stream, 'r')\n",
        "target_code_len": 232,
        "diff_format": "@@ -378,4 +380,4 @@\n \n-    def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n-                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n+    def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n+                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n         ws = wave.open(stream, 'r')\n",
        "source_code_with_indent": "\n    <DED><DED>def add_stream(self, stream: BinaryIO, filters: Iterable[SampleFilter]=None,\n                   endless: bool=False, end_callback: Callable[[], None]=None) -> None:\n        <IND>ws = wave.open(stream, 'r')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def add_stream(self, stream: BinaryIO, filters: Optional[Iterable[SampleFilter]] = None,\n                   endless: bool = False, end_callback: Optional[Callable[[], None]] = None) -> None:\n        <IND>ws = wave.open(stream, 'r')\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_sample(self, sample: Sample, end_callback: Callable[[], None]=None) -> None:\n        assert sample.samplewidth == self.samplewidth\n",
        "source_code_len": 144,
        "target_code": "\n    def add_sample(self, sample: Sample, end_callback: Optional[Callable[[], None]] = None) -> None:\n        assert sample.samplewidth == self.samplewidth\n",
        "target_code_len": 156,
        "diff_format": "@@ -398,3 +400,3 @@\n \n-    def add_sample(self, sample: Sample, end_callback: Callable[[], None]=None) -> None:\n+    def add_sample(self, sample: Sample, end_callback: Optional[Callable[[], None]] = None) -> None:\n         assert sample.samplewidth == self.samplewidth\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def add_sample(self, sample: Sample, end_callback: Callable[[], None]=None) -> None:\n        <IND>assert sample.samplewidth == self.samplewidth\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def add_sample(self, sample: Sample, end_callback: Optional[Callable[[], None]] = None) -> None:\n        <IND>assert sample.samplewidth == self.samplewidth\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]