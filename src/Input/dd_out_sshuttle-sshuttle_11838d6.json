[
  {
    "project": "sshuttle/sshuttle",
    "commit": "11838d65c2e5b48827bef560c793f6667a7d6b22",
    "filename": "sshuttle/methods/pf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sshuttle-sshuttle/sshuttle/methods/pf.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sshuttle/methods/pf.py:41:38 Unsupported operand [58]: `*` is not supported for operand types `typing.Type[c_uint32]` and `int`.",
    "message": " `*` is not supported for operand types `typing.Type[c_uint32]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 41,
    "warning_line": "                    (\"v6\",            c_uint32 * 4),  # struct in6_addr",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    _fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\nclass pf_addr(Structure):\n\n    class _pfa(Union):\n        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    _fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\nclass pfioc_natlook(Structure):\n    _fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\npfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_len": 1843,
        "target_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    def __init__(self, platform=None):\n        if platform is None:\n            platform = sys.platform\n        self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        else:\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        class pf_addr(Structure):\n\n            class _pfa(Union):\n                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            _fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        class pfioc_natlook(Structure):\n            _fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char * \\\n            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\nosdefs = OsDefs()\n\n",
        "target_code_len": 2795,
        "diff_format": "@@ -27,60 +27,81 @@\n _pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n-\n-\n-# This are some classes and functions used to support pf in yosemite.\n-class pf_state_xport(Union):\n-    _fields_ = [(\"port\", c_uint16),\n-                (\"call_id\", c_uint16),\n-                (\"spi\", c_uint32)]\n-\n-\n-class pf_addr(Structure):\n-\n-    class _pfa(Union):\n-        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n-                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n-                    (\"addr8\",         c_uint8 * 16),\n-                    (\"addr16\",        c_uint16 * 8),\n-                    (\"addr32\",        c_uint32 * 4)]\n-\n-    _fields_ = [(\"pfa\",               _pfa)]\n-    _anonymous_ = (\"pfa\",)\n-\n-\n-class pfioc_natlook(Structure):\n-    _fields_ = [(\"saddr\", pf_addr),\n-                (\"daddr\", pf_addr),\n-                (\"rsaddr\", pf_addr),\n-                (\"rdaddr\", pf_addr),\n-                (\"sxport\", pf_state_xport),\n-                (\"dxport\", pf_state_xport),\n-                (\"rsxport\", pf_state_xport),\n-                (\"rdxport\", pf_state_xport),\n-                (\"af\", c_uint8),                      # sa_family_t\n-                (\"proto\", c_uint8),\n-                (\"proto_variant\", c_uint8),\n-                (\"direction\", c_uint8)]\n-\n-pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n-\n-pfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n-\n-MAXPATHLEN = 1024\n-\n-DIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\n-DIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\n-DIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n-\n-PF_CHANGE_ADD_TAIL = 2\n-PF_CHANGE_GET_TICKET = 6\n-\n-PF_PASS = 0\n-PF_RDR = 8\n-\n-PF_OUT = 2\n-\n _pf_fd = None\n+\n+\n+class OsDefs(object):\n+\n+    def __init__(self, platform=None):\n+        if platform is None:\n+            platform = sys.platform\n+        self.platform = platform\n+\n+        # This are some classes and functions used to support pf in yosemite.\n+        if platform == 'darwin':\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16),\n+                            (\"spi\", c_uint32)]\n+        else:\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16)]\n+\n+        class pf_addr(Structure):\n+\n+            class _pfa(Union):\n+                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n+                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n+                            (\"addr8\",         c_uint8 * 16),\n+                            (\"addr16\",        c_uint16 * 8),\n+                            (\"addr32\",        c_uint32 * 4)]\n+\n+            _fields_ = [(\"pfa\",               _pfa)]\n+            _anonymous_ = (\"pfa\",)\n+\n+        class pfioc_natlook(Structure):\n+            _fields_ = [(\"saddr\", pf_addr),\n+                        (\"daddr\", pf_addr),\n+                        (\"rsaddr\", pf_addr),\n+                        (\"rdaddr\", pf_addr),\n+                        (\"sxport\", pf_state_xport),\n+                        (\"dxport\", pf_state_xport),\n+                        (\"rsxport\", pf_state_xport),\n+                        (\"rdxport\", pf_state_xport),\n+                        (\"af\", c_uint8),                      # sa_family_t\n+                        (\"proto\", c_uint8),\n+                        (\"proto_variant\", c_uint8),\n+                        (\"direction\", c_uint8)]\n+        self.pfioc_natlook = pfioc_natlook\n+\n+        # sizeof(struct pfioc_rule)\n+        self.pfioc_rule = c_char * \\\n+            (3104 if platform == 'darwin' else 3040)\n+\n+        # sizeof(struct pfioc_pooladdr)\n+        self.pfioc_pooladdr = c_char * 1136\n+\n+        self.MAXPATHLEN = 1024\n+\n+        self.DIOCNATLOOK = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (23))\n+        self.DIOCCHANGERULE = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (26))\n+        self.DIOCBEGINADDRS = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (51))\n+\n+        self.PF_CHANGE_ADD_TAIL = 2\n+        self.PF_CHANGE_GET_TICKET = 6\n+\n+        self.PF_PASS = 0\n+        self.PF_RDR = 8\n+\n+        self.PF_OUT = 2\n+\n+osdefs = OsDefs()\n \n",
        "source_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    <IND>_fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\n<DED>class pf_addr(Structure):\n\n    <IND>class _pfa(Union):\n        <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    <DED>_fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\n<DED>class pfioc_natlook(Structure):\n    <IND>_fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\n<DED>pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    <IND>def __init__(self, platform=None):\n        <IND>if platform is None:\n            <IND>platform = sys.platform\n        <DED>self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        <DED><DED>else:\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        <DED><DED>class pf_addr(Structure):\n\n            <IND>class _pfa(Union):\n                <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            <DED>_fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        <DED>class pfioc_natlook(Structure):\n            <IND>_fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        <DED>self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char *            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\n<DED><DED>osdefs = OsDefs()\n\n"
      }
    ]
  },
  {
    "project": "sshuttle/sshuttle",
    "commit": "11838d65c2e5b48827bef560c793f6667a7d6b22",
    "filename": "sshuttle/methods/pf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sshuttle-sshuttle/sshuttle/methods/pf.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sshuttle/methods/pf.py:42:38 Unsupported operand [58]: `*` is not supported for operand types `typing.Type[c_uint8]` and `int`.",
    "message": " `*` is not supported for operand types `typing.Type[c_uint8]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 42,
    "warning_line": "                    (\"addr8\",         c_uint8 * 16),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    _fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\nclass pf_addr(Structure):\n\n    class _pfa(Union):\n        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    _fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\nclass pfioc_natlook(Structure):\n    _fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\npfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_len": 1843,
        "target_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    def __init__(self, platform=None):\n        if platform is None:\n            platform = sys.platform\n        self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        else:\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        class pf_addr(Structure):\n\n            class _pfa(Union):\n                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            _fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        class pfioc_natlook(Structure):\n            _fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char * \\\n            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\nosdefs = OsDefs()\n\n",
        "target_code_len": 2795,
        "diff_format": "@@ -27,60 +27,81 @@\n _pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n-\n-\n-# This are some classes and functions used to support pf in yosemite.\n-class pf_state_xport(Union):\n-    _fields_ = [(\"port\", c_uint16),\n-                (\"call_id\", c_uint16),\n-                (\"spi\", c_uint32)]\n-\n-\n-class pf_addr(Structure):\n-\n-    class _pfa(Union):\n-        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n-                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n-                    (\"addr8\",         c_uint8 * 16),\n-                    (\"addr16\",        c_uint16 * 8),\n-                    (\"addr32\",        c_uint32 * 4)]\n-\n-    _fields_ = [(\"pfa\",               _pfa)]\n-    _anonymous_ = (\"pfa\",)\n-\n-\n-class pfioc_natlook(Structure):\n-    _fields_ = [(\"saddr\", pf_addr),\n-                (\"daddr\", pf_addr),\n-                (\"rsaddr\", pf_addr),\n-                (\"rdaddr\", pf_addr),\n-                (\"sxport\", pf_state_xport),\n-                (\"dxport\", pf_state_xport),\n-                (\"rsxport\", pf_state_xport),\n-                (\"rdxport\", pf_state_xport),\n-                (\"af\", c_uint8),                      # sa_family_t\n-                (\"proto\", c_uint8),\n-                (\"proto_variant\", c_uint8),\n-                (\"direction\", c_uint8)]\n-\n-pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n-\n-pfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n-\n-MAXPATHLEN = 1024\n-\n-DIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\n-DIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\n-DIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n-\n-PF_CHANGE_ADD_TAIL = 2\n-PF_CHANGE_GET_TICKET = 6\n-\n-PF_PASS = 0\n-PF_RDR = 8\n-\n-PF_OUT = 2\n-\n _pf_fd = None\n+\n+\n+class OsDefs(object):\n+\n+    def __init__(self, platform=None):\n+        if platform is None:\n+            platform = sys.platform\n+        self.platform = platform\n+\n+        # This are some classes and functions used to support pf in yosemite.\n+        if platform == 'darwin':\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16),\n+                            (\"spi\", c_uint32)]\n+        else:\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16)]\n+\n+        class pf_addr(Structure):\n+\n+            class _pfa(Union):\n+                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n+                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n+                            (\"addr8\",         c_uint8 * 16),\n+                            (\"addr16\",        c_uint16 * 8),\n+                            (\"addr32\",        c_uint32 * 4)]\n+\n+            _fields_ = [(\"pfa\",               _pfa)]\n+            _anonymous_ = (\"pfa\",)\n+\n+        class pfioc_natlook(Structure):\n+            _fields_ = [(\"saddr\", pf_addr),\n+                        (\"daddr\", pf_addr),\n+                        (\"rsaddr\", pf_addr),\n+                        (\"rdaddr\", pf_addr),\n+                        (\"sxport\", pf_state_xport),\n+                        (\"dxport\", pf_state_xport),\n+                        (\"rsxport\", pf_state_xport),\n+                        (\"rdxport\", pf_state_xport),\n+                        (\"af\", c_uint8),                      # sa_family_t\n+                        (\"proto\", c_uint8),\n+                        (\"proto_variant\", c_uint8),\n+                        (\"direction\", c_uint8)]\n+        self.pfioc_natlook = pfioc_natlook\n+\n+        # sizeof(struct pfioc_rule)\n+        self.pfioc_rule = c_char * \\\n+            (3104 if platform == 'darwin' else 3040)\n+\n+        # sizeof(struct pfioc_pooladdr)\n+        self.pfioc_pooladdr = c_char * 1136\n+\n+        self.MAXPATHLEN = 1024\n+\n+        self.DIOCNATLOOK = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (23))\n+        self.DIOCCHANGERULE = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (26))\n+        self.DIOCBEGINADDRS = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (51))\n+\n+        self.PF_CHANGE_ADD_TAIL = 2\n+        self.PF_CHANGE_GET_TICKET = 6\n+\n+        self.PF_PASS = 0\n+        self.PF_RDR = 8\n+\n+        self.PF_OUT = 2\n+\n+osdefs = OsDefs()\n \n",
        "source_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    <IND>_fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\n<DED>class pf_addr(Structure):\n\n    <IND>class _pfa(Union):\n        <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    <DED>_fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\n<DED>class pfioc_natlook(Structure):\n    <IND>_fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\n<DED>pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    <IND>def __init__(self, platform=None):\n        <IND>if platform is None:\n            <IND>platform = sys.platform\n        <DED>self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        <DED><DED>else:\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        <DED><DED>class pf_addr(Structure):\n\n            <IND>class _pfa(Union):\n                <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            <DED>_fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        <DED>class pfioc_natlook(Structure):\n            <IND>_fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        <DED>self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char *            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\n<DED><DED>osdefs = OsDefs()\n\n"
      }
    ]
  },
  {
    "project": "sshuttle/sshuttle",
    "commit": "11838d65c2e5b48827bef560c793f6667a7d6b22",
    "filename": "sshuttle/methods/pf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sshuttle-sshuttle/sshuttle/methods/pf.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sshuttle/methods/pf.py:43:38 Unsupported operand [58]: `*` is not supported for operand types `typing.Type[c_uint16]` and `int`.",
    "message": " `*` is not supported for operand types `typing.Type[c_uint16]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 43,
    "warning_line": "                    (\"addr16\",        c_uint16 * 8),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    _fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\nclass pf_addr(Structure):\n\n    class _pfa(Union):\n        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    _fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\nclass pfioc_natlook(Structure):\n    _fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\npfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_len": 1843,
        "target_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    def __init__(self, platform=None):\n        if platform is None:\n            platform = sys.platform\n        self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        else:\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        class pf_addr(Structure):\n\n            class _pfa(Union):\n                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            _fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        class pfioc_natlook(Structure):\n            _fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char * \\\n            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\nosdefs = OsDefs()\n\n",
        "target_code_len": 2795,
        "diff_format": "@@ -27,60 +27,81 @@\n _pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n-\n-\n-# This are some classes and functions used to support pf in yosemite.\n-class pf_state_xport(Union):\n-    _fields_ = [(\"port\", c_uint16),\n-                (\"call_id\", c_uint16),\n-                (\"spi\", c_uint32)]\n-\n-\n-class pf_addr(Structure):\n-\n-    class _pfa(Union):\n-        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n-                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n-                    (\"addr8\",         c_uint8 * 16),\n-                    (\"addr16\",        c_uint16 * 8),\n-                    (\"addr32\",        c_uint32 * 4)]\n-\n-    _fields_ = [(\"pfa\",               _pfa)]\n-    _anonymous_ = (\"pfa\",)\n-\n-\n-class pfioc_natlook(Structure):\n-    _fields_ = [(\"saddr\", pf_addr),\n-                (\"daddr\", pf_addr),\n-                (\"rsaddr\", pf_addr),\n-                (\"rdaddr\", pf_addr),\n-                (\"sxport\", pf_state_xport),\n-                (\"dxport\", pf_state_xport),\n-                (\"rsxport\", pf_state_xport),\n-                (\"rdxport\", pf_state_xport),\n-                (\"af\", c_uint8),                      # sa_family_t\n-                (\"proto\", c_uint8),\n-                (\"proto_variant\", c_uint8),\n-                (\"direction\", c_uint8)]\n-\n-pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n-\n-pfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n-\n-MAXPATHLEN = 1024\n-\n-DIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\n-DIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\n-DIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n-\n-PF_CHANGE_ADD_TAIL = 2\n-PF_CHANGE_GET_TICKET = 6\n-\n-PF_PASS = 0\n-PF_RDR = 8\n-\n-PF_OUT = 2\n-\n _pf_fd = None\n+\n+\n+class OsDefs(object):\n+\n+    def __init__(self, platform=None):\n+        if platform is None:\n+            platform = sys.platform\n+        self.platform = platform\n+\n+        # This are some classes and functions used to support pf in yosemite.\n+        if platform == 'darwin':\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16),\n+                            (\"spi\", c_uint32)]\n+        else:\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16)]\n+\n+        class pf_addr(Structure):\n+\n+            class _pfa(Union):\n+                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n+                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n+                            (\"addr8\",         c_uint8 * 16),\n+                            (\"addr16\",        c_uint16 * 8),\n+                            (\"addr32\",        c_uint32 * 4)]\n+\n+            _fields_ = [(\"pfa\",               _pfa)]\n+            _anonymous_ = (\"pfa\",)\n+\n+        class pfioc_natlook(Structure):\n+            _fields_ = [(\"saddr\", pf_addr),\n+                        (\"daddr\", pf_addr),\n+                        (\"rsaddr\", pf_addr),\n+                        (\"rdaddr\", pf_addr),\n+                        (\"sxport\", pf_state_xport),\n+                        (\"dxport\", pf_state_xport),\n+                        (\"rsxport\", pf_state_xport),\n+                        (\"rdxport\", pf_state_xport),\n+                        (\"af\", c_uint8),                      # sa_family_t\n+                        (\"proto\", c_uint8),\n+                        (\"proto_variant\", c_uint8),\n+                        (\"direction\", c_uint8)]\n+        self.pfioc_natlook = pfioc_natlook\n+\n+        # sizeof(struct pfioc_rule)\n+        self.pfioc_rule = c_char * \\\n+            (3104 if platform == 'darwin' else 3040)\n+\n+        # sizeof(struct pfioc_pooladdr)\n+        self.pfioc_pooladdr = c_char * 1136\n+\n+        self.MAXPATHLEN = 1024\n+\n+        self.DIOCNATLOOK = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (23))\n+        self.DIOCCHANGERULE = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (26))\n+        self.DIOCBEGINADDRS = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (51))\n+\n+        self.PF_CHANGE_ADD_TAIL = 2\n+        self.PF_CHANGE_GET_TICKET = 6\n+\n+        self.PF_PASS = 0\n+        self.PF_RDR = 8\n+\n+        self.PF_OUT = 2\n+\n+osdefs = OsDefs()\n \n",
        "source_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    <IND>_fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\n<DED>class pf_addr(Structure):\n\n    <IND>class _pfa(Union):\n        <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    <DED>_fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\n<DED>class pfioc_natlook(Structure):\n    <IND>_fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\n<DED>pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    <IND>def __init__(self, platform=None):\n        <IND>if platform is None:\n            <IND>platform = sys.platform\n        <DED>self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        <DED><DED>else:\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        <DED><DED>class pf_addr(Structure):\n\n            <IND>class _pfa(Union):\n                <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            <DED>_fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        <DED>class pfioc_natlook(Structure):\n            <IND>_fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        <DED>self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char *            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\n<DED><DED>osdefs = OsDefs()\n\n"
      }
    ]
  },
  {
    "project": "sshuttle/sshuttle",
    "commit": "11838d65c2e5b48827bef560c793f6667a7d6b22",
    "filename": "sshuttle/methods/pf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sshuttle-sshuttle/sshuttle/methods/pf.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sshuttle/methods/pf.py:44:38 Unsupported operand [58]: `*` is not supported for operand types `typing.Type[c_uint32]` and `int`.",
    "message": " `*` is not supported for operand types `typing.Type[c_uint32]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 44,
    "warning_line": "                    (\"addr32\",        c_uint32 * 4)]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    _fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\nclass pf_addr(Structure):\n\n    class _pfa(Union):\n        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    _fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\nclass pfioc_natlook(Structure):\n    _fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\npfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_len": 1843,
        "target_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    def __init__(self, platform=None):\n        if platform is None:\n            platform = sys.platform\n        self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        else:\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        class pf_addr(Structure):\n\n            class _pfa(Union):\n                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            _fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        class pfioc_natlook(Structure):\n            _fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char * \\\n            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\nosdefs = OsDefs()\n\n",
        "target_code_len": 2795,
        "diff_format": "@@ -27,60 +27,81 @@\n _pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n-\n-\n-# This are some classes and functions used to support pf in yosemite.\n-class pf_state_xport(Union):\n-    _fields_ = [(\"port\", c_uint16),\n-                (\"call_id\", c_uint16),\n-                (\"spi\", c_uint32)]\n-\n-\n-class pf_addr(Structure):\n-\n-    class _pfa(Union):\n-        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n-                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n-                    (\"addr8\",         c_uint8 * 16),\n-                    (\"addr16\",        c_uint16 * 8),\n-                    (\"addr32\",        c_uint32 * 4)]\n-\n-    _fields_ = [(\"pfa\",               _pfa)]\n-    _anonymous_ = (\"pfa\",)\n-\n-\n-class pfioc_natlook(Structure):\n-    _fields_ = [(\"saddr\", pf_addr),\n-                (\"daddr\", pf_addr),\n-                (\"rsaddr\", pf_addr),\n-                (\"rdaddr\", pf_addr),\n-                (\"sxport\", pf_state_xport),\n-                (\"dxport\", pf_state_xport),\n-                (\"rsxport\", pf_state_xport),\n-                (\"rdxport\", pf_state_xport),\n-                (\"af\", c_uint8),                      # sa_family_t\n-                (\"proto\", c_uint8),\n-                (\"proto_variant\", c_uint8),\n-                (\"direction\", c_uint8)]\n-\n-pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n-\n-pfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n-\n-MAXPATHLEN = 1024\n-\n-DIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\n-DIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\n-DIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n-\n-PF_CHANGE_ADD_TAIL = 2\n-PF_CHANGE_GET_TICKET = 6\n-\n-PF_PASS = 0\n-PF_RDR = 8\n-\n-PF_OUT = 2\n-\n _pf_fd = None\n+\n+\n+class OsDefs(object):\n+\n+    def __init__(self, platform=None):\n+        if platform is None:\n+            platform = sys.platform\n+        self.platform = platform\n+\n+        # This are some classes and functions used to support pf in yosemite.\n+        if platform == 'darwin':\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16),\n+                            (\"spi\", c_uint32)]\n+        else:\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16)]\n+\n+        class pf_addr(Structure):\n+\n+            class _pfa(Union):\n+                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n+                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n+                            (\"addr8\",         c_uint8 * 16),\n+                            (\"addr16\",        c_uint16 * 8),\n+                            (\"addr32\",        c_uint32 * 4)]\n+\n+            _fields_ = [(\"pfa\",               _pfa)]\n+            _anonymous_ = (\"pfa\",)\n+\n+        class pfioc_natlook(Structure):\n+            _fields_ = [(\"saddr\", pf_addr),\n+                        (\"daddr\", pf_addr),\n+                        (\"rsaddr\", pf_addr),\n+                        (\"rdaddr\", pf_addr),\n+                        (\"sxport\", pf_state_xport),\n+                        (\"dxport\", pf_state_xport),\n+                        (\"rsxport\", pf_state_xport),\n+                        (\"rdxport\", pf_state_xport),\n+                        (\"af\", c_uint8),                      # sa_family_t\n+                        (\"proto\", c_uint8),\n+                        (\"proto_variant\", c_uint8),\n+                        (\"direction\", c_uint8)]\n+        self.pfioc_natlook = pfioc_natlook\n+\n+        # sizeof(struct pfioc_rule)\n+        self.pfioc_rule = c_char * \\\n+            (3104 if platform == 'darwin' else 3040)\n+\n+        # sizeof(struct pfioc_pooladdr)\n+        self.pfioc_pooladdr = c_char * 1136\n+\n+        self.MAXPATHLEN = 1024\n+\n+        self.DIOCNATLOOK = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (23))\n+        self.DIOCCHANGERULE = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (26))\n+        self.DIOCBEGINADDRS = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (51))\n+\n+        self.PF_CHANGE_ADD_TAIL = 2\n+        self.PF_CHANGE_GET_TICKET = 6\n+\n+        self.PF_PASS = 0\n+        self.PF_RDR = 8\n+\n+        self.PF_OUT = 2\n+\n+osdefs = OsDefs()\n \n",
        "source_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    <IND>_fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\n<DED>class pf_addr(Structure):\n\n    <IND>class _pfa(Union):\n        <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    <DED>_fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\n<DED>class pfioc_natlook(Structure):\n    <IND>_fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\n<DED>pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    <IND>def __init__(self, platform=None):\n        <IND>if platform is None:\n            <IND>platform = sys.platform\n        <DED>self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        <DED><DED>else:\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        <DED><DED>class pf_addr(Structure):\n\n            <IND>class _pfa(Union):\n                <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            <DED>_fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        <DED>class pfioc_natlook(Structure):\n            <IND>_fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        <DED>self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char *            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\n<DED><DED>osdefs = OsDefs()\n\n"
      }
    ]
  },
  {
    "project": "sshuttle/sshuttle",
    "commit": "11838d65c2e5b48827bef560c793f6667a7d6b22",
    "filename": "sshuttle/methods/pf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sshuttle-sshuttle/sshuttle/methods/pf.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sshuttle/methods/pf.py:64:13 Unsupported operand [58]: `*` is not supported for operand types `typing.Type[c_char]` and `int`.",
    "message": " `*` is not supported for operand types `typing.Type[c_char]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 64,
    "warning_line": "pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    _fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\nclass pf_addr(Structure):\n\n    class _pfa(Union):\n        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    _fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\nclass pfioc_natlook(Structure):\n    _fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\npfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_len": 1843,
        "target_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    def __init__(self, platform=None):\n        if platform is None:\n            platform = sys.platform\n        self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        else:\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        class pf_addr(Structure):\n\n            class _pfa(Union):\n                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            _fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        class pfioc_natlook(Structure):\n            _fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char * \\\n            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\nosdefs = OsDefs()\n\n",
        "target_code_len": 2795,
        "diff_format": "@@ -27,60 +27,81 @@\n _pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n-\n-\n-# This are some classes and functions used to support pf in yosemite.\n-class pf_state_xport(Union):\n-    _fields_ = [(\"port\", c_uint16),\n-                (\"call_id\", c_uint16),\n-                (\"spi\", c_uint32)]\n-\n-\n-class pf_addr(Structure):\n-\n-    class _pfa(Union):\n-        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n-                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n-                    (\"addr8\",         c_uint8 * 16),\n-                    (\"addr16\",        c_uint16 * 8),\n-                    (\"addr32\",        c_uint32 * 4)]\n-\n-    _fields_ = [(\"pfa\",               _pfa)]\n-    _anonymous_ = (\"pfa\",)\n-\n-\n-class pfioc_natlook(Structure):\n-    _fields_ = [(\"saddr\", pf_addr),\n-                (\"daddr\", pf_addr),\n-                (\"rsaddr\", pf_addr),\n-                (\"rdaddr\", pf_addr),\n-                (\"sxport\", pf_state_xport),\n-                (\"dxport\", pf_state_xport),\n-                (\"rsxport\", pf_state_xport),\n-                (\"rdxport\", pf_state_xport),\n-                (\"af\", c_uint8),                      # sa_family_t\n-                (\"proto\", c_uint8),\n-                (\"proto_variant\", c_uint8),\n-                (\"direction\", c_uint8)]\n-\n-pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n-\n-pfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n-\n-MAXPATHLEN = 1024\n-\n-DIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\n-DIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\n-DIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n-\n-PF_CHANGE_ADD_TAIL = 2\n-PF_CHANGE_GET_TICKET = 6\n-\n-PF_PASS = 0\n-PF_RDR = 8\n-\n-PF_OUT = 2\n-\n _pf_fd = None\n+\n+\n+class OsDefs(object):\n+\n+    def __init__(self, platform=None):\n+        if platform is None:\n+            platform = sys.platform\n+        self.platform = platform\n+\n+        # This are some classes and functions used to support pf in yosemite.\n+        if platform == 'darwin':\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16),\n+                            (\"spi\", c_uint32)]\n+        else:\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16)]\n+\n+        class pf_addr(Structure):\n+\n+            class _pfa(Union):\n+                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n+                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n+                            (\"addr8\",         c_uint8 * 16),\n+                            (\"addr16\",        c_uint16 * 8),\n+                            (\"addr32\",        c_uint32 * 4)]\n+\n+            _fields_ = [(\"pfa\",               _pfa)]\n+            _anonymous_ = (\"pfa\",)\n+\n+        class pfioc_natlook(Structure):\n+            _fields_ = [(\"saddr\", pf_addr),\n+                        (\"daddr\", pf_addr),\n+                        (\"rsaddr\", pf_addr),\n+                        (\"rdaddr\", pf_addr),\n+                        (\"sxport\", pf_state_xport),\n+                        (\"dxport\", pf_state_xport),\n+                        (\"rsxport\", pf_state_xport),\n+                        (\"rdxport\", pf_state_xport),\n+                        (\"af\", c_uint8),                      # sa_family_t\n+                        (\"proto\", c_uint8),\n+                        (\"proto_variant\", c_uint8),\n+                        (\"direction\", c_uint8)]\n+        self.pfioc_natlook = pfioc_natlook\n+\n+        # sizeof(struct pfioc_rule)\n+        self.pfioc_rule = c_char * \\\n+            (3104 if platform == 'darwin' else 3040)\n+\n+        # sizeof(struct pfioc_pooladdr)\n+        self.pfioc_pooladdr = c_char * 1136\n+\n+        self.MAXPATHLEN = 1024\n+\n+        self.DIOCNATLOOK = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (23))\n+        self.DIOCCHANGERULE = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (26))\n+        self.DIOCBEGINADDRS = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (51))\n+\n+        self.PF_CHANGE_ADD_TAIL = 2\n+        self.PF_CHANGE_GET_TICKET = 6\n+\n+        self.PF_PASS = 0\n+        self.PF_RDR = 8\n+\n+        self.PF_OUT = 2\n+\n+osdefs = OsDefs()\n \n",
        "source_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    <IND>_fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\n<DED>class pf_addr(Structure):\n\n    <IND>class _pfa(Union):\n        <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    <DED>_fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\n<DED>class pfioc_natlook(Structure):\n    <IND>_fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\n<DED>pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    <IND>def __init__(self, platform=None):\n        <IND>if platform is None:\n            <IND>platform = sys.platform\n        <DED>self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        <DED><DED>else:\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        <DED><DED>class pf_addr(Structure):\n\n            <IND>class _pfa(Union):\n                <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            <DED>_fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        <DED>class pfioc_natlook(Structure):\n            <IND>_fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        <DED>self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char *            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\n<DED><DED>osdefs = OsDefs()\n\n"
      }
    ]
  },
  {
    "project": "sshuttle/sshuttle",
    "commit": "11838d65c2e5b48827bef560c793f6667a7d6b22",
    "filename": "sshuttle/methods/pf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sshuttle-sshuttle/sshuttle/methods/pf.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sshuttle/methods/pf.py:66:17 Unsupported operand [58]: `*` is not supported for operand types `typing.Type[c_char]` and `int`.",
    "message": " `*` is not supported for operand types `typing.Type[c_char]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 66,
    "warning_line": "pfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    _fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\nclass pf_addr(Structure):\n\n    class _pfa(Union):\n        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    _fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\nclass pfioc_natlook(Structure):\n    _fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\npfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_len": 1843,
        "target_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    def __init__(self, platform=None):\n        if platform is None:\n            platform = sys.platform\n        self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        else:\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        class pf_addr(Structure):\n\n            class _pfa(Union):\n                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            _fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        class pfioc_natlook(Structure):\n            _fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char * \\\n            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\nosdefs = OsDefs()\n\n",
        "target_code_len": 2795,
        "diff_format": "@@ -27,60 +27,81 @@\n _pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n-\n-\n-# This are some classes and functions used to support pf in yosemite.\n-class pf_state_xport(Union):\n-    _fields_ = [(\"port\", c_uint16),\n-                (\"call_id\", c_uint16),\n-                (\"spi\", c_uint32)]\n-\n-\n-class pf_addr(Structure):\n-\n-    class _pfa(Union):\n-        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n-                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n-                    (\"addr8\",         c_uint8 * 16),\n-                    (\"addr16\",        c_uint16 * 8),\n-                    (\"addr32\",        c_uint32 * 4)]\n-\n-    _fields_ = [(\"pfa\",               _pfa)]\n-    _anonymous_ = (\"pfa\",)\n-\n-\n-class pfioc_natlook(Structure):\n-    _fields_ = [(\"saddr\", pf_addr),\n-                (\"daddr\", pf_addr),\n-                (\"rsaddr\", pf_addr),\n-                (\"rdaddr\", pf_addr),\n-                (\"sxport\", pf_state_xport),\n-                (\"dxport\", pf_state_xport),\n-                (\"rsxport\", pf_state_xport),\n-                (\"rdxport\", pf_state_xport),\n-                (\"af\", c_uint8),                      # sa_family_t\n-                (\"proto\", c_uint8),\n-                (\"proto_variant\", c_uint8),\n-                (\"direction\", c_uint8)]\n-\n-pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n-\n-pfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n-\n-MAXPATHLEN = 1024\n-\n-DIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\n-DIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\n-DIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n-\n-PF_CHANGE_ADD_TAIL = 2\n-PF_CHANGE_GET_TICKET = 6\n-\n-PF_PASS = 0\n-PF_RDR = 8\n-\n-PF_OUT = 2\n-\n _pf_fd = None\n+\n+\n+class OsDefs(object):\n+\n+    def __init__(self, platform=None):\n+        if platform is None:\n+            platform = sys.platform\n+        self.platform = platform\n+\n+        # This are some classes and functions used to support pf in yosemite.\n+        if platform == 'darwin':\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16),\n+                            (\"spi\", c_uint32)]\n+        else:\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16)]\n+\n+        class pf_addr(Structure):\n+\n+            class _pfa(Union):\n+                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n+                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n+                            (\"addr8\",         c_uint8 * 16),\n+                            (\"addr16\",        c_uint16 * 8),\n+                            (\"addr32\",        c_uint32 * 4)]\n+\n+            _fields_ = [(\"pfa\",               _pfa)]\n+            _anonymous_ = (\"pfa\",)\n+\n+        class pfioc_natlook(Structure):\n+            _fields_ = [(\"saddr\", pf_addr),\n+                        (\"daddr\", pf_addr),\n+                        (\"rsaddr\", pf_addr),\n+                        (\"rdaddr\", pf_addr),\n+                        (\"sxport\", pf_state_xport),\n+                        (\"dxport\", pf_state_xport),\n+                        (\"rsxport\", pf_state_xport),\n+                        (\"rdxport\", pf_state_xport),\n+                        (\"af\", c_uint8),                      # sa_family_t\n+                        (\"proto\", c_uint8),\n+                        (\"proto_variant\", c_uint8),\n+                        (\"direction\", c_uint8)]\n+        self.pfioc_natlook = pfioc_natlook\n+\n+        # sizeof(struct pfioc_rule)\n+        self.pfioc_rule = c_char * \\\n+            (3104 if platform == 'darwin' else 3040)\n+\n+        # sizeof(struct pfioc_pooladdr)\n+        self.pfioc_pooladdr = c_char * 1136\n+\n+        self.MAXPATHLEN = 1024\n+\n+        self.DIOCNATLOOK = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (23))\n+        self.DIOCCHANGERULE = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (26))\n+        self.DIOCBEGINADDRS = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (51))\n+\n+        self.PF_CHANGE_ADD_TAIL = 2\n+        self.PF_CHANGE_GET_TICKET = 6\n+\n+        self.PF_PASS = 0\n+        self.PF_RDR = 8\n+\n+        self.PF_OUT = 2\n+\n+osdefs = OsDefs()\n \n",
        "source_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    <IND>_fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\n<DED>class pf_addr(Structure):\n\n    <IND>class _pfa(Union):\n        <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    <DED>_fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\n<DED>class pfioc_natlook(Structure):\n    <IND>_fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\n<DED>pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    <IND>def __init__(self, platform=None):\n        <IND>if platform is None:\n            <IND>platform = sys.platform\n        <DED>self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        <DED><DED>else:\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        <DED><DED>class pf_addr(Structure):\n\n            <IND>class _pfa(Union):\n                <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            <DED>_fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        <DED>class pfioc_natlook(Structure):\n            <IND>_fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        <DED>self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char *            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\n<DED><DED>osdefs = OsDefs()\n\n"
      }
    ]
  },
  {
    "project": "sshuttle/sshuttle",
    "commit": "11838d65c2e5b48827bef560c793f6667a7d6b22",
    "filename": "sshuttle/methods/pf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sshuttle-sshuttle/sshuttle/methods/pf.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sshuttle/methods/pf.py:73:12 Incompatible parameter type [6]: Expected `typing.Union[typing.Type[ctypes._CData], ctypes._CData]` for 1st positional only parameter to call `sizeof` but got `int`.",
    "message": " Expected `typing.Union[typing.Type[ctypes._CData], ctypes._CData]` for 1st positional only parameter to call `sizeof` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 73,
    "warning_line": "    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    _fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\nclass pf_addr(Structure):\n\n    class _pfa(Union):\n        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    _fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\nclass pfioc_natlook(Structure):\n    _fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\npfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_len": 1843,
        "target_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    def __init__(self, platform=None):\n        if platform is None:\n            platform = sys.platform\n        self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        else:\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        class pf_addr(Structure):\n\n            class _pfa(Union):\n                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            _fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        class pfioc_natlook(Structure):\n            _fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char * \\\n            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\nosdefs = OsDefs()\n\n",
        "target_code_len": 2795,
        "diff_format": "@@ -27,60 +27,81 @@\n _pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n-\n-\n-# This are some classes and functions used to support pf in yosemite.\n-class pf_state_xport(Union):\n-    _fields_ = [(\"port\", c_uint16),\n-                (\"call_id\", c_uint16),\n-                (\"spi\", c_uint32)]\n-\n-\n-class pf_addr(Structure):\n-\n-    class _pfa(Union):\n-        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n-                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n-                    (\"addr8\",         c_uint8 * 16),\n-                    (\"addr16\",        c_uint16 * 8),\n-                    (\"addr32\",        c_uint32 * 4)]\n-\n-    _fields_ = [(\"pfa\",               _pfa)]\n-    _anonymous_ = (\"pfa\",)\n-\n-\n-class pfioc_natlook(Structure):\n-    _fields_ = [(\"saddr\", pf_addr),\n-                (\"daddr\", pf_addr),\n-                (\"rsaddr\", pf_addr),\n-                (\"rdaddr\", pf_addr),\n-                (\"sxport\", pf_state_xport),\n-                (\"dxport\", pf_state_xport),\n-                (\"rsxport\", pf_state_xport),\n-                (\"rdxport\", pf_state_xport),\n-                (\"af\", c_uint8),                      # sa_family_t\n-                (\"proto\", c_uint8),\n-                (\"proto_variant\", c_uint8),\n-                (\"direction\", c_uint8)]\n-\n-pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n-\n-pfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n-\n-MAXPATHLEN = 1024\n-\n-DIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\n-DIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\n-DIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n-\n-PF_CHANGE_ADD_TAIL = 2\n-PF_CHANGE_GET_TICKET = 6\n-\n-PF_PASS = 0\n-PF_RDR = 8\n-\n-PF_OUT = 2\n-\n _pf_fd = None\n+\n+\n+class OsDefs(object):\n+\n+    def __init__(self, platform=None):\n+        if platform is None:\n+            platform = sys.platform\n+        self.platform = platform\n+\n+        # This are some classes and functions used to support pf in yosemite.\n+        if platform == 'darwin':\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16),\n+                            (\"spi\", c_uint32)]\n+        else:\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16)]\n+\n+        class pf_addr(Structure):\n+\n+            class _pfa(Union):\n+                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n+                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n+                            (\"addr8\",         c_uint8 * 16),\n+                            (\"addr16\",        c_uint16 * 8),\n+                            (\"addr32\",        c_uint32 * 4)]\n+\n+            _fields_ = [(\"pfa\",               _pfa)]\n+            _anonymous_ = (\"pfa\",)\n+\n+        class pfioc_natlook(Structure):\n+            _fields_ = [(\"saddr\", pf_addr),\n+                        (\"daddr\", pf_addr),\n+                        (\"rsaddr\", pf_addr),\n+                        (\"rdaddr\", pf_addr),\n+                        (\"sxport\", pf_state_xport),\n+                        (\"dxport\", pf_state_xport),\n+                        (\"rsxport\", pf_state_xport),\n+                        (\"rdxport\", pf_state_xport),\n+                        (\"af\", c_uint8),                      # sa_family_t\n+                        (\"proto\", c_uint8),\n+                        (\"proto_variant\", c_uint8),\n+                        (\"direction\", c_uint8)]\n+        self.pfioc_natlook = pfioc_natlook\n+\n+        # sizeof(struct pfioc_rule)\n+        self.pfioc_rule = c_char * \\\n+            (3104 if platform == 'darwin' else 3040)\n+\n+        # sizeof(struct pfioc_pooladdr)\n+        self.pfioc_pooladdr = c_char * 1136\n+\n+        self.MAXPATHLEN = 1024\n+\n+        self.DIOCNATLOOK = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (23))\n+        self.DIOCCHANGERULE = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (26))\n+        self.DIOCBEGINADDRS = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (51))\n+\n+        self.PF_CHANGE_ADD_TAIL = 2\n+        self.PF_CHANGE_GET_TICKET = 6\n+\n+        self.PF_PASS = 0\n+        self.PF_RDR = 8\n+\n+        self.PF_OUT = 2\n+\n+osdefs = OsDefs()\n \n",
        "source_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    <IND>_fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\n<DED>class pf_addr(Structure):\n\n    <IND>class _pfa(Union):\n        <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    <DED>_fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\n<DED>class pfioc_natlook(Structure):\n    <IND>_fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\n<DED>pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    <IND>def __init__(self, platform=None):\n        <IND>if platform is None:\n            <IND>platform = sys.platform\n        <DED>self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        <DED><DED>else:\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        <DED><DED>class pf_addr(Structure):\n\n            <IND>class _pfa(Union):\n                <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            <DED>_fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        <DED>class pfioc_natlook(Structure):\n            <IND>_fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        <DED>self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char *            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\n<DED><DED>osdefs = OsDefs()\n\n"
      }
    ]
  },
  {
    "project": "sshuttle/sshuttle",
    "commit": "11838d65c2e5b48827bef560c793f6667a7d6b22",
    "filename": "sshuttle/methods/pf.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/sshuttle-sshuttle/sshuttle/methods/pf.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "sshuttle/methods/pf.py:75:12 Incompatible parameter type [6]: Expected `typing.Union[typing.Type[ctypes._CData], ctypes._CData]` for 1st positional only parameter to call `sizeof` but got `int`.",
    "message": " Expected `typing.Union[typing.Type[ctypes._CData], ctypes._CData]` for 1st positional only parameter to call `sizeof` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 75,
    "warning_line": "    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    _fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\nclass pf_addr(Structure):\n\n    class _pfa(Union):\n        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    _fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\nclass pfioc_natlook(Structure):\n    _fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\npfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_len": 1843,
        "target_code": "_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    def __init__(self, platform=None):\n        if platform is None:\n            platform = sys.platform\n        self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        else:\n            class pf_state_xport(Union):\n                _fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        class pf_addr(Structure):\n\n            class _pfa(Union):\n                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            _fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        class pfioc_natlook(Structure):\n            _fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char * \\\n            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\nosdefs = OsDefs()\n\n",
        "target_code_len": 2795,
        "diff_format": "@@ -27,60 +27,81 @@\n _pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n-\n-\n-# This are some classes and functions used to support pf in yosemite.\n-class pf_state_xport(Union):\n-    _fields_ = [(\"port\", c_uint16),\n-                (\"call_id\", c_uint16),\n-                (\"spi\", c_uint32)]\n-\n-\n-class pf_addr(Structure):\n-\n-    class _pfa(Union):\n-        _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n-                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n-                    (\"addr8\",         c_uint8 * 16),\n-                    (\"addr16\",        c_uint16 * 8),\n-                    (\"addr32\",        c_uint32 * 4)]\n-\n-    _fields_ = [(\"pfa\",               _pfa)]\n-    _anonymous_ = (\"pfa\",)\n-\n-\n-class pfioc_natlook(Structure):\n-    _fields_ = [(\"saddr\", pf_addr),\n-                (\"daddr\", pf_addr),\n-                (\"rsaddr\", pf_addr),\n-                (\"rdaddr\", pf_addr),\n-                (\"sxport\", pf_state_xport),\n-                (\"dxport\", pf_state_xport),\n-                (\"rsxport\", pf_state_xport),\n-                (\"rdxport\", pf_state_xport),\n-                (\"af\", c_uint8),                      # sa_family_t\n-                (\"proto\", c_uint8),\n-                (\"proto_variant\", c_uint8),\n-                (\"direction\", c_uint8)]\n-\n-pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n-\n-pfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n-\n-MAXPATHLEN = 1024\n-\n-DIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\n-DIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\n-DIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n-    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n-\n-PF_CHANGE_ADD_TAIL = 2\n-PF_CHANGE_GET_TICKET = 6\n-\n-PF_PASS = 0\n-PF_RDR = 8\n-\n-PF_OUT = 2\n-\n _pf_fd = None\n+\n+\n+class OsDefs(object):\n+\n+    def __init__(self, platform=None):\n+        if platform is None:\n+            platform = sys.platform\n+        self.platform = platform\n+\n+        # This are some classes and functions used to support pf in yosemite.\n+        if platform == 'darwin':\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16),\n+                            (\"spi\", c_uint32)]\n+        else:\n+            class pf_state_xport(Union):\n+                _fields_ = [(\"port\", c_uint16),\n+                            (\"call_id\", c_uint16)]\n+\n+        class pf_addr(Structure):\n+\n+            class _pfa(Union):\n+                _fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n+                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n+                            (\"addr8\",         c_uint8 * 16),\n+                            (\"addr16\",        c_uint16 * 8),\n+                            (\"addr32\",        c_uint32 * 4)]\n+\n+            _fields_ = [(\"pfa\",               _pfa)]\n+            _anonymous_ = (\"pfa\",)\n+\n+        class pfioc_natlook(Structure):\n+            _fields_ = [(\"saddr\", pf_addr),\n+                        (\"daddr\", pf_addr),\n+                        (\"rsaddr\", pf_addr),\n+                        (\"rdaddr\", pf_addr),\n+                        (\"sxport\", pf_state_xport),\n+                        (\"dxport\", pf_state_xport),\n+                        (\"rsxport\", pf_state_xport),\n+                        (\"rdxport\", pf_state_xport),\n+                        (\"af\", c_uint8),                      # sa_family_t\n+                        (\"proto\", c_uint8),\n+                        (\"proto_variant\", c_uint8),\n+                        (\"direction\", c_uint8)]\n+        self.pfioc_natlook = pfioc_natlook\n+\n+        # sizeof(struct pfioc_rule)\n+        self.pfioc_rule = c_char * \\\n+            (3104 if platform == 'darwin' else 3040)\n+\n+        # sizeof(struct pfioc_pooladdr)\n+        self.pfioc_pooladdr = c_char * 1136\n+\n+        self.MAXPATHLEN = 1024\n+\n+        self.DIOCNATLOOK = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (23))\n+        self.DIOCCHANGERULE = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (26))\n+        self.DIOCBEGINADDRS = (\n+            (0x40000000 | 0x80000000) |\n+            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n+            ((ord('D')) << 8) | (51))\n+\n+        self.PF_CHANGE_ADD_TAIL = 2\n+        self.PF_CHANGE_GET_TICKET = 6\n+\n+        self.PF_PASS = 0\n+        self.PF_RDR = 8\n+\n+        self.PF_OUT = 2\n+\n+osdefs = OsDefs()\n \n",
        "source_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n\n\n# This are some classes and functions used to support pf in yosemite.\nclass pf_state_xport(Union):\n    <IND>_fields_ = [(\"port\", c_uint16),\n                (\"call_id\", c_uint16),\n                (\"spi\", c_uint32)]\n\n\n<DED>class pf_addr(Structure):\n\n    <IND>class _pfa(Union):\n        <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                    (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                    (\"addr8\",         c_uint8 * 16),\n                    (\"addr16\",        c_uint16 * 8),\n                    (\"addr32\",        c_uint32 * 4)]\n\n    <DED>_fields_ = [(\"pfa\",               _pfa)]\n    _anonymous_ = (\"pfa\",)\n\n\n<DED>class pfioc_natlook(Structure):\n    <IND>_fields_ = [(\"saddr\", pf_addr),\n                (\"daddr\", pf_addr),\n                (\"rsaddr\", pf_addr),\n                (\"rdaddr\", pf_addr),\n                (\"sxport\", pf_state_xport),\n                (\"dxport\", pf_state_xport),\n                (\"rsxport\", pf_state_xport),\n                (\"rdxport\", pf_state_xport),\n                (\"af\", c_uint8),                      # sa_family_t\n                (\"proto\", c_uint8),\n                (\"proto_variant\", c_uint8),\n                (\"direction\", c_uint8)]\n\n<DED>pfioc_rule = c_char * 3104  # sizeof(struct pfioc_rule)\n\npfioc_pooladdr = c_char * 1136  # sizeof(struct pfioc_pooladdr)\n\nMAXPATHLEN = 1024\n\nDIOCNATLOOK = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_natlook) & 0x1fff) << 16) | ((ord('D')) << 8) | (23))\nDIOCCHANGERULE = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_rule) & 0x1fff) << 16) | ((ord('D')) << 8) | (26))\nDIOCBEGINADDRS = ((0x40000000 | 0x80000000) | (\n    (sizeof(pfioc_pooladdr) & 0x1fff) << 16) | ((ord('D')) << 8) | (51))\n\nPF_CHANGE_ADD_TAIL = 2\nPF_CHANGE_GET_TICKET = 6\n\nPF_PASS = 0\nPF_RDR = 8\n\nPF_OUT = 2\n\n_pf_fd = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent_exact_match": false,
        "target_code_with_indent": "<DED>_pf_context = {'started_by_sshuttle': False, 'Xtoken': None}\n_pf_fd = None\n\n\nclass OsDefs(object):\n\n    <IND>def __init__(self, platform=None):\n        <IND>if platform is None:\n            <IND>platform = sys.platform\n        <DED>self.platform = platform\n\n        # This are some classes and functions used to support pf in yosemite.\n        if platform == 'darwin':\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16),\n                            (\"spi\", c_uint32)]\n        <DED><DED>else:\n            <IND>class pf_state_xport(Union):\n                <IND>_fields_ = [(\"port\", c_uint16),\n                            (\"call_id\", c_uint16)]\n\n        <DED><DED>class pf_addr(Structure):\n\n            <IND>class _pfa(Union):\n                <IND>_fields_ = [(\"v4\",            c_uint32),      # struct in_addr\n                            (\"v6\",            c_uint32 * 4),  # struct in6_addr\n                            (\"addr8\",         c_uint8 * 16),\n                            (\"addr16\",        c_uint16 * 8),\n                            (\"addr32\",        c_uint32 * 4)]\n\n            <DED>_fields_ = [(\"pfa\",               _pfa)]\n            _anonymous_ = (\"pfa\",)\n\n        <DED>class pfioc_natlook(Structure):\n            <IND>_fields_ = [(\"saddr\", pf_addr),\n                        (\"daddr\", pf_addr),\n                        (\"rsaddr\", pf_addr),\n                        (\"rdaddr\", pf_addr),\n                        (\"sxport\", pf_state_xport),\n                        (\"dxport\", pf_state_xport),\n                        (\"rsxport\", pf_state_xport),\n                        (\"rdxport\", pf_state_xport),\n                        (\"af\", c_uint8),                      # sa_family_t\n                        (\"proto\", c_uint8),\n                        (\"proto_variant\", c_uint8),\n                        (\"direction\", c_uint8)]\n        <DED>self.pfioc_natlook = pfioc_natlook\n\n        # sizeof(struct pfioc_rule)\n        self.pfioc_rule = c_char *            (3104 if platform == 'darwin' else 3040)\n\n        # sizeof(struct pfioc_pooladdr)\n        self.pfioc_pooladdr = c_char * 1136\n\n        self.MAXPATHLEN = 1024\n\n        self.DIOCNATLOOK = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(pfioc_natlook) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (23))\n        self.DIOCCHANGERULE = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_rule) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (26))\n        self.DIOCBEGINADDRS = (\n            (0x40000000 | 0x80000000) |\n            ((sizeof(self.pfioc_pooladdr) & 0x1fff) << 16) |\n            ((ord('D')) << 8) | (51))\n\n        self.PF_CHANGE_ADD_TAIL = 2\n        self.PF_CHANGE_GET_TICKET = 6\n\n        self.PF_PASS = 0\n        self.PF_RDR = 8\n\n        self.PF_OUT = 2\n\n<DED><DED>osdefs = OsDefs()\n\n"
      }
    ]
  }
]