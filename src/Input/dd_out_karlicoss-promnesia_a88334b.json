[
  {
    "project": "karlicoss/promnesia",
    "commit": "a88334bb03099d98e841be66c06b137cb9d2b063",
    "filename": "src/promnesia/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/karlicoss-promnesia/src/promnesia/config.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/promnesia/config.py:116:42 Incompatible parameter type [6]: Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `importlib.util.module_from_spec` but got `Optional[importlib.machinery.ModuleSpec]`.",
    "message": " Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `importlib.util.module_from_spec` but got `Optional[importlib.machinery.ModuleSpec]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 116,
    "warning_line": "    mod = importlib.util.module_from_spec(spec)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    # TODO just exec??\n    name = p.stem\n    spec = importlib.util.spec_from_file_location(name, p) # type: ignore\n    mod = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(mod) # type: ignore\n\n",
        "source_code_len": 213,
        "target_code": "\n    # todo just exec??\n    name = p.stem\n    spec = importlib.util.spec_from_file_location(name, p); assert spec is not None\n    mod = importlib.util.module_from_spec(spec); assert mod is not None\n    loader = spec.loader; assert loader is not None\n    loader.exec_module(mod) # type: ignore[attr-defined]\n\n",
        "target_code_len": 308,
        "diff_format": "@@ -112,7 +112,8 @@\n \n-    # TODO just exec??\n+    # todo just exec??\n     name = p.stem\n-    spec = importlib.util.spec_from_file_location(name, p) # type: ignore\n-    mod = importlib.util.module_from_spec(spec)\n-    spec.loader.exec_module(mod) # type: ignore\n+    spec = importlib.util.spec_from_file_location(name, p); assert spec is not None\n+    mod = importlib.util.module_from_spec(spec); assert mod is not None\n+    loader = spec.loader; assert loader is not None\n+    loader.exec_module(mod) # type: ignore[attr-defined]\n \n",
        "source_code_with_indent": "\n    # TODO just exec??\n    name = p.stem\n    spec = importlib.util.spec_from_file_location(name, p) # type: ignore\n    mod = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(mod) # type: ignore\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # todo just exec??\n    name = p.stem\n    spec = importlib.util.spec_from_file_location(name, p); assert spec is not None\n    mod = importlib.util.module_from_spec(spec); assert mod is not None\n    loader = spec.loader; assert loader is not None\n    loader.exec_module(mod) # type: ignore[attr-defined]\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "karlicoss/promnesia",
    "commit": "a88334bb03099d98e841be66c06b137cb9d2b063",
    "filename": "tests/indexer_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/karlicoss-promnesia/tests/indexer_test.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/indexer_test.py:65:42 Incompatible parameter type [6]: Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `importlib.util.module_from_spec` but got `typing.Optional[importlib.machinery.ModuleSpec]`.",
    "message": " Expected `importlib.machinery.ModuleSpec` for 1st positional only parameter to call `importlib.util.module_from_spec` but got `typing.Optional[importlib.machinery.ModuleSpec]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 65,
    "warning_line": "    foo = importlib.util.module_from_spec(spec)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    import importlib.util\n    spec = importlib.util.spec_from_file_location(name, p) # type: ignore\n    foo = importlib.util.module_from_spec(spec)\n",
        "source_code_len": 148,
        "target_code": "    import importlib.util\n    spec = importlib.util.spec_from_file_location(name, p); assert spec is not None\n    foo = importlib.util.module_from_spec(spec)\n",
        "target_code_len": 158,
        "diff_format": "@@ -63,3 +63,3 @@\n     import importlib.util\n-    spec = importlib.util.spec_from_file_location(name, p) # type: ignore\n+    spec = importlib.util.spec_from_file_location(name, p); assert spec is not None\n     foo = importlib.util.module_from_spec(spec)\n",
        "source_code_with_indent": "    <DED>import importlib.util\n    spec = importlib.util.spec_from_file_location(name, p) # type: ignore\n    foo = importlib.util.module_from_spec(spec)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>import importlib.util\n    spec = importlib.util.spec_from_file_location(name, p); assert spec is not None\n    foo = importlib.util.module_from_spec(spec)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]