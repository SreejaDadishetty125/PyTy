[
  {
    "project": "quantumlib/Cirq",
    "commit": "06db5d59eedd5aca8adbdc732eb18343eec64d40",
    "filename": "cirq/study/sweeps.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/study/sweeps.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/study/sweeps.py:124:12 Incompatible return type [7]: Expected `Iterator[typing.Tuple[Tuple[str, float], ...]]` but got `None`.",
    "message": " Expected `Iterator[typing.Tuple[Tuple[str, float], ...]]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 124,
    "warning_line": "            return",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    def param_tuples(self) -> Iterator[Params]:\n        if not self.factors:\n            return\n\n        def _gen(factors):\n",
        "source_code_len": 124,
        "target_code": "    def param_tuples(self) -> Iterator[Params]:\n        def _gen(factors):\n",
        "target_code_len": 75,
        "diff_format": "@@ -122,5 +122,2 @@\n     def param_tuples(self) -> Iterator[Params]:\n-        if not self.factors:\n-            return\n-\n         def _gen(factors):\n",
        "source_code_with_indent": "    <DED>def param_tuples(self) -> Iterator[Params]:\n        <IND>if not self.factors:\n            <IND>return\n\n        <DED>def _gen(factors):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def param_tuples(self) -> Iterator[Params]:\n        <IND>def _gen(factors):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]