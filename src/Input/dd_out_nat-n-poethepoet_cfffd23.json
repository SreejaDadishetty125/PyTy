[
  {
    "project": "nat-n/poethepoet",
    "commit": "cfffd23c21ba7420ea38bd6501453750d6b6cf31",
    "filename": "tests/conftest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nat-n-poethepoet/tests/conftest.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/conftest.py:137:8 Incompatible return type [7]: Expected `str` but got `PoeRunResult`.",
    "message": " Expected `str` but got `PoeRunResult`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 137,
    "warning_line": "        return result",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nPoeRunResult = namedtuple(\"PoeRunResult\", (\"code\", \"capture\", \"stdout\", \"stderr\"))\n\n\n@pytest.fixture(scope=\"function\")\ndef run_poe_subproc(dummy_project_path, temp_file, tmp_path, is_windows):\n    coverage_setup = (\n",
        "source_code_len": 217,
        "target_code": "\nclass PoeRunResult(\n    namedtuple(\"PoeRunResult\", (\"code\", \"path\", \"capture\", \"stdout\", \"stderr\"))\n):\n    def __str__(self):\n        return (\n            \"PoeRunResult(\\n\"\n            f\"  code={self.code!r},\\n\"\n            f\"  path={self.path},\\n\"\n            f\"  capture=`{self.capture}`,\\n\"\n            f\"  stdout=`{self.stdout}`,\\n\"\n            f\"  stderr=`{self.stderr}`,\\n\"\n            \")\"\n        )\n\n\n@pytest.fixture(scope=\"function\")\ndef run_poe_subproc(projects, temp_file, tmp_path, is_windows):\n    coverage_setup = (\n",
        "target_code_len": 530,
        "diff_format": "@@ -75,7 +77,19 @@\n \n-PoeRunResult = namedtuple(\"PoeRunResult\", (\"code\", \"capture\", \"stdout\", \"stderr\"))\n-\n-\n-@pytest.fixture(scope=\"function\")\n-def run_poe_subproc(dummy_project_path, temp_file, tmp_path, is_windows):\n+class PoeRunResult(\n+    namedtuple(\"PoeRunResult\", (\"code\", \"path\", \"capture\", \"stdout\", \"stderr\"))\n+):\n+    def __str__(self):\n+        return (\n+            \"PoeRunResult(\\n\"\n+            f\"  code={self.code!r},\\n\"\n+            f\"  path={self.path},\\n\"\n+            f\"  capture=`{self.capture}`,\\n\"\n+            f\"  stdout=`{self.stdout}`,\\n\"\n+            f\"  stderr=`{self.stderr}`,\\n\"\n+            \")\"\n+        )\n+\n+\n+@pytest.fixture(scope=\"function\")\n+def run_poe_subproc(projects, temp_file, tmp_path, is_windows):\n     coverage_setup = (\n",
        "source_code_with_indent": "\n<DED>PoeRunResult = namedtuple(\"PoeRunResult\", (\"code\", \"capture\", \"stdout\", \"stderr\"))\n\n\n@pytest.fixture(scope=\"function\")\ndef run_poe_subproc(dummy_project_path, temp_file, tmp_path, is_windows):\n    <IND>coverage_setup = (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>class PoeRunResult(\n    namedtuple(\"PoeRunResult\", (\"code\", \"path\", \"capture\", \"stdout\", \"stderr\"))\n):\n    <IND>def __str__(self):\n        <IND>return (\n            \"PoeRunResult(\\n\"\n            f\"  code={self.code!r},\\n\"\n            f\"  path={self.path},\\n\"\n            f\"  capture=`{self.capture}`,\\n\"\n            f\"  stdout=`{self.stdout}`,\\n\"\n            f\"  stderr=`{self.stderr}`,\\n\"\n            \")\"\n        )\n\n\n<DED><DED>@pytest.fixture(scope=\"function\")\ndef run_poe_subproc(projects, temp_file, tmp_path, is_windows):\n    <IND>coverage_setup = (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        env: Dict[str, str] = None,\n    ) -> str:\n        if config is not None:\n",
        "source_code_len": 81,
        "target_code": "        env: Dict[str, str] = None,\n        project: Optional[str] = None,\n    ) -> PoeRunResult:\n        cwd = projects.get(project, cwd)\n        if config is not None:\n",
        "target_code_len": 170,
        "diff_format": "@@ -101,3 +115,5 @@\n         env: Dict[str, str] = None,\n-    ) -> str:\n+        project: Optional[str] = None,\n+    ) -> PoeRunResult:\n+        cwd = projects.get(project, cwd)\n         if config is not None:\n",
        "source_code_with_indent": "        env: Dict[str, str] = None,\n    ) -> str:\n        <IND>if config is not None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        env: Dict[str, str] = None,\n        project: Optional[str] = None,\n    ) -> PoeRunResult:\n        <IND>cwd = projects.get(project, cwd)\n        if config is not None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            code=poeproc.returncode,\n            capture=captured_output,\n",
        "source_code_len": 74,
        "target_code": "            code=poeproc.returncode,\n            path=cwd,\n            capture=captured_output,\n",
        "target_code_len": 96,
        "diff_format": "@@ -131,2 +147,3 @@\n             code=poeproc.returncode,\n+            path=cwd,\n             capture=captured_output,\n",
        "source_code_with_indent": "            code=poeproc.returncode,\n            capture=captured_output,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            code=poeproc.returncode,\n            path=cwd,\n            capture=captured_output,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nat-n/poethepoet",
    "commit": "cfffd23c21ba7420ea38bd6501453750d6b6cf31",
    "filename": "tests/conftest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nat-n-poethepoet/tests/conftest.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/conftest.py:150:25 Incompatible parameter type [6]: Expected `Path` for 1st parameter `cwd` to call `PoeThePoet.__init__` but got `str`.",
    "message": " Expected `Path` for 1st parameter `cwd` to call `PoeThePoet.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 150,
    "warning_line": "        poe = PoeThePoet(cwd=cwd, config=config, output=output_capture)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@pytest.fixture(scope=\"function\")\ndef run_poe(capsys, dummy_project_path):\n    def run_poe(\n        *run_args: str,\n        cwd: str = dummy_project_path,\n        config: Optional[Mapping[str, Any]] = None,\n    ) -> str:\n        output_capture = StringIO()\n",
        "source_code_len": 257,
        "target_code": "@pytest.fixture(scope=\"function\")\ndef run_poe(capsys, projects):\n    def run_poe(\n        *run_args: str,\n        cwd: str = projects[\"example\"],\n        config: Optional[Mapping[str, Any]] = None,\n        project: Optional[str] = None,\n    ) -> PoeRunResult:\n        cwd = projects.get(project, cwd)\n        output_capture = StringIO()\n",
        "target_code_len": 337,
        "diff_format": "@@ -142,8 +159,10 @@\n @pytest.fixture(scope=\"function\")\n-def run_poe(capsys, dummy_project_path):\n+def run_poe(capsys, projects):\n     def run_poe(\n         *run_args: str,\n-        cwd: str = dummy_project_path,\n+        cwd: str = projects[\"example\"],\n         config: Optional[Mapping[str, Any]] = None,\n-    ) -> str:\n+        project: Optional[str] = None,\n+    ) -> PoeRunResult:\n+        cwd = projects.get(project, cwd)\n         output_capture = StringIO()\n",
        "source_code_with_indent": "<DED>@pytest.fixture(scope=\"function\")\ndef run_poe(capsys, dummy_project_path):\n    <IND>def run_poe(\n        *run_args: str,\n        cwd: str = dummy_project_path,\n        config: Optional[Mapping[str, Any]] = None,\n    ) -> str:\n        <IND>output_capture = StringIO()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>@pytest.fixture(scope=\"function\")\ndef run_poe(capsys, projects):\n    <IND>def run_poe(\n        *run_args: str,\n        cwd: str = projects[\"example\"],\n        config: Optional[Mapping[str, Any]] = None,\n        project: Optional[str] = None,\n    ) -> PoeRunResult:\n        <IND>cwd = projects.get(project, cwd)\n        output_capture = StringIO()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nat-n/poethepoet",
    "commit": "cfffd23c21ba7420ea38bd6501453750d6b6cf31",
    "filename": "tests/conftest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nat-n-poethepoet/tests/conftest.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/conftest.py:153:8 Incompatible return type [7]: Expected `str` but got `PoeRunResult`.",
    "message": " Expected `str` but got `PoeRunResult`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 153,
    "warning_line": "        return PoeRunResult(result, output_capture.read(), *capsys.readouterr())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@pytest.fixture(scope=\"function\")\ndef run_poe(capsys, dummy_project_path):\n    def run_poe(\n        *run_args: str,\n        cwd: str = dummy_project_path,\n        config: Optional[Mapping[str, Any]] = None,\n    ) -> str:\n        output_capture = StringIO()\n",
        "source_code_len": 257,
        "target_code": "@pytest.fixture(scope=\"function\")\ndef run_poe(capsys, projects):\n    def run_poe(\n        *run_args: str,\n        cwd: str = projects[\"example\"],\n        config: Optional[Mapping[str, Any]] = None,\n        project: Optional[str] = None,\n    ) -> PoeRunResult:\n        cwd = projects.get(project, cwd)\n        output_capture = StringIO()\n",
        "target_code_len": 337,
        "diff_format": "@@ -142,8 +159,10 @@\n @pytest.fixture(scope=\"function\")\n-def run_poe(capsys, dummy_project_path):\n+def run_poe(capsys, projects):\n     def run_poe(\n         *run_args: str,\n-        cwd: str = dummy_project_path,\n+        cwd: str = projects[\"example\"],\n         config: Optional[Mapping[str, Any]] = None,\n-    ) -> str:\n+        project: Optional[str] = None,\n+    ) -> PoeRunResult:\n+        cwd = projects.get(project, cwd)\n         output_capture = StringIO()\n",
        "source_code_with_indent": "<DED>@pytest.fixture(scope=\"function\")\ndef run_poe(capsys, dummy_project_path):\n    <IND>def run_poe(\n        *run_args: str,\n        cwd: str = dummy_project_path,\n        config: Optional[Mapping[str, Any]] = None,\n    ) -> str:\n        <IND>output_capture = StringIO()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>@pytest.fixture(scope=\"function\")\ndef run_poe(capsys, projects):\n    <IND>def run_poe(\n        *run_args: str,\n        cwd: str = projects[\"example\"],\n        config: Optional[Mapping[str, Any]] = None,\n        project: Optional[str] = None,\n    ) -> PoeRunResult:\n        <IND>cwd = projects.get(project, cwd)\n        output_capture = StringIO()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nat-n/poethepoet",
    "commit": "cfffd23c21ba7420ea38bd6501453750d6b6cf31",
    "filename": "tests/conftest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nat-n-poethepoet/tests/conftest.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tests/conftest.py:182:8 Incompatible return type [7]: Expected `str` but got `PoeRunResult`.",
    "message": " Expected `str` but got `PoeRunResult`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 182,
    "warning_line": "        return PoeRunResult(result, \"\", *capsys.readouterr())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "@pytest.fixture(scope=\"function\")\ndef run_poe_main(capsys, dummy_project_path):\n    def run_poe_main(\n        *cli_args: str,\n        cwd: str = dummy_project_path,\n        config: Optional[Mapping[str, Any]] = None,\n    ) -> str:\n        from poethepoet import main\n",
        "source_code_len": 267,
        "target_code": "@pytest.fixture(scope=\"function\")\ndef run_poe_main(capsys, projects):\n    def run_poe_main(\n        *cli_args: str,\n        cwd: str = projects[\"example\"],\n        config: Optional[Mapping[str, Any]] = None,\n        project: Optional[str] = None,\n    ) -> PoeRunResult:\n        cwd = projects.get(project, cwd)\n        from poethepoet import main\n",
        "target_code_len": 347,
        "diff_format": "@@ -168,8 +187,10 @@\n @pytest.fixture(scope=\"function\")\n-def run_poe_main(capsys, dummy_project_path):\n+def run_poe_main(capsys, projects):\n     def run_poe_main(\n         *cli_args: str,\n-        cwd: str = dummy_project_path,\n+        cwd: str = projects[\"example\"],\n         config: Optional[Mapping[str, Any]] = None,\n-    ) -> str:\n+        project: Optional[str] = None,\n+    ) -> PoeRunResult:\n+        cwd = projects.get(project, cwd)\n         from poethepoet import main\n",
        "source_code_with_indent": "<DED>@pytest.fixture(scope=\"function\")\ndef run_poe_main(capsys, dummy_project_path):\n    <IND>def run_poe_main(\n        *cli_args: str,\n        cwd: str = dummy_project_path,\n        config: Optional[Mapping[str, Any]] = None,\n    ) -> str:\n        <IND>from poethepoet import main\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>@pytest.fixture(scope=\"function\")\ndef run_poe_main(capsys, projects):\n    <IND>def run_poe_main(\n        *cli_args: str,\n        cwd: str = projects[\"example\"],\n        config: Optional[Mapping[str, Any]] = None,\n        project: Optional[str] = None,\n    ) -> PoeRunResult:\n        <IND>cwd = projects.get(project, cwd)\n        from poethepoet import main\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]