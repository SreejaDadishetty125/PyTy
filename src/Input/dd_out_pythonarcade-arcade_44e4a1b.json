[
  {
    "project": "pythonarcade/arcade",
    "commit": "44e4a1baf3024ae20602629e0b628beac07c7ba5",
    "filename": "arcade/hitbox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/hitbox.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "arcade/hitbox.py:140:4 Incompatible return type [7]: Expected `List[Union[List[float], Tuple[float, float]]]` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `List[Union[List[float], Tuple[float, float]]]` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 140,
    "warning_line": "    return result",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    # Remove duplicates\n    result = tuple(dict.fromkeys(result))\n\n    return result\n\n",
        "source_code_len": 86,
        "target_code": "    # Remove duplicates\n    return tuple(dict.fromkeys(result))  # type: ignore\n\n",
        "target_code_len": 81,
        "diff_format": "@@ -137,5 +136,3 @@\n     # Remove duplicates\n-    result = tuple(dict.fromkeys(result))\n-\n-    return result\n+    return tuple(dict.fromkeys(result))  # type: ignore\n \n",
        "source_code_with_indent": "    # Remove duplicates\n    <DED>result = tuple(dict.fromkeys(result))\n\n    return result\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # Remove duplicates\n    <DED>return tuple(dict.fromkeys(result))  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "44e4a1baf3024ae20602629e0b628beac07c7ba5",
    "filename": "arcade/hitbox.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/hitbox.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/hitbox.py:186:8 Incompatible return type [7]: Expected `Union[List[arcade.arcade_types.NamedPoint], typing.Tuple[arcade.arcade_types.NamedPoint, ...]]` but got `Tuple[Tuple[float, float], Tuple[float, float], Tuple[float, float], Tuple[float, float]]`.",
    "message": " Expected `Union[List[arcade.arcade_types.NamedPoint], typing.Tuple[arcade.arcade_types.NamedPoint, ...]]` but got `Tuple[Tuple[float, float], Tuple[float, float], Tuple[float, float], Tuple[float, float]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 186,
    "warning_line": "        return p1, p2, p3, p4",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                      hit_box_detail: float = 4.5)\\\n        -> Union[List[NamedPoint], Tuple[NamedPoint, ...]]:\n    \"\"\"\n",
        "source_code_len": 136,
        "target_code": "                                      hit_box_detail: float = 4.5)\\\n        -> Union[List[Point], Tuple[Point, ...]]:\n    \"\"\"\n",
        "target_code_len": 126,
        "diff_format": "@@ -144,3 +141,3 @@\n                                       hit_box_detail: float = 4.5)\\\n-        -> Union[List[NamedPoint], Tuple[NamedPoint, ...]]:\n+        -> Union[List[Point], Tuple[Point, ...]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                                      hit_box_detail: float = 4.5)        -> Union[List[NamedPoint], Tuple[NamedPoint, ...]]:\n    <IND>",
        "target_code_with_indent": "                                      hit_box_detail: float = 4.5)        -> Union[List[Point], Tuple[Point, ...]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "44e4a1baf3024ae20602629e0b628beac07c7ba5",
    "filename": "arcade/paths.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/paths.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "arcade/paths.py:164:29 Incompatible parameter type [6]: Expected `Union[List[float], Tuple[float, float]]` for 1st positional only parameter to call `set.remove` but got `Union[None, List[float], Tuple[float, float]]`.",
    "message": " Expected `Union[List[float], Tuple[float, float]]` for 1st positional only parameter to call `set.remove` but got `Union[None, List[float], Tuple[float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 164,
    "warning_line": "        open_vertices.remove(current)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # Mark the current vertex as closed\n        open_vertices.remove(current)\n        closed_vertices.add(current)\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):\n            if neighbour in closed_vertices:\n                continue  # We have already processed this node exhaustively\n            candidate_g = G[current] + graph.move_cost(current, neighbour)\n\n",
        "source_code_len": 452,
        "target_code": "        # Mark the current vertex as closed\n        open_vertices.remove(current)  # type: ignore\n        closed_vertices.add(current)  # type: ignore\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):  # type: ignore\n            if neighbour in closed_vertices:\n                continue  # We have already processed this node exhaustively\n            candidate_g = G[current] + graph.move_cost(current, neighbour)  # type: ignore\n\n",
        "target_code_len": 516,
        "diff_format": "@@ -163,10 +163,10 @@\n         # Mark the current vertex as closed\n-        open_vertices.remove(current)\n-        closed_vertices.add(current)\n+        open_vertices.remove(current)  # type: ignore\n+        closed_vertices.add(current)  # type: ignore\n \n         # Update scores for vertices near the current position\n-        for neighbour in sorted(graph.get_vertex_neighbours(current)):\n+        for neighbour in sorted(graph.get_vertex_neighbours(current)):  # type: ignore\n             if neighbour in closed_vertices:\n                 continue  # We have already processed this node exhaustively\n-            candidate_g = G[current] + graph.move_cost(current, neighbour)\n+            candidate_g = G[current] + graph.move_cost(current, neighbour)  # type: ignore\n \n",
        "source_code_with_indent": "        # Mark the current vertex as closed\n        <DED><DED>open_vertices.remove(current)\n        closed_vertices.add(current)\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):\n            <IND>if neighbour in closed_vertices:\n                <IND>continue  # We have already processed this node exhaustively\n            <DED>candidate_g = G[current] + graph.move_cost(current, neighbour)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Mark the current vertex as closed\n        <DED><DED>open_vertices.remove(current)  # type: ignore\n        closed_vertices.add(current)  # type: ignore\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):  # type: ignore\n            <IND>if neighbour in closed_vertices:\n                <IND>continue  # We have already processed this node exhaustively\n            <DED>candidate_g = G[current] + graph.move_cost(current, neighbour)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "44e4a1baf3024ae20602629e0b628beac07c7ba5",
    "filename": "arcade/paths.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/paths.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "arcade/paths.py:168:60 Incompatible parameter type [6]: Expected `Union[List[float], Tuple[float, float]]` for 1st positional only parameter to call `_AStarGraph.get_vertex_neighbours` but got `Union[None, List[float], Tuple[float, float]]`.",
    "message": " Expected `Union[List[float], Tuple[float, float]]` for 1st positional only parameter to call `_AStarGraph.get_vertex_neighbours` but got `Union[None, List[float], Tuple[float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 168,
    "warning_line": "        for neighbour in sorted(graph.get_vertex_neighbours(current)):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # Mark the current vertex as closed\n        open_vertices.remove(current)\n        closed_vertices.add(current)\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):\n            if neighbour in closed_vertices:\n                continue  # We have already processed this node exhaustively\n            candidate_g = G[current] + graph.move_cost(current, neighbour)\n\n",
        "source_code_len": 452,
        "target_code": "        # Mark the current vertex as closed\n        open_vertices.remove(current)  # type: ignore\n        closed_vertices.add(current)  # type: ignore\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):  # type: ignore\n            if neighbour in closed_vertices:\n                continue  # We have already processed this node exhaustively\n            candidate_g = G[current] + graph.move_cost(current, neighbour)  # type: ignore\n\n",
        "target_code_len": 516,
        "diff_format": "@@ -163,10 +163,10 @@\n         # Mark the current vertex as closed\n-        open_vertices.remove(current)\n-        closed_vertices.add(current)\n+        open_vertices.remove(current)  # type: ignore\n+        closed_vertices.add(current)  # type: ignore\n \n         # Update scores for vertices near the current position\n-        for neighbour in sorted(graph.get_vertex_neighbours(current)):\n+        for neighbour in sorted(graph.get_vertex_neighbours(current)):  # type: ignore\n             if neighbour in closed_vertices:\n                 continue  # We have already processed this node exhaustively\n-            candidate_g = G[current] + graph.move_cost(current, neighbour)\n+            candidate_g = G[current] + graph.move_cost(current, neighbour)  # type: ignore\n \n",
        "source_code_with_indent": "        # Mark the current vertex as closed\n        <DED><DED>open_vertices.remove(current)\n        closed_vertices.add(current)\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):\n            <IND>if neighbour in closed_vertices:\n                <IND>continue  # We have already processed this node exhaustively\n            <DED>candidate_g = G[current] + graph.move_cost(current, neighbour)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Mark the current vertex as closed\n        <DED><DED>open_vertices.remove(current)  # type: ignore\n        closed_vertices.add(current)  # type: ignore\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):  # type: ignore\n            <IND>if neighbour in closed_vertices:\n                <IND>continue  # We have already processed this node exhaustively\n            <DED>candidate_g = G[current] + graph.move_cost(current, neighbour)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "44e4a1baf3024ae20602629e0b628beac07c7ba5",
    "filename": "arcade/paths.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/paths.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "arcade/paths.py:171:55 Incompatible parameter type [6]: Expected `Union[List[float], Tuple[float, float]]` for 1st positional only parameter to call `_AStarGraph.move_cost` but got `Union[None, List[float], Tuple[float, float]]`.",
    "message": " Expected `Union[List[float], Tuple[float, float]]` for 1st positional only parameter to call `_AStarGraph.move_cost` but got `Union[None, List[float], Tuple[float, float]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 171,
    "warning_line": "            candidate_g = G[current] + graph.move_cost(current, neighbour)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        # Mark the current vertex as closed\n        open_vertices.remove(current)\n        closed_vertices.add(current)\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):\n            if neighbour in closed_vertices:\n                continue  # We have already processed this node exhaustively\n            candidate_g = G[current] + graph.move_cost(current, neighbour)\n\n",
        "source_code_len": 452,
        "target_code": "        # Mark the current vertex as closed\n        open_vertices.remove(current)  # type: ignore\n        closed_vertices.add(current)  # type: ignore\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):  # type: ignore\n            if neighbour in closed_vertices:\n                continue  # We have already processed this node exhaustively\n            candidate_g = G[current] + graph.move_cost(current, neighbour)  # type: ignore\n\n",
        "target_code_len": 516,
        "diff_format": "@@ -163,10 +163,10 @@\n         # Mark the current vertex as closed\n-        open_vertices.remove(current)\n-        closed_vertices.add(current)\n+        open_vertices.remove(current)  # type: ignore\n+        closed_vertices.add(current)  # type: ignore\n \n         # Update scores for vertices near the current position\n-        for neighbour in sorted(graph.get_vertex_neighbours(current)):\n+        for neighbour in sorted(graph.get_vertex_neighbours(current)):  # type: ignore\n             if neighbour in closed_vertices:\n                 continue  # We have already processed this node exhaustively\n-            candidate_g = G[current] + graph.move_cost(current, neighbour)\n+            candidate_g = G[current] + graph.move_cost(current, neighbour)  # type: ignore\n \n",
        "source_code_with_indent": "        # Mark the current vertex as closed\n        <DED><DED>open_vertices.remove(current)\n        closed_vertices.add(current)\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):\n            <IND>if neighbour in closed_vertices:\n                <IND>continue  # We have already processed this node exhaustively\n            <DED>candidate_g = G[current] + graph.move_cost(current, neighbour)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Mark the current vertex as closed\n        <DED><DED>open_vertices.remove(current)  # type: ignore\n        closed_vertices.add(current)  # type: ignore\n\n        # Update scores for vertices near the current position\n        for neighbour in sorted(graph.get_vertex_neighbours(current)):  # type: ignore\n            <IND>if neighbour in closed_vertices:\n                <IND>continue  # We have already processed this node exhaustively\n            <DED>candidate_g = G[current] + graph.move_cost(current, neighbour)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "44e4a1baf3024ae20602629e0b628beac07c7ba5",
    "filename": "arcade/physics_engines.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/physics_engines.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/physics_engines.py:341:70 Unsupported operand [58]: `+` is not supported for operand types `Iterable[arcade.sprite_list.sprite_list.SpriteList]` and `Iterable[arcade.sprite_list.sprite_list.SpriteList]`.",
    "message": " `+` is not supported for operand types `Iterable[arcade.sprite_list.sprite_list.SpriteList]` and `Iterable[arcade.sprite_list.sprite_list.SpriteList]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 341,
    "warning_line": "        hit_list = check_for_collision_with_lists(self.player_sprite, self.walls + self.platforms)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        self.ladders: Optional[Iterable[SpriteList]]\n        self.platforms: Iterable[SpriteList]\n        self.walls: Iterable[SpriteList]\n\n",
        "source_code_len": 152,
        "target_code": "        \"\"\"\n        self.ladders: Optional[List[SpriteList]]\n        self.platforms: List[SpriteList]\n        self.walls: List[SpriteList]\n\n",
        "target_code_len": 140,
        "diff_format": "@@ -279,5 +277,5 @@\n         \"\"\"\n-        self.ladders: Optional[Iterable[SpriteList]]\n-        self.platforms: Iterable[SpriteList]\n-        self.walls: Iterable[SpriteList]\n+        self.ladders: Optional[List[SpriteList]]\n+        self.platforms: List[SpriteList]\n+        self.walls: List[SpriteList]\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        self.ladders: Optional[Iterable[SpriteList]]\n        self.platforms: Iterable[SpriteList]\n        self.walls: Iterable[SpriteList]\n\n",
        "target_code_with_indent": "\n        self.ladders: Optional[List[SpriteList]]\n        self.platforms: List[SpriteList]\n        self.walls: List[SpriteList]\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            else:\n                self.ladders = ladders\n        else:\n",
        "source_code_len": 71,
        "target_code": "            else:\n                self.ladders = list(ladders)\n        else:\n",
        "target_code_len": 77,
        "diff_format": "@@ -287,3 +285,3 @@\n             else:\n-                self.ladders = ladders\n+                self.ladders = list(ladders)\n         else:\n",
        "source_code_with_indent": "            <DED>else:\n                <IND>self.ladders = ladders\n        <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>else:\n                <IND>self.ladders = list(ladders)\n        <DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            else:\n                self.platforms = platforms\n        else:\n",
        "source_code_len": 75,
        "target_code": "            else:\n                self.platforms = list(platforms)\n        else:\n",
        "target_code_len": 81,
        "diff_format": "@@ -295,3 +293,3 @@\n             else:\n-                self.platforms = platforms\n+                self.platforms = list(platforms)\n         else:\n",
        "source_code_with_indent": "            <DED>else:\n                <IND>self.platforms = platforms\n        <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <DED>else:\n                <IND>self.platforms = list(platforms)\n        <DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                self.walls = [walls]\n            elif isinstance(walls, Sprite):\n                new = SpriteList()\n                new.append(walls)\n                self.walls = [new]\n            else:\n                self.walls = walls\n        else:\n",
        "source_code_len": 252,
        "target_code": "                self.walls = [walls]\n            else:\n                self.walls = list(walls)\n        else:\n",
        "target_code_len": 110,
        "diff_format": "@@ -302,8 +300,4 @@\n                 self.walls = [walls]\n-            elif isinstance(walls, Sprite):\n-                new = SpriteList()\n-                new.append(walls)\n-                self.walls = [new]\n             else:\n-                self.walls = walls\n+                self.walls = list(walls)\n         else:\n",
        "source_code_with_indent": "                <IND>self.walls = [walls]\n            <DED>elif isinstance(walls, Sprite):\n                <IND>new = SpriteList()\n                new.append(walls)\n                self.walls = [new]\n            <DED>else:\n                <IND>self.walls = walls\n        <DED><DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                <IND>self.walls = [walls]\n            <DED>else:\n                <IND>self.walls = list(walls)\n        <DED><DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "44e4a1baf3024ae20602629e0b628beac07c7ba5",
    "filename": "arcade/pymunk_physics_engine.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/pymunk_physics_engine.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "arcade/pymunk_physics_engine.py:118:40 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `list.append` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `list.append` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 118,
    "warning_line": "            self.collision_types.append(collision_type)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            LOG.debug(f\"Adding new collision type of {collision_type}.\")\n            self.collision_types.append(collision_type)\n\n        # Get a number associated with the string of collision_type\n        collision_type_id = self.collision_types.index(collision_type)\n\n",
        "source_code_len": 270,
        "target_code": "            LOG.debug(f\"Adding new collision type of {collision_type}.\")\n            self.collision_types.append(collision_type)  # type: ignore\n\n        # Get a number associated with the string of collision_type\n        collision_type_id = self.collision_types.index(collision_type)  # type: ignore\n\n",
        "target_code_len": 302,
        "diff_format": "@@ -117,6 +116,6 @@\n             LOG.debug(f\"Adding new collision type of {collision_type}.\")\n-            self.collision_types.append(collision_type)\n+            self.collision_types.append(collision_type)  # type: ignore\n \n         # Get a number associated with the string of collision_type\n-        collision_type_id = self.collision_types.index(collision_type)\n+        collision_type_id = self.collision_types.index(collision_type)  # type: ignore\n \n",
        "source_code_with_indent": "            <IND>LOG.debug(f\"Adding new collision type of {collision_type}.\")\n            self.collision_types.append(collision_type)\n\n        # Get a number associated with the string of collision_type\n        <DED>collision_type_id = self.collision_types.index(collision_type)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>LOG.debug(f\"Adding new collision type of {collision_type}.\")\n            self.collision_types.append(collision_type)  # type: ignore\n\n        # Get a number associated with the string of collision_type\n        <DED>collision_type_id = self.collision_types.index(collision_type)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "44e4a1baf3024ae20602629e0b628beac07c7ba5",
    "filename": "arcade/pymunk_physics_engine.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/pymunk_physics_engine.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "arcade/pymunk_physics_engine.py:121:55 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `list.index` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `list.index` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 121,
    "warning_line": "        collision_type_id = self.collision_types.index(collision_type)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "            LOG.debug(f\"Adding new collision type of {collision_type}.\")\n            self.collision_types.append(collision_type)\n\n        # Get a number associated with the string of collision_type\n        collision_type_id = self.collision_types.index(collision_type)\n\n",
        "source_code_len": 270,
        "target_code": "            LOG.debug(f\"Adding new collision type of {collision_type}.\")\n            self.collision_types.append(collision_type)  # type: ignore\n\n        # Get a number associated with the string of collision_type\n        collision_type_id = self.collision_types.index(collision_type)  # type: ignore\n\n",
        "target_code_len": 302,
        "diff_format": "@@ -117,6 +116,6 @@\n             LOG.debug(f\"Adding new collision type of {collision_type}.\")\n-            self.collision_types.append(collision_type)\n+            self.collision_types.append(collision_type)  # type: ignore\n \n         # Get a number associated with the string of collision_type\n-        collision_type_id = self.collision_types.index(collision_type)\n+        collision_type_id = self.collision_types.index(collision_type)  # type: ignore\n \n",
        "source_code_with_indent": "            <IND>LOG.debug(f\"Adding new collision type of {collision_type}.\")\n            self.collision_types.append(collision_type)\n\n        # Get a number associated with the string of collision_type\n        <DED>collision_type_id = self.collision_types.index(collision_type)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>LOG.debug(f\"Adding new collision type of {collision_type}.\")\n            self.collision_types.append(collision_type)  # type: ignore\n\n        # Get a number associated with the string of collision_type\n        <DED>collision_type_id = self.collision_types.index(collision_type)  # type: ignore\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pythonarcade/arcade",
    "commit": "44e4a1baf3024ae20602629e0b628beac07c7ba5",
    "filename": "arcade/pymunk_physics_engine.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pythonarcade-arcade/arcade/pymunk_physics_engine.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "arcade/pymunk_physics_engine.py:255:8 Incompatible return type [7]: Expected `Tuple[arcade.sprite.Sprite]` but got `Tuple[Optional[arcade.sprite.Sprite], Optional[arcade.sprite.Sprite]]`.",
    "message": " Expected `Tuple[arcade.sprite.Sprite]` but got `Tuple[Optional[arcade.sprite.Sprite], Optional[arcade.sprite.Sprite]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 255,
    "warning_line": "        return sprite1, sprite2",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def get_sprites_from_arbiter(self, arbiter: pymunk.Arbiter) -> Tuple[Sprite]:\n        \"\"\" Given a collision arbiter, return the sprites associated with the collision. \"\"\"\n",
        "source_code_len": 176,
        "target_code": "\n    def get_sprites_from_arbiter(self, arbiter: pymunk.Arbiter) -> Tuple[Optional[Sprite], Optional[Sprite]]:\n        \"\"\" Given a collision arbiter, return the sprites associated with the collision. \"\"\"\n",
        "target_code_len": 204,
        "diff_format": "@@ -249,3 +248,3 @@\n \n-    def get_sprites_from_arbiter(self, arbiter: pymunk.Arbiter) -> Tuple[Sprite]:\n+    def get_sprites_from_arbiter(self, arbiter: pymunk.Arbiter) -> Tuple[Optional[Sprite], Optional[Sprite]]:\n         \"\"\" Given a collision arbiter, return the sprites associated with the collision. \"\"\"\n",
        "source_code_with_indent": "\n    <DED>def get_sprites_from_arbiter(self, arbiter: pymunk.Arbiter) -> Tuple[Sprite]:\n        <IND>\"\"\" Given a collision arbiter, return the sprites associated with the collision. \"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def get_sprites_from_arbiter(self, arbiter: pymunk.Arbiter) -> Tuple[Optional[Sprite], Optional[Sprite]]:\n        <IND>\"\"\" Given a collision arbiter, return the sprites associated with the collision. \"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]