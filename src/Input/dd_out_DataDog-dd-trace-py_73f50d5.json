[
  {
    "project": "DataDog/dd-trace-py",
    "commit": "73f50d50d39d84511eaeed75a12ce81049478628",
    "filename": "ddtrace/internal/runtime/runtime_metrics.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DataDog-dd-trace-py/ddtrace/internal/runtime/runtime_metrics.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ddtrace/internal/runtime/runtime_metrics.py:71:58 Incompatible parameter type [6]: Expected `typing.Union[bytearray, bytes, str, typing.SupportsFloat, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `float.__new__` but got `typing.Union[int, None, str]`.",
    "message": " Expected `typing.Union[bytearray, bytes, str, typing.SupportsFloat, typing_extensions.SupportsIndex]` for 1st positional only parameter to call `float.__new__` but got `typing.Union[int, None, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 71,
    "warning_line": "    _interval = attr.ib(type=float, factory=lambda: float(get_env(\"runtime_metrics\", \"interval\", default=10)))"
  },
  {
    "project": "DataDog/dd-trace-py",
    "commit": "73f50d50d39d84511eaeed75a12ce81049478628",
    "filename": "ddtrace/propagation/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DataDog-dd-trace-py/ddtrace/propagation/http.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ddtrace/propagation/http.py:69:8 Incompatible return type [7]: Expected `str` but got `Optional[str]`.",
    "message": " Expected `str` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 69,
    "warning_line": "        return default",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Optional\n",
        "source_code_len": 28,
        "target_code": "from typing import Dict\nfrom typing import FrozenSet\nfrom typing import Optional\n",
        "target_code_len": 81,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Dict\n+from typing import FrozenSet\n from typing import Optional\n",
        "source_code_with_indent": "from typing import Optional\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Dict\nfrom typing import FrozenSet\nfrom typing import Optional\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def _extract_header_value(possible_header_names, headers, default=None):\n        # type: (frozenset[str], dict[str, str], Optional[str]) -> str\n        for header in possible_header_names:\n",
        "source_code_len": 193,
        "target_code": "    def _extract_header_value(possible_header_names, headers, default=None):\n        # type: (FrozenSet[str], Dict[str, str], Optional[str]) -> Optional[str]\n        for header in possible_header_names:\n",
        "target_code_len": 203,
        "diff_format": "@@ -61,3 +64,3 @@\n     def _extract_header_value(possible_header_names, headers, default=None):\n-        # type: (frozenset[str], dict[str, str], Optional[str]) -> str\n+        # type: (FrozenSet[str], Dict[str, str], Optional[str]) -> Optional[str]\n         for header in possible_header_names:\n",
        "source_code_with_indent": "    def _extract_header_value(possible_header_names, headers, default=None):\n        # type: (frozenset[str], dict[str, str], Optional[str]) -> str\n        <IND>for header in possible_header_names:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def _extract_header_value(possible_header_names, headers, default=None):\n        # type: (FrozenSet[str], Dict[str, str], Optional[str]) -> Optional[str]\n        <IND>for header in possible_header_names:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                    trace_id=int(trace_id) or None,\n                    span_id=int(parent_span_id) or None,\n                    sampling_priority=sampling_priority,\n                    dd_origin=origin,\n",
        "source_code_len": 204,
        "target_code": "                    trace_id=int(trace_id) or None,\n                    span_id=int(parent_span_id) or None,  # type: ignore[arg-type]\n                    sampling_priority=sampling_priority,  # type: ignore[arg-type]\n                    dd_origin=origin,\n",
        "target_code_len": 256,
        "diff_format": "@@ -125,4 +130,4 @@\n                     trace_id=int(trace_id) or None,\n-                    span_id=int(parent_span_id) or None,\n-                    sampling_priority=sampling_priority,\n+                    span_id=int(parent_span_id) or None,  # type: ignore[arg-type]\n+                    sampling_priority=sampling_priority,  # type: ignore[arg-type]\n                     dd_origin=origin,\n",
        "source_code_with_indent": "                    trace_id=int(trace_id) or None,\n                    span_id=int(parent_span_id) or None,\n                    sampling_priority=sampling_priority,\n                    dd_origin=origin,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    trace_id=int(trace_id) or None,\n                    span_id=int(parent_span_id) or None,  # type: ignore[arg-type]\n                    sampling_priority=sampling_priority,  # type: ignore[arg-type]\n                    dd_origin=origin,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DataDog/dd-trace-py",
    "commit": "73f50d50d39d84511eaeed75a12ce81049478628",
    "filename": "ddtrace/propagation/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DataDog-dd-trace-py/ddtrace/propagation/http.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ddtrace/propagation/http.py:107:16 Incompatible parameter type [6]: Expected `Optional[str]` for 3rd parameter `default` to call `HTTPPropagator._extract_header_value` but got `int`.",
    "message": " Expected `Optional[str]` for 3rd parameter `default` to call `HTTPPropagator._extract_header_value` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 107,
    "warning_line": "                default=0,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                normalized_headers,\n                default=0,\n            )\n",
        "source_code_len": 77,
        "target_code": "                normalized_headers,\n                default=\"0\",\n            )\n",
        "target_code_len": 79,
        "diff_format": "@@ -106,3 +109,3 @@\n                 normalized_headers,\n-                default=0,\n+                default=\"0\",\n             )\n",
        "source_code_with_indent": "                normalized_headers,\n                default=0,\n            )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                normalized_headers,\n                default=\"0\",\n            )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DataDog/dd-trace-py",
    "commit": "73f50d50d39d84511eaeed75a12ce81049478628",
    "filename": "ddtrace/propagation/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DataDog-dd-trace-py/ddtrace/propagation/http.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "ddtrace/propagation/http.py:127:20 Incompatible parameter type [6]: Expected `Optional[int]` for 3rd parameter `sampling_priority` to call `Context.__init__` but got `typing.Union[int, str]`.",
    "message": " Expected `Optional[int]` for 3rd parameter `sampling_priority` to call `Context.__init__` but got `typing.Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 127,
    "warning_line": "                    sampling_priority=sampling_priority,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                    trace_id=int(trace_id) or None,\n                    span_id=int(parent_span_id) or None,\n                    sampling_priority=sampling_priority,\n                    dd_origin=origin,\n",
        "source_code_len": 204,
        "target_code": "                    trace_id=int(trace_id) or None,\n                    span_id=int(parent_span_id) or None,  # type: ignore[arg-type]\n                    sampling_priority=sampling_priority,  # type: ignore[arg-type]\n                    dd_origin=origin,\n",
        "target_code_len": 256,
        "diff_format": "@@ -125,4 +130,4 @@\n                     trace_id=int(trace_id) or None,\n-                    span_id=int(parent_span_id) or None,\n-                    sampling_priority=sampling_priority,\n+                    span_id=int(parent_span_id) or None,  # type: ignore[arg-type]\n+                    sampling_priority=sampling_priority,  # type: ignore[arg-type]\n                     dd_origin=origin,\n",
        "source_code_with_indent": "                    trace_id=int(trace_id) or None,\n                    span_id=int(parent_span_id) or None,\n                    sampling_priority=sampling_priority,\n                    dd_origin=origin,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                    trace_id=int(trace_id) or None,\n                    span_id=int(parent_span_id) or None,  # type: ignore[arg-type]\n                    sampling_priority=sampling_priority,  # type: ignore[arg-type]\n                    dd_origin=origin,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "DataDog/dd-trace-py",
    "commit": "73f50d50d39d84511eaeed75a12ce81049478628",
    "filename": "ddtrace/propagation/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DataDog-dd-trace-py/ddtrace/propagation/utils.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ddtrace/propagation/utils.py:28:8 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 28,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from ddtrace.utils.cache import cached\n",
        "source_code_len": 39,
        "target_code": "from typing import Optional\n\nfrom ddtrace.utils.cache import cached\n",
        "target_code_len": 68,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Optional\n+\n from ddtrace.utils.cache import cached\n",
        "source_code_with_indent": "from ddtrace.utils.cache import cached\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\n\nfrom ddtrace.utils.cache import cached\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def from_wsgi_header(header):\n    # type: (str) -> str\n    \"\"\"Convert a WSGI compliant HTTP header into the original header.\n",
        "source_code_len": 125,
        "target_code": "def from_wsgi_header(header):\n    # type: (str) -> Optional[str]\n    \"\"\"Convert a WSGI compliant HTTP header into the original header.\n",
        "target_code_len": 135,
        "diff_format": "@@ -15,3 +17,3 @@\n def from_wsgi_header(header):\n-    # type: (str) -> str\n+    # type: (str) -> Optional[str]\n     \"\"\"Convert a WSGI compliant HTTP header into the original header.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def from_wsgi_header(header):\n    # type: (str) -> str\n    <IND>",
        "target_code_with_indent": "def from_wsgi_header(header):\n    # type: (str) -> Optional[str]\n    <IND>"
      }
    ]
  }
]