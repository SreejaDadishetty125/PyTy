[
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/columns/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/columns/base.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/columns/base.py:94:8 Incompatible return type [7]: Expected `Table` but got `t.Type[Table]`.",
    "message": " Expected `Table` but got `t.Type[Table]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 94,
    "warning_line": "        return self._table",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @property\n    def table(self) -> Table:\n        if not self._table:\n",
        "source_code_len": 72,
        "target_code": "    @property\n    def table(self) -> t.Type[Table]:\n        if not self._table:\n",
        "target_code_len": 80,
        "diff_format": "@@ -88,3 +88,3 @@\n     @property\n-    def table(self) -> Table:\n+    def table(self) -> t.Type[Table]:\n         if not self._table:\n",
        "source_code_with_indent": "    <DED>@property\n    def table(self) -> Table:\n        <IND>if not self._table:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@property\n    def table(self) -> t.Type[Table]:\n        <IND>if not self._table:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/count.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/count.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/count.py:15:37 Unbound name [10]: Name `Table` is used but not defined in the current scope.",
    "message": " Name `Table` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 15,
    "warning_line": "    def __init__(self, table: t.Type[Table]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from .select import Select\n\n",
        "source_code_len": 28,
        "target_code": "from .select import Select\n\nif t.TYPE_CHECKING:\n    from piccolo.table import Table\n\n",
        "target_code_len": 85,
        "diff_format": "@@ -9,2 +9,5 @@\n from .select import Select\n+\n+if t.TYPE_CHECKING:\n+    from piccolo.table import Table\n \n",
        "source_code_with_indent": "from .select import Select\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from .select import Select\n\nif t.TYPE_CHECKING:\n    <IND>from piccolo.table import Table\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/create.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/create.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/create.py:15:37 Unbound name [10]: Name `Table` is used but not defined in the current scope.",
    "message": " Name `Table` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 15,
    "warning_line": "    def __init__(self, table: t.Type[Table], if_not_exists: bool = False):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from piccolo.querystring import QueryString\n\n",
        "source_code_len": 45,
        "target_code": "from piccolo.querystring import QueryString\n\nif t.TYPE_CHECKING:\n    from piccolo.table import Table\n\n",
        "target_code_len": 102,
        "diff_format": "@@ -5,2 +5,5 @@\n from piccolo.querystring import QueryString\n+\n+if t.TYPE_CHECKING:\n+    from piccolo.table import Table\n \n",
        "source_code_with_indent": "from piccolo.querystring import QueryString\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from piccolo.querystring import QueryString\n\nif t.TYPE_CHECKING:\n    <IND>from piccolo.table import Table\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/delete.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/delete.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/delete.py:18:37 Unbound name [10]: Name `Table` is used but not defined in the current scope.",
    "message": " Name `Table` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 18,
    "warning_line": "    def __init__(self, table: t.Type[Table], force: bool = False):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from piccolo.querystring import QueryString\n\n",
        "source_code_len": 45,
        "target_code": "from piccolo.querystring import QueryString\n\nif t.TYPE_CHECKING:\n    from piccolo.table import Table\n\n",
        "target_code_len": 102,
        "diff_format": "@@ -7,2 +7,5 @@\n from piccolo.querystring import QueryString\n+\n+if t.TYPE_CHECKING:\n+    from piccolo.table import Table\n \n",
        "source_code_with_indent": "from piccolo.querystring import QueryString\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from piccolo.querystring import QueryString\n\nif t.TYPE_CHECKING:\n    <IND>from piccolo.table import Table\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/exists.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/exists.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/exists.py:16:37 Unbound name [10]: Name `Table` is used but not defined in the current scope.",
    "message": " Name `Table` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 16,
    "warning_line": "    def __init__(self, table: t.Type[Table]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from piccolo.querystring import QueryString\n\n",
        "source_code_len": 45,
        "target_code": "from piccolo.querystring import QueryString\n\nif t.TYPE_CHECKING:\n    from piccolo.table import Table\n\n",
        "target_code_len": 102,
        "diff_format": "@@ -9,2 +9,5 @@\n from piccolo.querystring import QueryString\n+\n+if t.TYPE_CHECKING:\n+    from piccolo.table import Table\n \n",
        "source_code_with_indent": "from piccolo.querystring import QueryString\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from piccolo.querystring import QueryString\n\nif t.TYPE_CHECKING:\n    <IND>from piccolo.table import Table\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/objects.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/objects.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/objects.py:37:37 Unbound name [10]: Name `Table` is used but not defined in the current scope.",
    "message": " Name `Table` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 37,
    "warning_line": "    def __init__(self, table: t.Type[Table]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    from piccolo.columns import Column\n\n",
        "source_code_len": 40,
        "target_code": "    from piccolo.columns import Column\n    from piccolo.table import Table\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -19,2 +19,3 @@\n     from piccolo.columns import Column\n+    from piccolo.table import Table\n \n",
        "source_code_with_indent": "    <IND>from piccolo.columns import Column\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>from piccolo.columns import Column\n    from piccolo.table import Table\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/raw.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/raw.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/raw.py:14:28 Unbound name [10]: Name `Table` is used but not defined in the current scope.",
    "message": " Name `Table` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 14,
    "warning_line": "        self, table: t.Type[Table], querystring: QueryString = QueryString(\"\")",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from piccolo.querystring import QueryString\n\n",
        "source_code_len": 45,
        "target_code": "from piccolo.querystring import QueryString\n\nif t.TYPE_CHECKING:\n    from piccolo.table import Table\n\n",
        "target_code_len": 102,
        "diff_format": "@@ -6,2 +6,5 @@\n from piccolo.querystring import QueryString\n+\n+if t.TYPE_CHECKING:\n+    from piccolo.table import Table\n \n",
        "source_code_with_indent": "from piccolo.querystring import QueryString\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from piccolo.querystring import QueryString\n\nif t.TYPE_CHECKING:\n    <IND>from piccolo.table import Table\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/select.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/select.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/select.py:60:39 Incompatible parameter type [6]: Expected `piccolo.columns.base.Column` for 1st positional only parameter to call `ColumnsDelegate.columns` but got `t.Union[piccolo.columns.base.Column, str]`.",
    "message": " Expected `piccolo.columns.base.Column` for 1st positional only parameter to call `ColumnsDelegate.columns` but got `t.Union[piccolo.columns.base.Column, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 60,
    "warning_line": "        self.columns_delegate.columns(*columns)"
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/select.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/select.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/select.py:89:8 Incompatible variable type [9]: Unable to unpack `t.Sequence[piccolo.columns.base.Selectable]`, expected a tuple.",
    "message": " Unable to unpack `t.Sequence[piccolo.columns.base.Selectable]`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 89,
    "warning_line": "        columns = self.table._process_column_args(*columns)"
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/select.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/select.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/select.py:175:37 Incompatible parameter type [6]: Expected `t.List[piccolo.columns.base.Selectable]` for 1st positional only parameter to call `Select._check_valid_call_chain` but got `t.List[piccolo.columns.base.Column]`.",
    "message": " Expected `t.List[piccolo.columns.base.Selectable]` for 1st positional only parameter to call `Select._check_valid_call_chain` but got `t.List[piccolo.columns.base.Column]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 175,
    "warning_line": "        self._check_valid_call_chain(self.columns_delegate.selected_columns)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _check_valid_call_chain(self, keys: t.List[Selectable]) -> bool:\n        for column in keys:\n",
        "source_code_len": 102,
        "target_code": "\n    def _check_valid_call_chain(self, keys: t.Sequence[Selectable]) -> bool:\n        for column in keys:\n",
        "target_code_len": 106,
        "diff_format": "@@ -156,3 +156,3 @@\n \n-    def _check_valid_call_chain(self, keys: t.List[Selectable]) -> bool:\n+    def _check_valid_call_chain(self, keys: t.Sequence[Selectable]) -> bool:\n         for column in keys:\n",
        "source_code_with_indent": "\n    <DED>def _check_valid_call_chain(self, keys: t.List[Selectable]) -> bool:\n        <IND>for column in keys:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _check_valid_call_chain(self, keys: t.Sequence[Selectable]) -> bool:\n        <IND>for column in keys:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/select.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/select.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/select.py:177:39 Incompatible parameter type [6]: Expected `t.List[piccolo.columns.base.Selectable]` for 1st positional only parameter to call `Select._get_joins` but got `t.List[piccolo.columns.base.Column]`.",
    "message": " Expected `t.List[piccolo.columns.base.Selectable]` for 1st positional only parameter to call `Select._get_joins` but got `t.List[piccolo.columns.base.Column]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 177,
    "warning_line": "        select_joins = self._get_joins(self.columns_delegate.selected_columns)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_joins(self, columns: t.List[Selectable]) -> t.List[str]:\n        \"\"\"\n",
        "source_code_len": 83,
        "target_code": "\n    def _get_joins(self, columns: t.Sequence[Selectable]) -> t.List[str]:\n        \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -109,3 +109,3 @@\n \n-    def _get_joins(self, columns: t.List[Selectable]) -> t.List[str]:\n+    def _get_joins(self, columns: t.Sequence[Selectable]) -> t.List[str]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _get_joins(self, columns: t.List[Selectable]) -> t.List[str]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _get_joins(self, columns: t.Sequence[Selectable]) -> t.List[str]:\n        <IND>"
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/select.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/select.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/select.py:180:12 Incompatible parameter type [6]: Expected `t.List[piccolo.columns.base.Selectable]` for 1st positional only parameter to call `Select._get_joins` but got `t.List[piccolo.columns.base.Column]`.",
    "message": " Expected `t.List[piccolo.columns.base.Selectable]` for 1st positional only parameter to call `Select._get_joins` but got `t.List[piccolo.columns.base.Column]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 180,
    "warning_line": "            self.order_by_delegate.get_order_by_columns()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_joins(self, columns: t.List[Selectable]) -> t.List[str]:\n        \"\"\"\n",
        "source_code_len": 83,
        "target_code": "\n    def _get_joins(self, columns: t.Sequence[Selectable]) -> t.List[str]:\n        \"\"\"\n",
        "target_code_len": 87,
        "diff_format": "@@ -109,3 +109,3 @@\n \n-    def _get_joins(self, columns: t.List[Selectable]) -> t.List[str]:\n+    def _get_joins(self, columns: t.Sequence[Selectable]) -> t.List[str]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _get_joins(self, columns: t.List[Selectable]) -> t.List[str]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _get_joins(self, columns: t.Sequence[Selectable]) -> t.List[str]:\n        <IND>"
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/query/methods/update.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/query/methods/update.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/query/methods/update.py:19:37 Unbound name [10]: Name `Table` is used but not defined in the current scope.",
    "message": " Name `Table` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 19,
    "warning_line": "    def __init__(self, table: t.Type[Table]):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    from piccolo.columns import Column\n\n",
        "source_code_len": 40,
        "target_code": "    from piccolo.columns import Column\n    from piccolo.table import Table\n\n",
        "target_code_len": 76,
        "diff_format": "@@ -11,2 +11,3 @@\n     from piccolo.columns import Column\n+    from piccolo.table import Table\n \n",
        "source_code_with_indent": "    <IND>from piccolo.columns import Column\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>from piccolo.columns import Column\n    from piccolo.table import Table\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/table.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/table.py:390:8 Incompatible return type [7]: Expected `t.Sequence[piccolo.columns.base.Selectable]` but got `t.List[t.Union[piccolo.columns.base.Selectable, str]]`.",
    "message": " Expected `t.Sequence[piccolo.columns.base.Selectable]` but got `t.List[t.Union[piccolo.columns.base.Selectable, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 390,
    "warning_line": "        return [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            cls._meta.get_column_by_name(column)\n            if (type(column) == str)\n            else column\n",
        "source_code_len": 110,
        "target_code": "            cls._meta.get_column_by_name(column)\n            if (isinstance(column, str))\n            else column\n",
        "target_code_len": 114,
        "diff_format": "@@ -391,3 +395,3 @@\n             cls._meta.get_column_by_name(column)\n-            if (type(column) == str)\n+            if (isinstance(column, str))\n             else column\n",
        "source_code_with_indent": "            cls._meta.get_column_by_name(column)\n            if (type(column) == str)\n            else column\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            cls._meta.get_column_by_name(column)\n            if (isinstance(column, str))\n            else column\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "piccolo-orm/piccolo",
    "commit": "fed3b3bbb44a69dd154ba5624d7675bfb738c731",
    "filename": "piccolo/table.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/piccolo-orm-piccolo/piccolo/table.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "piccolo/table.py:391:41 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `TableMeta.get_column_by_name` but got `t.Union[piccolo.columns.base.Selectable, str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `TableMeta.get_column_by_name` but got `t.Union[piccolo.columns.base.Selectable, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 391,
    "warning_line": "            cls._meta.get_column_by_name(column)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            cls._meta.get_column_by_name(column)\n            if (type(column) == str)\n            else column\n",
        "source_code_len": 110,
        "target_code": "            cls._meta.get_column_by_name(column)\n            if (isinstance(column, str))\n            else column\n",
        "target_code_len": 114,
        "diff_format": "@@ -391,3 +395,3 @@\n             cls._meta.get_column_by_name(column)\n-            if (type(column) == str)\n+            if (isinstance(column, str))\n             else column\n",
        "source_code_with_indent": "            cls._meta.get_column_by_name(column)\n            if (type(column) == str)\n            else column\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            cls._meta.get_column_by_name(column)\n            if (isinstance(column, str))\n            else column\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]