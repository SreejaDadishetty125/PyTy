[
  {
    "project": "SeldonIO/MLServer",
    "commit": "9a578500ffd107a4eac53456e54101941e95a92d",
    "filename": "mlserver/model.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-MLServer/mlserver/model.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mlserver/model.py:33:8 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 33,
    "warning_line": "        self.ready = True",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.ready = True\n\n",
        "source_code_len": 27,
        "target_code": "        self.ready = True\n        return self.ready\n\n",
        "target_code_len": 53,
        "diff_format": "@@ -33,2 +33,3 @@\n         self.ready = True\n+        return self.ready\n \n",
        "source_code_with_indent": "        <IND>self.ready = True\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>self.ready = True\n        return self.ready\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "SeldonIO/MLServer",
    "commit": "9a578500ffd107a4eac53456e54101941e95a92d",
    "filename": "mlserver/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/SeldonIO-MLServer/mlserver/server.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mlserver/server.py:36:36 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[..., typing.Any]]` for 1st parameter `target` to call `multiprocessing.process.BaseProcess.__init__` but got `str`.",
    "message": " Expected `typing.Optional[typing.Callable[..., typing.Any]]` for 1st parameter `target` to call `multiprocessing.process.BaseProcess.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 36,
    "warning_line": "        p = multiprocessing.Process(target=target)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import multiprocessing\nfrom typing import List\n\n",
        "source_code_len": 48,
        "target_code": "import multiprocessing\nfrom typing import List, Callable\n\n",
        "target_code_len": 58,
        "diff_format": "@@ -1,3 +1,3 @@\n import multiprocessing\n-from typing import List\n+from typing import List, Callable\n \n",
        "source_code_with_indent": "import multiprocessing\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import multiprocessing\nfrom typing import List, Callable\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _start(self, target: str):\n        p = multiprocessing.Process(target=target)\n",
        "source_code_len": 87,
        "target_code": "\n    def _start(self, target: Callable):\n        p = multiprocessing.Process(target=target)\n",
        "target_code_len": 92,
        "diff_format": "@@ -34,3 +34,3 @@\n \n-    def _start(self, target: str):\n+    def _start(self, target: Callable):\n         p = multiprocessing.Process(target=target)\n",
        "source_code_with_indent": "\n    <DED>def _start(self, target: str):\n        <IND>p = multiprocessing.Process(target=target)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _start(self, target: Callable):\n        <IND>p = multiprocessing.Process(target=target)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]