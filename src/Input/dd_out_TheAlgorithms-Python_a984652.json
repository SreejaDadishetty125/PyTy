[
  {
    "project": "TheAlgorithms/Python",
    "commit": "a98465230f21e6ece76332eeca1558613788c387",
    "filename": "maths/gamma_recursive.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/maths/gamma_recursive.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maths/gamma_recursive.py:76:8 Incompatible variable type [9]: num is declared to have type `int` but is used as type `float`.",
    "message": " num is declared to have type `int` but is used as type `float`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 76,
    "warning_line": "        num = float(input(\"Gamma of: \"))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    testmod()\n    num = 1\n    while num:\n",
        "source_code_len": 41,
        "target_code": "    testmod()\n    num = 1.0\n    while num:\n",
        "target_code_len": 43,
        "diff_format": "@@ -73,3 +72,3 @@\n     testmod()\n-    num = 1\n+    num = 1.0\n     while num:\n",
        "source_code_with_indent": "    testmod()\n    num = 1\n    while num:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    testmod()\n    num = 1.0\n    while num:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "a98465230f21e6ece76332eeca1558613788c387",
    "filename": "maths/series/geometric_series.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/maths/series/geometric_series.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maths/series/geometric_series.py:42:8 Incompatible return type [7]: Expected `typing.List[typing.Any]` but got `str`.",
    "message": " Expected `typing.List[typing.Any]` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 42,
    "warning_line": "        return \"\""
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "a98465230f21e6ece76332eeca1558613788c387",
    "filename": "maths/series/geometric_series.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/maths/series/geometric_series.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maths/series/geometric_series.py:63:27 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `geometric_series` but got `str`.",
    "message": " Expected `int` for 1st positional only parameter to call `geometric_series` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 63,
    "warning_line": "    print(geometric_series(nth_term, start_term_a, common_ratio_r))"
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "a98465230f21e6ece76332eeca1558613788c387",
    "filename": "maths/series/geometric_series.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/maths/series/geometric_series.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maths/series/geometric_series.py:63:37 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `geometric_series` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `geometric_series` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 63,
    "warning_line": "    print(geometric_series(nth_term, start_term_a, common_ratio_r))"
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "a98465230f21e6ece76332eeca1558613788c387",
    "filename": "maths/series/geometric_series.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/maths/series/geometric_series.py",
    "file_hunks_size": 6,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maths/series/geometric_series.py:63:51 Incompatible parameter type [6]: Expected `int` for 3rd positional only parameter to call `geometric_series` but got `str`.",
    "message": " Expected `int` for 3rd positional only parameter to call `geometric_series` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 63,
    "warning_line": "    print(geometric_series(nth_term, start_term_a, common_ratio_r))"
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "a98465230f21e6ece76332eeca1558613788c387",
    "filename": "maths/series/p_series.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/maths/series/p_series.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maths/series/p_series.py:35:8 Incompatible return type [7]: Expected `typing.List[typing.Any]` but got `int`.",
    "message": " Expected `typing.List[typing.Any]` but got `int`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 35,
    "warning_line": "        return nth_term",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    >>> p_series(1, 1)\n    [1]\n    \"\"\"\n    if nth_term == \"\":\n        return nth_term\n    nth_term = int(nth_term)\n    power = int(power)\n    series = []\n    for temp in range(int(nth_term)):\n        series.append(f\"1/{pow(temp + 1, int(power))}\" if series else 1)\n    return series\n",
        "source_code_len": 283,
        "target_code": "    >>> p_series(1, 1)\n    ['1']\n    \"\"\"\n    if nth_term == \"\":\n        return [\"\"]\n    nth_term = int(nth_term)\n    power = int(power)\n    series: list[str] = []\n    for temp in range(int(nth_term)):\n        series.append(f\"1 / {pow(temp + 1, int(power))}\" if series else \"1\")\n    return series\n",
        "target_code_len": 296,
        "diff_format": "@@ -31,11 +31,11 @@\n     >>> p_series(1, 1)\n-    [1]\n+    ['1']\n     \"\"\"\n     if nth_term == \"\":\n-        return nth_term\n+        return [\"\"]\n     nth_term = int(nth_term)\n     power = int(power)\n-    series = []\n+    series: list[str] = []\n     for temp in range(int(nth_term)):\n-        series.append(f\"1/{pow(temp + 1, int(power))}\" if series else 1)\n+        series.append(f\"1 / {pow(temp + 1, int(power))}\" if series else \"1\")\n     return series\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    if nth_term == \"\":\n        <IND>return nth_term\n    <DED>nth_term = int(nth_term)\n    power = int(power)\n    series = []\n    for temp in range(int(nth_term)):\n        <IND>series.append(f\"1/{pow(temp + 1, int(power))}\" if series else 1)\n    <DED>return series\n",
        "target_code_with_indent": "\n    if nth_term == \"\":\n        <IND>return [\"\"]\n    <DED>nth_term = int(nth_term)\n    power = int(power)\n    series: list[str] = []\n    for temp in range(int(nth_term)):\n        <IND>series.append(f\"1 / {pow(temp + 1, int(power))}\" if series else \"1\")\n    <DED>return series\n"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "a98465230f21e6ece76332eeca1558613788c387",
    "filename": "maths/series/p_series.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/maths/series/p_series.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maths/series/p_series.py:48:19 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `p_series` but got `str`.",
    "message": " Expected `int` for 1st positional only parameter to call `p_series` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "    print(p_series(nth_term, power))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if __name__ == \"__main__\":\n    nth_term = input(\"Enter the last number (nth term) of the P-Series\")\n    power = input(\"Enter the power for  P-Series\")\n    print(\"Formula of P-Series => 1+1/2^p+1/3^p ..... 1/n^p\")\n",
        "source_code_len": 213,
        "target_code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    nth_term = int(input(\"Enter the last number (nth term) of the P-Series\"))\n    power = int(input(\"Enter the power for  P-Series\"))\n    print(\"Formula of P-Series => 1+1/2^p+1/3^p ..... 1/n^p\")\n",
        "target_code_len": 266,
        "diff_format": "@@ -44,4 +44,8 @@\n if __name__ == \"__main__\":\n-    nth_term = input(\"Enter the last number (nth term) of the P-Series\")\n-    power = input(\"Enter the power for  P-Series\")\n+    import doctest\n+\n+    doctest.testmod()\n+\n+    nth_term = int(input(\"Enter the last number (nth term) of the P-Series\"))\n+    power = int(input(\"Enter the power for  P-Series\"))\n     print(\"Formula of P-Series => 1+1/2^p+1/3^p ..... 1/n^p\")\n",
        "source_code_with_indent": "<DED>if __name__ == \"__main__\":\n    <IND>nth_term = input(\"Enter the last number (nth term) of the P-Series\")\n    power = input(\"Enter the power for  P-Series\")\n    print(\"Formula of P-Series => 1+1/2^p+1/3^p ..... 1/n^p\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>if __name__ == \"__main__\":\n    <IND>import doctest\n\n    doctest.testmod()\n\n    nth_term = int(input(\"Enter the last number (nth term) of the P-Series\"))\n    power = int(input(\"Enter the power for  P-Series\"))\n    print(\"Formula of P-Series => 1+1/2^p+1/3^p ..... 1/n^p\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "a98465230f21e6ece76332eeca1558613788c387",
    "filename": "maths/series/p_series.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/maths/series/p_series.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "maths/series/p_series.py:48:29 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `p_series` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `p_series` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "    print(p_series(nth_term, power))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "if __name__ == \"__main__\":\n    nth_term = input(\"Enter the last number (nth term) of the P-Series\")\n    power = input(\"Enter the power for  P-Series\")\n    print(\"Formula of P-Series => 1+1/2^p+1/3^p ..... 1/n^p\")\n",
        "source_code_len": 213,
        "target_code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    nth_term = int(input(\"Enter the last number (nth term) of the P-Series\"))\n    power = int(input(\"Enter the power for  P-Series\"))\n    print(\"Formula of P-Series => 1+1/2^p+1/3^p ..... 1/n^p\")\n",
        "target_code_len": 266,
        "diff_format": "@@ -44,4 +44,8 @@\n if __name__ == \"__main__\":\n-    nth_term = input(\"Enter the last number (nth term) of the P-Series\")\n-    power = input(\"Enter the power for  P-Series\")\n+    import doctest\n+\n+    doctest.testmod()\n+\n+    nth_term = int(input(\"Enter the last number (nth term) of the P-Series\"))\n+    power = int(input(\"Enter the power for  P-Series\"))\n     print(\"Formula of P-Series => 1+1/2^p+1/3^p ..... 1/n^p\")\n",
        "source_code_with_indent": "<DED>if __name__ == \"__main__\":\n    <IND>nth_term = input(\"Enter the last number (nth term) of the P-Series\")\n    power = input(\"Enter the power for  P-Series\")\n    print(\"Formula of P-Series => 1+1/2^p+1/3^p ..... 1/n^p\")\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>if __name__ == \"__main__\":\n    <IND>import doctest\n\n    doctest.testmod()\n\n    nth_term = int(input(\"Enter the last number (nth term) of the P-Series\"))\n    power = int(input(\"Enter the power for  P-Series\"))\n    print(\"Formula of P-Series => 1+1/2^p+1/3^p ..... 1/n^p\")\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]