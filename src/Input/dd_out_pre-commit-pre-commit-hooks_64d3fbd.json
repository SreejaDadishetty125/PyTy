[
  {
    "project": "pre-commit/pre-commit-hooks",
    "commit": "64d3fbd5cfeba19954e04c32422967ee446e794d",
    "filename": "pre_commit_hooks/requirements_txt_fixer.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pre-commit-pre-commit-hooks/pre_commit_hooks/requirements_txt_fixer.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pre_commit_hooks/requirements_txt_fixer.py:116:30 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `sorted` but got `List[Requirement]`.",
    "message": " Expected `typing.Iterable[Variable[_typeshed.SupportsLessThanT (bound to _typeshed.SupportsLessThan)]]` for 1st positional only parameter to call `sorted` but got `List[Requirement]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 116,
    "warning_line": "    for requirement in sorted(requirements):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __lt__(self, requirement: 'Requirement') -> int:\n        # \\n means top of file comment, so always return True,\n",
        "source_code_len": 121,
        "target_code": "\n    def __lt__(self, requirement: 'Requirement') -> bool:\n        # \\n means top of file comment, so always return True,\n",
        "target_code_len": 122,
        "diff_format": "@@ -38,3 +38,3 @@\n \n-    def __lt__(self, requirement: 'Requirement') -> int:\n+    def __lt__(self, requirement: 'Requirement') -> bool:\n         # \\n means top of file comment, so always return True,\n",
        "source_code_with_indent": "\n    <DED>def __lt__(self, requirement: 'Requirement') -> int:\n        # \\n means top of file comment, so always return True,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __lt__(self, requirement: 'Requirement') -> bool:\n        # \\n means top of file comment, so always return True,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]