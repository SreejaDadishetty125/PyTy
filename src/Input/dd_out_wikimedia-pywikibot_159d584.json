[
  {
    "project": "wikimedia/pywikibot",
    "commit": "159d58424495db19b57d3c5e8a4de82ad85c114c",
    "filename": "scripts/add_text.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wikimedia-pywikibot/scripts/add_text.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/add_text.py:133:12 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 133,
    "warning_line": "            return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_text(page: pywikibot.page.BasePage, old: Optional[str],\n             create: bool) -> str:\n    \"\"\"\n",
        "source_code_len": 107,
        "target_code": "def get_text(page: pywikibot.page.BasePage, old: Optional[str],\n             create: bool) -> Optional[str]:\n    \"\"\"\n",
        "target_code_len": 117,
        "diff_format": "@@ -111,3 +118,3 @@\n def get_text(page: pywikibot.page.BasePage, old: Optional[str],\n-             create: bool) -> str:\n+             create: bool) -> Optional[str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def get_text(page: pywikibot.page.BasePage, old: Optional[str],\n             create: bool) -> str:\n    <IND>",
        "target_code_with_indent": "def get_text(page: pywikibot.page.BasePage, old: Optional[str],\n             create: bool) -> Optional[str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "wikimedia/pywikibot",
    "commit": "159d58424495db19b57d3c5e8a4de82ad85c114c",
    "filename": "scripts/add_text.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wikimedia-pywikibot/scripts/add_text.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/add_text.py:136:8 Incompatible return type [7]: Expected `str` but got `None`.",
    "message": " Expected `str` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 136,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def get_text(page: pywikibot.page.BasePage, old: Optional[str],\n             create: bool) -> str:\n    \"\"\"\n",
        "source_code_len": 107,
        "target_code": "def get_text(page: pywikibot.page.BasePage, old: Optional[str],\n             create: bool) -> Optional[str]:\n    \"\"\"\n",
        "target_code_len": 117,
        "diff_format": "@@ -111,3 +118,3 @@\n def get_text(page: pywikibot.page.BasePage, old: Optional[str],\n-             create: bool) -> str:\n+             create: bool) -> Optional[str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def get_text(page: pywikibot.page.BasePage, old: Optional[str],\n             create: bool) -> str:\n    <IND>",
        "target_code_with_indent": "def get_text(page: pywikibot.page.BasePage, old: Optional[str],\n             create: bool) -> Optional[str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "wikimedia/pywikibot",
    "commit": "159d58424495db19b57d3c5e8a4de82ad85c114c",
    "filename": "scripts/add_text.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wikimedia-pywikibot/scripts/add_text.py",
    "file_hunks_size": 7,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/add_text.py:381:24 Incompatible parameter type [6]: Expected `typing.Tuple[Variable[_T_co](covariant)]` for 1st positional only parameter to call `parse` but got `typing.Tuple[typing.Tuple[Variable[_T_co](covariant)], ...]`.",
    "message": " Expected `typing.Tuple[Variable[_T_co](covariant)]` for 1st positional only parameter to call `parse` but got `typing.Tuple[typing.Tuple[Variable[_T_co](covariant)], ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 381,
    "warning_line": "        options = parse(argv, generator_factory)"
  },
  {
    "project": "wikimedia/pywikibot",
    "commit": "159d58424495db19b57d3c5e8a4de82ad85c114c",
    "filename": "scripts/add_text.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/wikimedia-pywikibot/scripts/add_text.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "scripts/add_text.py:436:4 Incompatible return type [7]: Expected `typing.Dict[str, str]` but got `typing.Dict[str, Union[bool, str]]`.",
    "message": " Expected `typing.Dict[str, str]` but got `typing.Dict[str, Union[bool, str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 436,
    "warning_line": "    return args",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "          generator_factory: pagegenerators.GeneratorFactory\n          ) -> Dict[str, str]:\n    \"\"\"\n",
        "source_code_len": 100,
        "target_code": "          generator_factory: pagegenerators.GeneratorFactory\n          ) -> Dict[str, Union[bool, str]]:\n    \"\"\"\n",
        "target_code_len": 113,
        "diff_format": "@@ -395,3 +412,3 @@\n           generator_factory: pagegenerators.GeneratorFactory\n-          ) -> Dict[str, str]:\n+          ) -> Dict[str, Union[bool, str]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "          generator_factory: pagegenerators.GeneratorFactory\n          ) -> Dict[str, str]:\n    <IND>",
        "target_code_with_indent": "          generator_factory: pagegenerators.GeneratorFactory\n          ) -> Dict[str, Union[bool, str]]:\n    <IND>"
      }
    ]
  }
]