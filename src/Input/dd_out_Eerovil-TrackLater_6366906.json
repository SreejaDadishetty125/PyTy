[
  {
    "project": "Eerovil/TrackLater",
    "commit": "636690611a453cd694a7895960b58f91deb9f30b",
    "filename": "tracklater/timemodules/toggl.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Eerovil-TrackLater/tracklater/timemodules/toggl.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tracklater/timemodules/toggl.py:185:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got `List[typing.Dict[str, typing.Union[int, str]]]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `List[typing.Dict[str, typing.Union[int, str]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 185,
    "warning_line": "            return [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom typing import List, Union, cast, Any, Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-from typing import List\n+from typing import List, Union, cast, Any, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Union, cast, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def test_request(self, endpoint: str, **kwargs) -> dict:\n        method = kwargs.get('method', 'POST').lower()\n",
        "source_code_len": 116,
        "target_code": "\n    def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n        method = kwargs.get('method', 'POST').lower()\n",
        "target_code_len": 140,
        "diff_format": "@@ -181,3 +182,3 @@\n \n-    def test_request(self, endpoint: str, **kwargs) -> dict:\n+    def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n         method = kwargs.get('method', 'POST').lower()\n",
        "source_code_with_indent": "\n    <DED>def test_request(self, endpoint: str, **kwargs) -> dict:\n        <IND>method = kwargs.get('method', 'POST').lower()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n        <IND>method = kwargs.get('method', 'POST').lower()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return endpoint[13:]\n",
        "source_code_len": 33,
        "target_code": "            return endpoint[13:]\n        return [{}]\n",
        "target_code_len": 53,
        "diff_format": "@@ -247,1 +248,2 @@\n             return endpoint[13:]\n+        return [{}]\n",
        "source_code_with_indent": "            <IND>return endpoint[13:]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return endpoint[13:]\n        <DED>return [{}]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Eerovil/TrackLater",
    "commit": "636690611a453cd694a7895960b58f91deb9f30b",
    "filename": "tracklater/timemodules/toggl.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Eerovil-TrackLater/tracklater/timemodules/toggl.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tracklater/timemodules/toggl.py:209:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got `List[typing.Dict[str, typing.Union[int, str]]]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `List[typing.Dict[str, typing.Union[int, str]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 209,
    "warning_line": "            return [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom typing import List, Union, cast, Any, Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-from typing import List\n+from typing import List, Union, cast, Any, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Union, cast, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def test_request(self, endpoint: str, **kwargs) -> dict:\n        method = kwargs.get('method', 'POST').lower()\n",
        "source_code_len": 116,
        "target_code": "\n    def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n        method = kwargs.get('method', 'POST').lower()\n",
        "target_code_len": 140,
        "diff_format": "@@ -181,3 +182,3 @@\n \n-    def test_request(self, endpoint: str, **kwargs) -> dict:\n+    def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n         method = kwargs.get('method', 'POST').lower()\n",
        "source_code_with_indent": "\n    <DED>def test_request(self, endpoint: str, **kwargs) -> dict:\n        <IND>method = kwargs.get('method', 'POST').lower()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n        <IND>method = kwargs.get('method', 'POST').lower()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return endpoint[13:]\n",
        "source_code_len": 33,
        "target_code": "            return endpoint[13:]\n        return [{}]\n",
        "target_code_len": 53,
        "diff_format": "@@ -247,1 +248,2 @@\n             return endpoint[13:]\n+        return [{}]\n",
        "source_code_with_indent": "            <IND>return endpoint[13:]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return endpoint[13:]\n        <DED>return [{}]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Eerovil/TrackLater",
    "commit": "636690611a453cd694a7895960b58f91deb9f30b",
    "filename": "tracklater/timemodules/toggl.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Eerovil-TrackLater/tracklater/timemodules/toggl.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tracklater/timemodules/toggl.py:221:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got `List[typing.Dict[str, typing.Union[int, str]]]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `List[typing.Dict[str, typing.Union[int, str]]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 221,
    "warning_line": "            return [",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom typing import List, Union, cast, Any, Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-from typing import List\n+from typing import List, Union, cast, Any, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Union, cast, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def test_request(self, endpoint: str, **kwargs) -> dict:\n        method = kwargs.get('method', 'POST').lower()\n",
        "source_code_len": 116,
        "target_code": "\n    def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n        method = kwargs.get('method', 'POST').lower()\n",
        "target_code_len": 140,
        "diff_format": "@@ -181,3 +182,3 @@\n \n-    def test_request(self, endpoint: str, **kwargs) -> dict:\n+    def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n         method = kwargs.get('method', 'POST').lower()\n",
        "source_code_with_indent": "\n    <DED>def test_request(self, endpoint: str, **kwargs) -> dict:\n        <IND>method = kwargs.get('method', 'POST').lower()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n        <IND>method = kwargs.get('method', 'POST').lower()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return endpoint[13:]\n",
        "source_code_len": 33,
        "target_code": "            return endpoint[13:]\n        return [{}]\n",
        "target_code_len": 53,
        "diff_format": "@@ -247,1 +248,2 @@\n             return endpoint[13:]\n+        return [{}]\n",
        "source_code_with_indent": "            <IND>return endpoint[13:]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return endpoint[13:]\n        <DED>return [{}]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Eerovil/TrackLater",
    "commit": "636690611a453cd694a7895960b58f91deb9f30b",
    "filename": "tracklater/timemodules/toggl.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Eerovil-TrackLater/tracklater/timemodules/toggl.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tracklater/timemodules/toggl.py:247:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 247,
    "warning_line": "            return endpoint[13:]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom typing import List, Union, cast, Any, Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-from typing import List\n+from typing import List, Union, cast, Any, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Union, cast, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def test_request(self, endpoint: str, **kwargs) -> dict:\n        method = kwargs.get('method', 'POST').lower()\n",
        "source_code_len": 116,
        "target_code": "\n    def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n        method = kwargs.get('method', 'POST').lower()\n",
        "target_code_len": 140,
        "diff_format": "@@ -181,3 +182,3 @@\n \n-    def test_request(self, endpoint: str, **kwargs) -> dict:\n+    def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n         method = kwargs.get('method', 'POST').lower()\n",
        "source_code_with_indent": "\n    <DED>def test_request(self, endpoint: str, **kwargs) -> dict:\n        <IND>method = kwargs.get('method', 'POST').lower()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n        <IND>method = kwargs.get('method', 'POST').lower()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return endpoint[13:]\n",
        "source_code_len": 33,
        "target_code": "            return endpoint[13:]\n        return [{}]\n",
        "target_code_len": 53,
        "diff_format": "@@ -247,1 +248,2 @@\n             return endpoint[13:]\n+        return [{}]\n",
        "source_code_with_indent": "            <IND>return endpoint[13:]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return endpoint[13:]\n        <DED>return [{}]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "Eerovil/TrackLater",
    "commit": "636690611a453cd694a7895960b58f91deb9f30b",
    "filename": "tracklater/timemodules/toggl.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/Eerovil-TrackLater/tracklater/timemodules/toggl.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tracklater/timemodules/toggl.py:247:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got `str`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `str`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 247,
    "warning_line": "            return endpoint[13:]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import List\n\n",
        "source_code_len": 26,
        "target_code": "\nfrom typing import List, Union, cast, Any, Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -12,3 +12,3 @@\n \n-from typing import List\n+from typing import List, Union, cast, Any, Optional\n \n",
        "source_code_with_indent": "\nfrom typing import List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import List, Union, cast, Any, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def test_request(self, endpoint: str, **kwargs) -> dict:\n        method = kwargs.get('method', 'POST').lower()\n",
        "source_code_len": 116,
        "target_code": "\n    def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n        method = kwargs.get('method', 'POST').lower()\n",
        "target_code_len": 140,
        "diff_format": "@@ -181,3 +182,3 @@\n \n-    def test_request(self, endpoint: str, **kwargs) -> dict:\n+    def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n         method = kwargs.get('method', 'POST').lower()\n",
        "source_code_with_indent": "\n    <DED>def test_request(self, endpoint: str, **kwargs) -> dict:\n        <IND>method = kwargs.get('method', 'POST').lower()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def test_request(self, endpoint: str, **kwargs) -> Union[List[dict], dict, str]:\n        <IND>method = kwargs.get('method', 'POST').lower()\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return endpoint[13:]\n",
        "source_code_len": 33,
        "target_code": "            return endpoint[13:]\n        return [{}]\n",
        "target_code_len": 53,
        "diff_format": "@@ -247,1 +248,2 @@\n             return endpoint[13:]\n+        return [{}]\n",
        "source_code_with_indent": "            <IND>return endpoint[13:]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>return endpoint[13:]\n        <DED>return [{}]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]