[
  {
    "project": "dprog-philippe-docourt/django-qr-code",
    "commit": "7b15bc823f42e5dad8067e511915466029882d46",
    "filename": "qr_code/qrcode/serve.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dprog-philippe-docourt-django-qr-code/qr_code/qrcode/serve.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qr_code/qrcode/serve.py:114:4 Incompatible variable type [9]: url_signature_enabled is declared to have type `Optional[bool]` but is used as type `Union[int, int]`.",
    "message": " url_signature_enabled is declared to have type `Optional[bool]` but is used as type `Union[int, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 114,
    "warning_line": "    url_signature_enabled = 1 if url_signature_enabled else 0",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    url_signature_enabled = 1 if url_signature_enabled else 0\n    if cache_enabled is None:\n        cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    cache_enabled = 1 if cache_enabled else 0\n    if force_text:\n        encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n    elif isinstance(data, int):\n        params = dict(int=data, cache_enabled=cache_enabled)\n    else:\n",
        "source_code_len": 554,
        "target_code": "        url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    if cache_enabled is None:\n        cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    cache_enabled_arg = 1 if cache_enabled else 0\n    if force_text:\n        encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n    elif isinstance(data, int):\n        params = dict(int=data, cache_enabled=cache_enabled_arg)\n    else:\n",
        "target_code_len": 504,
        "diff_format": "@@ -113,11 +113,10 @@\n         url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n-    url_signature_enabled = 1 if url_signature_enabled else 0\n     if cache_enabled is None:\n         cache_enabled = constants.DEFAULT_CACHE_ENABLED\n-    cache_enabled = 1 if cache_enabled else 0\n+    cache_enabled_arg = 1 if cache_enabled else 0\n     if force_text:\n         encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n-        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n+        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n     elif isinstance(data, int):\n-        params = dict(int=data, cache_enabled=cache_enabled)\n+        params = dict(int=data, cache_enabled=cache_enabled_arg)\n     else:\n",
        "source_code_with_indent": "        <IND>url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    <DED>url_signature_enabled = 1 if url_signature_enabled else 0\n    if cache_enabled is None:\n        <IND>cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    <DED>cache_enabled = 1 if cache_enabled else 0\n    if force_text:\n        <IND>encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n    <DED>elif isinstance(data, int):\n        <IND>params = dict(int=data, cache_enabled=cache_enabled)\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    <DED>if cache_enabled is None:\n        <IND>cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    <DED>cache_enabled_arg = 1 if cache_enabled else 0\n    if force_text:\n        <IND>encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n    <DED>elif isinstance(data, int):\n        <IND>params = dict(int=data, cache_enabled=cache_enabled_arg)\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dprog-philippe-docourt/django-qr-code",
    "commit": "7b15bc823f42e5dad8067e511915466029882d46",
    "filename": "qr_code/qrcode/serve.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dprog-philippe-docourt-django-qr-code/qr_code/qrcode/serve.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qr_code/qrcode/serve.py:117:4 Incompatible variable type [9]: cache_enabled is declared to have type `Optional[bool]` but is used as type `Union[int, int]`.",
    "message": " cache_enabled is declared to have type `Optional[bool]` but is used as type `Union[int, int]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 117,
    "warning_line": "    cache_enabled = 1 if cache_enabled else 0",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    url_signature_enabled = 1 if url_signature_enabled else 0\n    if cache_enabled is None:\n        cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    cache_enabled = 1 if cache_enabled else 0\n    if force_text:\n        encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n    elif isinstance(data, int):\n        params = dict(int=data, cache_enabled=cache_enabled)\n    else:\n",
        "source_code_len": 554,
        "target_code": "        url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    if cache_enabled is None:\n        cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    cache_enabled_arg = 1 if cache_enabled else 0\n    if force_text:\n        encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n    elif isinstance(data, int):\n        params = dict(int=data, cache_enabled=cache_enabled_arg)\n    else:\n",
        "target_code_len": 504,
        "diff_format": "@@ -113,11 +113,10 @@\n         url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n-    url_signature_enabled = 1 if url_signature_enabled else 0\n     if cache_enabled is None:\n         cache_enabled = constants.DEFAULT_CACHE_ENABLED\n-    cache_enabled = 1 if cache_enabled else 0\n+    cache_enabled_arg = 1 if cache_enabled else 0\n     if force_text:\n         encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n-        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n+        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n     elif isinstance(data, int):\n-        params = dict(int=data, cache_enabled=cache_enabled)\n+        params = dict(int=data, cache_enabled=cache_enabled_arg)\n     else:\n",
        "source_code_with_indent": "        <IND>url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    <DED>url_signature_enabled = 1 if url_signature_enabled else 0\n    if cache_enabled is None:\n        <IND>cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    <DED>cache_enabled = 1 if cache_enabled else 0\n    if force_text:\n        <IND>encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n    <DED>elif isinstance(data, int):\n        <IND>params = dict(int=data, cache_enabled=cache_enabled)\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    <DED>if cache_enabled is None:\n        <IND>cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    <DED>cache_enabled_arg = 1 if cache_enabled else 0\n    if force_text:\n        <IND>encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n    <DED>elif isinstance(data, int):\n        <IND>params = dict(int=data, cache_enabled=cache_enabled_arg)\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dprog-philippe-docourt/django-qr-code",
    "commit": "7b15bc823f42e5dad8067e511915466029882d46",
    "filename": "qr_code/qrcode/serve.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dprog-philippe-docourt-django-qr-code/qr_code/qrcode/serve.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qr_code/qrcode/serve.py:143:26 Incompatible parameter type [6]: Expected `Union[bool, str]` for 2nd positional only parameter to call `dict.__setitem__` but got `int`.",
    "message": " Expected `Union[bool, str]` for 2nd positional only parameter to call `dict.__setitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 143,
    "warning_line": "        params['micro'] = 1",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    url_signature_enabled = 1 if url_signature_enabled else 0\n    if cache_enabled is None:\n        cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    cache_enabled = 1 if cache_enabled else 0\n    if force_text:\n        encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n    elif isinstance(data, int):\n        params = dict(int=data, cache_enabled=cache_enabled)\n    else:\n",
        "source_code_len": 554,
        "target_code": "        url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    if cache_enabled is None:\n        cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    cache_enabled_arg = 1 if cache_enabled else 0\n    if force_text:\n        encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n    elif isinstance(data, int):\n        params = dict(int=data, cache_enabled=cache_enabled_arg)\n    else:\n",
        "target_code_len": 504,
        "diff_format": "@@ -113,11 +113,10 @@\n         url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n-    url_signature_enabled = 1 if url_signature_enabled else 0\n     if cache_enabled is None:\n         cache_enabled = constants.DEFAULT_CACHE_ENABLED\n-    cache_enabled = 1 if cache_enabled else 0\n+    cache_enabled_arg = 1 if cache_enabled else 0\n     if force_text:\n         encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n-        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n+        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n     elif isinstance(data, int):\n-        params = dict(int=data, cache_enabled=cache_enabled)\n+        params = dict(int=data, cache_enabled=cache_enabled_arg)\n     else:\n",
        "source_code_with_indent": "        <IND>url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    <DED>url_signature_enabled = 1 if url_signature_enabled else 0\n    if cache_enabled is None:\n        <IND>cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    <DED>cache_enabled = 1 if cache_enabled else 0\n    if force_text:\n        <IND>encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n    <DED>elif isinstance(data, int):\n        <IND>params = dict(int=data, cache_enabled=cache_enabled)\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    <DED>if cache_enabled is None:\n        <IND>cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    <DED>cache_enabled_arg = 1 if cache_enabled else 0\n    if force_text:\n        <IND>encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n    <DED>elif isinstance(data, int):\n        <IND>params = dict(int=data, cache_enabled=cache_enabled_arg)\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        encoded_data = str(b64data, encoding='utf-8')\n        # encoded_data = f'{type(data).__name__}:{encoded_data}'\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled)\n    # Only add non-default values to the params dict\n",
        "source_code_len": 243,
        "target_code": "        encoded_data = str(b64data, encoding='utf-8')\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled_arg)\n    # Only add non-default values to the params dict\n",
        "target_code_len": 182,
        "diff_format": "@@ -128,4 +127,3 @@\n         encoded_data = str(b64data, encoding='utf-8')\n-        # encoded_data = f'{type(data).__name__}:{encoded_data}'\n-        params = dict(bytes=encoded_data, cache_enabled=cache_enabled)\n+        params = dict(bytes=encoded_data, cache_enabled=cache_enabled_arg)\n     # Only add non-default values to the params dict\n",
        "source_code_with_indent": "        <DED>encoded_data = str(b64data, encoding='utf-8')\n        # encoded_data = f'{type(data).__name__}:{encoded_data}'\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled)\n    # Only add non-default values to the params dict\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>encoded_data = str(b64data, encoding='utf-8')\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled_arg)\n    # Only add non-default values to the params dict\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dprog-philippe-docourt/django-qr-code",
    "commit": "7b15bc823f42e5dad8067e511915466029882d46",
    "filename": "qr_code/qrcode/serve.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dprog-philippe-docourt-django-qr-code/qr_code/qrcode/serve.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qr_code/qrcode/serve.py:145:24 Incompatible parameter type [6]: Expected `Union[bool, str]` for 2nd positional only parameter to call `dict.__setitem__` but got `int`.",
    "message": " Expected `Union[bool, str]` for 2nd positional only parameter to call `dict.__setitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 145,
    "warning_line": "        params['eci'] = 1",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    url_signature_enabled = 1 if url_signature_enabled else 0\n    if cache_enabled is None:\n        cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    cache_enabled = 1 if cache_enabled else 0\n    if force_text:\n        encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n    elif isinstance(data, int):\n        params = dict(int=data, cache_enabled=cache_enabled)\n    else:\n",
        "source_code_len": 554,
        "target_code": "        url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    if cache_enabled is None:\n        cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    cache_enabled_arg = 1 if cache_enabled else 0\n    if force_text:\n        encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n    elif isinstance(data, int):\n        params = dict(int=data, cache_enabled=cache_enabled_arg)\n    else:\n",
        "target_code_len": 504,
        "diff_format": "@@ -113,11 +113,10 @@\n         url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n-    url_signature_enabled = 1 if url_signature_enabled else 0\n     if cache_enabled is None:\n         cache_enabled = constants.DEFAULT_CACHE_ENABLED\n-    cache_enabled = 1 if cache_enabled else 0\n+    cache_enabled_arg = 1 if cache_enabled else 0\n     if force_text:\n         encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n-        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n+        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n     elif isinstance(data, int):\n-        params = dict(int=data, cache_enabled=cache_enabled)\n+        params = dict(int=data, cache_enabled=cache_enabled_arg)\n     else:\n",
        "source_code_with_indent": "        <IND>url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    <DED>url_signature_enabled = 1 if url_signature_enabled else 0\n    if cache_enabled is None:\n        <IND>cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    <DED>cache_enabled = 1 if cache_enabled else 0\n    if force_text:\n        <IND>encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n    <DED>elif isinstance(data, int):\n        <IND>params = dict(int=data, cache_enabled=cache_enabled)\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    <DED>if cache_enabled is None:\n        <IND>cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    <DED>cache_enabled_arg = 1 if cache_enabled else 0\n    if force_text:\n        <IND>encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n    <DED>elif isinstance(data, int):\n        <IND>params = dict(int=data, cache_enabled=cache_enabled_arg)\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        encoded_data = str(b64data, encoding='utf-8')\n        # encoded_data = f'{type(data).__name__}:{encoded_data}'\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled)\n    # Only add non-default values to the params dict\n",
        "source_code_len": 243,
        "target_code": "        encoded_data = str(b64data, encoding='utf-8')\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled_arg)\n    # Only add non-default values to the params dict\n",
        "target_code_len": 182,
        "diff_format": "@@ -128,4 +127,3 @@\n         encoded_data = str(b64data, encoding='utf-8')\n-        # encoded_data = f'{type(data).__name__}:{encoded_data}'\n-        params = dict(bytes=encoded_data, cache_enabled=cache_enabled)\n+        params = dict(bytes=encoded_data, cache_enabled=cache_enabled_arg)\n     # Only add non-default values to the params dict\n",
        "source_code_with_indent": "        <DED>encoded_data = str(b64data, encoding='utf-8')\n        # encoded_data = f'{type(data).__name__}:{encoded_data}'\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled)\n    # Only add non-default values to the params dict\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>encoded_data = str(b64data, encoding='utf-8')\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled_arg)\n    # Only add non-default values to the params dict\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "dprog-philippe-docourt/django-qr-code",
    "commit": "7b15bc823f42e5dad8067e511915466029882d46",
    "filename": "qr_code/qrcode/serve.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dprog-philippe-docourt-django-qr-code/qr_code/qrcode/serve.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qr_code/qrcode/serve.py:147:32 Incompatible parameter type [6]: Expected `Union[bool, str]` for 2nd positional only parameter to call `dict.__setitem__` but got `int`.",
    "message": " Expected `Union[bool, str]` for 2nd positional only parameter to call `dict.__setitem__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 147,
    "warning_line": "        params['boost_error'] = 1",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    url_signature_enabled = 1 if url_signature_enabled else 0\n    if cache_enabled is None:\n        cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    cache_enabled = 1 if cache_enabled else 0\n    if force_text:\n        encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n    elif isinstance(data, int):\n        params = dict(int=data, cache_enabled=cache_enabled)\n    else:\n",
        "source_code_len": 554,
        "target_code": "        url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    if cache_enabled is None:\n        cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    cache_enabled_arg = 1 if cache_enabled else 0\n    if force_text:\n        encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n    elif isinstance(data, int):\n        params = dict(int=data, cache_enabled=cache_enabled_arg)\n    else:\n",
        "target_code_len": 504,
        "diff_format": "@@ -113,11 +113,10 @@\n         url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n-    url_signature_enabled = 1 if url_signature_enabled else 0\n     if cache_enabled is None:\n         cache_enabled = constants.DEFAULT_CACHE_ENABLED\n-    cache_enabled = 1 if cache_enabled else 0\n+    cache_enabled_arg = 1 if cache_enabled else 0\n     if force_text:\n         encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n-        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n+        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n     elif isinstance(data, int):\n-        params = dict(int=data, cache_enabled=cache_enabled)\n+        params = dict(int=data, cache_enabled=cache_enabled_arg)\n     else:\n",
        "source_code_with_indent": "        <IND>url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    <DED>url_signature_enabled = 1 if url_signature_enabled else 0\n    if cache_enabled is None:\n        <IND>cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    <DED>cache_enabled = 1 if cache_enabled else 0\n    if force_text:\n        <IND>encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled)\n    <DED>elif isinstance(data, int):\n        <IND>params = dict(int=data, cache_enabled=cache_enabled)\n    <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>url_signature_enabled = constants.DEFAULT_URL_SIGNATURE_ENABLED\n    <DED>if cache_enabled is None:\n        <IND>cache_enabled = constants.DEFAULT_CACHE_ENABLED\n    <DED>cache_enabled_arg = 1 if cache_enabled else 0\n    if force_text:\n        <IND>encoded_data = str(base64.b64encode(force_str(data).encode('utf-8')), encoding='utf-8')\n        params = dict(text=encoded_data, cache_enabled=cache_enabled_arg)\n    <DED>elif isinstance(data, int):\n        <IND>params = dict(int=data, cache_enabled=cache_enabled_arg)\n    <DED>else:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        encoded_data = str(b64data, encoding='utf-8')\n        # encoded_data = f'{type(data).__name__}:{encoded_data}'\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled)\n    # Only add non-default values to the params dict\n",
        "source_code_len": 243,
        "target_code": "        encoded_data = str(b64data, encoding='utf-8')\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled_arg)\n    # Only add non-default values to the params dict\n",
        "target_code_len": 182,
        "diff_format": "@@ -128,4 +127,3 @@\n         encoded_data = str(b64data, encoding='utf-8')\n-        # encoded_data = f'{type(data).__name__}:{encoded_data}'\n-        params = dict(bytes=encoded_data, cache_enabled=cache_enabled)\n+        params = dict(bytes=encoded_data, cache_enabled=cache_enabled_arg)\n     # Only add non-default values to the params dict\n",
        "source_code_with_indent": "        <DED>encoded_data = str(b64data, encoding='utf-8')\n        # encoded_data = f'{type(data).__name__}:{encoded_data}'\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled)\n    # Only add non-default values to the params dict\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>encoded_data = str(b64data, encoding='utf-8')\n        params = dict(bytes=encoded_data, cache_enabled=cache_enabled_arg)\n    # Only add non-default values to the params dict\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]