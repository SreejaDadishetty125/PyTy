[
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "core/controllers/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/core/controllers/base.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/controllers/base.py:153:4 Incompatible attribute type [8]: Attribute `URL_PATH_ARGS_SCHEMAS` declared in class `BaseHandler` has type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " Attribute `URL_PATH_ARGS_SCHEMAS` declared in class `BaseHandler` has type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 153,
    "warning_line": "    URL_PATH_ARGS_SCHEMAS = None # type: Dict[Text, Any]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import backports.functools_lru_cache\nfrom typing import Any # pylint: disable=unused-import\nfrom typing import Dict # pylint: disable=unused-import\nfrom typing import Text # pylint: disable=unused-import\nimport webapp2\n\n",
        "source_code_len": 220,
        "target_code": "import backports.functools_lru_cache\nimport webapp2\n\nfrom typing import Any, Dict, Optional # isort: skip\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -39,6 +39,5 @@\n import backports.functools_lru_cache\n-from typing import Any # pylint: disable=unused-import\n-from typing import Dict # pylint: disable=unused-import\n-from typing import Text # pylint: disable=unused-import\n import webapp2\n+\n+from typing import Any, Dict, Optional # isort: skip\n \n",
        "source_code_with_indent": "import backports.functools_lru_cache\nfrom typing import Any # pylint: disable=unused-import\nfrom typing import Dict # pylint: disable=unused-import\nfrom typing import Text # pylint: disable=unused-import\nimport webapp2\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import backports.functools_lru_cache\nimport webapp2\n\nfrom typing import Any, Dict, Optional # isort: skip\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    URL_PATH_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n    HANDLER_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n\n",
        "source_code_len": 115,
        "target_code": "\n    # Using Dict[str, Any] here because the following schema can have a\n    # recursive structure and currently mypy doesn't support recursive type\n    # currently. See: https://github.com/python/mypy/issues/731\n    URL_PATH_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n    # Using Dict[str, Any] here because the following schema can have a\n    # recursive structure and currently mypy doesn't support recursive type\n    # currently. See: https://github.com/python/mypy/issues/731\n    HANDLER_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n\n",
        "target_code_len": 543,
        "diff_format": "@@ -152,4 +151,10 @@\n \n-    URL_PATH_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n-    HANDLER_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n+    # Using Dict[str, Any] here because the following schema can have a\n+    # recursive structure and currently mypy doesn't support recursive type\n+    # currently. See: https://github.com/python/mypy/issues/731\n+    URL_PATH_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n+    # Using Dict[str, Any] here because the following schema can have a\n+    # recursive structure and currently mypy doesn't support recursive type\n+    # currently. See: https://github.com/python/mypy/issues/731\n+    HANDLER_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n \n",
        "source_code_with_indent": "\n    URL_PATH_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n    HANDLER_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # Using Dict[str, Any] here because the following schema can have a\n    # recursive structure and currently mypy doesn't support recursive type\n    # currently. See: https://github.com/python/mypy/issues/731\n    URL_PATH_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n    # Using Dict[str, Any] here because the following schema can have a\n    # recursive structure and currently mypy doesn't support recursive type\n    # currently. See: https://github.com/python/mypy/issues/731\n    HANDLER_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "core/controllers/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/core/controllers/base.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/controllers/base.py:154:4 Incompatible attribute type [8]: Attribute `HANDLER_ARGS_SCHEMAS` declared in class `BaseHandler` has type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " Attribute `HANDLER_ARGS_SCHEMAS` declared in class `BaseHandler` has type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 154,
    "warning_line": "    HANDLER_ARGS_SCHEMAS = None # type: Dict[Text, Any]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "import backports.functools_lru_cache\nfrom typing import Any # pylint: disable=unused-import\nfrom typing import Dict # pylint: disable=unused-import\nfrom typing import Text # pylint: disable=unused-import\nimport webapp2\n\n",
        "source_code_len": 220,
        "target_code": "import backports.functools_lru_cache\nimport webapp2\n\nfrom typing import Any, Dict, Optional # isort: skip\n\n",
        "target_code_len": 107,
        "diff_format": "@@ -39,6 +39,5 @@\n import backports.functools_lru_cache\n-from typing import Any # pylint: disable=unused-import\n-from typing import Dict # pylint: disable=unused-import\n-from typing import Text # pylint: disable=unused-import\n import webapp2\n+\n+from typing import Any, Dict, Optional # isort: skip\n \n",
        "source_code_with_indent": "import backports.functools_lru_cache\nfrom typing import Any # pylint: disable=unused-import\nfrom typing import Dict # pylint: disable=unused-import\nfrom typing import Text # pylint: disable=unused-import\nimport webapp2\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "import backports.functools_lru_cache\nimport webapp2\n\nfrom typing import Any, Dict, Optional # isort: skip\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    URL_PATH_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n    HANDLER_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n\n",
        "source_code_len": 115,
        "target_code": "\n    # Using Dict[str, Any] here because the following schema can have a\n    # recursive structure and currently mypy doesn't support recursive type\n    # currently. See: https://github.com/python/mypy/issues/731\n    URL_PATH_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n    # Using Dict[str, Any] here because the following schema can have a\n    # recursive structure and currently mypy doesn't support recursive type\n    # currently. See: https://github.com/python/mypy/issues/731\n    HANDLER_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n\n",
        "target_code_len": 543,
        "diff_format": "@@ -152,4 +151,10 @@\n \n-    URL_PATH_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n-    HANDLER_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n+    # Using Dict[str, Any] here because the following schema can have a\n+    # recursive structure and currently mypy doesn't support recursive type\n+    # currently. See: https://github.com/python/mypy/issues/731\n+    URL_PATH_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n+    # Using Dict[str, Any] here because the following schema can have a\n+    # recursive structure and currently mypy doesn't support recursive type\n+    # currently. See: https://github.com/python/mypy/issues/731\n+    HANDLER_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n \n",
        "source_code_with_indent": "\n    URL_PATH_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n    HANDLER_ARGS_SCHEMAS = None # type: Dict[Text, Any]\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    # Using Dict[str, Any] here because the following schema can have a\n    # recursive structure and currently mypy doesn't support recursive type\n    # currently. See: https://github.com/python/mypy/issues/731\n    URL_PATH_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n    # Using Dict[str, Any] here because the following schema can have a\n    # recursive structure and currently mypy doesn't support recursive type\n    # currently. See: https://github.com/python/mypy/issues/731\n    HANDLER_ARGS_SCHEMAS: Optional[Dict[str, Any]] = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "core/controllers/domain_objects_validator_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/core/controllers/domain_objects_validator_test.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "core/controllers/domain_objects_validator_test.py:92:16 Incompatible parameter type [6]: Expected `Dict[str, typing.Any]` for 1st positional only parameter to call `domain_objects_validator.validate_new_config_property_values` but got `Dict[int, int]`.",
    "message": " Expected `Dict[str, typing.Any]` for 1st positional only parameter to call `domain_objects_validator.validate_new_config_property_values` but got `Dict[int, int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 92,
    "warning_line": "                config_properties)"
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "jobs/transforms/blog_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/blog_validation.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/blog_validation.py:50:4 Inconsistent override [14]: `jobs.transforms.blog_validation.ValidateBlogPostModelDomainObjectsInstances._get_model_domain_object_instance` overrides method defined in `base_validation.ValidateModelDomainObjectInstances` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "message": " `jobs.transforms.blog_validation.ValidateBlogPostModelDomainObjectsInstances._get_model_domain_object_instance` overrides method defined in `base_validation.ValidateModelDomainObjectInstances` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 50,
    "warning_line": "    def _get_model_domain_object_instance(self, blog_post_model):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    def _get_model_domain_object_instance(self, blog_post_model):\n        # type: (Any) -> blog_domain.BlogPost\n        \"\"\"Returns blog post domain object instance created from the model.\n",
        "source_code_len": 188,
        "target_code": "    def _get_model_domain_object_instance(self, blog_post_model):\n        \"\"\"Returns blog post domain object instance created from the model.\n",
        "target_code_len": 142,
        "diff_format": "@@ -50,3 +48,2 @@\n     def _get_model_domain_object_instance(self, blog_post_model):\n-        # type: (Any) -> blog_domain.BlogPost\n         \"\"\"Returns blog post domain object instance created from the model.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    def _get_model_domain_object_instance(self, blog_post_model):\n        # type: (Any) -> blog_domain.BlogPost\n        <IND>",
        "target_code_with_indent": "    def _get_model_domain_object_instance(self, blog_post_model):\n        <IND>"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "jobs/transforms/blog_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/blog_validation.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/blog_validation.py:121:12 Unsupported operand [58]: `>` is not supported for operand types `datetime.timedelta` and `datetime.datetime`.",
    "message": " `>` is not supported for operand types `datetime.timedelta` and `datetime.datetime`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 121,
    "warning_line": "        if (model.published_on - base_validation.MAX_CLOCK_SKEW_SECS) > (",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    def process(self, input_model):\n        # type: (Any) -> Any\n        \"\"\"Function that validates that the published timestamp of the blog post\n",
        "source_code_len": 146,
        "target_code": "    def process(self, input_model):\n        \"\"\"Function that validates that the published timestamp of the blog post\n",
        "target_code_len": 117,
        "diff_format": "@@ -96,3 +92,2 @@\n     def process(self, input_model):\n-        # type: (Any) -> Any\n         \"\"\"Function that validates that the published timestamp of the blog post\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    def process(self, input_model):\n        # type: (Any) -> Any\n        <IND>",
        "target_code_with_indent": "    def process(self, input_model):\n        <IND>"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "jobs/transforms/blog_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/blog_validation.py",
    "file_hunks_size": 15,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/blog_validation.py:137:4 Inconsistent override [14]: `jobs.transforms.blog_validation.ValidateBlogSummaryModelDomainObjectsInstances._get_model_domain_object_instance` overrides method defined in `base_validation.ValidateModelDomainObjectInstances` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "message": " `jobs.transforms.blog_validation.ValidateBlogSummaryModelDomainObjectsInstances._get_model_domain_object_instance` overrides method defined in `base_validation.ValidateModelDomainObjectInstances` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 137,
    "warning_line": "    def _get_model_domain_object_instance(self, summary_model):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    def _get_model_domain_object_instance(self, summary_model):\n        # type: (Any) -> blog_domain.BlogPostSummary\n        \"\"\"Returns blog post domain object instance created from the model.\n",
        "source_code_len": 193,
        "target_code": "    def _get_model_domain_object_instance(self, summary_model):\n        \"\"\"Returns blog post domain object instance created from the model.\n",
        "target_code_len": 140,
        "diff_format": "@@ -137,3 +132,2 @@\n     def _get_model_domain_object_instance(self, summary_model):\n-        # type: (Any) -> blog_domain.BlogPostSummary\n         \"\"\"Returns blog post domain object instance created from the model.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    def _get_model_domain_object_instance(self, summary_model):\n        # type: (Any) -> blog_domain.BlogPostSummary\n        <IND>",
        "target_code_with_indent": "    def _get_model_domain_object_instance(self, summary_model):\n        <IND>"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "jobs/transforms/skill_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/skill_validation.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/skill_validation.py:42:4 Inconsistent override [14]: `jobs.transforms.skill_validation.ValidateSkillSnapshotMetadataModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "message": " `jobs.transforms.skill_validation.ValidateSkillSnapshotMetadataModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 42,
    "warning_line": "    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[skill_domain.SkillChange]\n        \"\"\"Returns a change domain class.\n",
        "source_code_len": 186,
        "target_code": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        \"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            skill_domain.SkillChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        return skill_domain.SkillChange\n\n\n@validation_decorators.AuditsExisting(skill_models.SkillCommitLogEntryModel)\nclass ValidateSkillCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    \"\"\"Overrides _get_change_domain_class for SkillCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        \"\"\"Returns a change domain class.\n",
        "target_code_len": 771,
        "diff_format": "@@ -41,4 +39,21 @@\n \n-    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n-        # type: (Any) -> Type[skill_domain.SkillChange]\n+    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n+        \"\"\"Returns a change domain class.\n+\n+        Args:\n+            unused_input_model: datastore_services.Model. Entity to validate.\n+\n+        Returns:\n+            skill_domain.SkillChange. A domain object class for the\n+            changes made by commit commands of the model.\n+        \"\"\"\n+        return skill_domain.SkillChange\n+\n+\n+@validation_decorators.AuditsExisting(skill_models.SkillCommitLogEntryModel)\n+class ValidateSkillCommitLogEntryModel(\n+        base_validation.BaseValidateCommitCmdsSchema):\n+    \"\"\"Overrides _get_change_domain_class for SkillCommitLogEntryModel.\"\"\"\n+\n+    def _get_change_domain_class(self, input_model):\n         \"\"\"Returns a change domain class.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[skill_domain.SkillChange]\n        <IND>",
        "target_code_with_indent": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        <IND>\"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            skill_domain.SkillChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        return skill_domain.SkillChange\n\n\n<DED><DED>@validation_decorators.AuditsExisting(skill_models.SkillCommitLogEntryModel)\nclass ValidateSkillCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    <IND>\"\"\"Overrides _get_change_domain_class for SkillCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        <IND>"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "jobs/transforms/skill_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/skill_validation.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/skill_validation.py:61:4 Inconsistent override [14]: `jobs.transforms.skill_validation.ValidateSkillCommitLogEntryModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "message": " `jobs.transforms.skill_validation.ValidateSkillCommitLogEntryModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 61,
    "warning_line": "    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[skill_domain.SkillChange]\n        \"\"\"Returns a change domain class.\n",
        "source_code_len": 186,
        "target_code": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        \"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            skill_domain.SkillChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        return skill_domain.SkillChange\n\n\n@validation_decorators.AuditsExisting(skill_models.SkillCommitLogEntryModel)\nclass ValidateSkillCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    \"\"\"Overrides _get_change_domain_class for SkillCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        \"\"\"Returns a change domain class.\n",
        "target_code_len": 771,
        "diff_format": "@@ -41,4 +39,21 @@\n \n-    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n-        # type: (Any) -> Type[skill_domain.SkillChange]\n+    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n+        \"\"\"Returns a change domain class.\n+\n+        Args:\n+            unused_input_model: datastore_services.Model. Entity to validate.\n+\n+        Returns:\n+            skill_domain.SkillChange. A domain object class for the\n+            changes made by commit commands of the model.\n+        \"\"\"\n+        return skill_domain.SkillChange\n+\n+\n+@validation_decorators.AuditsExisting(skill_models.SkillCommitLogEntryModel)\n+class ValidateSkillCommitLogEntryModel(\n+        base_validation.BaseValidateCommitCmdsSchema):\n+    \"\"\"Overrides _get_change_domain_class for SkillCommitLogEntryModel.\"\"\"\n+\n+    def _get_change_domain_class(self, input_model):\n         \"\"\"Returns a change domain class.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[skill_domain.SkillChange]\n        <IND>",
        "target_code_with_indent": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        <IND>\"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            skill_domain.SkillChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        return skill_domain.SkillChange\n\n\n<DED><DED>@validation_decorators.AuditsExisting(skill_models.SkillCommitLogEntryModel)\nclass ValidateSkillCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    <IND>\"\"\"Overrides _get_change_domain_class for SkillCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return skill_domain.SkillChange\n\n\n@validation_decorators.AuditsExisting(skill_models.SkillCommitLogEntryModel)  # type: ignore[no-untyped-call]\nclass ValidateSkillCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    \"\"\"Overrides _get_change_domain_class for SkillCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Optional[Type[skill_domain.SkillChange]]\n        \"\"\"Returns a change domain class.\n\n        Args:\n            input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            skill_domain.SkillChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        model = job_utils.clone_model(input_model)  # type: ignore[no-untyped-call]\n\n",
        "source_code_len": 857,
        "target_code": "        \"\"\"\n        model = job_utils.clone_model(input_model)\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -52,22 +67,3 @@\n         \"\"\"\n-        return skill_domain.SkillChange\n-\n-\n-@validation_decorators.AuditsExisting(skill_models.SkillCommitLogEntryModel)  # type: ignore[no-untyped-call]\n-class ValidateSkillCommitLogEntryModel(\n-        base_validation.BaseValidateCommitCmdsSchema):\n-    \"\"\"Overrides _get_change_domain_class for SkillCommitLogEntryModel.\"\"\"\n-\n-    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n-        # type: (Any) -> Optional[Type[skill_domain.SkillChange]]\n-        \"\"\"Returns a change domain class.\n-\n-        Args:\n-            input_model: datastore_services.Model. Entity to validate.\n-\n-        Returns:\n-            skill_domain.SkillChange. A domain object class for the\n-            changes made by commit commands of the model.\n-        \"\"\"\n-        model = job_utils.clone_model(input_model)  # type: ignore[no-untyped-call]\n+        model = job_utils.clone_model(input_model)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return skill_domain.SkillChange\n\n\n<DED><DED>@validation_decorators.AuditsExisting(skill_models.SkillCommitLogEntryModel)  # type: ignore[no-untyped-call]\nclass ValidateSkillCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    <IND>\"\"\"Overrides _get_change_domain_class for SkillCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Optional[Type[skill_domain.SkillChange]]\n        <IND>\"\"\"Returns a change domain class.\n\n        Args:\n            input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            skill_domain.SkillChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        model = job_utils.clone_model(input_model)  # type: ignore[no-untyped-call]\n\n",
        "target_code_with_indent": "\n        model = job_utils.clone_model(input_model)\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "jobs/transforms/story_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/story_validation.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/story_validation.py:42:4 Inconsistent override [14]: `jobs.transforms.story_validation.ValidateStorySnapshotMetadataModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "message": " `jobs.transforms.story_validation.ValidateStorySnapshotMetadataModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 42,
    "warning_line": "    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[story_domain.StoryChange]\n        \"\"\"Returns a change domain class.\n",
        "source_code_len": 186,
        "target_code": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        \"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            story_domain.StoryChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        return story_domain.StoryChange\n\n\n@validation_decorators.AuditsExisting(story_models.StoryCommitLogEntryModel)\nclass ValidateStoryCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    \"\"\"Overrides _get_change_domain_class for StoryCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        \"\"\"Returns a change domain class.\n",
        "target_code_len": 771,
        "diff_format": "@@ -41,4 +39,21 @@\n \n-    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n-        # type: (Any) -> Type[story_domain.StoryChange]\n+    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n+        \"\"\"Returns a change domain class.\n+\n+        Args:\n+            unused_input_model: datastore_services.Model. Entity to validate.\n+\n+        Returns:\n+            story_domain.StoryChange. A domain object class for the\n+            changes made by commit commands of the model.\n+        \"\"\"\n+        return story_domain.StoryChange\n+\n+\n+@validation_decorators.AuditsExisting(story_models.StoryCommitLogEntryModel)\n+class ValidateStoryCommitLogEntryModel(\n+        base_validation.BaseValidateCommitCmdsSchema):\n+    \"\"\"Overrides _get_change_domain_class for StoryCommitLogEntryModel.\"\"\"\n+\n+    def _get_change_domain_class(self, input_model):\n         \"\"\"Returns a change domain class.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[story_domain.StoryChange]\n        <IND>",
        "target_code_with_indent": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        <IND>\"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            story_domain.StoryChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        return story_domain.StoryChange\n\n\n<DED><DED>@validation_decorators.AuditsExisting(story_models.StoryCommitLogEntryModel)\nclass ValidateStoryCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    <IND>\"\"\"Overrides _get_change_domain_class for StoryCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        <IND>"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "jobs/transforms/story_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/story_validation.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/story_validation.py:61:4 Inconsistent override [14]: `jobs.transforms.story_validation.ValidateStoryCommitLogEntryModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "message": " `jobs.transforms.story_validation.ValidateStoryCommitLogEntryModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 61,
    "warning_line": "    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[story_domain.StoryChange]\n        \"\"\"Returns a change domain class.\n",
        "source_code_len": 186,
        "target_code": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        \"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            story_domain.StoryChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        return story_domain.StoryChange\n\n\n@validation_decorators.AuditsExisting(story_models.StoryCommitLogEntryModel)\nclass ValidateStoryCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    \"\"\"Overrides _get_change_domain_class for StoryCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        \"\"\"Returns a change domain class.\n",
        "target_code_len": 771,
        "diff_format": "@@ -41,4 +39,21 @@\n \n-    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n-        # type: (Any) -> Type[story_domain.StoryChange]\n+    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n+        \"\"\"Returns a change domain class.\n+\n+        Args:\n+            unused_input_model: datastore_services.Model. Entity to validate.\n+\n+        Returns:\n+            story_domain.StoryChange. A domain object class for the\n+            changes made by commit commands of the model.\n+        \"\"\"\n+        return story_domain.StoryChange\n+\n+\n+@validation_decorators.AuditsExisting(story_models.StoryCommitLogEntryModel)\n+class ValidateStoryCommitLogEntryModel(\n+        base_validation.BaseValidateCommitCmdsSchema):\n+    \"\"\"Overrides _get_change_domain_class for StoryCommitLogEntryModel.\"\"\"\n+\n+    def _get_change_domain_class(self, input_model):\n         \"\"\"Returns a change domain class.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[story_domain.StoryChange]\n        <IND>",
        "target_code_with_indent": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        <IND>\"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            story_domain.StoryChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        return story_domain.StoryChange\n\n\n<DED><DED>@validation_decorators.AuditsExisting(story_models.StoryCommitLogEntryModel)\nclass ValidateStoryCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    <IND>\"\"\"Overrides _get_change_domain_class for StoryCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return story_domain.StoryChange\n\n\n@validation_decorators.AuditsExisting(story_models.StoryCommitLogEntryModel) # type: ignore[no-untyped-call]\nclass ValidateStoryCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    \"\"\"Overrides _get_change_domain_class for StoryCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Optional[Type[story_domain.StoryChange]]\n        \"\"\"Returns a change domain class.\n\n        Args:\n            input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            story_domain.StoryChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        model = job_utils.clone_model(input_model) # type: ignore[no-untyped-call]\n\n",
        "source_code_len": 855,
        "target_code": "        \"\"\"\n        model = job_utils.clone_model(input_model)\n\n",
        "target_code_len": 64,
        "diff_format": "@@ -52,22 +67,3 @@\n         \"\"\"\n-        return story_domain.StoryChange\n-\n-\n-@validation_decorators.AuditsExisting(story_models.StoryCommitLogEntryModel) # type: ignore[no-untyped-call]\n-class ValidateStoryCommitLogEntryModel(\n-        base_validation.BaseValidateCommitCmdsSchema):\n-    \"\"\"Overrides _get_change_domain_class for StoryCommitLogEntryModel.\"\"\"\n-\n-    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n-        # type: (Any) -> Optional[Type[story_domain.StoryChange]]\n-        \"\"\"Returns a change domain class.\n-\n-        Args:\n-            input_model: datastore_services.Model. Entity to validate.\n-\n-        Returns:\n-            story_domain.StoryChange. A domain object class for the\n-            changes made by commit commands of the model.\n-        \"\"\"\n-        model = job_utils.clone_model(input_model) # type: ignore[no-untyped-call]\n+        model = job_utils.clone_model(input_model)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return story_domain.StoryChange\n\n\n<DED><DED>@validation_decorators.AuditsExisting(story_models.StoryCommitLogEntryModel) # type: ignore[no-untyped-call]\nclass ValidateStoryCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    <IND>\"\"\"Overrides _get_change_domain_class for StoryCommitLogEntryModel.\"\"\"\n\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Optional[Type[story_domain.StoryChange]]\n        <IND>\"\"\"Returns a change domain class.\n\n        Args:\n            input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            story_domain.StoryChange. A domain object class for the\n            changes made by commit commands of the model.\n        \"\"\"\n        model = job_utils.clone_model(input_model) # type: ignore[no-untyped-call]\n\n",
        "target_code_with_indent": "\n        model = job_utils.clone_model(input_model)\n\n"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "jobs/transforms/subtopic_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/subtopic_validation.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/subtopic_validation.py:44:4 Inconsistent override [14]: `jobs.transforms.subtopic_validation.ValidateSubtopicPageSnapshotMetadataModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "message": " `jobs.transforms.subtopic_validation.ValidateSubtopicPageSnapshotMetadataModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 44,
    "warning_line": "    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[subtopic_page_domain.SubtopicPageChange]\n        \"\"\"Returns a change domain class.\n",
        "source_code_len": 201,
        "target_code": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        \"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            subtopic_page_domain.SubtopicPageChange. A domain object class for\n            the changes made by commit commands of the model.\n        \"\"\"\n        return subtopic_page_domain.SubtopicPageChange\n\n\n@validation_decorators.AuditsExisting(\n    subtopic_models.SubtopicPageCommitLogEntryModel)\nclass ValidateSubtopicPageCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    \"\"\"Overrides _get_change_domain_class for SubtopicPageCommitLogEntryModel.\n    \"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        \"\"\"Returns a change domain class.\n",
        "target_code_len": 835,
        "diff_format": "@@ -43,4 +41,23 @@\n \n-    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n-        # type: (Any) -> Type[subtopic_page_domain.SubtopicPageChange]\n+    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n+        \"\"\"Returns a change domain class.\n+\n+        Args:\n+            unused_input_model: datastore_services.Model. Entity to validate.\n+\n+        Returns:\n+            subtopic_page_domain.SubtopicPageChange. A domain object class for\n+            the changes made by commit commands of the model.\n+        \"\"\"\n+        return subtopic_page_domain.SubtopicPageChange\n+\n+\n+@validation_decorators.AuditsExisting(\n+    subtopic_models.SubtopicPageCommitLogEntryModel)\n+class ValidateSubtopicPageCommitLogEntryModel(\n+        base_validation.BaseValidateCommitCmdsSchema):\n+    \"\"\"Overrides _get_change_domain_class for SubtopicPageCommitLogEntryModel.\n+    \"\"\"\n+\n+    def _get_change_domain_class(self, input_model):\n         \"\"\"Returns a change domain class.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[subtopic_page_domain.SubtopicPageChange]\n        <IND>",
        "target_code_with_indent": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        <IND>\"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            subtopic_page_domain.SubtopicPageChange. A domain object class for\n            the changes made by commit commands of the model.\n        \"\"\"\n        return subtopic_page_domain.SubtopicPageChange\n\n\n<DED><DED>@validation_decorators.AuditsExisting(\n    subtopic_models.SubtopicPageCommitLogEntryModel)\nclass ValidateSubtopicPageCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    <IND>\"\"\"Overrides _get_change_domain_class for SubtopicPageCommitLogEntryModel.\n    \"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        <IND>"
      }
    ]
  },
  {
    "project": "oppia/oppia",
    "commit": "63d453f703406e32f47b3706ae900bfc346a67ae",
    "filename": "jobs/transforms/subtopic_validation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/oppia-oppia/jobs/transforms/subtopic_validation.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "jobs/transforms/subtopic_validation.py:65:4 Inconsistent override [14]: `jobs.transforms.subtopic_validation.ValidateSubtopicPageCommitLogEntryModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "message": " `jobs.transforms.subtopic_validation.ValidateSubtopicPageCommitLogEntryModel._get_change_domain_class` overrides method defined in `base_validation.BaseValidateCommitCmdsSchema` inconsistently. Could not find parameter `unused_item` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 65,
    "warning_line": "    def _get_change_domain_class(self, input_model):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[subtopic_page_domain.SubtopicPageChange]\n        \"\"\"Returns a change domain class.\n",
        "source_code_len": 201,
        "target_code": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        \"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            subtopic_page_domain.SubtopicPageChange. A domain object class for\n            the changes made by commit commands of the model.\n        \"\"\"\n        return subtopic_page_domain.SubtopicPageChange\n\n\n@validation_decorators.AuditsExisting(\n    subtopic_models.SubtopicPageCommitLogEntryModel)\nclass ValidateSubtopicPageCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    \"\"\"Overrides _get_change_domain_class for SubtopicPageCommitLogEntryModel.\n    \"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        \"\"\"Returns a change domain class.\n",
        "target_code_len": 835,
        "diff_format": "@@ -43,4 +41,23 @@\n \n-    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n-        # type: (Any) -> Type[subtopic_page_domain.SubtopicPageChange]\n+    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n+        \"\"\"Returns a change domain class.\n+\n+        Args:\n+            unused_input_model: datastore_services.Model. Entity to validate.\n+\n+        Returns:\n+            subtopic_page_domain.SubtopicPageChange. A domain object class for\n+            the changes made by commit commands of the model.\n+        \"\"\"\n+        return subtopic_page_domain.SubtopicPageChange\n+\n+\n+@validation_decorators.AuditsExisting(\n+    subtopic_models.SubtopicPageCommitLogEntryModel)\n+class ValidateSubtopicPageCommitLogEntryModel(\n+        base_validation.BaseValidateCommitCmdsSchema):\n+    \"\"\"Overrides _get_change_domain_class for SubtopicPageCommitLogEntryModel.\n+    \"\"\"\n+\n+    def _get_change_domain_class(self, input_model):\n         \"\"\"Returns a change domain class.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def _get_change_domain_class(self, input_model): # pylint: disable=unused-argument\n        # type: (Any) -> Type[subtopic_page_domain.SubtopicPageChange]\n        <IND>",
        "target_code_with_indent": "\n    def _get_change_domain_class(self, unused_input_model): # pylint: disable=unused-argument\n        <IND>\"\"\"Returns a change domain class.\n\n        Args:\n            unused_input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            subtopic_page_domain.SubtopicPageChange. A domain object class for\n            the changes made by commit commands of the model.\n        \"\"\"\n        return subtopic_page_domain.SubtopicPageChange\n\n\n<DED><DED>@validation_decorators.AuditsExisting(\n    subtopic_models.SubtopicPageCommitLogEntryModel)\nclass ValidateSubtopicPageCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    <IND>\"\"\"Overrides _get_change_domain_class for SubtopicPageCommitLogEntryModel.\n    \"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        return subtopic_page_domain.SubtopicPageChange\n\n\n@validation_decorators.AuditsExisting( # type: ignore[no-untyped-call]\n    subtopic_models.SubtopicPageCommitLogEntryModel)\nclass ValidateSubtopicPageCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    \"\"\"Overrides _get_change_domain_class for SubtopicPageCommitLogEntryModel.\n    \"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        # type: (Any) -> Optional[Type[subtopic_page_domain.SubtopicPageChange]]\n        \"\"\"Returns a change domain class.\n\n        Args:\n            input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            subtopic_page_domain.SubtopicPageChange. A domain object class for\n            the changes made by commit commands of the model.\n        \"\"\"\n        model = job_utils.clone_model(input_model) # type: ignore[no-untyped-call]\n        if model.id.startswith('subtopicpage'):\n",
        "source_code_len": 947,
        "target_code": "        \"\"\"\n        model = job_utils.clone_model(input_model)\n        if model.id.startswith('subtopicpage'):\n",
        "target_code_len": 111,
        "diff_format": "@@ -54,24 +71,3 @@\n         \"\"\"\n-        return subtopic_page_domain.SubtopicPageChange\n-\n-\n-@validation_decorators.AuditsExisting( # type: ignore[no-untyped-call]\n-    subtopic_models.SubtopicPageCommitLogEntryModel)\n-class ValidateSubtopicPageCommitLogEntryModel(\n-        base_validation.BaseValidateCommitCmdsSchema):\n-    \"\"\"Overrides _get_change_domain_class for SubtopicPageCommitLogEntryModel.\n-    \"\"\"\n-\n-    def _get_change_domain_class(self, input_model):\n-        # type: (Any) -> Optional[Type[subtopic_page_domain.SubtopicPageChange]]\n-        \"\"\"Returns a change domain class.\n-\n-        Args:\n-            input_model: datastore_services.Model. Entity to validate.\n-\n-        Returns:\n-            subtopic_page_domain.SubtopicPageChange. A domain object class for\n-            the changes made by commit commands of the model.\n-        \"\"\"\n-        model = job_utils.clone_model(input_model) # type: ignore[no-untyped-call]\n+        model = job_utils.clone_model(input_model)\n         if model.id.startswith('subtopicpage'):\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        return subtopic_page_domain.SubtopicPageChange\n\n\n<DED><DED>@validation_decorators.AuditsExisting( # type: ignore[no-untyped-call]\n    subtopic_models.SubtopicPageCommitLogEntryModel)\nclass ValidateSubtopicPageCommitLogEntryModel(\n        base_validation.BaseValidateCommitCmdsSchema):\n    <IND>\"\"\"Overrides _get_change_domain_class for SubtopicPageCommitLogEntryModel.\n    \"\"\"\n\n    def _get_change_domain_class(self, input_model):\n        # type: (Any) -> Optional[Type[subtopic_page_domain.SubtopicPageChange]]\n        <IND>\"\"\"Returns a change domain class.\n\n        Args:\n            input_model: datastore_services.Model. Entity to validate.\n\n        Returns:\n            subtopic_page_domain.SubtopicPageChange. A domain object class for\n            the changes made by commit commands of the model.\n        \"\"\"\n        model = job_utils.clone_model(input_model) # type: ignore[no-untyped-call]\n        if model.id.startswith('subtopicpage'):\n",
        "target_code_with_indent": "\n        model = job_utils.clone_model(input_model)\n        if model.id.startswith('subtopicpage'):\n"
      }
    ]
  }
]