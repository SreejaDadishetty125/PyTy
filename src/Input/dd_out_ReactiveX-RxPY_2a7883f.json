[
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:156:10 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 156,
    "warning_line": "def empty(scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef empty(scheduler: typing.Scheduler = None) -> Observable:\n    \"\"\"Returns an empty observable sequence.\n",
        "source_code_len": 107,
        "target_code": "\ndef empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    \"\"\"Returns an empty observable sequence.\n",
        "target_code_len": 117,
        "diff_format": "@@ -155,3 +160,3 @@\n \n-def empty(scheduler: typing.Scheduler = None) -> Observable:\n+def empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     \"\"\"Returns an empty observable sequence.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def empty(scheduler: typing.Scheduler = None) -> Observable:\n    <IND>",
        "target_code_with_indent": "\n<DED>def empty(scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:191:38 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 191,
    "warning_line": "def from_callable(supplier: Callable, scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef from_callable(supplier: Callable, scheduler: typing.Scheduler = None) -> Observable:\n    \"\"\"Returns an observable sequence that contains a single element\n",
        "source_code_len": 159,
        "target_code": "\ndef from_callable(supplier: Callable[[], Any], scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    \"\"\"Returns an observable sequence that contains a single element\n",
        "target_code_len": 178,
        "diff_format": "@@ -190,3 +195,3 @@\n \n-def from_callable(supplier: Callable, scheduler: typing.Scheduler = None) -> Observable:\n+def from_callable(supplier: Callable[[], Any], scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     \"\"\"Returns an observable sequence that contains a single element\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def from_callable(supplier: Callable, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>",
        "target_code_with_indent": "\n<DED>def from_callable(supplier: Callable[[], Any], scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:212:34 Incompatible variable type [9]: mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "message": " mapper is declared to have type `typing.Callable[[typing.Any], typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 212,
    "warning_line": "def from_callback(func: Callable, mapper: typing.Mapper = None) -> Callable[[], Observable]:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:247:38 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 247,
    "warning_line": "def from_iterable(iterable: Iterable, scheduler: typing.Scheduler = None) -> Observable:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef from_iterable(iterable: Iterable, scheduler: typing.Scheduler = None) -> Observable:\n    \"\"\"Converts an iterable to an observable sequence.\n",
        "source_code_len": 145,
        "target_code": "\ndef from_iterable(iterable: Iterable, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    \"\"\"Converts an iterable to an observable sequence.\n",
        "target_code_len": 155,
        "diff_format": "@@ -246,3 +251,3 @@\n \n-def from_iterable(iterable: Iterable, scheduler: typing.Scheduler = None) -> Observable:\n+def from_iterable(iterable: Iterable, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n     \"\"\"Converts an iterable to an observable sequence.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def from_iterable(iterable: Iterable, scheduler: typing.Scheduler = None) -> Observable:\n    <IND>",
        "target_code_with_indent": "\n<DED>def from_iterable(iterable: Iterable, scheduler: Optional[typing.Scheduler] = None) -> Observable:\n    <IND>"
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:269:67 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 269,
    "warning_line": "def from_marbles(string: str, timespan: typing.RelativeTime = 0.1, scheduler: typing.Scheduler = None,"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:270:32 Incompatible variable type [9]: error is declared to have type `Exception` but is used as type `None`.",
    "message": " error is declared to have type `Exception` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 270,
    "warning_line": "                 lookup = None, error: Exception = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:379:8 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 379,
    "warning_line": "        scheduler: typing.Scheduler = None, lookup=None, error: Exception = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:379:57 Incompatible variable type [9]: error is declared to have type `Exception` but is used as type `None`.",
    "message": " error is declared to have type `Exception` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 379,
    "warning_line": "        scheduler: typing.Scheduler = None, lookup=None, error: Exception = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/__init__.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/__init__.py:443:12 Incompatible variable type [9]: else_source is declared to have type `core.observable.observable.Observable` but is used as type `None`.",
    "message": " else_source is declared to have type `core.observable.observable.Observable` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 443,
    "warning_line": "            else_source: Observable = None) -> Observable:"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/core/observable/combinelatest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/combinelatest.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/combinelatest.py:22:45 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 22,
    "warning_line": "    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Callable, Iterable, Union, List, cast\n\n",
        "source_code_len": 63,
        "target_code": "from typing import Optional\n\n",
        "target_code_len": 29,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Callable, Iterable, Union, List, cast\n+from typing import Optional\n \n",
        "source_code_with_indent": "from typing import Any, Callable, Iterable, Union, List, cast\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n        n = len(sources)\n",
        "source_code_len": 108,
        "target_code": "\n    def subscribe(observer: typing.Observer,\n                  scheduler: Optional[typing.Scheduler] = None\n                  ) -> CompositeDisposable:\n\n        n = len(sources)\n",
        "target_code_len": 179,
        "diff_format": "@@ -21,3 +21,6 @@\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n+    def subscribe(observer: typing.Observer,\n+                  scheduler: Optional[typing.Scheduler] = None\n+                  ) -> CompositeDisposable:\n+\n         n = len(sources)\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n        <IND>n = len(sources)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer,\n                  scheduler: Optional[typing.Scheduler] = None\n                  ) -> CompositeDisposable:\n\n        <IND>n = len(sources)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/core/observable/combinelatest.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/combinelatest.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/combinelatest.py:65:22 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Any]`.",
    "message": " Expected `typing.Optional[typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 65,
    "warning_line": "    return Observable(subscribe)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from typing import Any, Callable, Iterable, Union, List, cast\n\n",
        "source_code_len": 63,
        "target_code": "from typing import Optional\n\n",
        "target_code_len": 29,
        "diff_format": "@@ -1,2 +1,2 @@\n-from typing import Any, Callable, Iterable, Union, List, cast\n+from typing import Optional\n \n",
        "source_code_with_indent": "from typing import Any, Callable, Iterable, Union, List, cast\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n        n = len(sources)\n",
        "source_code_len": 108,
        "target_code": "\n    def subscribe(observer: typing.Observer,\n                  scheduler: Optional[typing.Scheduler] = None\n                  ) -> CompositeDisposable:\n\n        n = len(sources)\n",
        "target_code_len": 179,
        "diff_format": "@@ -21,3 +21,6 @@\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n+    def subscribe(observer: typing.Observer,\n+                  scheduler: Optional[typing.Scheduler] = None\n+                  ) -> CompositeDisposable:\n+\n         n = len(sources)\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n        <IND>n = len(sources)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer,\n                  scheduler: Optional[typing.Scheduler] = None\n                  ) -> CompositeDisposable:\n\n        <IND>n = len(sources)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/core/observable/ifthen.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/ifthen.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/ifthen.py:34:33 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `rx.from_future` but got `rx.core.observable.observable.Observable`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `rx.from_future` but got `rx.core.observable.observable.Observable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 34,
    "warning_line": "    then_source = rx.from_future(then_source) if is_future(then_source) else then_source"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/core/observable/ifthen.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/ifthen.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/ifthen.py:35:33 Incompatible parameter type [6]: Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `rx.from_future` but got `rx.core.observable.observable.Observable`.",
    "message": " Expected `asyncio.futures.Future[typing.Any]` for 1st positional only parameter to call `rx.from_future` but got `rx.core.observable.observable.Observable`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 35,
    "warning_line": "    else_source = rx.from_future(else_source) if is_future(else_source) else else_source"
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/core/observable/zip.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/zip.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/zip.py:27:45 Incompatible variable type [9]: scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "message": " scheduler is declared to have type `typing.Scheduler` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rx import from_future\n",
        "source_code_len": 27,
        "target_code": "from typing import Optional, List\n\nfrom rx import from_future\n",
        "target_code_len": 62,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Optional, List\n+\n from rx import from_future\n",
        "source_code_with_indent": "from rx import from_future\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional, List\n\nfrom rx import from_future\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n        n = len(sources)\n        queues = [[] for _ in range(n)]\n        is_done = [False] * n\n",
        "source_code_len": 178,
        "target_code": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None):\n        n = len(sources)\n        queues : List[List] = [[] for _ in range(n)]\n        is_done = [False] * n\n",
        "target_code_len": 201,
        "diff_format": "@@ -26,5 +28,5 @@\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n+    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None):\n         n = len(sources)\n-        queues = [[] for _ in range(n)]\n+        queues : List[List] = [[] for _ in range(n)]\n         is_done = [False] * n\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n        <IND>n = len(sources)\n        queues = [[] for _ in range(n)]\n        is_done = [False] * n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None):\n        <IND>n = len(sources)\n        queues : List[List] = [[] for _ in range(n)]\n        is_done = [False] * n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ReactiveX/RxPY",
    "commit": "2a7883ffc407fb7ed0fe7c1c72f013fc8940c213",
    "filename": "rx/core/observable/zip.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ReactiveX-RxPY/rx/core/observable/zip.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rx/core/observable/zip.py:66:22 Incompatible parameter type [6]: Expected `typing.Optional[typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Any]`.",
    "message": " Expected `typing.Optional[typing.Callable[[typing.Observer[typing.Any], typing.Optional[typing.Scheduler]], typing.Disposable]]` for 1st positional only parameter to call `rx.core.observable.observable.Observable.__init__` but got `typing.Callable[[Named(observer, typing.Observer[typing.Any]), Named(scheduler, typing.Scheduler, default)], typing.Any]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 66,
    "warning_line": "    return Observable(subscribe)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rx import from_future\n",
        "source_code_len": 27,
        "target_code": "from typing import Optional, List\n\nfrom rx import from_future\n",
        "target_code_len": 62,
        "diff_format": "@@ -1,1 +1,3 @@\n+from typing import Optional, List\n+\n from rx import from_future\n",
        "source_code_with_indent": "from rx import from_future\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Optional, List\n\nfrom rx import from_future\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n        n = len(sources)\n        queues = [[] for _ in range(n)]\n        is_done = [False] * n\n",
        "source_code_len": 178,
        "target_code": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None):\n        n = len(sources)\n        queues : List[List] = [[] for _ in range(n)]\n        is_done = [False] * n\n",
        "target_code_len": 201,
        "diff_format": "@@ -26,5 +28,5 @@\n \n-    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n+    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None):\n         n = len(sources)\n-        queues = [[] for _ in range(n)]\n+        queues : List[List] = [[] for _ in range(n)]\n         is_done = [False] * n\n",
        "source_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: typing.Scheduler = None):\n        <IND>n = len(sources)\n        queues = [[] for _ in range(n)]\n        is_done = [False] * n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def subscribe(observer: typing.Observer, scheduler: Optional[typing.Scheduler] = None):\n        <IND>n = len(sources)\n        queues : List[List] = [[] for _ in range(n)]\n        is_done = [False] * n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]