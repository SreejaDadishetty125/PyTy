[
  {
    "project": "freqtrade/freqtrade",
    "commit": "4eb55acdbcea4cf53b8fc2405de2d6154d5a338d",
    "filename": "freqtrade/tests/test_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/tests/test_configuration.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/tests/test_configuration.py:40:38 Incompatible parameter type [6]: Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "message": " Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 40,
    "warning_line": "        configuration = Configuration([])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from unittest.mock import MagicMock\n\n",
        "source_code_len": 37,
        "target_code": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -8,2 +8,3 @@\n from unittest.mock import MagicMock\n+from argparse import Namespace\n \n",
        "source_code_with_indent": "from unittest.mock import MagicMock\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 157,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 166,
        "diff_format": "@@ -39,3 +40,3 @@\n     with pytest.raises(ValidationError, match=r'.*does not match.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 178,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 187,
        "diff_format": "@@ -51,3 +52,3 @@\n     with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_len": 104,
        "target_code": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_len": 113,
        "diff_format": "@@ -63,3 +64,3 @@\n \n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n     validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_len": 90,
        "target_code": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_len": 99,
        "diff_format": "@@ -81,3 +82,3 @@\n \n-    Configuration([])._load_config_file('somefile')\n+    Configuration(Namespace())._load_config_file('somefile')\n     assert file_mock.call_count == 1\n",
        "source_code_with_indent": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    )\n    configuration = Configuration([])\n\n",
        "source_code_len": 45,
        "target_code": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -94,3 +95,3 @@\n     )\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    )\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_len": 73,
        "target_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -359,3 +360,3 @@\n     conf = deepcopy(default_conf)\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "4eb55acdbcea4cf53b8fc2405de2d6154d5a338d",
    "filename": "freqtrade/tests/test_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/tests/test_configuration.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/tests/test_configuration.py:52:38 Incompatible parameter type [6]: Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "message": " Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 52,
    "warning_line": "        configuration = Configuration([])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from unittest.mock import MagicMock\n\n",
        "source_code_len": 37,
        "target_code": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -8,2 +8,3 @@\n from unittest.mock import MagicMock\n+from argparse import Namespace\n \n",
        "source_code_with_indent": "from unittest.mock import MagicMock\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 157,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 166,
        "diff_format": "@@ -39,3 +40,3 @@\n     with pytest.raises(ValidationError, match=r'.*does not match.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 178,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 187,
        "diff_format": "@@ -51,3 +52,3 @@\n     with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_len": 104,
        "target_code": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_len": 113,
        "diff_format": "@@ -63,3 +64,3 @@\n \n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n     validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_len": 90,
        "target_code": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_len": 99,
        "diff_format": "@@ -81,3 +82,3 @@\n \n-    Configuration([])._load_config_file('somefile')\n+    Configuration(Namespace())._load_config_file('somefile')\n     assert file_mock.call_count == 1\n",
        "source_code_with_indent": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    )\n    configuration = Configuration([])\n\n",
        "source_code_len": 45,
        "target_code": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -94,3 +95,3 @@\n     )\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    )\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_len": 73,
        "target_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -359,3 +360,3 @@\n     conf = deepcopy(default_conf)\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "4eb55acdbcea4cf53b8fc2405de2d6154d5a338d",
    "filename": "freqtrade/tests/test_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/tests/test_configuration.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/tests/test_configuration.py:64:34 Incompatible parameter type [6]: Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "message": " Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 64,
    "warning_line": "    configuration = Configuration([])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from unittest.mock import MagicMock\n\n",
        "source_code_len": 37,
        "target_code": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -8,2 +8,3 @@\n from unittest.mock import MagicMock\n+from argparse import Namespace\n \n",
        "source_code_with_indent": "from unittest.mock import MagicMock\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 157,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 166,
        "diff_format": "@@ -39,3 +40,3 @@\n     with pytest.raises(ValidationError, match=r'.*does not match.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 178,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 187,
        "diff_format": "@@ -51,3 +52,3 @@\n     with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_len": 104,
        "target_code": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_len": 113,
        "diff_format": "@@ -63,3 +64,3 @@\n \n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n     validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_len": 90,
        "target_code": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_len": 99,
        "diff_format": "@@ -81,3 +82,3 @@\n \n-    Configuration([])._load_config_file('somefile')\n+    Configuration(Namespace())._load_config_file('somefile')\n     assert file_mock.call_count == 1\n",
        "source_code_with_indent": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    )\n    configuration = Configuration([])\n\n",
        "source_code_len": 45,
        "target_code": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -94,3 +95,3 @@\n     )\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    )\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_len": 73,
        "target_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -359,3 +360,3 @@\n     conf = deepcopy(default_conf)\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "4eb55acdbcea4cf53b8fc2405de2d6154d5a338d",
    "filename": "freqtrade/tests/test_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/tests/test_configuration.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/tests/test_configuration.py:82:18 Incompatible parameter type [6]: Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "message": " Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 82,
    "warning_line": "    Configuration([])._load_config_file('somefile')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from unittest.mock import MagicMock\n\n",
        "source_code_len": 37,
        "target_code": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -8,2 +8,3 @@\n from unittest.mock import MagicMock\n+from argparse import Namespace\n \n",
        "source_code_with_indent": "from unittest.mock import MagicMock\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 157,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 166,
        "diff_format": "@@ -39,3 +40,3 @@\n     with pytest.raises(ValidationError, match=r'.*does not match.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 178,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 187,
        "diff_format": "@@ -51,3 +52,3 @@\n     with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_len": 104,
        "target_code": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_len": 113,
        "diff_format": "@@ -63,3 +64,3 @@\n \n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n     validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_len": 90,
        "target_code": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_len": 99,
        "diff_format": "@@ -81,3 +82,3 @@\n \n-    Configuration([])._load_config_file('somefile')\n+    Configuration(Namespace())._load_config_file('somefile')\n     assert file_mock.call_count == 1\n",
        "source_code_with_indent": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    )\n    configuration = Configuration([])\n\n",
        "source_code_len": 45,
        "target_code": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -94,3 +95,3 @@\n     )\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    )\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_len": 73,
        "target_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -359,3 +360,3 @@\n     conf = deepcopy(default_conf)\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "4eb55acdbcea4cf53b8fc2405de2d6154d5a338d",
    "filename": "freqtrade/tests/test_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/tests/test_configuration.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/tests/test_configuration.py:95:34 Incompatible parameter type [6]: Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "message": " Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 95,
    "warning_line": "    configuration = Configuration([])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from unittest.mock import MagicMock\n\n",
        "source_code_len": 37,
        "target_code": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -8,2 +8,3 @@\n from unittest.mock import MagicMock\n+from argparse import Namespace\n \n",
        "source_code_with_indent": "from unittest.mock import MagicMock\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 157,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 166,
        "diff_format": "@@ -39,3 +40,3 @@\n     with pytest.raises(ValidationError, match=r'.*does not match.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 178,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 187,
        "diff_format": "@@ -51,3 +52,3 @@\n     with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_len": 104,
        "target_code": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_len": 113,
        "diff_format": "@@ -63,3 +64,3 @@\n \n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n     validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_len": 90,
        "target_code": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_len": 99,
        "diff_format": "@@ -81,3 +82,3 @@\n \n-    Configuration([])._load_config_file('somefile')\n+    Configuration(Namespace())._load_config_file('somefile')\n     assert file_mock.call_count == 1\n",
        "source_code_with_indent": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    )\n    configuration = Configuration([])\n\n",
        "source_code_len": 45,
        "target_code": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -94,3 +95,3 @@\n     )\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    )\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_len": 73,
        "target_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -359,3 +360,3 @@\n     conf = deepcopy(default_conf)\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "4eb55acdbcea4cf53b8fc2405de2d6154d5a338d",
    "filename": "freqtrade/tests/test_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/tests/test_configuration.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "freqtrade/tests/test_configuration.py:206:38 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Any]` for 1st positional only parameter to call `Configuration._load_common_config` but got `typing.Optional[typing.Dict[str, typing.Any]]`.",
    "message": " Expected `typing.Dict[str, typing.Any]` for 1st positional only parameter to call `Configuration._load_common_config` but got `typing.Optional[typing.Dict[str, typing.Any]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 206,
    "warning_line": "    configuration._load_common_config(configuration.config)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "    # Test the Dry run condition\n    configuration.config.update({'dry_run': False})\n    configuration._load_common_config(configuration.config)\n    assert log_has(\n",
        "source_code_len": 165,
        "target_code": "    # Test the Dry run condition\n    configuration.config.update({'dry_run': False})  # type: ignore\n    configuration._load_common_config(configuration.config)  # type: ignore\n    assert log_has(\n",
        "target_code_len": 197,
        "diff_format": "@@ -204,4 +205,4 @@\n     # Test the Dry run condition\n-    configuration.config.update({'dry_run': False})\n-    configuration._load_common_config(configuration.config)\n+    configuration.config.update({'dry_run': False})  # type: ignore\n+    configuration._load_common_config(configuration.config)  # type: ignore\n     assert log_has(\n",
        "source_code_with_indent": "    # Test the Dry run condition\n    configuration.config.update({'dry_run': False})\n    configuration._load_common_config(configuration.config)\n    assert log_has(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    # Test the Dry run condition\n    configuration.config.update({'dry_run': False})  # type: ignore\n    configuration._load_common_config(configuration.config)  # type: ignore\n    assert log_has(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "4eb55acdbcea4cf53b8fc2405de2d6154d5a338d",
    "filename": "freqtrade/tests/test_configuration.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/tests/test_configuration.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/tests/test_configuration.py:360:34 Incompatible parameter type [6]: Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "message": " Expected `argparse.Namespace` for 1st positional only parameter to call `Configuration.__init__` but got `typing.List[Variable[_T]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 360,
    "warning_line": "    configuration = Configuration([])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from unittest.mock import MagicMock\n\n",
        "source_code_len": 37,
        "target_code": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -8,2 +8,3 @@\n from unittest.mock import MagicMock\n+from argparse import Namespace\n \n",
        "source_code_with_indent": "from unittest.mock import MagicMock\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from unittest.mock import MagicMock\nfrom argparse import Namespace\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 157,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 166,
        "diff_format": "@@ -39,3 +40,3 @@\n     with pytest.raises(ValidationError, match=r'.*does not match.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*does not match.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_len": 178,
        "target_code": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_len": 187,
        "diff_format": "@@ -51,3 +52,3 @@\n     with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n-        configuration = Configuration([])\n+        configuration = Configuration(Namespace())\n         configuration._validate_config(conf)\n",
        "source_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration([])\n        configuration._validate_config(conf)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    with pytest.raises(ValidationError, match=r'.*\\'exchange\\' is a required property.*'):\n        <IND>configuration = Configuration(Namespace())\n        configuration._validate_config(conf)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_len": 104,
        "target_code": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_len": 113,
        "diff_format": "@@ -63,3 +64,3 @@\n \n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n     validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent": "\n    configuration = Configuration([])\n    validated_conf = configuration._load_config_file('somefile')\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    configuration = Configuration(Namespace())\n    validated_conf = configuration._load_config_file('somefile')\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_len": 90,
        "target_code": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_len": 99,
        "diff_format": "@@ -81,3 +82,3 @@\n \n-    Configuration([])._load_config_file('somefile')\n+    Configuration(Namespace())._load_config_file('somefile')\n     assert file_mock.call_count == 1\n",
        "source_code_with_indent": "\n    Configuration([])._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    Configuration(Namespace())._load_config_file('somefile')\n    assert file_mock.call_count == 1\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    )\n    configuration = Configuration([])\n\n",
        "source_code_len": 45,
        "target_code": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -94,3 +95,3 @@\n     )\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    )\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_len": 73,
        "target_code": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_len": 82,
        "diff_format": "@@ -359,3 +360,3 @@\n     conf = deepcopy(default_conf)\n-    configuration = Configuration([])\n+    configuration = Configuration(Namespace())\n \n",
        "source_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration([])\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    conf = deepcopy(default_conf)\n    configuration = Configuration(Namespace())\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]