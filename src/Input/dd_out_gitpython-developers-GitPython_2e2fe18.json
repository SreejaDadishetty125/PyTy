[
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/config.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/config.py:311:59 Incompatible parameter type [6]: Expected `Union[typing_extensions.Literal['global'], typing_extensions.Literal['repository'], typing_extensions.Literal['system'], typing_extensions.Literal['user']]` for 1st positional only parameter to call `get_config_path` but got `str`.",
    "message": " Expected `Union[typing_extensions.Literal['global'], typing_extensions.Literal['repository'], typing_extensions.Literal['system'], typing_extensions.Literal['user']]` for 1st positional only parameter to call `get_config_path` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 311,
    "warning_line": "                    self._file_or_files = [get_config_path(f)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom git.types import Lit_config_levels, ConfigLevels_Tup, PathLike, TBD, assert_never\n\n",
        "source_code_len": 89,
        "target_code": "\nfrom git.types import Lit_config_levels, ConfigLevels_Tup, PathLike, TBD, assert_never, is_config_level\n\n",
        "target_code_len": 106,
        "diff_format": "@@ -36,3 +36,3 @@\n \n-from git.types import Lit_config_levels, ConfigLevels_Tup, PathLike, TBD, assert_never\n+from git.types import Lit_config_levels, ConfigLevels_Tup, PathLike, TBD, assert_never, is_config_level\n \n",
        "source_code_with_indent": "\nfrom git.types import Lit_config_levels, ConfigLevels_Tup, PathLike, TBD, assert_never\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom git.types import Lit_config_levels, ConfigLevels_Tup, PathLike, TBD, assert_never, is_config_level\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                                           for f in CONFIG_LEVELS\n                                           if f != 'repository']\n                else:\n",
        "source_code_len": 153,
        "target_code": "                                           for f in CONFIG_LEVELS\n                                           if is_config_level(f) and f != 'repository']\n                else:\n",
        "target_code_len": 176,
        "diff_format": "@@ -312,3 +313,3 @@\n                                            for f in CONFIG_LEVELS\n-                                           if f != 'repository']\n+                                           if is_config_level(f) and f != 'repository']\n                 else:\n",
        "source_code_with_indent": "                                           for f in CONFIG_LEVELS\n                                           if f != 'repository']\n                <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                                           for f in CONFIG_LEVELS\n                                           if is_config_level(f) and f != 'repository']\n                <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/index/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/index/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/index/base.py:116:37 Incompatible variable type [9]: file_path is declared to have type `Union[os.PathLike[typing.Any], str]` but is used as type `None`.",
    "message": " file_path is declared to have type `Union[os.PathLike[typing.Any], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 116,
    "warning_line": "    def __init__(self, repo: 'Repo', file_path: PathLike = None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, repo: 'Repo', file_path: PathLike = None) -> None:\n        \"\"\"Initialize this Index instance, optionally from the given ``file_path``.\n",
        "source_code_len": 159,
        "target_code": "\n    def __init__(self, repo: 'Repo', file_path: Union[PathLike, None] = None) -> None:\n        \"\"\"Initialize this Index instance, optionally from the given ``file_path``.\n",
        "target_code_len": 172,
        "diff_format": "@@ -115,3 +115,3 @@\n \n-    def __init__(self, repo: 'Repo', file_path: PathLike = None) -> None:\n+    def __init__(self, repo: 'Repo', file_path: Union[PathLike, None] = None) -> None:\n         \"\"\"Initialize this Index instance, optionally from the given ``file_path``.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    def __init__(self, repo: 'Repo', file_path: PathLike = None) -> None:\n        <IND>",
        "target_code_with_indent": "\n    def __init__(self, repo: 'Repo', file_path: Union[PathLike, None] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/index/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/index/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/index/base.py:668:54 Incompatible variable type [9]: path_rewriter is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "message": " path_rewriter is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 668,
    "warning_line": "            fprogress: Callable = lambda *args: None, path_rewriter: Callable = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def add(self, items: Sequence[Union[PathLike, Blob, BaseIndexEntry, 'Submodule']], force: bool = True,\n            fprogress: Callable = lambda *args: None, path_rewriter: Callable = None,\n            write: bool = True, write_extension_data: bool = False) -> List[BaseIndexEntry]:\n",
        "source_code_len": 286,
        "target_code": "    def add(self, items: Sequence[Union[PathLike, Blob, BaseIndexEntry, 'Submodule']], force: bool = True,\n            fprogress: Callable = lambda *args: None, path_rewriter: Union[Callable[..., PathLike], None] = None,\n            write: bool = True, write_extension_data: bool = False) -> List[BaseIndexEntry]:\n",
        "target_code_len": 314,
        "diff_format": "@@ -667,3 +667,3 @@\n     def add(self, items: Sequence[Union[PathLike, Blob, BaseIndexEntry, 'Submodule']], force: bool = True,\n-            fprogress: Callable = lambda *args: None, path_rewriter: Callable = None,\n+            fprogress: Callable = lambda *args: None, path_rewriter: Union[Callable[..., PathLike], None] = None,\n             write: bool = True, write_extension_data: bool = False) -> List[BaseIndexEntry]:\n",
        "source_code_with_indent": "    <DED>def add(self, items: Sequence[Union[PathLike, Blob, BaseIndexEntry, 'Submodule']], force: bool = True,\n            fprogress: Callable = lambda *args: None, path_rewriter: Callable = None,\n            write: bool = True, write_extension_data: bool = False) -> List[BaseIndexEntry]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def add(self, items: Sequence[Union[PathLike, Blob, BaseIndexEntry, 'Submodule']], force: bool = True,\n            fprogress: Callable = lambda *args: None, path_rewriter: Union[Callable[..., PathLike], None] = None,\n            write: bool = True, write_extension_data: bool = False) -> List[BaseIndexEntry]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/index/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/index/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/index/base.py:973:55 Incompatible variable type [9]: author_date is declared to have type `str` but is used as type `None`.",
    "message": " author_date is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 973,
    "warning_line": "               committer: Union[None, 'Actor'] = None, author_date: str = None, commit_date: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def commit(self, message: str, parent_commits=None, head: bool = True, author: Union[None, 'Actor'] = None,\n               committer: Union[None, 'Actor'] = None, author_date: str = None, commit_date: str = None,\n               skip_hooks: bool = False) -> Commit:\n",
        "source_code_len": 269,
        "target_code": "    def commit(self, message: str, parent_commits=None, head: bool = True, author: Union[None, 'Actor'] = None,\n               committer: Union[None, 'Actor'] = None, author_date: Union[str, None] = None,\n               commit_date: Union[str, None] = None,\n               skip_hooks: bool = False) -> Commit:\n",
        "target_code_len": 310,
        "diff_format": "@@ -972,3 +972,4 @@\n     def commit(self, message: str, parent_commits=None, head: bool = True, author: Union[None, 'Actor'] = None,\n-               committer: Union[None, 'Actor'] = None, author_date: str = None, commit_date: str = None,\n+               committer: Union[None, 'Actor'] = None, author_date: Union[str, None] = None,\n+               commit_date: Union[str, None] = None,\n                skip_hooks: bool = False) -> Commit:\n",
        "source_code_with_indent": "    <DED>def commit(self, message: str, parent_commits=None, head: bool = True, author: Union[None, 'Actor'] = None,\n               committer: Union[None, 'Actor'] = None, author_date: str = None, commit_date: str = None,\n               skip_hooks: bool = False) -> Commit:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def commit(self, message: str, parent_commits=None, head: bool = True, author: Union[None, 'Actor'] = None,\n               committer: Union[None, 'Actor'] = None, author_date: Union[str, None] = None,\n               commit_date: Union[str, None] = None,\n               skip_hooks: bool = False) -> Commit:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/index/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/index/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/index/base.py:973:80 Incompatible variable type [9]: commit_date is declared to have type `str` but is used as type `None`.",
    "message": " commit_date is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 973,
    "warning_line": "               committer: Union[None, 'Actor'] = None, author_date: str = None, commit_date: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def commit(self, message: str, parent_commits=None, head: bool = True, author: Union[None, 'Actor'] = None,\n               committer: Union[None, 'Actor'] = None, author_date: str = None, commit_date: str = None,\n               skip_hooks: bool = False) -> Commit:\n",
        "source_code_len": 269,
        "target_code": "    def commit(self, message: str, parent_commits=None, head: bool = True, author: Union[None, 'Actor'] = None,\n               committer: Union[None, 'Actor'] = None, author_date: Union[str, None] = None,\n               commit_date: Union[str, None] = None,\n               skip_hooks: bool = False) -> Commit:\n",
        "target_code_len": 310,
        "diff_format": "@@ -972,3 +972,4 @@\n     def commit(self, message: str, parent_commits=None, head: bool = True, author: Union[None, 'Actor'] = None,\n-               committer: Union[None, 'Actor'] = None, author_date: str = None, commit_date: str = None,\n+               committer: Union[None, 'Actor'] = None, author_date: Union[str, None] = None,\n+               commit_date: Union[str, None] = None,\n                skip_hooks: bool = False) -> Commit:\n",
        "source_code_with_indent": "    <DED>def commit(self, message: str, parent_commits=None, head: bool = True, author: Union[None, 'Actor'] = None,\n               committer: Union[None, 'Actor'] = None, author_date: str = None, commit_date: str = None,\n               skip_hooks: bool = False) -> Commit:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>def commit(self, message: str, parent_commits=None, head: bool = True, author: Union[None, 'Actor'] = None,\n               committer: Union[None, 'Actor'] = None, author_date: Union[str, None] = None,\n               commit_date: Union[str, None] = None,\n               skip_hooks: bool = False) -> Commit:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/index/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/index/base.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/index/base.py:1267:4 Inconsistent override [14]: `git.index.base.IndexFile.diff` overrides method defined in `diff.Diffable` inconsistently. Parameter of type `Union[List[Union[os.PathLike[typing.Any], str]], str, typing.Tuple[Union[os.PathLike[typing.Any], str], ...]]` is not a supertype of the overridden parameter `Union[None, List[Union[os.PathLike[typing.Any], str]], os.PathLike[typing.Any], str, typing.Tuple[Union[os.PathLike[typing.Any], str], ...]]`.",
    "message": " `git.index.base.IndexFile.diff` overrides method defined in `diff.Diffable` inconsistently. Parameter of type `Union[List[Union[os.PathLike[typing.Any], str]], str, typing.Tuple[Union[os.PathLike[typing.Any], str], ...]]` is not a supertype of the overridden parameter `Union[None, List[Union[os.PathLike[typing.Any], str]], os.PathLike[typing.Any], str, typing.Tuple[Union[os.PathLike[typing.Any], str], ...]]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 1267,
    "warning_line": "    def diff(self, other: Union[diff.Diffable.Index, 'IndexFile.Index', Treeish, None, object] = diff.Diffable.Index,"
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/index/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/index/base.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/index/base.py:1268:13 Incompatible variable type [9]: paths is declared to have type `Union[List[Union[os.PathLike[typing.Any], str]], str, typing.Tuple[Union[os.PathLike[typing.Any], str], ...]]` but is used as type `None`.",
    "message": " paths is declared to have type `Union[List[Union[os.PathLike[typing.Any], str]], str, typing.Tuple[Union[os.PathLike[typing.Any], str], ...]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1268,
    "warning_line": "             paths: Union[str, List[PathLike], Tuple[PathLike, ...]] = None, create_patch: bool = False, **kwargs: Any"
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/objects/commit.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/commit.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/commit.py:83:52 Incompatible variable type [9]: tree is declared to have type `Tree` but is used as type `None`.",
    "message": " tree is declared to have type `Tree` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 83,
    "warning_line": "    def __init__(self, repo: 'Repo', binsha: bytes, tree: 'Tree' = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __init__(self, repo: 'Repo', binsha: bytes, tree: 'Tree' = None,\n                 author: Union[Actor, None] = None,\n",
        "source_code_len": 126,
        "target_code": "\n    def __init__(self, repo: 'Repo', binsha: bytes, tree: Union['Tree', None] = None,\n                 author: Union[Actor, None] = None,\n",
        "target_code_len": 139,
        "diff_format": "@@ -82,3 +82,3 @@\n \n-    def __init__(self, repo: 'Repo', binsha: bytes, tree: 'Tree' = None,\n+    def __init__(self, repo: 'Repo', binsha: bytes, tree: Union['Tree', None] = None,\n                  author: Union[Actor, None] = None,\n",
        "source_code_with_indent": "\n    def __init__(self, repo: 'Repo', binsha: bytes, tree: 'Tree' = None,\n                 author: Union[Actor, None] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def __init__(self, repo: 'Repo', binsha: bytes, tree: Union['Tree', None] = None,\n                 author: Union[Actor, None] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/objects/submodule/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/submodule/base.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/submodule/base.py:118:17 Incompatible variable type [9]: url is declared to have type `str` but is used as type `None`.",
    "message": " url is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 118,
    "warning_line": "                 url: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 parent_commit: Union[Commit_ish, None] = None,\n                 url: str = None,\n                 branch_path: Union[PathLike, None] = None\n",
        "source_code_len": 157,
        "target_code": "                 parent_commit: Union[Commit_ish, None] = None,\n                 url: Union[str, None] = None,\n                 branch_path: Union[PathLike, None] = None\n",
        "target_code_len": 170,
        "diff_format": "@@ -117,3 +117,3 @@\n                  parent_commit: Union[Commit_ish, None] = None,\n-                 url: str = None,\n+                 url: Union[str, None] = None,\n                  branch_path: Union[PathLike, None] = None\n",
        "source_code_with_indent": "                 parent_commit: Union[Commit_ish, None] = None,\n                 url: str = None,\n                 branch_path: Union[PathLike, None] = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 parent_commit: Union[Commit_ish, None] = None,\n                 url: Union[str, None] = None,\n                 branch_path: Union[PathLike, None] = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/objects/submodule/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/submodule/base.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/submodule/base.py:342:12 Incompatible variable type [9]: env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 342,
    "warning_line": "            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
        "source_code_len": 232,
        "target_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
        "target_code_len": 245,
        "diff_format": "@@ -341,3 +341,3 @@\n             branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n-            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n+            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n             ) -> 'Submodule':\n",
        "source_code_with_indent": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/objects/submodule/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/objects/submodule/base.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/objects/submodule/base.py:484:62 Incompatible variable type [9]: env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 484,
    "warning_line": "               force: bool = False, keep_going: bool = False, env: Mapping[str, str] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "               progress: Union['UpdateProgress', None] = None, dry_run: bool = False,\n               force: bool = False, keep_going: bool = False, env: Mapping[str, str] = None,\n               clone_multi_options: Union[Sequence[TBD], None] = None):\n",
        "source_code_len": 251,
        "target_code": "               progress: Union['UpdateProgress', None] = None, dry_run: bool = False,\n               force: bool = False, keep_going: bool = False, env: Union[Mapping[str, str], None] = None,\n               clone_multi_options: Union[Sequence[TBD], None] = None):\n",
        "target_code_len": 264,
        "diff_format": "@@ -483,3 +483,3 @@\n                progress: Union['UpdateProgress', None] = None, dry_run: bool = False,\n-               force: bool = False, keep_going: bool = False, env: Mapping[str, str] = None,\n+               force: bool = False, keep_going: bool = False, env: Union[Mapping[str, str], None] = None,\n                clone_multi_options: Union[Sequence[TBD], None] = None):\n",
        "source_code_with_indent": "               progress: Union['UpdateProgress', None] = None, dry_run: bool = False,\n               force: bool = False, keep_going: bool = False, env: Mapping[str, str] = None,\n               clone_multi_options: Union[Sequence[TBD], None] = None):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "               progress: Union['UpdateProgress', None] = None, dry_run: bool = False,\n               force: bool = False, keep_going: bool = False, env: Union[Mapping[str, str], None] = None,\n               clone_multi_options: Union[Sequence[TBD], None] = None):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/repo/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/repo/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/repo/base.py:501:43 Incompatible parameter type [6]: Expected `Union[typing_extensions.Literal['global'], typing_extensions.Literal['repository'], typing_extensions.Literal['system'], typing_extensions.Literal['user']]` for 1st positional only parameter to call `Repo._get_config_path` but got `str`.",
    "message": " Expected `Union[typing_extensions.Literal['global'], typing_extensions.Literal['repository'], typing_extensions.Literal['system'], typing_extensions.Literal['user']]` for 1st positional only parameter to call `Repo._get_config_path` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 501,
    "warning_line": "            files = [self._get_config_path(f) for f in self.config_level]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom git.types import TBD, PathLike, Lit_config_levels, Commit_ish, Tree_ish\nfrom typing import (Any, BinaryIO, Callable, Dict,\n",
        "source_code_len": 129,
        "target_code": "\nfrom git.types import TBD, PathLike, Lit_config_levels, Commit_ish, Tree_ish, is_config_level\nfrom typing import (Any, BinaryIO, Callable, Dict,\n",
        "target_code_len": 146,
        "diff_format": "@@ -38,3 +38,3 @@\n \n-from git.types import TBD, PathLike, Lit_config_levels, Commit_ish, Tree_ish\n+from git.types import TBD, PathLike, Lit_config_levels, Commit_ish, Tree_ish, is_config_level\n from typing import (Any, BinaryIO, Callable, Dict,\n",
        "source_code_with_indent": "\nfrom git.types import TBD, PathLike, Lit_config_levels, Commit_ish, Tree_ish\nfrom typing import (Any, BinaryIO, Callable, Dict,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom git.types import TBD, PathLike, Lit_config_levels, Commit_ish, Tree_ish, is_config_level\nfrom typing import (Any, BinaryIO, Callable, Dict,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if config_level is None:\n            files = [self._get_config_path(f) for f in self.config_level]\n        else:\n",
        "source_code_len": 121,
        "target_code": "        if config_level is None:\n            files = [self._get_config_path(f) for f in self.config_level if is_config_level(f)]\n        else:\n",
        "target_code_len": 143,
        "diff_format": "@@ -500,3 +500,3 @@\n         if config_level is None:\n-            files = [self._get_config_path(f) for f in self.config_level]\n+            files = [self._get_config_path(f) for f in self.config_level if is_config_level(f)]\n         else:\n",
        "source_code_with_indent": "        if config_level is None:\n            <IND>files = [self._get_config_path(f) for f in self.config_level]\n        <DED>else:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if config_level is None:\n            <IND>files = [self._get_config_path(f) for f in self.config_level if is_config_level(f)]\n        <DED>else:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/repo/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/repo/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/repo/base.py:626:40 Incompatible variable type [9]: object_type is declared to have type `str` but is used as type `None`.",
    "message": " object_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 626,
    "warning_line": "    def is_valid_object(self, sha: str, object_type: str = None) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def is_valid_object(self, sha: str, object_type: str = None) -> bool:\n        try:\n",
        "source_code_len": 88,
        "target_code": "\n    def is_valid_object(self, sha: str, object_type: Union[str, None] = None) -> bool:\n        try:\n",
        "target_code_len": 101,
        "diff_format": "@@ -625,3 +625,3 @@\n \n-    def is_valid_object(self, sha: str, object_type: str = None) -> bool:\n+    def is_valid_object(self, sha: str, object_type: Union[str, None] = None) -> bool:\n         try:\n",
        "source_code_with_indent": "\n    <DED>def is_valid_object(self, sha: str, object_type: str = None) -> bool:\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def is_valid_object(self, sha: str, object_type: Union[str, None] = None) -> bool:\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "gitpython-developers/GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/repo/base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/gitpython-developers-GitPython/git/repo/base.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "git/repo/base.py:979:18 Incompatible variable type [9]: path is declared to have type `Union[os.PathLike[typing.Any], str]` but is used as type `None`.",
    "message": " path is declared to have type `Union[os.PathLike[typing.Any], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 979,
    "warning_line": "    def init(cls, path: PathLike = None, mkdir: bool = True, odbt: Type[GitCmdObjectDB] = GitCmdObjectDB,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def init(cls, path: PathLike = None, mkdir: bool = True, odbt: Type[GitCmdObjectDB] = GitCmdObjectDB,\n             expand_vars: bool = True, **kwargs: Any) -> 'Repo':\n",
        "source_code_len": 188,
        "target_code": "    @classmethod\n    def init(cls, path: Union[PathLike, None] = None, mkdir: bool = True, odbt: Type[GitCmdObjectDB] = GitCmdObjectDB,\n             expand_vars: bool = True, **kwargs: Any) -> 'Repo':\n",
        "target_code_len": 201,
        "diff_format": "@@ -978,3 +978,3 @@\n     @classmethod\n-    def init(cls, path: PathLike = None, mkdir: bool = True, odbt: Type[GitCmdObjectDB] = GitCmdObjectDB,\n+    def init(cls, path: Union[PathLike, None] = None, mkdir: bool = True, odbt: Type[GitCmdObjectDB] = GitCmdObjectDB,\n              expand_vars: bool = True, **kwargs: Any) -> 'Repo':\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def init(cls, path: PathLike = None, mkdir: bool = True, odbt: Type[GitCmdObjectDB] = GitCmdObjectDB,\n             expand_vars: bool = True, **kwargs: Any) -> 'Repo':\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def init(cls, path: Union[PathLike, None] = None, mkdir: bool = True, odbt: Type[GitCmdObjectDB] = GitCmdObjectDB,\n             expand_vars: bool = True, **kwargs: Any) -> 'Repo':\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]