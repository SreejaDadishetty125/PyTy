[
  {
    "project": "atlassian-labs/peerd",
    "commit": "fc06a7e476bbcd5a177b171811af38b4ad171964",
    "filename": "peerd/aws.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/atlassian-labs-peerd/peerd/aws.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "peerd/aws.py:20:0 Incompatible variable type [9]: COMMON_PRINCIPAL_NAME is declared to have type `str` but is used as type `None`.",
    "message": " COMMON_PRINCIPAL_NAME is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 20,
    "warning_line": "COMMON_PRINCIPAL_NAME: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from time import sleep\n\n",
        "source_code_len": 24,
        "target_code": "from time import sleep\nfrom typing import Any, List, Mapping, Optional\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -5,2 +5,3 @@\n from time import sleep\n+from typing import Any, List, Mapping, Optional\n \n",
        "source_code_with_indent": "from time import sleep\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from time import sleep\nfrom typing import Any, List, Mapping, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "CLIENT_CACHE = nested_dict()\nCOMMON_PRINCIPAL_NAME: str = None\nROLE_SESSION_NAME: str = None\nSTS_CLIENT_CACHE = None\n",
        "source_code_len": 117,
        "target_code": "CLIENT_CACHE = nested_dict()\nCOMMON_PRINCIPAL_NAME: Optional[str] = None\nROLE_SESSION_NAME: Optional[str] = None\nSTS_CLIENT_CACHE = None\n",
        "target_code_len": 137,
        "diff_format": "@@ -19,4 +20,4 @@\n CLIENT_CACHE = nested_dict()\n-COMMON_PRINCIPAL_NAME: str = None\n-ROLE_SESSION_NAME: str = None\n+COMMON_PRINCIPAL_NAME: Optional[str] = None\n+ROLE_SESSION_NAME: Optional[str] = None\n STS_CLIENT_CACHE = None\n",
        "source_code_with_indent": "CLIENT_CACHE = nested_dict()\nCOMMON_PRINCIPAL_NAME: str = None\nROLE_SESSION_NAME: str = None\nSTS_CLIENT_CACHE = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "CLIENT_CACHE = nested_dict()\nCOMMON_PRINCIPAL_NAME: Optional[str] = None\nROLE_SESSION_NAME: Optional[str] = None\nSTS_CLIENT_CACHE = None\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "source_code_len": 84,
        "target_code": "    \"\"\"\n    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "target_code_len": 88,
        "diff_format": "@@ -142,3 +143,3 @@\n     \"\"\"\n-    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n+    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "target_code_with_indent": "\n    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n"
      }
    ]
  },
  {
    "project": "atlassian-labs/peerd",
    "commit": "fc06a7e476bbcd5a177b171811af38b4ad171964",
    "filename": "peerd/aws.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/atlassian-labs-peerd/peerd/aws.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "peerd/aws.py:21:0 Incompatible variable type [9]: ROLE_SESSION_NAME is declared to have type `str` but is used as type `None`.",
    "message": " ROLE_SESSION_NAME is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 21,
    "warning_line": "ROLE_SESSION_NAME: str = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from time import sleep\n\n",
        "source_code_len": 24,
        "target_code": "from time import sleep\nfrom typing import Any, List, Mapping, Optional\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -5,2 +5,3 @@\n from time import sleep\n+from typing import Any, List, Mapping, Optional\n \n",
        "source_code_with_indent": "from time import sleep\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from time import sleep\nfrom typing import Any, List, Mapping, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "CLIENT_CACHE = nested_dict()\nCOMMON_PRINCIPAL_NAME: str = None\nROLE_SESSION_NAME: str = None\nSTS_CLIENT_CACHE = None\n",
        "source_code_len": 117,
        "target_code": "CLIENT_CACHE = nested_dict()\nCOMMON_PRINCIPAL_NAME: Optional[str] = None\nROLE_SESSION_NAME: Optional[str] = None\nSTS_CLIENT_CACHE = None\n",
        "target_code_len": 137,
        "diff_format": "@@ -19,4 +20,4 @@\n CLIENT_CACHE = nested_dict()\n-COMMON_PRINCIPAL_NAME: str = None\n-ROLE_SESSION_NAME: str = None\n+COMMON_PRINCIPAL_NAME: Optional[str] = None\n+ROLE_SESSION_NAME: Optional[str] = None\n STS_CLIENT_CACHE = None\n",
        "source_code_with_indent": "CLIENT_CACHE = nested_dict()\nCOMMON_PRINCIPAL_NAME: str = None\nROLE_SESSION_NAME: str = None\nSTS_CLIENT_CACHE = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "CLIENT_CACHE = nested_dict()\nCOMMON_PRINCIPAL_NAME: Optional[str] = None\nROLE_SESSION_NAME: Optional[str] = None\nSTS_CLIENT_CACHE = None\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "source_code_len": 84,
        "target_code": "    \"\"\"\n    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "target_code_len": 88,
        "diff_format": "@@ -142,3 +143,3 @@\n     \"\"\"\n-    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n+    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "target_code_with_indent": "\n    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n"
      }
    ]
  },
  {
    "project": "atlassian-labs/peerd",
    "commit": "fc06a7e476bbcd5a177b171811af38b4ad171964",
    "filename": "peerd/aws.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/atlassian-labs-peerd/peerd/aws.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "peerd/aws.py:143:4 Incompatible variable type [9]: tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `typing.List[typing.Dict[str, typing.Any]]`.",
    "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `typing.List[typing.Dict[str, typing.Any]]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 143,
    "warning_line": "    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "source_code_len": 84,
        "target_code": "    \"\"\"\n    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "target_code_len": 88,
        "diff_format": "@@ -142,3 +143,3 @@\n     \"\"\"\n-    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n+    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "target_code_with_indent": "\n    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n"
      }
    ]
  },
  {
    "project": "atlassian-labs/peerd",
    "commit": "fc06a7e476bbcd5a177b171811af38b4ad171964",
    "filename": "peerd/aws.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/atlassian-labs-peerd/peerd/aws.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "peerd/aws.py:323:4 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 323,
    "warning_line": "    return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from time import sleep\n\n",
        "source_code_len": 24,
        "target_code": "from time import sleep\nfrom typing import Any, List, Mapping, Optional\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -5,2 +5,3 @@\n from time import sleep\n+from typing import Any, List, Mapping, Optional\n \n",
        "source_code_with_indent": "from time import sleep\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from time import sleep\nfrom typing import Any, List, Mapping, Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "source_code_len": 84,
        "target_code": "    \"\"\"\n    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "target_code_len": 88,
        "diff_format": "@@ -142,3 +143,3 @@\n     \"\"\"\n-    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n+    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    tags = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n",
        "target_code_with_indent": "\n    tags_aws = [{'Key': key, 'Value': value} for (key, value) in tags.items()]\n\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_vpc_peering(vpc_id: str, remote_vpc_id: str, account_id: str, region: str, filters: list = []) -> dict:\n    \"\"\"\n",
        "source_code_len": 121,
        "target_code": "\ndef get_vpc_peering(vpc_id: str, remote_vpc_id: str, account_id: str, region: str, filters: list = []) -> Optional[dict]:\n    \"\"\"\n",
        "target_code_len": 131,
        "diff_format": "@@ -281,3 +282,3 @@\n \n-def get_vpc_peering(vpc_id: str, remote_vpc_id: str, account_id: str, region: str, filters: list = []) -> dict:\n+def get_vpc_peering(vpc_id: str, remote_vpc_id: str, account_id: str, region: str, filters: list = []) -> Optional[dict]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def get_vpc_peering(vpc_id: str, remote_vpc_id: str, account_id: str, region: str, filters: list = []) -> dict:\n    <IND>",
        "target_code_with_indent": "\n<DED>def get_vpc_peering(vpc_id: str, remote_vpc_id: str, account_id: str, region: str, filters: list = []) -> Optional[dict]:\n    <IND>"
      }
    ]
  }
]