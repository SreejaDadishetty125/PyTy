[
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/all_combinations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/all_combinations.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/all_combinations.py:8:49 Invalid type [31]: Expression `[[int]]` is not a valid type.",
    "message": " Expression `[[int]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 8,
    "warning_line": "def generate_all_combinations(n: int, k: int) -> [[int]]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_all_combinations(n: int, k: int) -> [[int]]:\n    \"\"\"\n",
        "source_code_len": 72,
        "target_code": "\"\"\"\nfrom typing import List\n\n\ndef generate_all_combinations(n: int, k: int) -> List[List[int]]:\n    \"\"\"\n",
        "target_code_len": 104,
        "diff_format": "@@ -5,5 +5,6 @@\n \"\"\"\n+from typing import List\n \n \n-def generate_all_combinations(n: int, k: int) -> [[int]]:\n+def generate_all_combinations(n: int, k: int) -> List[List[int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_all_combinations(n: int, k: int) -> [[int]]:\n    <IND>",
        "target_code_with_indent": "\nfrom typing import List\n\n\ndef generate_all_combinations(n: int, k: int) -> List[List[int]]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/all_combinations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/all_combinations.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/all_combinations.py:23:18 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 23,
    "warning_line": "    current_list: [int],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_all_combinations(n: int, k: int) -> [[int]]:\n    \"\"\"\n",
        "source_code_len": 72,
        "target_code": "\"\"\"\nfrom typing import List\n\n\ndef generate_all_combinations(n: int, k: int) -> List[List[int]]:\n    \"\"\"\n",
        "target_code_len": 104,
        "diff_format": "@@ -5,5 +5,6 @@\n \"\"\"\n+from typing import List\n \n \n-def generate_all_combinations(n: int, k: int) -> [[int]]:\n+def generate_all_combinations(n: int, k: int) -> List[List[int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_all_combinations(n: int, k: int) -> [[int]]:\n    <IND>",
        "target_code_with_indent": "\nfrom typing import List\n\n\ndef generate_all_combinations(n: int, k: int) -> List[List[int]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    level: int,\n    current_list: [int],\n    total_list: [int],\n) -> None:\n",
        "source_code_len": 75,
        "target_code": "    level: int,\n    current_list: List[int],\n    total_list: List[List[int]],\n) -> None:\n",
        "target_code_len": 89,
        "diff_format": "@@ -22,4 +23,4 @@\n     level: int,\n-    current_list: [int],\n-    total_list: [int],\n+    current_list: List[int],\n+    total_list: List[List[int]],\n ) -> None:\n",
        "source_code_with_indent": "    level: int,\n    current_list: [int],\n    total_list: [int],\n) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    level: int,\n    current_list: List[int],\n    total_list: List[List[int]],\n) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/all_combinations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/all_combinations.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/all_combinations.py:24:16 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 24,
    "warning_line": "    total_list: [int],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_all_combinations(n: int, k: int) -> [[int]]:\n    \"\"\"\n",
        "source_code_len": 72,
        "target_code": "\"\"\"\nfrom typing import List\n\n\ndef generate_all_combinations(n: int, k: int) -> List[List[int]]:\n    \"\"\"\n",
        "target_code_len": 104,
        "diff_format": "@@ -5,5 +5,6 @@\n \"\"\"\n+from typing import List\n \n \n-def generate_all_combinations(n: int, k: int) -> [[int]]:\n+def generate_all_combinations(n: int, k: int) -> List[List[int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_all_combinations(n: int, k: int) -> [[int]]:\n    <IND>",
        "target_code_with_indent": "\nfrom typing import List\n\n\ndef generate_all_combinations(n: int, k: int) -> List[List[int]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    level: int,\n    current_list: [int],\n    total_list: [int],\n) -> None:\n",
        "source_code_len": 75,
        "target_code": "    level: int,\n    current_list: List[int],\n    total_list: List[List[int]],\n) -> None:\n",
        "target_code_len": 89,
        "diff_format": "@@ -22,4 +23,4 @@\n     level: int,\n-    current_list: [int],\n-    total_list: [int],\n+    current_list: List[int],\n+    total_list: List[List[int]],\n ) -> None:\n",
        "source_code_with_indent": "    level: int,\n    current_list: [int],\n    total_list: [int],\n) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    level: int,\n    current_list: List[int],\n    total_list: List[List[int]],\n) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/all_combinations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/all_combinations.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/all_combinations.py:36:32 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 36,
    "warning_line": "def print_all_state(total_list: [int]) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_all_combinations(n: int, k: int) -> [[int]]:\n    \"\"\"\n",
        "source_code_len": 72,
        "target_code": "\"\"\"\nfrom typing import List\n\n\ndef generate_all_combinations(n: int, k: int) -> List[List[int]]:\n    \"\"\"\n",
        "target_code_len": 104,
        "diff_format": "@@ -5,5 +5,6 @@\n \"\"\"\n+from typing import List\n \n \n-def generate_all_combinations(n: int, k: int) -> [[int]]:\n+def generate_all_combinations(n: int, k: int) -> List[List[int]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_all_combinations(n: int, k: int) -> [[int]]:\n    <IND>",
        "target_code_with_indent": "\nfrom typing import List\n\n\ndef generate_all_combinations(n: int, k: int) -> List[List[int]]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef print_all_state(total_list: [int]) -> None:\n    for i in total_list:\n",
        "source_code_len": 74,
        "target_code": "\ndef print_all_state(total_list: List[List[int]]) -> None:\n    for i in total_list:\n",
        "target_code_len": 84,
        "diff_format": "@@ -35,3 +36,3 @@\n \n-def print_all_state(total_list: [int]) -> None:\n+def print_all_state(total_list: List[List[int]]) -> None:\n     for i in total_list:\n",
        "source_code_with_indent": "\n<DED><DED>def print_all_state(total_list: [int]) -> None:\n    <IND>for i in total_list:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def print_all_state(total_list: List[List[int]]) -> None:\n    <IND>for i in total_list:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/all_permutations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/all_permutations.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/all_permutations.py:10:40 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 10,
    "warning_line": "def generate_all_permutations(sequence: [int]) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_all_permutations(sequence: [int]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "source_code_len": 142,
        "target_code": "\"\"\"\nfrom typing import List, Union\n\n\ndef generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "target_code_len": 189,
        "diff_format": "@@ -7,5 +7,6 @@\n \"\"\"\n+from typing import List, Union\n \n \n-def generate_all_permutations(sequence: [int]) -> None:\n+def generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n     create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_all_permutations(sequence: [int]) -> None:\n    <IND>create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "target_code_with_indent": "\nfrom typing import List, Union\n\n\ndef generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n    <IND>create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_state_space_tree(\n    sequence: [int], current_sequence: [int], index: int, index_used: int\n) -> None:\n",
        "source_code_len": 114,
        "target_code": "def create_state_space_tree(\n    sequence: List[Union[int, str]],\n    current_sequence: List[Union[int, str]],\n    index: int,\n    index_used: List[int],\n) -> None:\n",
        "target_code_len": 165,
        "diff_format": "@@ -14,3 +15,6 @@\n def create_state_space_tree(\n-    sequence: [int], current_sequence: [int], index: int, index_used: int\n+    sequence: List[Union[int, str]],\n+    current_sequence: List[Union[int, str]],\n+    index: int,\n+    index_used: List[int],\n ) -> None:\n",
        "source_code_with_indent": "<DED>def create_state_space_tree(\n    sequence: [int], current_sequence: [int], index: int, index_used: int\n) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def create_state_space_tree(\n    sequence: List[Union[int, str]],\n    current_sequence: List[Union[int, str]],\n    index: int,\n    index_used: List[int],\n) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nsequence = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence)\n",
        "source_code_len": 125,
        "target_code": "\nsequence: List[Union[int, str]] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)\n",
        "target_code_len": 175,
        "diff_format": "@@ -42,6 +46,6 @@\n \n-sequence = [3, 1, 2, 4]\n+sequence: List[Union[int, str]] = [3, 1, 2, 4]\n generate_all_permutations(sequence)\n \n-sequence = [\"A\", \"B\", \"C\"]\n-generate_all_permutations(sequence)\n+sequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\n+generate_all_permutations(sequence_2)\n",
        "source_code_with_indent": "\nsequence = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nsequence: List[Union[int, str]] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/all_permutations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/all_permutations.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/all_permutations.py:11:45 Incompatible parameter type [6]: Expected `int` for 4th positional only parameter to call `create_state_space_tree` but got `typing.List[int]`.",
    "message": " Expected `int` for 4th positional only parameter to call `create_state_space_tree` but got `typing.List[int]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 11,
    "warning_line": "    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_all_permutations(sequence: [int]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "source_code_len": 142,
        "target_code": "\"\"\"\nfrom typing import List, Union\n\n\ndef generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "target_code_len": 189,
        "diff_format": "@@ -7,5 +7,6 @@\n \"\"\"\n+from typing import List, Union\n \n \n-def generate_all_permutations(sequence: [int]) -> None:\n+def generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n     create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_all_permutations(sequence: [int]) -> None:\n    <IND>create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "target_code_with_indent": "\nfrom typing import List, Union\n\n\ndef generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n    <IND>create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_state_space_tree(\n    sequence: [int], current_sequence: [int], index: int, index_used: int\n) -> None:\n",
        "source_code_len": 114,
        "target_code": "def create_state_space_tree(\n    sequence: List[Union[int, str]],\n    current_sequence: List[Union[int, str]],\n    index: int,\n    index_used: List[int],\n) -> None:\n",
        "target_code_len": 165,
        "diff_format": "@@ -14,3 +15,6 @@\n def create_state_space_tree(\n-    sequence: [int], current_sequence: [int], index: int, index_used: int\n+    sequence: List[Union[int, str]],\n+    current_sequence: List[Union[int, str]],\n+    index: int,\n+    index_used: List[int],\n ) -> None:\n",
        "source_code_with_indent": "<DED>def create_state_space_tree(\n    sequence: [int], current_sequence: [int], index: int, index_used: int\n) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def create_state_space_tree(\n    sequence: List[Union[int, str]],\n    current_sequence: List[Union[int, str]],\n    index: int,\n    index_used: List[int],\n) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nsequence = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence)\n",
        "source_code_len": 125,
        "target_code": "\nsequence: List[Union[int, str]] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)\n",
        "target_code_len": 175,
        "diff_format": "@@ -42,6 +46,6 @@\n \n-sequence = [3, 1, 2, 4]\n+sequence: List[Union[int, str]] = [3, 1, 2, 4]\n generate_all_permutations(sequence)\n \n-sequence = [\"A\", \"B\", \"C\"]\n-generate_all_permutations(sequence)\n+sequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\n+generate_all_permutations(sequence_2)\n",
        "source_code_with_indent": "\nsequence = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nsequence: List[Union[int, str]] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/all_permutations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/all_permutations.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/all_permutations.py:15:14 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 15,
    "warning_line": "    sequence: [int], current_sequence: [int], index: int, index_used: int",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_all_permutations(sequence: [int]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "source_code_len": 142,
        "target_code": "\"\"\"\nfrom typing import List, Union\n\n\ndef generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "target_code_len": 189,
        "diff_format": "@@ -7,5 +7,6 @@\n \"\"\"\n+from typing import List, Union\n \n \n-def generate_all_permutations(sequence: [int]) -> None:\n+def generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n     create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_all_permutations(sequence: [int]) -> None:\n    <IND>create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "target_code_with_indent": "\nfrom typing import List, Union\n\n\ndef generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n    <IND>create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_state_space_tree(\n    sequence: [int], current_sequence: [int], index: int, index_used: int\n) -> None:\n",
        "source_code_len": 114,
        "target_code": "def create_state_space_tree(\n    sequence: List[Union[int, str]],\n    current_sequence: List[Union[int, str]],\n    index: int,\n    index_used: List[int],\n) -> None:\n",
        "target_code_len": 165,
        "diff_format": "@@ -14,3 +15,6 @@\n def create_state_space_tree(\n-    sequence: [int], current_sequence: [int], index: int, index_used: int\n+    sequence: List[Union[int, str]],\n+    current_sequence: List[Union[int, str]],\n+    index: int,\n+    index_used: List[int],\n ) -> None:\n",
        "source_code_with_indent": "<DED>def create_state_space_tree(\n    sequence: [int], current_sequence: [int], index: int, index_used: int\n) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def create_state_space_tree(\n    sequence: List[Union[int, str]],\n    current_sequence: List[Union[int, str]],\n    index: int,\n    index_used: List[int],\n) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nsequence = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence)\n",
        "source_code_len": 125,
        "target_code": "\nsequence: List[Union[int, str]] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)\n",
        "target_code_len": 175,
        "diff_format": "@@ -42,6 +46,6 @@\n \n-sequence = [3, 1, 2, 4]\n+sequence: List[Union[int, str]] = [3, 1, 2, 4]\n generate_all_permutations(sequence)\n \n-sequence = [\"A\", \"B\", \"C\"]\n-generate_all_permutations(sequence)\n+sequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\n+generate_all_permutations(sequence_2)\n",
        "source_code_with_indent": "\nsequence = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nsequence: List[Union[int, str]] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/all_permutations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/all_permutations.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/all_permutations.py:15:39 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 15,
    "warning_line": "    sequence: [int], current_sequence: [int], index: int, index_used: int",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_all_permutations(sequence: [int]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "source_code_len": 142,
        "target_code": "\"\"\"\nfrom typing import List, Union\n\n\ndef generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "target_code_len": 189,
        "diff_format": "@@ -7,5 +7,6 @@\n \"\"\"\n+from typing import List, Union\n \n \n-def generate_all_permutations(sequence: [int]) -> None:\n+def generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n     create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_all_permutations(sequence: [int]) -> None:\n    <IND>create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "target_code_with_indent": "\nfrom typing import List, Union\n\n\ndef generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n    <IND>create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_state_space_tree(\n    sequence: [int], current_sequence: [int], index: int, index_used: int\n) -> None:\n",
        "source_code_len": 114,
        "target_code": "def create_state_space_tree(\n    sequence: List[Union[int, str]],\n    current_sequence: List[Union[int, str]],\n    index: int,\n    index_used: List[int],\n) -> None:\n",
        "target_code_len": 165,
        "diff_format": "@@ -14,3 +15,6 @@\n def create_state_space_tree(\n-    sequence: [int], current_sequence: [int], index: int, index_used: int\n+    sequence: List[Union[int, str]],\n+    current_sequence: List[Union[int, str]],\n+    index: int,\n+    index_used: List[int],\n ) -> None:\n",
        "source_code_with_indent": "<DED>def create_state_space_tree(\n    sequence: [int], current_sequence: [int], index: int, index_used: int\n) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def create_state_space_tree(\n    sequence: List[Union[int, str]],\n    current_sequence: List[Union[int, str]],\n    index: int,\n    index_used: List[int],\n) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nsequence = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence)\n",
        "source_code_len": 125,
        "target_code": "\nsequence: List[Union[int, str]] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)\n",
        "target_code_len": 175,
        "diff_format": "@@ -42,6 +46,6 @@\n \n-sequence = [3, 1, 2, 4]\n+sequence: List[Union[int, str]] = [3, 1, 2, 4]\n generate_all_permutations(sequence)\n \n-sequence = [\"A\", \"B\", \"C\"]\n-generate_all_permutations(sequence)\n+sequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\n+generate_all_permutations(sequence_2)\n",
        "source_code_with_indent": "\nsequence = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nsequence: List[Union[int, str]] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/all_permutations.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/all_permutations.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/all_permutations.py:46:0 Incompatible variable type [9]: sequence is declared to have type `typing.List[int]` but is used as type `typing.List[str]`.",
    "message": " sequence is declared to have type `typing.List[int]` but is used as type `typing.List[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 46,
    "warning_line": "sequence = [\"A\", \"B\", \"C\"]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_all_permutations(sequence: [int]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "source_code_len": 142,
        "target_code": "\"\"\"\nfrom typing import List, Union\n\n\ndef generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "target_code_len": 189,
        "diff_format": "@@ -7,5 +7,6 @@\n \"\"\"\n+from typing import List, Union\n \n \n-def generate_all_permutations(sequence: [int]) -> None:\n+def generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n     create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_all_permutations(sequence: [int]) -> None:\n    <IND>create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n",
        "target_code_with_indent": "\nfrom typing import List, Union\n\n\ndef generate_all_permutations(sequence: List[Union[int, str]]) -> None:\n    <IND>create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_state_space_tree(\n    sequence: [int], current_sequence: [int], index: int, index_used: int\n) -> None:\n",
        "source_code_len": 114,
        "target_code": "def create_state_space_tree(\n    sequence: List[Union[int, str]],\n    current_sequence: List[Union[int, str]],\n    index: int,\n    index_used: List[int],\n) -> None:\n",
        "target_code_len": 165,
        "diff_format": "@@ -14,3 +15,6 @@\n def create_state_space_tree(\n-    sequence: [int], current_sequence: [int], index: int, index_used: int\n+    sequence: List[Union[int, str]],\n+    current_sequence: List[Union[int, str]],\n+    index: int,\n+    index_used: List[int],\n ) -> None:\n",
        "source_code_with_indent": "<DED>def create_state_space_tree(\n    sequence: [int], current_sequence: [int], index: int, index_used: int\n) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def create_state_space_tree(\n    sequence: List[Union[int, str]],\n    current_sequence: List[Union[int, str]],\n    index: int,\n    index_used: List[int],\n) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nsequence = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence)\n",
        "source_code_len": 125,
        "target_code": "\nsequence: List[Union[int, str]] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)\n",
        "target_code_len": 175,
        "diff_format": "@@ -42,6 +46,6 @@\n \n-sequence = [3, 1, 2, 4]\n+sequence: List[Union[int, str]] = [3, 1, 2, 4]\n generate_all_permutations(sequence)\n \n-sequence = [\"A\", \"B\", \"C\"]\n-generate_all_permutations(sequence)\n+sequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\n+generate_all_permutations(sequence_2)\n",
        "source_code_with_indent": "\nsequence = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nsequence: List[Union[int, str]] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: List[Union[int, str]] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/n_queens.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/n_queens.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/n_queens.py:13:18 Invalid type [31]: Expression `[[int]]` is not a valid type.",
    "message": " Expression `[[int]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 13,
    "warning_line": "def isSafe(board: [[int]], row: int, column: int) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\nsolution = []\n",
        "source_code_len": 18,
        "target_code": "\"\"\"\nfrom typing import List\n\nsolution = []\n",
        "target_code_len": 43,
        "diff_format": "@@ -9,2 +9,4 @@\n \"\"\"\n+from typing import List\n+\n solution = []\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nsolution = []\n",
        "target_code_with_indent": "\nfrom typing import List\n\nsolution = []\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef isSafe(board: [[int]], row: int, column: int) -> bool:\n    \"\"\"\n",
        "source_code_len": 68,
        "target_code": "\ndef isSafe(board: List[List[int]], row: int, column: int) -> bool:\n    \"\"\"\n",
        "target_code_len": 76,
        "diff_format": "@@ -12,3 +14,3 @@\n \n-def isSafe(board: [[int]], row: int, column: int) -> bool:\n+def isSafe(board: List[List[int]], row: int, column: int) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\ndef isSafe(board: [[int]], row: int, column: int) -> bool:\n    <IND>",
        "target_code_with_indent": "\ndef isSafe(board: List[List[int]], row: int, column: int) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/n_queens.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/n_queens.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/n_queens.py:41:17 Invalid type [31]: Expression `[[int]]` is not a valid type.",
    "message": " Expression `[[int]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 41,
    "warning_line": "def solve(board: [[int]], row: int) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\nsolution = []\n",
        "source_code_len": 18,
        "target_code": "\"\"\"\nfrom typing import List\n\nsolution = []\n",
        "target_code_len": 43,
        "diff_format": "@@ -9,2 +9,4 @@\n \"\"\"\n+from typing import List\n+\n solution = []\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nsolution = []\n",
        "target_code_with_indent": "\nfrom typing import List\n\nsolution = []\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef solve(board: [[int]], row: int) -> bool:\n    \"\"\"\n",
        "source_code_len": 54,
        "target_code": "\ndef solve(board: List[List[int]], row: int) -> bool:\n    \"\"\"\n",
        "target_code_len": 62,
        "diff_format": "@@ -40,3 +42,3 @@\n \n-def solve(board: [[int]], row: int) -> bool:\n+def solve(board: List[List[int]], row: int) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def solve(board: [[int]], row: int) -> bool:\n    <IND>",
        "target_code_with_indent": "\n<DED>def solve(board: List[List[int]], row: int) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/n_queens.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/n_queens.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/n_queens.py:56:8 Incompatible return type [7]: Expected `bool` but got `None`.",
    "message": " Expected `bool` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 56,
    "warning_line": "        return",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        print()\n        return\n    for i in range(len(board)):\n",
        "source_code_len": 63,
        "target_code": "        print()\n        return True\n    for i in range(len(board)):\n",
        "target_code_len": 68,
        "diff_format": "@@ -55,3 +57,3 @@\n         print()\n-        return\n+        return True\n     for i in range(len(board)):\n",
        "source_code_with_indent": "        print()\n        return\n    <DED>for i in range(len(board)):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        print()\n        return True\n    <DED>for i in range(len(board)):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/n_queens.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/n_queens.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/n_queens.py:71:22 Invalid type [31]: Expression `[[int]]` is not a valid type.",
    "message": " Expression `[[int]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 71,
    "warning_line": "def printboard(board: [[int]]) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\nsolution = []\n",
        "source_code_len": 18,
        "target_code": "\"\"\"\nfrom typing import List\n\nsolution = []\n",
        "target_code_len": 43,
        "diff_format": "@@ -9,2 +9,4 @@\n \"\"\"\n+from typing import List\n+\n solution = []\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nsolution = []\n",
        "target_code_with_indent": "\nfrom typing import List\n\nsolution = []\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef printboard(board: [[int]]) -> None:\n    \"\"\"\n",
        "source_code_len": 49,
        "target_code": "\ndef printboard(board: List[List[int]]) -> None:\n    \"\"\"\n",
        "target_code_len": 57,
        "diff_format": "@@ -70,3 +72,3 @@\n \n-def printboard(board: [[int]]) -> None:\n+def printboard(board: List[List[int]]) -> None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def printboard(board: [[int]]) -> None:\n    <IND>",
        "target_code_with_indent": "\n<DED>def printboard(board: List[List[int]]) -> None:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/rat_in_maze.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/rat_in_maze.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/rat_in_maze.py:1:21 Invalid type [31]: Expression `[[int]]` is not a valid type.",
    "message": " Expression `[[int]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 1,
    "warning_line": "def solve_maze(maze: [[int]]) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def solve_maze(maze: [[int]]) -> bool:\n    \"\"\"\n",
        "source_code_len": 47,
        "target_code": "from typing import List\n\n\ndef solve_maze(maze: List[List[int]]) -> bool:\n    \"\"\"\n",
        "target_code_len": 81,
        "diff_format": "@@ -1,2 +1,5 @@\n-def solve_maze(maze: [[int]]) -> bool:\n+from typing import List\n+\n+\n+def solve_maze(maze: List[List[int]]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def solve_maze(maze: [[int]]) -> bool:\n    <IND>",
        "target_code_with_indent": "from typing import List\n\n\ndef solve_maze(maze: List[List[int]]) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/rat_in_maze.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/rat_in_maze.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/rat_in_maze.py:70:19 Invalid type [31]: Expression `[[int]]` is not a valid type.",
    "message": " Expression `[[int]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 70,
    "warning_line": "def run_maze(maze: [[int]], i: int, j: int, solutions: [[int]]) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def solve_maze(maze: [[int]]) -> bool:\n    \"\"\"\n",
        "source_code_len": 47,
        "target_code": "from typing import List\n\n\ndef solve_maze(maze: List[List[int]]) -> bool:\n    \"\"\"\n",
        "target_code_len": 81,
        "diff_format": "@@ -1,2 +1,5 @@\n-def solve_maze(maze: [[int]]) -> bool:\n+from typing import List\n+\n+\n+def solve_maze(maze: List[List[int]]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def solve_maze(maze: [[int]]) -> bool:\n    <IND>",
        "target_code_with_indent": "from typing import List\n\n\ndef solve_maze(maze: List[List[int]]) -> bool:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef run_maze(maze: [[int]], i: int, j: int, solutions: [[int]]) -> bool:\n    \"\"\"\n",
        "source_code_len": 82,
        "target_code": "\ndef run_maze(maze: List[List[int]], i: int, j: int, solutions: List[List[int]]) -> bool:\n    \"\"\"\n",
        "target_code_len": 98,
        "diff_format": "@@ -69,3 +72,3 @@\n \n-def run_maze(maze: [[int]], i: int, j: int, solutions: [[int]]) -> bool:\n+def run_maze(maze: List[List[int]], i: int, j: int, solutions: List[List[int]]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def run_maze(maze: [[int]], i: int, j: int, solutions: [[int]]) -> bool:\n    <IND>",
        "target_code_with_indent": "\n<DED>def run_maze(maze: List[List[int]], i: int, j: int, solutions: List[List[int]]) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/rat_in_maze.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/rat_in_maze.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/rat_in_maze.py:70:55 Invalid type [31]: Expression `[[int]]` is not a valid type.",
    "message": " Expression `[[int]]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 70,
    "warning_line": "def run_maze(maze: [[int]], i: int, j: int, solutions: [[int]]) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def solve_maze(maze: [[int]]) -> bool:\n    \"\"\"\n",
        "source_code_len": 47,
        "target_code": "from typing import List\n\n\ndef solve_maze(maze: List[List[int]]) -> bool:\n    \"\"\"\n",
        "target_code_len": 81,
        "diff_format": "@@ -1,2 +1,5 @@\n-def solve_maze(maze: [[int]]) -> bool:\n+from typing import List\n+\n+\n+def solve_maze(maze: List[List[int]]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "def solve_maze(maze: [[int]]) -> bool:\n    <IND>",
        "target_code_with_indent": "from typing import List\n\n\ndef solve_maze(maze: List[List[int]]) -> bool:\n    <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef run_maze(maze: [[int]], i: int, j: int, solutions: [[int]]) -> bool:\n    \"\"\"\n",
        "source_code_len": 82,
        "target_code": "\ndef run_maze(maze: List[List[int]], i: int, j: int, solutions: List[List[int]]) -> bool:\n    \"\"\"\n",
        "target_code_len": 98,
        "diff_format": "@@ -69,3 +72,3 @@\n \n-def run_maze(maze: [[int]], i: int, j: int, solutions: [[int]]) -> bool:\n+def run_maze(maze: List[List[int]], i: int, j: int, solutions: List[List[int]]) -> bool:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def run_maze(maze: [[int]], i: int, j: int, solutions: [[int]]) -> bool:\n    <IND>",
        "target_code_with_indent": "\n<DED>def run_maze(maze: List[List[int]], i: int, j: int, solutions: List[List[int]]) -> bool:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/rat_in_maze.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/rat_in_maze.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/rat_in_maze.py:108:12 Incompatible return type [7]: Expected `bool` but got implicit return value of `None`.",
    "message": " Expected `bool` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 108,
    "warning_line": "            return False",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            return False\n\n",
        "source_code_len": 26,
        "target_code": "            return False\n    return False\n\n",
        "target_code_len": 43,
        "diff_format": "@@ -108,2 +111,3 @@\n             return False\n+    return False\n \n",
        "source_code_with_indent": "            return False\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            return False\n    <DED><DED>return False\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/sum_of_subsets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/sum_of_subsets.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/sum_of_subsets.py:11:39 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 11,
    "warning_line": "def generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    result = []\n    path = []\n    num_index = 0\n",
        "source_code_len": 126,
        "target_code": "\"\"\"\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n",
        "target_code_len": 190,
        "diff_format": "@@ -8,7 +8,8 @@\n \"\"\"\n+from typing import List\n \n \n-def generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n-    result = []\n-    path = []\n+def generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n+    result: List[List[int]] = []\n+    path: List[int] = []\n     num_index = 0\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    <IND>result = []\n    path = []\n    num_index = 0\n",
        "target_code_with_indent": "\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    <IND>result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/sum_of_subsets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/sum_of_subsets.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/sum_of_subsets.py:11:55 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 11,
    "warning_line": "def generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    result = []\n    path = []\n    num_index = 0\n",
        "source_code_len": 126,
        "target_code": "\"\"\"\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n",
        "target_code_len": 190,
        "diff_format": "@@ -8,7 +8,8 @@\n \"\"\"\n+from typing import List\n \n \n-def generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n-    result = []\n-    path = []\n+def generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n+    result: List[List[int]] = []\n+    path: List[int] = []\n     num_index = 0\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    <IND>result = []\n    path = []\n    num_index = 0\n",
        "target_code_with_indent": "\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    <IND>result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/sum_of_subsets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/sum_of_subsets.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/sum_of_subsets.py:11:65 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 11,
    "warning_line": "def generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    result = []\n    path = []\n    num_index = 0\n",
        "source_code_len": 126,
        "target_code": "\"\"\"\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n",
        "target_code_len": 190,
        "diff_format": "@@ -8,7 +8,8 @@\n \"\"\"\n+from typing import List\n \n \n-def generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n-    result = []\n-    path = []\n+def generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n+    result: List[List[int]] = []\n+    path: List[int] = []\n     num_index = 0\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    <IND>result = []\n    path = []\n    num_index = 0\n",
        "target_code_with_indent": "\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    <IND>result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/sum_of_subsets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/sum_of_subsets.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/sum_of_subsets.py:21:10 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 21,
    "warning_line": "    nums: [int],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    result = []\n    path = []\n    num_index = 0\n",
        "source_code_len": 126,
        "target_code": "\"\"\"\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n",
        "target_code_len": 190,
        "diff_format": "@@ -8,7 +8,8 @@\n \"\"\"\n+from typing import List\n \n \n-def generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n-    result = []\n-    path = []\n+def generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n+    result: List[List[int]] = []\n+    path: List[int] = []\n     num_index = 0\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    <IND>result = []\n    path = []\n    num_index = 0\n",
        "target_code_with_indent": "\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    <IND>result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_state_space_tree(\n    nums: [int],\n    max_sum: int,\n    num_index: int,\n    path: [int],\n    result: [int],\n    remaining_nums_sum: int,\n",
        "source_code_len": 149,
        "target_code": "def create_state_space_tree(\n    nums: List[int],\n    max_sum: int,\n    num_index: int,\n    path: List[int],\n    result: List[List[int]],\n    remaining_nums_sum: int,\n",
        "target_code_len": 167,
        "diff_format": "@@ -20,7 +21,7 @@\n def create_state_space_tree(\n-    nums: [int],\n+    nums: List[int],\n     max_sum: int,\n     num_index: int,\n-    path: [int],\n-    result: [int],\n+    path: List[int],\n+    result: List[List[int]],\n     remaining_nums_sum: int,\n",
        "source_code_with_indent": "<DED>def create_state_space_tree(\n    nums: [int],\n    max_sum: int,\n    num_index: int,\n    path: [int],\n    result: [int],\n    remaining_nums_sum: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def create_state_space_tree(\n    nums: List[int],\n    max_sum: int,\n    num_index: int,\n    path: List[int],\n    result: List[List[int]],\n    remaining_nums_sum: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/sum_of_subsets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/sum_of_subsets.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/sum_of_subsets.py:24:10 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 24,
    "warning_line": "    path: [int],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    result = []\n    path = []\n    num_index = 0\n",
        "source_code_len": 126,
        "target_code": "\"\"\"\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n",
        "target_code_len": 190,
        "diff_format": "@@ -8,7 +8,8 @@\n \"\"\"\n+from typing import List\n \n \n-def generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n-    result = []\n-    path = []\n+def generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n+    result: List[List[int]] = []\n+    path: List[int] = []\n     num_index = 0\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    <IND>result = []\n    path = []\n    num_index = 0\n",
        "target_code_with_indent": "\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    <IND>result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_state_space_tree(\n    nums: [int],\n    max_sum: int,\n    num_index: int,\n    path: [int],\n    result: [int],\n    remaining_nums_sum: int,\n",
        "source_code_len": 149,
        "target_code": "def create_state_space_tree(\n    nums: List[int],\n    max_sum: int,\n    num_index: int,\n    path: List[int],\n    result: List[List[int]],\n    remaining_nums_sum: int,\n",
        "target_code_len": 167,
        "diff_format": "@@ -20,7 +21,7 @@\n def create_state_space_tree(\n-    nums: [int],\n+    nums: List[int],\n     max_sum: int,\n     num_index: int,\n-    path: [int],\n-    result: [int],\n+    path: List[int],\n+    result: List[List[int]],\n     remaining_nums_sum: int,\n",
        "source_code_with_indent": "<DED>def create_state_space_tree(\n    nums: [int],\n    max_sum: int,\n    num_index: int,\n    path: [int],\n    result: [int],\n    remaining_nums_sum: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def create_state_space_tree(\n    nums: List[int],\n    max_sum: int,\n    num_index: int,\n    path: List[int],\n    result: List[List[int]],\n    remaining_nums_sum: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/sum_of_subsets.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/backtracking/sum_of_subsets.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "backtracking/sum_of_subsets.py:25:12 Invalid type [31]: Expression `[int]` is not a valid type.",
    "message": " Expression `[int]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 25,
    "warning_line": "    result: [int],",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\"\"\"\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    result = []\n    path = []\n    num_index = 0\n",
        "source_code_len": 126,
        "target_code": "\"\"\"\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n",
        "target_code_len": 190,
        "diff_format": "@@ -8,7 +8,8 @@\n \"\"\"\n+from typing import List\n \n \n-def generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n-    result = []\n-    path = []\n+def generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n+    result: List[List[int]] = []\n+    path: List[int] = []\n     num_index = 0\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n\n\ndef generate_sum_of_subsets_soln(nums: [int], max_sum: [int]) -> [int]:\n    <IND>result = []\n    path = []\n    num_index = 0\n",
        "target_code_with_indent": "\nfrom typing import List\n\n\ndef generate_sum_of_subsets_soln(nums: List[int], max_sum: int) -> List[List[int]]:\n    <IND>result: List[List[int]] = []\n    path: List[int] = []\n    num_index = 0\n"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def create_state_space_tree(\n    nums: [int],\n    max_sum: int,\n    num_index: int,\n    path: [int],\n    result: [int],\n    remaining_nums_sum: int,\n",
        "source_code_len": 149,
        "target_code": "def create_state_space_tree(\n    nums: List[int],\n    max_sum: int,\n    num_index: int,\n    path: List[int],\n    result: List[List[int]],\n    remaining_nums_sum: int,\n",
        "target_code_len": 167,
        "diff_format": "@@ -20,7 +21,7 @@\n def create_state_space_tree(\n-    nums: [int],\n+    nums: List[int],\n     max_sum: int,\n     num_index: int,\n-    path: [int],\n-    result: [int],\n+    path: List[int],\n+    result: List[List[int]],\n     remaining_nums_sum: int,\n",
        "source_code_with_indent": "<DED>def create_state_space_tree(\n    nums: [int],\n    max_sum: int,\n    num_index: int,\n    path: [int],\n    result: [int],\n    remaining_nums_sum: int,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def create_state_space_tree(\n    nums: List[int],\n    max_sum: int,\n    num_index: int,\n    path: List[int],\n    result: List[List[int]],\n    remaining_nums_sum: int,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]