[
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/core/_modules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pystiche-pystiche/pystiche/core/_modules.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pystiche/core/_modules.py:71:4 Inconsistent override [14]: `pystiche.core._modules.SequentialModule.forward` overrides method defined in `Module` inconsistently. Could not find parameter `Variable(typing.Any)` in overriding signature.",
    "message": " `pystiche.core._modules.SequentialModule.forward` overrides method defined in `Module` inconsistently. Could not find parameter `Variable(typing.Any)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 71,
    "warning_line": "    def forward(self, x: torch.Tensor) -> torch.Tensor:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @abstractmethod\n    def forward(self, *args: Any, **kwargs: Any) -> Any:\n        pass\n\n    def __repr__(self):\n        return ComplexObject.__repr__(self)\n\n    def torch_repr(self):\n        return nn.Module.__repr__(self)\n",
        "source_code_len": 227,
        "target_code": "\n    def __repr__(self) -> str:\n        return ComplexObject.__repr__(self)\n\n    def torch_repr(self) -> str:\n        return nn.Module.__repr__(self)\n",
        "target_code_len": 150,
        "diff_format": "@@ -52,10 +51,6 @@\n \n-    @abstractmethod\n-    def forward(self, *args: Any, **kwargs: Any) -> Any:\n-        pass\n-\n-    def __repr__(self):\n+    def __repr__(self) -> str:\n         return ComplexObject.__repr__(self)\n \n-    def torch_repr(self):\n+    def torch_repr(self) -> str:\n         return nn.Module.__repr__(self)\n",
        "source_code_with_indent": "\n    <DED>@abstractmethod\n    def forward(self, *args: Any, **kwargs: Any) -> Any:\n        <IND>pass\n\n    <DED>def __repr__(self):\n        <IND>return ComplexObject.__repr__(self)\n\n    <DED>def torch_repr(self):\n        <IND>return nn.Module.__repr__(self)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __repr__(self) -> str:\n        <IND>return ComplexObject.__repr__(self)\n\n    <DED>def torch_repr(self) -> str:\n        <IND>return nn.Module.__repr__(self)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/core/_modules.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pystiche-pystiche/pystiche/core/_modules.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pystiche/core/_modules.py:71:4 Inconsistent override [14]: `pystiche.core._modules.SequentialModule.forward` overrides method defined in `Module` inconsistently. Could not find parameter `Keywords(typing.Any)` in overriding signature.",
    "message": " `pystiche.core._modules.SequentialModule.forward` overrides method defined in `Module` inconsistently. Could not find parameter `Keywords(typing.Any)` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 71,
    "warning_line": "    def forward(self, x: torch.Tensor) -> torch.Tensor:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    @abstractmethod\n    def forward(self, *args: Any, **kwargs: Any) -> Any:\n        pass\n\n    def __repr__(self):\n        return ComplexObject.__repr__(self)\n\n    def torch_repr(self):\n        return nn.Module.__repr__(self)\n",
        "source_code_len": 227,
        "target_code": "\n    def __repr__(self) -> str:\n        return ComplexObject.__repr__(self)\n\n    def torch_repr(self) -> str:\n        return nn.Module.__repr__(self)\n",
        "target_code_len": 150,
        "diff_format": "@@ -52,10 +51,6 @@\n \n-    @abstractmethod\n-    def forward(self, *args: Any, **kwargs: Any) -> Any:\n-        pass\n-\n-    def __repr__(self):\n+    def __repr__(self) -> str:\n         return ComplexObject.__repr__(self)\n \n-    def torch_repr(self):\n+    def torch_repr(self) -> str:\n         return nn.Module.__repr__(self)\n",
        "source_code_with_indent": "\n    <DED>@abstractmethod\n    def forward(self, *args: Any, **kwargs: Any) -> Any:\n        <IND>pass\n\n    <DED>def __repr__(self):\n        <IND>return ComplexObject.__repr__(self)\n\n    <DED>def torch_repr(self):\n        <IND>return nn.Module.__repr__(self)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __repr__(self) -> str:\n        <IND>return ComplexObject.__repr__(self)\n\n    <DED>def torch_repr(self) -> str:\n        <IND>return nn.Module.__repr__(self)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/enc/encoder.py",
    "min_patch_found": false,
    "full_warning_msg": "pystiche/enc/encoder.py:16:4 Inconsistent override [14]: `pystiche.enc.encoder.Encoder.forward` overrides method defined in `pystiche.core._modules.Module` inconsistently. Could not find parameter `Variable(typing.Any)` in overriding signature.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/enc/encoder.py",
    "min_patch_found": false,
    "full_warning_msg": "pystiche/enc/encoder.py:16:4 Inconsistent override [14]: `pystiche.enc.encoder.Encoder.forward` overrides method defined in `pystiche.core._modules.Module` inconsistently. Could not find parameter `Keywords(typing.Any)` in overriding signature.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/enc/multi_layer_encoder.py",
    "min_patch_found": false,
    "full_warning_msg": "pystiche/enc/multi_layer_encoder.py:62:4 Inconsistent override [14]: `pystiche.enc.multi_layer_encoder.MultiLayerEncoder.forward` overrides method defined in `pystiche.core._modules.Module` inconsistently. Could not find parameter `Variable(typing.Any)` in overriding signature.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/enc/multi_layer_encoder.py",
    "min_patch_found": false,
    "full_warning_msg": "pystiche/enc/multi_layer_encoder.py:62:4 Inconsistent override [14]: `pystiche.enc.multi_layer_encoder.MultiLayerEncoder.forward` overrides method defined in `pystiche.core._modules.Module` inconsistently. Could not find parameter `Keywords(typing.Any)` in overriding signature.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/loss/multi_op.py",
    "min_patch_found": false,
    "full_warning_msg": "pystiche/loss/multi_op.py:77:4 Inconsistent override [14]: `pystiche.loss.multi_op.MultiOperatorLoss.forward` overrides method defined in `pystiche.core._modules.Module` inconsistently. Could not find parameter `Variable(typing.Any)` in overriding signature.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/loss/multi_op.py",
    "min_patch_found": false,
    "full_warning_msg": "pystiche/loss/multi_op.py:77:4 Inconsistent override [14]: `pystiche.loss.multi_op.MultiOperatorLoss.forward` overrides method defined in `pystiche.core._modules.Module` inconsistently. Could not find parameter `Keywords(typing.Any)` in overriding signature.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/misc/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pystiche-pystiche/pystiche/misc/misc.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pystiche/misc/misc.py:70:17 Incompatible parameter type [6]: Expected `Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Union[itertools.repeat[typing.Any], Sized]`.",
    "message": " Expected `Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Union[itertools.repeat[typing.Any], Sized]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 70,
    "warning_line": "    return tuple(y)"
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/misc/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pystiche-pystiche/pystiche/misc/misc.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pystiche/misc/misc.py:180:14 Incompatible variable type [9]: param is declared to have type `str` but is used as type `None`.",
    "message": " param is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 180,
    "warning_line": "    arg: str, param: str = None, valid_args: Sequence[str] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def verify_str_arg(\n    arg: str, param: str = None, valid_args: Sequence[str] = None\n) -> str:\n",
        "source_code_len": 96,
        "target_code": "def verify_str_arg(\n    arg: Any, param: Optional[str] = None, valid_args: Optional[Sequence[str]] = None\n) -> str:\n",
        "target_code_len": 116,
        "diff_format": "@@ -179,3 +187,3 @@\n def verify_str_arg(\n-    arg: str, param: str = None, valid_args: Sequence[str] = None\n+    arg: Any, param: Optional[str] = None, valid_args: Optional[Sequence[str]] = None\n ) -> str:\n",
        "source_code_with_indent": "<DED>def verify_str_arg(\n    arg: str, param: str = None, valid_args: Sequence[str] = None\n) -> str:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def verify_str_arg(\n    arg: Any, param: Optional[str] = None, valid_args: Optional[Sequence[str]] = None\n) -> str:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/misc/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pystiche-pystiche/pystiche/misc/misc.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pystiche/misc/misc.py:180:33 Incompatible variable type [9]: valid_args is declared to have type `Sequence[str]` but is used as type `None`.",
    "message": " valid_args is declared to have type `Sequence[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 180,
    "warning_line": "    arg: str, param: str = None, valid_args: Sequence[str] = None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def verify_str_arg(\n    arg: str, param: str = None, valid_args: Sequence[str] = None\n) -> str:\n",
        "source_code_len": 96,
        "target_code": "def verify_str_arg(\n    arg: Any, param: Optional[str] = None, valid_args: Optional[Sequence[str]] = None\n) -> str:\n",
        "target_code_len": 116,
        "diff_format": "@@ -179,3 +187,3 @@\n def verify_str_arg(\n-    arg: str, param: str = None, valid_args: Sequence[str] = None\n+    arg: Any, param: Optional[str] = None, valid_args: Optional[Sequence[str]] = None\n ) -> str:\n",
        "source_code_with_indent": "<DED>def verify_str_arg(\n    arg: str, param: str = None, valid_args: Sequence[str] = None\n) -> str:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def verify_str_arg(\n    arg: Any, param: Optional[str] = None, valid_args: Optional[Sequence[str]] = None\n) -> str:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/misc/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pystiche-pystiche/pystiche/misc/misc.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pystiche/misc/misc.py:207:4 Incompatible variable type [9]: properties is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " properties is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 207,
    "warning_line": "    properties: Dict[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    name: str,\n    properties: Dict[str, Any] = None,\n    named_children: Sequence[Tuple[str, Any]] = (),\n",
        "source_code_len": 106,
        "target_code": "    name: str,\n    properties: Optional[Dict[str, Any]] = None,\n    named_children: Sequence[Tuple[str, Any]] = (),\n",
        "target_code_len": 116,
        "diff_format": "@@ -206,3 +214,3 @@\n     name: str,\n-    properties: Dict[str, Any] = None,\n+    properties: Optional[Dict[str, Any]] = None,\n     named_children: Sequence[Tuple[str, Any]] = (),\n",
        "source_code_with_indent": "    name: str,\n    properties: Dict[str, Any] = None,\n    named_children: Sequence[Tuple[str, Any]] = (),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    name: str,\n    properties: Optional[Dict[str, Any]] = None,\n    named_children: Sequence[Tuple[str, Any]] = (),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/misc/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pystiche-pystiche/pystiche/misc/misc.py",
    "file_hunks_size": 19,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pystiche/misc/misc.py:250:4 Incompatible variable type [9]: properties is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " properties is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 250,
    "warning_line": "    properties: Dict[str, Any] = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    name: str,\n    properties: Dict[str, Any] = None,\n    properties_threshold: Optional[int] = None,\n    **kwargs: Any,\n):\n    msg = build_deprecation_message(\n",
        "source_code_len": 161,
        "target_code": "    name: str,\n    properties: Optional[Dict[str, Any]] = None,\n    properties_threshold: Optional[int] = None,\n    **kwargs: Any,\n) -> str:\n    msg = build_deprecation_message(\n",
        "target_code_len": 178,
        "diff_format": "@@ -249,6 +257,6 @@\n     name: str,\n-    properties: Dict[str, Any] = None,\n+    properties: Optional[Dict[str, Any]] = None,\n     properties_threshold: Optional[int] = None,\n     **kwargs: Any,\n-):\n+) -> str:\n     msg = build_deprecation_message(\n",
        "source_code_with_indent": "    name: str,\n    properties: Dict[str, Any] = None,\n    properties_threshold: Optional[int] = None,\n    **kwargs: Any,\n):\n    <IND>msg = build_deprecation_message(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    name: str,\n    properties: Optional[Dict[str, Any]] = None,\n    properties_threshold: Optional[int] = None,\n    **kwargs: Any,\n) -> str:\n    <IND>msg = build_deprecation_message(\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    if properties_threshold is not None:\n        msg = build_deprecation_message(\n",
        "source_code_len": 83,
        "target_code": "\n    if properties is not None and properties_threshold is not None:\n        msg = build_deprecation_message(\n",
        "target_code_len": 110,
        "diff_format": "@@ -260,3 +268,3 @@\n \n-    if properties_threshold is not None:\n+    if properties is not None and properties_threshold is not None:\n         msg = build_deprecation_message(\n",
        "source_code_with_indent": "\n    if properties_threshold is not None:\n        <IND>msg = build_deprecation_message(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    if properties is not None and properties_threshold is not None:\n        <IND>msg = build_deprecation_message(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/misc/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pystiche-pystiche/pystiche/misc/misc.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pystiche/misc/misc.py:321:8 Incompatible return type [7]: Expected `ContextManager[str]` but got `typing.Generator[str, None, None]`.",
    "message": " Expected `ContextManager[str]` but got `typing.Generator[str, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 321,
    "warning_line": "        yield tmp_dir"
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/misc/misc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pystiche-pystiche/pystiche/misc/misc.py",
    "file_hunks_size": 19,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pystiche/misc/misc.py:335:11 Invalid type [31]: Expression `typing.Union[(typing.Dict[(str, torch.Tensor)], torch.nn.Module())]` is not a valid type.",
    "message": " Expression `typing.Union[(typing.Dict[(str, torch.Tensor)], torch.nn.Module())]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 335,
    "warning_line": "    input: Union[Dict[str, torch.Tensor], nn.Module()],"
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/ops/op.py",
    "min_patch_found": false,
    "full_warning_msg": "pystiche/ops/op.py:40:4 Inconsistent override [14]: `pystiche.ops.op.Operator.forward` overrides method defined in `pystiche.core._modules.Module` inconsistently. Could not find parameter `Variable(typing.Any)` in overriding signature.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "pystiche/pystiche",
    "commit": "5498e00ba15814f1f3f5238775395049169e3694",
    "filename": "pystiche/ops/op.py",
    "min_patch_found": false,
    "full_warning_msg": "pystiche/ops/op.py:40:4 Inconsistent override [14]: `pystiche.ops.op.Operator.forward` overrides method defined in `pystiche.core._modules.Module` inconsistently. Could not find parameter `Keywords(typing.Any)` in overriding signature.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]