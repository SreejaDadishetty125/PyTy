[
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/cryptomath_module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/cryptomath_module.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/cryptomath_module.py:9:8 Incompatible return type [7]: Expected `int` but got `None`.",
    "message": " Expected `int` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 9,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef findModInverse(a: int, m: int) -> int:\n    if gcd(a, m) != 1:\n        return None\n    u1, u2, u3 = 1, 0, a\n",
        "source_code_len": 112,
        "target_code": "\ndef find_mod_inverse(a: int, m: int) -> int:\n    if gcd(a, m) != 1:\n        raise ValueError(f\"mod inverse of {a!r} and {m!r} does not exist\")\n    u1, u2, u3 = 1, 0, a\n",
        "target_code_len": 169,
        "diff_format": "@@ -6,5 +6,5 @@\n \n-def findModInverse(a: int, m: int) -> int:\n+def find_mod_inverse(a: int, m: int) -> int:\n     if gcd(a, m) != 1:\n-        return None\n+        raise ValueError(f\"mod inverse of {a!r} and {m!r} does not exist\")\n     u1, u2, u3 = 1, 0, a\n",
        "source_code_with_indent": "\n<DED>def findModInverse(a: int, m: int) -> int:\n    <IND>if gcd(a, m) != 1:\n        <IND>return None\n    <DED>u1, u2, u3 = 1, 0, a\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def find_mod_inverse(a: int, m: int) -> int:\n    <IND>if gcd(a, m) != 1:\n        <IND>raise ValueError(f\"mod inverse of {a!r} and {m!r} does not exist\")\n    <DED>u1, u2, u3 = 1, 0, a\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/decrypt_caesar_with_chi_squared.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/decrypt_caesar_with_chi_squared.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/decrypt_caesar_with_chi_squared.py:8:4 Incompatible variable type [9]: cipher_alphabet is declared to have type `str` but is used as type `None`.",
    "message": " cipher_alphabet is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 8,
    "warning_line": "    cipher_alphabet: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Optional\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Tuple\n+from typing import Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    \"\"\"\n",
        "source_code_len": 159,
        "target_code": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -7,6 +7,6 @@\n     ciphertext: str,\n-    cipher_alphabet: str = None,\n-    frequencies_dict: str = None,\n+    cipher_alphabet: Optional[list[str]] = None,\n+    frequencies_dict: Optional[dict[str, float]] = None,\n     case_sensetive: bool = False,\n-) -> Tuple[int, float, str]:\n+) -> tuple[int, float, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    <IND>",
        "target_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/decrypt_caesar_with_chi_squared.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/decrypt_caesar_with_chi_squared.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/decrypt_caesar_with_chi_squared.py:9:4 Incompatible variable type [9]: frequencies_dict is declared to have type `str` but is used as type `None`.",
    "message": " frequencies_dict is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 9,
    "warning_line": "    frequencies_dict: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Optional\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Tuple\n+from typing import Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    \"\"\"\n",
        "source_code_len": 159,
        "target_code": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -7,6 +7,6 @@\n     ciphertext: str,\n-    cipher_alphabet: str = None,\n-    frequencies_dict: str = None,\n+    cipher_alphabet: Optional[list[str]] = None,\n+    frequencies_dict: Optional[dict[str, float]] = None,\n     case_sensetive: bool = False,\n-) -> Tuple[int, float, str]:\n+) -> tuple[int, float, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    <IND>",
        "target_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/decrypt_caesar_with_chi_squared.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/decrypt_caesar_with_chi_squared.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/decrypt_caesar_with_chi_squared.py:126:4 Incompatible variable type [9]: frequencies_dict is declared to have type `str` but is used as type `typing.Union[typing.Dict[Variable[_KT], Variable[_VT]], str]`.",
    "message": " frequencies_dict is declared to have type `str` but is used as type `typing.Union[typing.Dict[Variable[_KT], Variable[_VT]], str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 126,
    "warning_line": "    frequencies_dict = frequencies_dict or {}",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    alphabet_letters = cipher_alphabet or [chr(i) for i in range(97, 123)]\n    frequencies_dict = frequencies_dict or {}\n\n    if frequencies_dict == {}:\n        # Frequencies of letters in the english language (how much they show up)\n",
        "source_code_len": 234,
        "target_code": "    alphabet_letters = cipher_alphabet or [chr(i) for i in range(97, 123)]\n\n    # If the argument is None or the user provided an empty dictionary\n    if not frequencies_dict:\n        # Frequencies of letters in the english language (how much they show up)\n",
        "target_code_len": 257,
        "diff_format": "@@ -125,5 +125,5 @@\n     alphabet_letters = cipher_alphabet or [chr(i) for i in range(97, 123)]\n-    frequencies_dict = frequencies_dict or {}\n-\n-    if frequencies_dict == {}:\n+\n+    # If the argument is None or the user provided an empty dictionary\n+    if not frequencies_dict:\n         # Frequencies of letters in the english language (how much they show up)\n",
        "source_code_with_indent": "    alphabet_letters = cipher_alphabet or [chr(i) for i in range(97, 123)]\n    frequencies_dict = frequencies_dict or {}\n\n    if frequencies_dict == {}:\n        # Frequencies of letters in the english language (how much they show up)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    alphabet_letters = cipher_alphabet or [chr(i) for i in range(97, 123)]\n\n    # If the argument is None or the user provided an empty dictionary\n    if not frequencies_dict:\n        # Frequencies of letters in the english language (how much they show up)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/decrypt_caesar_with_chi_squared.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/decrypt_caesar_with_chi_squared.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/decrypt_caesar_with_chi_squared.py:195:43 Incompatible parameter type [6]: Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 195,
    "warning_line": "                    expected = frequencies[letter] * occurrences",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Optional\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Tuple\n+from typing import Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    \"\"\"\n",
        "source_code_len": 159,
        "target_code": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -7,6 +7,6 @@\n     ciphertext: str,\n-    cipher_alphabet: str = None,\n-    frequencies_dict: str = None,\n+    cipher_alphabet: Optional[list[str]] = None,\n+    frequencies_dict: Optional[dict[str, float]] = None,\n     case_sensetive: bool = False,\n-) -> Tuple[int, float, str]:\n+) -> tuple[int, float, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    <IND>",
        "target_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/decrypt_caesar_with_chi_squared.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/decrypt_caesar_with_chi_squared.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/decrypt_caesar_with_chi_squared.py:198:55 Unsupported operand [58]: `-` is not supported for operand types `int` and `str`.",
    "message": " `-` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 198,
    "warning_line": "                    chi_letter_value = ((occurrences - expected) ** 2) / expected",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Optional\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Tuple\n+from typing import Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    \"\"\"\n",
        "source_code_len": 159,
        "target_code": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -7,6 +7,6 @@\n     ciphertext: str,\n-    cipher_alphabet: str = None,\n-    frequencies_dict: str = None,\n+    cipher_alphabet: Optional[list[str]] = None,\n+    frequencies_dict: Optional[dict[str, float]] = None,\n     case_sensetive: bool = False,\n-) -> Tuple[int, float, str]:\n+) -> tuple[int, float, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    <IND>",
        "target_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/decrypt_caesar_with_chi_squared.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/decrypt_caesar_with_chi_squared.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/decrypt_caesar_with_chi_squared.py:198:73 Unsupported operand [58]: `/` is not supported for operand types `int` and `str`.",
    "message": " `/` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 198,
    "warning_line": "                    chi_letter_value = ((occurrences - expected) ** 2) / expected",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Optional\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Tuple\n+from typing import Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    \"\"\"\n",
        "source_code_len": 159,
        "target_code": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -7,6 +7,6 @@\n     ciphertext: str,\n-    cipher_alphabet: str = None,\n-    frequencies_dict: str = None,\n+    cipher_alphabet: Optional[list[str]] = None,\n+    frequencies_dict: Optional[dict[str, float]] = None,\n     case_sensetive: bool = False,\n-) -> Tuple[int, float, str]:\n+) -> tuple[int, float, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    <IND>",
        "target_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/decrypt_caesar_with_chi_squared.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/decrypt_caesar_with_chi_squared.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/decrypt_caesar_with_chi_squared.py:209:43 Incompatible parameter type [6]: Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "message": " Expected `typing.Union[int, slice]` for 1st positional only parameter to call `str.__getitem__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 209,
    "warning_line": "                    expected = frequencies[letter] * occurrences",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Optional\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Tuple\n+from typing import Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    \"\"\"\n",
        "source_code_len": 159,
        "target_code": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -7,6 +7,6 @@\n     ciphertext: str,\n-    cipher_alphabet: str = None,\n-    frequencies_dict: str = None,\n+    cipher_alphabet: Optional[list[str]] = None,\n+    frequencies_dict: Optional[dict[str, float]] = None,\n     case_sensetive: bool = False,\n-) -> Tuple[int, float, str]:\n+) -> tuple[int, float, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    <IND>",
        "target_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/decrypt_caesar_with_chi_squared.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/decrypt_caesar_with_chi_squared.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/decrypt_caesar_with_chi_squared.py:212:55 Unsupported operand [58]: `-` is not supported for operand types `int` and `str`.",
    "message": " `-` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 212,
    "warning_line": "                    chi_letter_value = ((occurrences - expected) ** 2) / expected",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Optional\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Tuple\n+from typing import Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    \"\"\"\n",
        "source_code_len": 159,
        "target_code": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -7,6 +7,6 @@\n     ciphertext: str,\n-    cipher_alphabet: str = None,\n-    frequencies_dict: str = None,\n+    cipher_alphabet: Optional[list[str]] = None,\n+    frequencies_dict: Optional[dict[str, float]] = None,\n     case_sensetive: bool = False,\n-) -> Tuple[int, float, str]:\n+) -> tuple[int, float, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    <IND>",
        "target_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/decrypt_caesar_with_chi_squared.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/decrypt_caesar_with_chi_squared.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/decrypt_caesar_with_chi_squared.py:212:73 Unsupported operand [58]: `/` is not supported for operand types `int` and `str`.",
    "message": " `/` is not supported for operand types `int` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 212,
    "warning_line": "                    chi_letter_value = ((occurrences - expected) ** 2) / expected",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Tuple\n\n",
        "source_code_len": 27,
        "target_code": "\nfrom typing import Optional\n\n",
        "target_code_len": 30,
        "diff_format": "@@ -2,3 +2,3 @@\n \n-from typing import Tuple\n+from typing import Optional\n \n",
        "source_code_with_indent": "\nfrom typing import Tuple\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    \"\"\"\n",
        "source_code_len": 159,
        "target_code": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    \"\"\"\n",
        "target_code_len": 198,
        "diff_format": "@@ -7,6 +7,6 @@\n     ciphertext: str,\n-    cipher_alphabet: str = None,\n-    frequencies_dict: str = None,\n+    cipher_alphabet: Optional[list[str]] = None,\n+    frequencies_dict: Optional[dict[str, float]] = None,\n     case_sensetive: bool = False,\n-) -> Tuple[int, float, str]:\n+) -> tuple[int, float, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: str = None,\n    frequencies_dict: str = None,\n    case_sensetive: bool = False,\n) -> Tuple[int, float, str]:\n    <IND>",
        "target_code_with_indent": "    ciphertext: str,\n    cipher_alphabet: Optional[list[str]] = None,\n    frequencies_dict: Optional[dict[str, float]] = None,\n    case_sensetive: bool = False,\n) -> tuple[int, float, str]:\n    <IND>"
      }
    ]
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/elgamal_key_generator.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/elgamal_key_generator.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/elgamal_key_generator.py:33:34 Invalid type [31]: Expression `((int, int, int, int), (int, int))` is not a valid type.",
    "message": " Expression `((int, int, int, int), (int, int))` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 33,
    "warning_line": "def generateKey(keySize: int) -> ((int, int, int, int), (int, int)):"
  },
  {
    "project": "TheAlgorithms/Python",
    "commit": "14bcb580d55ee90614ad258ea31ef8fe4e4b5c40",
    "filename": "ciphers/enigma_machine2.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/TheAlgorithms-Python/ciphers/enigma_machine2.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ciphers/enigma_machine2.py:102:4 Incompatible variable type [9]: pb is declared to have type `str` but is used as type `typing.Dict[typing.Any, typing.Any]`.",
    "message": " pb is declared to have type `str` but is used as type `typing.Dict[typing.Any, typing.Any]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 102,
    "warning_line": "    pb = _plugboard(pb)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # Validates string and returns dict\n    pb = _plugboard(pb)\n\n    return rotpos, rotsel, pb\n\n\ndef _plugboard(pbstring: str) -> dict:\n    \"\"\"\n",
        "source_code_len": 144,
        "target_code": "    # Validates string and returns dict\n    pbdict = _plugboard(pb)\n\n    return rotpos, rotsel, pbdict\n\n\ndef _plugboard(pbstring: str) -> dict[str, str]:\n    \"\"\"\n",
        "target_code_len": 162,
        "diff_format": "@@ -101,8 +107,8 @@\n     # Validates string and returns dict\n-    pb = _plugboard(pb)\n-\n-    return rotpos, rotsel, pb\n-\n-\n-def _plugboard(pbstring: str) -> dict:\n+    pbdict = _plugboard(pb)\n+\n+    return rotpos, rotsel, pbdict\n+\n+\n+def _plugboard(pbstring: str) -> dict[str, str]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    # Validates string and returns dict\n    <DED>pb = _plugboard(pb)\n\n    return rotpos, rotsel, pb\n\n\n<DED>def _plugboard(pbstring: str) -> dict:\n    <IND>",
        "target_code_with_indent": "    # Validates string and returns dict\n    <DED>pbdict = _plugboard(pb)\n\n    return rotpos, rotsel, pbdict\n\n\n<DED>def _plugboard(pbstring: str) -> dict[str, str]:\n    <IND>"
      }
    ]
  }
]