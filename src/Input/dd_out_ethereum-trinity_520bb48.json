[
  {
    "project": "ethereum/trinity",
    "commit": "520bb485dd7099e4a65f88be889755beda299624",
    "filename": "p2p/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/p2p/server.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "p2p/server.py:47:52 Incompatible parameter type [6]: Expected `Address` for 2nd positional only parameter to call `DiscoveryProtocol.__init__` but got `Tuple[str, str]`.",
    "message": " Expected `Address` for 2nd positional only parameter to call `DiscoveryProtocol.__init__` but got `Tuple[str, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 47,
    "warning_line": "        discovery = DiscoveryProtocol(self.privkey, self.server_address, bootstrap_nodes=[])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom evm.db.chain import ChainDB\nfrom p2p.auth import (\n    HandshakeResponder,\n    decode_auth_plain,\n    decode_auth_eip8,\n)\n",
        "source_code_len": 128,
        "target_code": "\nfrom evm.db.chain import AsyncChainDB\nfrom p2p.auth import (\n    decode_auth_plain,\n    decode_auth_eip8,\n    HandshakeResponder,\n)\n",
        "target_code_len": 133,
        "diff_format": "@@ -7,7 +7,7 @@\n \n-from evm.db.chain import ChainDB\n+from evm.db.chain import AsyncChainDB\n from p2p.auth import (\n-    HandshakeResponder,\n     decode_auth_plain,\n     decode_auth_eip8,\n+    HandshakeResponder,\n )\n",
        "source_code_with_indent": "\nfrom evm.db.chain import ChainDB\nfrom p2p.auth import (\n    HandshakeResponder,\n    decode_auth_plain,\n    decode_auth_eip8,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom evm.db.chain import AsyncChainDB\nfrom p2p.auth import (\n    decode_auth_plain,\n    decode_auth_eip8,\n    HandshakeResponder,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 privkey: datatypes.PrivateKey,\n                 server_address: Tuple[str, str],\n                 chaindb: ChainDB\n                 ) -> None:\n",
        "source_code_len": 160,
        "target_code": "                 privkey: datatypes.PrivateKey,\n                 server_address: Address,\n                 chaindb: AsyncChainDB\n                 ) -> None:\n",
        "target_code_len": 157,
        "diff_format": "@@ -38,4 +38,4 @@\n                  privkey: datatypes.PrivateKey,\n-                 server_address: Tuple[str, str],\n-                 chaindb: ChainDB\n+                 server_address: Address,\n+                 chaindb: AsyncChainDB\n                  ) -> None:\n",
        "source_code_with_indent": "                 privkey: datatypes.PrivateKey,\n                 server_address: Tuple[str, str],\n                 chaindb: ChainDB\n                 ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 privkey: datatypes.PrivateKey,\n                 server_address: Address,\n                 chaindb: AsyncChainDB\n                 ) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n        asyncio.ensure_future(factory)\n",
        "source_code_len": 164,
        "target_code": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(\n            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n        asyncio.ensure_future(factory)\n",
        "target_code_len": 219,
        "diff_format": "@@ -53,3 +51,4 @@\n         loop = asyncio.get_event_loop()\n-        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n+        factory = asyncio.start_server(\n+            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n         asyncio.ensure_future(factory)\n",
        "source_code_with_indent": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n        asyncio.ensure_future(factory)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(\n            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n        asyncio.ensure_future(factory)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "520bb485dd7099e4a65f88be889755beda299624",
    "filename": "p2p/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/p2p/server.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "p2p/server.py:48:43 Incompatible parameter type [6]: Expected `evm.db.chain.AsyncChainDB` for 2nd positional only parameter to call `PeerPool.__init__` but got `ChainDB`.",
    "message": " Expected `evm.db.chain.AsyncChainDB` for 2nd positional only parameter to call `PeerPool.__init__` but got `ChainDB`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 48,
    "warning_line": "        self.peer_pool = PeerPool(ETHPeer, self.chaindb, 1, self.privkey, discovery)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom evm.db.chain import ChainDB\nfrom p2p.auth import (\n    HandshakeResponder,\n    decode_auth_plain,\n    decode_auth_eip8,\n)\n",
        "source_code_len": 128,
        "target_code": "\nfrom evm.db.chain import AsyncChainDB\nfrom p2p.auth import (\n    decode_auth_plain,\n    decode_auth_eip8,\n    HandshakeResponder,\n)\n",
        "target_code_len": 133,
        "diff_format": "@@ -7,7 +7,7 @@\n \n-from evm.db.chain import ChainDB\n+from evm.db.chain import AsyncChainDB\n from p2p.auth import (\n-    HandshakeResponder,\n     decode_auth_plain,\n     decode_auth_eip8,\n+    HandshakeResponder,\n )\n",
        "source_code_with_indent": "\nfrom evm.db.chain import ChainDB\nfrom p2p.auth import (\n    HandshakeResponder,\n    decode_auth_plain,\n    decode_auth_eip8,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom evm.db.chain import AsyncChainDB\nfrom p2p.auth import (\n    decode_auth_plain,\n    decode_auth_eip8,\n    HandshakeResponder,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 privkey: datatypes.PrivateKey,\n                 server_address: Tuple[str, str],\n                 chaindb: ChainDB\n                 ) -> None:\n",
        "source_code_len": 160,
        "target_code": "                 privkey: datatypes.PrivateKey,\n                 server_address: Address,\n                 chaindb: AsyncChainDB\n                 ) -> None:\n",
        "target_code_len": 157,
        "diff_format": "@@ -38,4 +38,4 @@\n                  privkey: datatypes.PrivateKey,\n-                 server_address: Tuple[str, str],\n-                 chaindb: ChainDB\n+                 server_address: Address,\n+                 chaindb: AsyncChainDB\n                  ) -> None:\n",
        "source_code_with_indent": "                 privkey: datatypes.PrivateKey,\n                 server_address: Tuple[str, str],\n                 chaindb: ChainDB\n                 ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 privkey: datatypes.PrivateKey,\n                 server_address: Address,\n                 chaindb: AsyncChainDB\n                 ) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n        asyncio.ensure_future(factory)\n",
        "source_code_len": 164,
        "target_code": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(\n            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n        asyncio.ensure_future(factory)\n",
        "target_code_len": 219,
        "diff_format": "@@ -53,3 +51,4 @@\n         loop = asyncio.get_event_loop()\n-        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n+        factory = asyncio.start_server(\n+            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n         asyncio.ensure_future(factory)\n",
        "source_code_with_indent": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n        asyncio.ensure_future(factory)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(\n            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n        asyncio.ensure_future(factory)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "520bb485dd7099e4a65f88be889755beda299624",
    "filename": "p2p/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/p2p/server.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "p2p/server.py:49:33 Incompatible parameter type [6]: Expected `p2p.peer.PeerPoolSubscriber` for 1st positional only parameter to call `PeerPool.subscribe` but got `Server`.",
    "message": " Expected `p2p.peer.PeerPoolSubscriber` for 1st positional only parameter to call `PeerPool.subscribe` but got `Server`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 49,
    "warning_line": "        self.peer_pool.subscribe(self)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom evm.db.chain import ChainDB\nfrom p2p.auth import (\n    HandshakeResponder,\n    decode_auth_plain,\n    decode_auth_eip8,\n)\n",
        "source_code_len": 128,
        "target_code": "\nfrom evm.db.chain import AsyncChainDB\nfrom p2p.auth import (\n    decode_auth_plain,\n    decode_auth_eip8,\n    HandshakeResponder,\n)\n",
        "target_code_len": 133,
        "diff_format": "@@ -7,7 +7,7 @@\n \n-from evm.db.chain import ChainDB\n+from evm.db.chain import AsyncChainDB\n from p2p.auth import (\n-    HandshakeResponder,\n     decode_auth_plain,\n     decode_auth_eip8,\n+    HandshakeResponder,\n )\n",
        "source_code_with_indent": "\nfrom evm.db.chain import ChainDB\nfrom p2p.auth import (\n    HandshakeResponder,\n    decode_auth_plain,\n    decode_auth_eip8,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom evm.db.chain import AsyncChainDB\nfrom p2p.auth import (\n    decode_auth_plain,\n    decode_auth_eip8,\n    HandshakeResponder,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 privkey: datatypes.PrivateKey,\n                 server_address: Tuple[str, str],\n                 chaindb: ChainDB\n                 ) -> None:\n",
        "source_code_len": 160,
        "target_code": "                 privkey: datatypes.PrivateKey,\n                 server_address: Address,\n                 chaindb: AsyncChainDB\n                 ) -> None:\n",
        "target_code_len": 157,
        "diff_format": "@@ -38,4 +38,4 @@\n                  privkey: datatypes.PrivateKey,\n-                 server_address: Tuple[str, str],\n-                 chaindb: ChainDB\n+                 server_address: Address,\n+                 chaindb: AsyncChainDB\n                  ) -> None:\n",
        "source_code_with_indent": "                 privkey: datatypes.PrivateKey,\n                 server_address: Tuple[str, str],\n                 chaindb: ChainDB\n                 ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 privkey: datatypes.PrivateKey,\n                 server_address: Address,\n                 chaindb: AsyncChainDB\n                 ) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        self.server_address = server_address\n        # Start Server's PeerPool\n        discovery = DiscoveryProtocol(self.privkey, self.server_address, bootstrap_nodes=[])\n        self.peer_pool = PeerPool(ETHPeer, self.chaindb, 1, self.privkey, discovery)\n        self.peer_pool.subscribe(self)\n\n",
        "source_code_len": 297,
        "target_code": "        self.server_address = server_address\n        discovery = DiscoveryProtocol(self.privkey, self.server_address, bootstrap_nodes=[])\n        self.peer_pool = PeerPool(ETHPeer, self.chaindb, 1, self.privkey, discovery)\n\n",
        "target_code_len": 224,
        "diff_format": "@@ -45,6 +45,4 @@\n         self.server_address = server_address\n-        # Start Server's PeerPool\n         discovery = DiscoveryProtocol(self.privkey, self.server_address, bootstrap_nodes=[])\n         self.peer_pool = PeerPool(ETHPeer, self.chaindb, 1, self.privkey, discovery)\n-        self.peer_pool.subscribe(self)\n \n",
        "source_code_with_indent": "        self.server_address = server_address\n        # Start Server's PeerPool\n        discovery = DiscoveryProtocol(self.privkey, self.server_address, bootstrap_nodes=[])\n        self.peer_pool = PeerPool(ETHPeer, self.chaindb, 1, self.privkey, discovery)\n        self.peer_pool.subscribe(self)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.server_address = server_address\n        discovery = DiscoveryProtocol(self.privkey, self.server_address, bootstrap_nodes=[])\n        self.peer_pool = PeerPool(ETHPeer, self.chaindb, 1, self.privkey, discovery)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n        asyncio.ensure_future(factory)\n",
        "source_code_len": 164,
        "target_code": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(\n            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n        asyncio.ensure_future(factory)\n",
        "target_code_len": 219,
        "diff_format": "@@ -53,3 +51,4 @@\n         loop = asyncio.get_event_loop()\n-        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n+        factory = asyncio.start_server(\n+            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n         asyncio.ensure_future(factory)\n",
        "source_code_with_indent": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n        asyncio.ensure_future(factory)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(\n            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n        asyncio.ensure_future(factory)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "520bb485dd7099e4a65f88be889755beda299624",
    "filename": "p2p/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/p2p/server.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "p2p/server.py:66:35 Incompatible parameter type [6]: Expected `p2p.peer.PeerPoolSubscriber` for 1st positional only parameter to call `PeerPool.unsubscribe` but got `Server`.",
    "message": " Expected `p2p.peer.PeerPoolSubscriber` for 1st positional only parameter to call `PeerPool.unsubscribe` but got `Server`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 66,
    "warning_line": "        self.peer_pool.unsubscribe(self)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "        self.cancel_token.trigger()\n        self.peer_pool.unsubscribe(self)\n        asyncio.ensure_future(self.peer_pool.stop())\n",
        "source_code_len": 130,
        "target_code": "        self.cancel_token.trigger()\n        asyncio.ensure_future(self.peer_pool.stop())\n",
        "target_code_len": 89,
        "diff_format": "@@ -65,3 +64,2 @@\n         self.cancel_token.trigger()\n-        self.peer_pool.unsubscribe(self)\n         asyncio.ensure_future(self.peer_pool.stop())\n",
        "source_code_with_indent": "        self.cancel_token.trigger()\n        self.peer_pool.unsubscribe(self)\n        asyncio.ensure_future(self.peer_pool.stop())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.cancel_token.trigger()\n        asyncio.ensure_future(self.peer_pool.stop())\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/trinity",
    "commit": "520bb485dd7099e4a65f88be889755beda299624",
    "filename": "p2p/server.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-trinity/p2p/server.py",
    "file_hunks_size": 7,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "p2p/server.py:107:60 Incompatible parameter type [6]: Expected `evm.db.chain.AsyncChainDB` for 9th parameter `chaindb` to call `p2p.peer.BasePeer.__init__` but got `ChainDB`.",
    "message": " Expected `evm.db.chain.AsyncChainDB` for 9th parameter `chaindb` to call `p2p.peer.BasePeer.__init__` but got `ChainDB`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 107,
    "warning_line": "            egress_mac=egress_mac, ingress_mac=ingress_mac, chaindb=self.chaindb,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom evm.db.chain import ChainDB\nfrom p2p.auth import (\n    HandshakeResponder,\n    decode_auth_plain,\n    decode_auth_eip8,\n)\n",
        "source_code_len": 128,
        "target_code": "\nfrom evm.db.chain import AsyncChainDB\nfrom p2p.auth import (\n    decode_auth_plain,\n    decode_auth_eip8,\n    HandshakeResponder,\n)\n",
        "target_code_len": 133,
        "diff_format": "@@ -7,7 +7,7 @@\n \n-from evm.db.chain import ChainDB\n+from evm.db.chain import AsyncChainDB\n from p2p.auth import (\n-    HandshakeResponder,\n     decode_auth_plain,\n     decode_auth_eip8,\n+    HandshakeResponder,\n )\n",
        "source_code_with_indent": "\nfrom evm.db.chain import ChainDB\nfrom p2p.auth import (\n    HandshakeResponder,\n    decode_auth_plain,\n    decode_auth_eip8,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom evm.db.chain import AsyncChainDB\nfrom p2p.auth import (\n    decode_auth_plain,\n    decode_auth_eip8,\n    HandshakeResponder,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                 privkey: datatypes.PrivateKey,\n                 server_address: Tuple[str, str],\n                 chaindb: ChainDB\n                 ) -> None:\n",
        "source_code_len": 160,
        "target_code": "                 privkey: datatypes.PrivateKey,\n                 server_address: Address,\n                 chaindb: AsyncChainDB\n                 ) -> None:\n",
        "target_code_len": 157,
        "diff_format": "@@ -38,4 +38,4 @@\n                  privkey: datatypes.PrivateKey,\n-                 server_address: Tuple[str, str],\n-                 chaindb: ChainDB\n+                 server_address: Address,\n+                 chaindb: AsyncChainDB\n                  ) -> None:\n",
        "source_code_with_indent": "                 privkey: datatypes.PrivateKey,\n                 server_address: Tuple[str, str],\n                 chaindb: ChainDB\n                 ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                 privkey: datatypes.PrivateKey,\n                 server_address: Address,\n                 chaindb: AsyncChainDB\n                 ) -> None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n        asyncio.ensure_future(factory)\n",
        "source_code_len": 164,
        "target_code": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(\n            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n        asyncio.ensure_future(factory)\n",
        "target_code_len": 219,
        "diff_format": "@@ -53,3 +51,4 @@\n         loop = asyncio.get_event_loop()\n-        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n+        factory = asyncio.start_server(\n+            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n         asyncio.ensure_future(factory)\n",
        "source_code_with_indent": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(self.receive_handshake, *self.server_address)\n        asyncio.ensure_future(factory)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        loop = asyncio.get_event_loop()\n        factory = asyncio.start_server(\n            self.receive_handshake, host=self.server_address.ip, port=self.server_address.udp_port)\n        asyncio.ensure_future(factory)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]