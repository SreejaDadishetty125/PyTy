[
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/certificate.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/certificate.py:393:76 Incompatible parameter type [6]: Expected `Key` for 2nd positional only parameter to call `Certificate._create_root_certificate` but got `cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey`.",
    "message": " Expected `Key` for 2nd positional only parameter to call `Certificate._create_root_certificate` but got `cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 393,
    "warning_line": "            self._certificate = self._create_root_certificate(cert_request, private_key)"
  },
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/certificate.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/certificate.py:395:84 Incompatible parameter type [6]: Expected `Key` for 2nd positional only parameter to call `Certificate._create_intermediate_certificate` but got `cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey`.",
    "message": " Expected `Key` for 2nd positional only parameter to call `Certificate._create_intermediate_certificate` but got `cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 395,
    "warning_line": "            self._certificate = self._create_intermediate_certificate(cert_request, private_key, issuer_key)"
  },
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/certificate.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/certificate.py:395:97 Incompatible parameter type [6]: Expected `Key` for 3rd positional only parameter to call `Certificate._create_intermediate_certificate` but got `typing.Optional[cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey]`.",
    "message": " Expected `Key` for 3rd positional only parameter to call `Certificate._create_intermediate_certificate` but got `typing.Optional[cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 395,
    "warning_line": "            self._certificate = self._create_intermediate_certificate(cert_request, private_key, issuer_key)"
  },
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/certificate.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/certificate.py:397:78 Incompatible parameter type [6]: Expected `Key` for 2nd positional only parameter to call `Certificate._create_server_certificate` but got `cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey`.",
    "message": " Expected `Key` for 2nd positional only parameter to call `Certificate._create_server_certificate` but got `cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 397,
    "warning_line": "            self._certificate = self._create_server_certificate(cert_request, private_key, issuer_key)"
  },
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/certificate.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/certificate.py:397:91 Incompatible parameter type [6]: Expected `Key` for 3rd positional only parameter to call `Certificate._create_server_certificate` but got `typing.Optional[cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey]`.",
    "message": " Expected `Key` for 3rd positional only parameter to call `Certificate._create_server_certificate` but got `typing.Optional[cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 397,
    "warning_line": "            self._certificate = self._create_server_certificate(cert_request, private_key, issuer_key)"
  },
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/certificate.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/certificate.py:399:78 Incompatible parameter type [6]: Expected `Key` for 2nd positional only parameter to call `Certificate._create_client_certificate` but got `cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey`.",
    "message": " Expected `Key` for 2nd positional only parameter to call `Certificate._create_client_certificate` but got `cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 399,
    "warning_line": "            self._certificate = self._create_client_certificate(cert_request, private_key, issuer_key)"
  },
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/certificate.py",
    "file_hunks_size": 18,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/certificate.py:399:91 Incompatible parameter type [6]: Expected `Key` for 3rd positional only parameter to call `Certificate._create_client_certificate` but got `typing.Optional[cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey]`.",
    "message": " Expected `Key` for 3rd positional only parameter to call `Certificate._create_client_certificate` but got `typing.Optional[cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 399,
    "warning_line": "            self._certificate = self._create_client_certificate(cert_request, private_key, issuer_key)"
  },
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/certificate.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/certificate.py:402:24 Incompatible variable type [9]: encoding is declared to have type `str` but is used as type `serialization.Encoding`.",
    "message": " encoding is declared to have type `str` but is used as type `serialization.Encoding`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 402,
    "warning_line": "    def serialize(self, encoding: str = serialization.Encoding.PEM) -> bytes:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serialize(self, encoding: str = serialization.Encoding.PEM) -> bytes:\n        \"\"\"\n",
        "source_code_len": 91,
        "target_code": "\n    def serialize(self, encoding: serialization.Encoding = serialization.Encoding.PEM) -> str:\n        \"\"\"\n",
        "target_code_len": 108,
        "diff_format": "@@ -401,3 +404,3 @@\n \n-    def serialize(self, encoding: str = serialization.Encoding.PEM) -> bytes:\n+    def serialize(self, encoding: serialization.Encoding = serialization.Encoding.PEM) -> str:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def serialize(self, encoding: str = serialization.Encoding.PEM) -> bytes:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def serialize(self, encoding: serialization.Encoding = serialization.Encoding.PEM) -> str:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return self._certificate.public_bytes(encoding=encoding)\n\n    def load(self, pem: bytes) -> 'Certificate':\n        \"\"\"\n",
        "source_code_len": 128,
        "target_code": "\n        return self._certificate.public_bytes(encoding=encoding).decode('utf8')\n\n    def load(self, pem: str) -> 'Certificate':\n        \"\"\"\n",
        "target_code_len": 141,
        "diff_format": "@@ -415,5 +417,5 @@\n \n-        return self._certificate.public_bytes(encoding=encoding)\n-\n-    def load(self, pem: bytes) -> 'Certificate':\n+        return self._certificate.public_bytes(encoding=encoding).decode('utf8')\n+\n+    def load(self, pem: str) -> 'Certificate':\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        <DED>return self._certificate.public_bytes(encoding=encoding)\n\n    <DED>def load(self, pem: bytes) -> 'Certificate':\n        <IND>",
        "target_code_with_indent": "\n        <DED>return self._certificate.public_bytes(encoding=encoding).decode('utf8')\n\n    <DED>def load(self, pem: str) -> 'Certificate':\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._certificate = x509.load_pem_x509_certificate(pem, backend=default_backend())\n        return self\n",
        "source_code_len": 112,
        "target_code": "\n        self._certificate = x509.load_pem_x509_certificate(pem.encode('utf8'), backend=default_backend())\n        return self\n",
        "target_code_len": 127,
        "diff_format": "@@ -425,3 +427,3 @@\n \n-        self._certificate = x509.load_pem_x509_certificate(pem, backend=default_backend())\n+        self._certificate = x509.load_pem_x509_certificate(pem.encode('utf8'), backend=default_backend())\n         return self\n",
        "source_code_with_indent": "\n        self._certificate = x509.load_pem_x509_certificate(pem, backend=default_backend())\n        return self\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self._certificate = x509.load_pem_x509_certificate(pem.encode('utf8'), backend=default_backend())\n        return self\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/certificate.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/certificate.py",
    "file_hunks_size": 18,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/certificate.py:416:46 Incompatible parameter type [6]: Expected `serialization.Encoding` for 1st parameter `encoding` to call `x509.Certificate.public_bytes` but got `str`.",
    "message": " Expected `serialization.Encoding` for 1st parameter `encoding` to call `x509.Certificate.public_bytes` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 416,
    "warning_line": "        return self._certificate.public_bytes(encoding=encoding)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def serialize(self, encoding: str = serialization.Encoding.PEM) -> bytes:\n        \"\"\"\n",
        "source_code_len": 91,
        "target_code": "\n    def serialize(self, encoding: serialization.Encoding = serialization.Encoding.PEM) -> str:\n        \"\"\"\n",
        "target_code_len": 108,
        "diff_format": "@@ -401,3 +404,3 @@\n \n-    def serialize(self, encoding: str = serialization.Encoding.PEM) -> bytes:\n+    def serialize(self, encoding: serialization.Encoding = serialization.Encoding.PEM) -> str:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def serialize(self, encoding: str = serialization.Encoding.PEM) -> bytes:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def serialize(self, encoding: serialization.Encoding = serialization.Encoding.PEM) -> str:\n        <IND>"
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        return self._certificate.public_bytes(encoding=encoding)\n\n    def load(self, pem: bytes) -> 'Certificate':\n        \"\"\"\n",
        "source_code_len": 128,
        "target_code": "\n        return self._certificate.public_bytes(encoding=encoding).decode('utf8')\n\n    def load(self, pem: str) -> 'Certificate':\n        \"\"\"\n",
        "target_code_len": 141,
        "diff_format": "@@ -415,5 +417,5 @@\n \n-        return self._certificate.public_bytes(encoding=encoding)\n-\n-    def load(self, pem: bytes) -> 'Certificate':\n+        return self._certificate.public_bytes(encoding=encoding).decode('utf8')\n+\n+    def load(self, pem: str) -> 'Certificate':\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        <DED>return self._certificate.public_bytes(encoding=encoding)\n\n    <DED>def load(self, pem: bytes) -> 'Certificate':\n        <IND>",
        "target_code_with_indent": "\n        <DED>return self._certificate.public_bytes(encoding=encoding).decode('utf8')\n\n    <DED>def load(self, pem: str) -> 'Certificate':\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        self._certificate = x509.load_pem_x509_certificate(pem, backend=default_backend())\n        return self\n",
        "source_code_len": 112,
        "target_code": "\n        self._certificate = x509.load_pem_x509_certificate(pem.encode('utf8'), backend=default_backend())\n        return self\n",
        "target_code_len": 127,
        "diff_format": "@@ -425,3 +427,3 @@\n \n-        self._certificate = x509.load_pem_x509_certificate(pem, backend=default_backend())\n+        self._certificate = x509.load_pem_x509_certificate(pem.encode('utf8'), backend=default_backend())\n         return self\n",
        "source_code_with_indent": "\n        self._certificate = x509.load_pem_x509_certificate(pem, backend=default_backend())\n        return self\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        self._certificate = x509.load_pem_x509_certificate(pem.encode('utf8'), backend=default_backend())\n        return self\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/key.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/key.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/key.py:31:50 Incompatible variable type [9]: encoding is declared to have type `str` but is used as type `serialization.Encoding`.",
    "message": " encoding is declared to have type `str` but is used as type `serialization.Encoding`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 31,
    "warning_line": "    def serialize(self, passphrase: bytes = None, encoding: str = serialization.Encoding.PEM) -> bytes:"
  },
  {
    "project": "repleo/bounca",
    "commit": "81004babe9be9033420a59ed2a8915a270b8abb0",
    "filename": "certificate_engine/ssl/key.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/repleo-bounca/certificate_engine/ssl/key.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "certificate_engine/ssl/key.py:60:8 Incompatible return type [7]: Expected `RSAPrivateKey` but got `Key`.",
    "message": " Expected `RSAPrivateKey` but got `Key`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 60,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def load(self, pem: bytes, passphrase: bytes = None) -> RSAPrivateKey:\n        \"\"\"\n",
        "source_code_len": 88,
        "target_code": "\n    def load(self, pem: bytes, passphrase: bytes = None) -> 'Key':\n        \"\"\"\n",
        "target_code_len": 80,
        "diff_format": "@@ -50,3 +50,3 @@\n \n-    def load(self, pem: bytes, passphrase: bytes = None) -> RSAPrivateKey:\n+    def load(self, pem: bytes, passphrase: bytes = None) -> 'Key':\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def load(self, pem: bytes, passphrase: bytes = None) -> RSAPrivateKey:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def load(self, pem: bytes, passphrase: bytes = None) -> 'Key':\n        <IND>"
      }
    ]
  }
]