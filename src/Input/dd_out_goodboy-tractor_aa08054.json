[
  {
    "project": "goodboy/tractor",
    "commit": "aa080543d0e739950afb7ba350ffabf064f96e01",
    "filename": "tractor/_actor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/goodboy-tractor/tractor/_actor.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tractor/_actor.py:290:8 Incompatible variable type [9]: arbiter_addr is declared to have type `Optional[Tuple[str, int]]` but is used as type `Tuple[None, None]`.",
    "message": " arbiter_addr is declared to have type `Optional[Tuple[str, int]]` but is used as type `Tuple[None, None]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 290,
    "warning_line": "        arbiter_addr: Optional[Tuple[str, int]] = (None, None),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        loglevel: str = None,\n        arbiter_addr: Optional[Tuple[str, int]] = (None, None),\n        spawn_method: Optional[str] = None\n",
        "source_code_len": 137,
        "target_code": "        loglevel: str = None,\n        arbiter_addr: Optional[Tuple[str, int]] = None,\n        spawn_method: Optional[str] = None\n",
        "target_code_len": 129,
        "diff_format": "@@ -289,3 +289,3 @@\n         loglevel: str = None,\n-        arbiter_addr: Optional[Tuple[str, int]] = (None, None),\n+        arbiter_addr: Optional[Tuple[str, int]] = None,\n         spawn_method: Optional[str] = None\n",
        "source_code_with_indent": "        loglevel: str = None,\n        arbiter_addr: Optional[Tuple[str, int]] = (None, None),\n        spawn_method: Optional[str] = None\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        loglevel: str = None,\n        arbiter_addr: Optional[Tuple[str, int]] = None,\n        spawn_method: Optional[str] = None\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "goodboy/tractor",
    "commit": "aa080543d0e739950afb7ba350ffabf064f96e01",
    "filename": "tractor/_actor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/goodboy-tractor/tractor/_actor.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tractor/_actor.py:320:31 Incompatible parameter type [6]: Expected `typing.Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Optional[Tuple[str, int]]`.",
    "message": " Expected `typing.Iterable[Variable[_T_co](covariant)]` for 1st positional only parameter to call `tuple.__new__` but got `Optional[Tuple[str, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 320,
    "warning_line": "        self._arb_addr = tuple(arbiter_addr)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.loglevel = loglevel\n        self._arb_addr = tuple(arbiter_addr)\n\n",
        "source_code_len": 79,
        "target_code": "        self.loglevel = loglevel\n\n        self._arb_addr = arbiter_addr or (None, None)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -319,3 +319,4 @@\n         self.loglevel = loglevel\n-        self._arb_addr = tuple(arbiter_addr)\n+\n+        self._arb_addr = arbiter_addr or (None, None)\n \n",
        "source_code_with_indent": "        self.loglevel = loglevel\n        self._arb_addr = tuple(arbiter_addr)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self.loglevel = loglevel\n\n        self._arb_addr = arbiter_addr or (None, None)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "goodboy/tractor",
    "commit": "aa080543d0e739950afb7ba350ffabf064f96e01",
    "filename": "tractor/_actor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/goodboy-tractor/tractor/_actor.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tractor/_actor.py:1181:8 Incompatible variable type [9]: uid is declared to have type `Tuple[str, str]` but is used as type `typing.Tuple[typing.Any, ...]`.",
    "message": " uid is declared to have type `Tuple[str, str]` but is used as type `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1181,
    "warning_line": "        uid: Tuple[str, str] = tuple(await chan.recv())",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        await chan.send(self.uid)\n        uid: Tuple[str, str] = tuple(await chan.recv())\n\n        # if not isinstance(uid, tuple):\n        #     raise ValueError(f\"{uid} is not a valid uid?!\")\n\n",
        "source_code_len": 195,
        "target_code": "        await chan.send(self.uid)\n        uid: Tuple[str, str] = await chan.recv()\n\n        if not isinstance(uid, tuple):\n            raise ValueError(f\"{uid} is not a valid uid?!\")\n\n",
        "target_code_len": 184,
        "diff_format": "@@ -1180,6 +1183,6 @@\n         await chan.send(self.uid)\n-        uid: Tuple[str, str] = tuple(await chan.recv())\n-\n-        # if not isinstance(uid, tuple):\n-        #     raise ValueError(f\"{uid} is not a valid uid?!\")\n+        uid: Tuple[str, str] = await chan.recv()\n+\n+        if not isinstance(uid, tuple):\n+            raise ValueError(f\"{uid} is not a valid uid?!\")\n \n",
        "source_code_with_indent": "        await chan.send(self.uid)\n        uid: Tuple[str, str] = tuple(await chan.recv())\n\n        # if not isinstance(uid, tuple):\n        #     raise ValueError(f\"{uid} is not a valid uid?!\")\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        await chan.send(self.uid)\n        uid: Tuple[str, str] = await chan.recv()\n\n        if not isinstance(uid, tuple):\n            <IND>raise ValueError(f\"{uid} is not a valid uid?!\")\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "goodboy/tractor",
    "commit": "aa080543d0e739950afb7ba350ffabf064f96e01",
    "filename": "tractor/_actor.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/goodboy-tractor/tractor/_actor.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tractor/_actor.py:1251:8 Incompatible variable type [9]: uid is declared to have type `Tuple[str, str]` but is used as type `typing.Tuple[str, ...]`.",
    "message": " uid is declared to have type `Tuple[str, str]` but is used as type `typing.Tuple[str, ...]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1251,
    "warning_line": "        uid = tuple(uid)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    async def register_actor(\n        self, uid: Tuple[str, str], sockaddr: Tuple[str, int]\n    ) -> None:\n        uid = tuple(uid)\n        name, uuid = uid\n        self._registry[uid] = tuple(sockaddr)\n",
        "source_code_len": 203,
        "target_code": "    async def register_actor(\n        self,\n        uid: Tuple[str, str],\n        sockaddr: Tuple[str, str]\n\n    ) -> None:\n        name, uuid = tuple(uid)\n        self._registry[uid] = tuple(sockaddr)\n",
        "target_code_len": 202,
        "diff_format": "@@ -1248,6 +1251,8 @@\n     async def register_actor(\n-        self, uid: Tuple[str, str], sockaddr: Tuple[str, int]\n+        self,\n+        uid: Tuple[str, str],\n+        sockaddr: Tuple[str, str]\n+\n     ) -> None:\n-        uid = tuple(uid)\n-        name, uuid = uid\n+        name, uuid = tuple(uid)\n         self._registry[uid] = tuple(sockaddr)\n",
        "source_code_with_indent": "    <DED>async def register_actor(\n        self, uid: Tuple[str, str], sockaddr: Tuple[str, int]\n    ) -> None:\n        <IND>uid = tuple(uid)\n        name, uuid = uid\n        self._registry[uid] = tuple(sockaddr)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>async def register_actor(\n        self,\n        uid: Tuple[str, str],\n        sockaddr: Tuple[str, str]\n\n    ) -> None:\n        <IND>name, uuid = tuple(uid)\n        self._registry[uid] = tuple(sockaddr)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "goodboy/tractor",
    "commit": "aa080543d0e739950afb7ba350ffabf064f96e01",
    "filename": "tractor/_ipc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/goodboy-tractor/tractor/_ipc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tractor/_ipc.py:177:12 Incompatible variable type [9]: size is declared to have type `int` but is used as type `bytes`.",
    "message": " size is declared to have type `int` but is used as type `bytes`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 177,
    "warning_line": "            size: int = struct.pack(\"<I\", len(bytes_data))",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            # https://stackoverflow.com/a/54027962\n            size: int = struct.pack(\"<I\", len(bytes_data))\n\n",
        "source_code_len": 111,
        "target_code": "            # https://stackoverflow.com/a/54027962\n            size: bytes = struct.pack(\"<I\", len(bytes_data))\n\n",
        "target_code_len": 113,
        "diff_format": "@@ -176,3 +176,3 @@\n             # https://stackoverflow.com/a/54027962\n-            size: int = struct.pack(\"<I\", len(bytes_data))\n+            size: bytes = struct.pack(\"<I\", len(bytes_data))\n \n",
        "source_code_with_indent": "            # https://stackoverflow.com/a/54027962\n            size: int = struct.pack(\"<I\", len(bytes_data))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            # https://stackoverflow.com/a/54027962\n            size: bytes = struct.pack(\"<I\", len(bytes_data))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "goodboy/tractor",
    "commit": "aa080543d0e739950afb7ba350ffabf064f96e01",
    "filename": "tractor/_ipc.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/goodboy-tractor/tractor/_ipc.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "tractor/_ipc.py:209:8 Incompatible attribute type [8]: Attribute `msgstream` declared in class `Channel` has type `Optional[typing.Type[typing.Any]]` but is used as type `Optional[MsgpackTCPStream]`.",
    "message": " Attribute `msgstream` declared in class `Channel` has type `Optional[typing.Type[typing.Any]]` but is used as type `Optional[MsgpackTCPStream]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 209,
    "warning_line": "        self.msgstream: Optional[type] = stream_serializer_type(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n        try:\n",
        "source_code_len": 14,
        "target_code": "\n        stream_serializer_type = MsgpackTCPStream\n\n        try:\n",
        "target_code_len": 65,
        "diff_format": "@@ -199,2 +199,4 @@\n \n+        stream_serializer_type = MsgpackTCPStream\n+\n         try:\n",
        "source_code_with_indent": "\n        try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        stream_serializer_type = MsgpackTCPStream\n\n        try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            import msgspec  # noqa\n            stream_serializer_type: type = MsgspecTCPStream\n\n        except ImportError:\n            stream_serializer_type: type = MsgpackTCPStream\n\n        self.stream_serializer_type = stream_serializer_type\n        self.msgstream: Optional[type] = stream_serializer_type(\n            stream) if stream else None\n\n",
        "source_code_len": 352,
        "target_code": "            import msgspec  # noqa\n            stream_serializer_type = MsgspecTCPStream\n        except ImportError:\n            pass\n\n        self.stream_serializer_type = stream_serializer_type\n        self.msgstream = stream_serializer_type(stream) if stream else None\n\n",
        "target_code_len": 273,
        "diff_format": "@@ -202,10 +204,8 @@\n             import msgspec  # noqa\n-            stream_serializer_type: type = MsgspecTCPStream\n-\n+            stream_serializer_type = MsgspecTCPStream\n         except ImportError:\n-            stream_serializer_type: type = MsgpackTCPStream\n+            pass\n \n         self.stream_serializer_type = stream_serializer_type\n-        self.msgstream: Optional[type] = stream_serializer_type(\n-            stream) if stream else None\n+        self.msgstream = stream_serializer_type(stream) if stream else None\n \n",
        "source_code_with_indent": "            <IND>import msgspec  # noqa\n            stream_serializer_type: type = MsgspecTCPStream\n\n        <DED>except ImportError:\n            <IND>stream_serializer_type: type = MsgpackTCPStream\n\n        <DED>self.stream_serializer_type = stream_serializer_type\n        self.msgstream: Optional[type] = stream_serializer_type(\n            stream) if stream else None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            <IND>import msgspec  # noqa\n            stream_serializer_type = MsgspecTCPStream\n        <DED>except ImportError:\n            <IND>pass\n\n        <DED>self.stream_serializer_type = stream_serializer_type\n        self.msgstream = stream_serializer_type(stream) if stream else None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]