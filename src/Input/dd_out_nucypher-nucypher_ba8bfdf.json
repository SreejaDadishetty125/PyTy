[
  {
    "project": "nucypher/nucypher",
    "commit": "ba8bfdf43550126f80ab7f7b702a4cd0a4a542c4",
    "filename": "nucypher/config/keyring.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nucypher-nucypher/nucypher/config/keyring.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nucypher/config/keyring.py:353:43 Unbound name [10]: Name `der_wrap_key` is used but not defined in the current scope.",
    "message": " Name `der_wrap_key` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 353,
    "warning_line": "            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            \n",
        "source_code_len": 428,
        "target_code": "\n            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n            \n",
        "target_code_len": 462,
        "diff_format": "@@ -352,10 +363,10 @@\n \n-            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n-            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n-\n-            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n-            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n-\n-            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n-            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n+            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n+            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n+\n+            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n+            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n+\n+            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n+            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n             \n",
        "source_code_with_indent": "\n            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            \n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n            \n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nucypher/nucypher",
    "commit": "ba8bfdf43550126f80ab7f7b702a4cd0a4a542c4",
    "filename": "nucypher/config/keyring.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nucypher-nucypher/nucypher/config/keyring.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nucypher/config/keyring.py:353:57 Unbound name [10]: Name `enc_key` is used but not defined in the current scope.",
    "message": " Name `enc_key` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 353,
    "warning_line": "            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            \n",
        "source_code_len": 428,
        "target_code": "\n            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n            \n",
        "target_code_len": 462,
        "diff_format": "@@ -352,10 +363,10 @@\n \n-            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n-            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n-\n-            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n-            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n-\n-            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n-            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n+            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n+            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n+\n+            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n+            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n+\n+            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n+            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n             \n",
        "source_code_with_indent": "\n            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            \n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n            \n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nucypher/nucypher",
    "commit": "ba8bfdf43550126f80ab7f7b702a4cd0a4a542c4",
    "filename": "nucypher/config/keyring.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nucypher-nucypher/nucypher/config/keyring.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nucypher/config/keyring.py:354:57 Unbound name [10]: Name `sig_key` is used but not defined in the current scope.",
    "message": " Name `sig_key` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 354,
    "warning_line": "            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            \n",
        "source_code_len": 428,
        "target_code": "\n            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n            \n",
        "target_code_len": 462,
        "diff_format": "@@ -352,10 +363,10 @@\n \n-            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n-            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n-\n-            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n-            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n-\n-            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n-            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n+            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n+            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n+\n+            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n+            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n+\n+            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n+            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n             \n",
        "source_code_with_indent": "\n            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            \n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n            \n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nucypher/nucypher",
    "commit": "ba8bfdf43550126f80ab7f7b702a4cd0a4a542c4",
    "filename": "nucypher/config/keyring.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nucypher-nucypher/nucypher/config/keyring.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nucypher/config/keyring.py:356:56 Unbound name [10]: Name `salt` is used but not defined in the current scope.",
    "message": " Name `salt` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 356,
    "warning_line": "            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            \n",
        "source_code_len": 428,
        "target_code": "\n            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n            \n",
        "target_code_len": 462,
        "diff_format": "@@ -352,10 +363,10 @@\n \n-            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n-            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n-\n-            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n-            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n-\n-            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n-            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n+            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n+            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n+\n+            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n+            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n+\n+            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n+            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n             \n",
        "source_code_with_indent": "\n            enc_json = _encrypt_umbral_key(der_wrap_key, enc_key)\n            sig_json = _encrypt_umbral_key(der_wrap_key, sig_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(salt).decode()\n            \n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            enc_json = _encrypt_umbral_key(der_key_material, enc_wrap_key)\n            sig_json = _encrypt_umbral_key(der_key_material, sig_wrap_key)\n\n            enc_json['master_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['master_salt'] = urlsafe_b64encode(sig_salt).decode()\n\n            enc_json['wrap_salt'] = urlsafe_b64encode(enc_salt).decode()\n            sig_json['wrap_salt'] = urlsafe_b64encode(sig_salt).decode()\n            \n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nucypher/nucypher",
    "commit": "ba8bfdf43550126f80ab7f7b702a4cd0a4a542c4",
    "filename": "nucypher/config/keyring.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nucypher-nucypher/nucypher/config/keyring.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nucypher/config/keyring.py:366:59 Unbound name [10]: Name `urlsafe_b64encoder` is used but not defined in the current scope.",
    "message": " Name `urlsafe_b64encoder` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 366,
    "warning_line": "            bytes_enc_pubkey = enc_pubkey.to_bytes(encoder=urlsafe_b64encoder)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n            bytes_enc_pubkey = enc_pubkey.to_bytes(encoder=urlsafe_b64encoder)\n            bytes_sig_pubkey = sig_pubkey.to_bytes(encoder=urlsafe_b64encoder)\n\n",
        "source_code_len": 160,
        "target_code": "\n            bytes_enc_pubkey = enc_pubkey.to_bytes(encoder=urlsafe_b64encode)\n            bytes_sig_pubkey = sig_pubkey.to_bytes(encoder=urlsafe_b64encode)\n\n",
        "target_code_len": 158,
        "diff_format": "@@ -365,4 +376,4 @@\n \n-            bytes_enc_pubkey = enc_pubkey.to_bytes(encoder=urlsafe_b64encoder)\n-            bytes_sig_pubkey = sig_pubkey.to_bytes(encoder=urlsafe_b64encoder)\n+            bytes_enc_pubkey = enc_pubkey.to_bytes(encoder=urlsafe_b64encode)\n+            bytes_sig_pubkey = sig_pubkey.to_bytes(encoder=urlsafe_b64encode)\n \n",
        "source_code_with_indent": "\n            bytes_enc_pubkey = enc_pubkey.to_bytes(encoder=urlsafe_b64encoder)\n            bytes_sig_pubkey = sig_pubkey.to_bytes(encoder=urlsafe_b64encoder)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n            bytes_enc_pubkey = enc_pubkey.to_bytes(encoder=urlsafe_b64encode)\n            bytes_sig_pubkey = sig_pubkey.to_bytes(encoder=urlsafe_b64encode)\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "nucypher/nucypher",
    "commit": "ba8bfdf43550126f80ab7f7b702a4cd0a4a542c4",
    "filename": "nucypher/config/keyring.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/nucypher-nucypher/nucypher/config/keyring.py",
    "file_hunks_size": 11,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "nucypher/config/keyring.py:367:31 Unbound name [10]: Name `sig_pubkey` is used but not defined in the current scope.",
    "message": " Name `sig_pubkey` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 367,
    "warning_line": "            bytes_sig_pubkey = sig_pubkey.to_bytes(encoder=urlsafe_b64encoder)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Generate keys\n        keyring_args = dict()\n        if encryption is True:\n            enc_privkey, enc_pubkey = _generate_encryption_keys()\n            sig_privkey, enc_pubkey = _generate_signing_keys()\n\n",
        "source_code_len": 215,
        "target_code": "        # Generate keys\n        keyring_args = dict()  # type: dict\n        if encryption is True:\n            enc_privkey, enc_pubkey = _generate_encryption_keys()\n            sig_privkey, sig_pubkey = _generate_signing_keys()\n\n",
        "target_code_len": 229,
        "diff_format": "@@ -339,6 +350,6 @@\n         # Generate keys\n-        keyring_args = dict()\n+        keyring_args = dict()  # type: dict\n         if encryption is True:\n             enc_privkey, enc_pubkey = _generate_encryption_keys()\n-            sig_privkey, enc_pubkey = _generate_signing_keys()\n+            sig_privkey, sig_pubkey = _generate_signing_keys()\n \n",
        "source_code_with_indent": "        # Generate keys\n        keyring_args = dict()\n        if encryption is True:\n            <IND>enc_privkey, enc_pubkey = _generate_encryption_keys()\n            sig_privkey, enc_pubkey = _generate_signing_keys()\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Generate keys\n        keyring_args = dict()  # type: dict\n        if encryption is True:\n            <IND>enc_privkey, enc_pubkey = _generate_encryption_keys()\n            sig_privkey, sig_pubkey = _generate_signing_keys()\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]