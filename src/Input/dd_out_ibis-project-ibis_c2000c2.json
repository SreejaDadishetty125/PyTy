[
  {
    "project": "ibis-project/ibis",
    "commit": "c2000c2ef11ce7c14672fc7a0b575d36d2107138",
    "filename": "ibis/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/config.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/config.py:745:4 Incompatible variable type [9]: keys is declared to have type `str` but is used as type `typing.List[str]`.",
    "message": " keys is declared to have type `str` but is used as type `typing.List[str]`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 745,
    "warning_line": "    keys = [x for x in keys if x.find('.') >= 0]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import Callable\n\n",
        "source_code_len": 67,
        "target_code": "from contextlib import contextmanager\nfrom typing import Callable, Dict, List, Tuple\n\n",
        "target_code_len": 86,
        "diff_format": "@@ -25,3 +26,3 @@\n from contextlib import contextmanager\n-from typing import Callable\n+from typing import Callable, Dict, List, Tuple\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import Callable, Dict, List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef pp_options_list(keys: str, width: int = 80, _print: bool = False) -> str:\n    \"\"\"\n",
        "source_code_len": 87,
        "target_code": "\ndef pp_options_list(\n    keys: List[str], width: int = 80, _print: bool = False\n) -> str | None:\n    \"\"\"\n",
        "target_code_len": 106,
        "diff_format": "@@ -710,3 +719,5 @@\n \n-def pp_options_list(keys: str, width: int = 80, _print: bool = False) -> str:\n+def pp_options_list(\n+    keys: List[str], width: int = 80, _print: bool = False\n+) -> str | None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def pp_options_list(keys: str, width: int = 80, _print: bool = False) -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED>def pp_options_list(\n    keys: List[str], width: int = 80, _print: bool = False\n) -> str | None:\n    <IND>"
      }
    ]
  },
  {
    "project": "ibis-project/ibis",
    "commit": "c2000c2ef11ce7c14672fc7a0b575d36d2107138",
    "filename": "ibis/config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ibis-project-ibis/ibis/config.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ibis/config.py:754:8 Incompatible return type [7]: Expected `str` but got implicit return value of `None`.",
    "message": " Expected `str` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 754,
    "warning_line": "        return s",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from contextlib import contextmanager\nfrom typing import Callable\n\n",
        "source_code_len": 67,
        "target_code": "from contextlib import contextmanager\nfrom typing import Callable, Dict, List, Tuple\n\n",
        "target_code_len": 86,
        "diff_format": "@@ -25,3 +26,3 @@\n from contextlib import contextmanager\n-from typing import Callable\n+from typing import Callable, Dict, List, Tuple\n \n",
        "source_code_with_indent": "from contextlib import contextmanager\nfrom typing import Callable\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from contextlib import contextmanager\nfrom typing import Callable, Dict, List, Tuple\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef pp_options_list(keys: str, width: int = 80, _print: bool = False) -> str:\n    \"\"\"\n",
        "source_code_len": 87,
        "target_code": "\ndef pp_options_list(\n    keys: List[str], width: int = 80, _print: bool = False\n) -> str | None:\n    \"\"\"\n",
        "target_code_len": 106,
        "diff_format": "@@ -710,3 +719,5 @@\n \n-def pp_options_list(keys: str, width: int = 80, _print: bool = False) -> str:\n+def pp_options_list(\n+    keys: List[str], width: int = 80, _print: bool = False\n+) -> str | None:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def pp_options_list(keys: str, width: int = 80, _print: bool = False) -> str:\n    <IND>",
        "target_code_with_indent": "\n<DED>def pp_options_list(\n    keys: List[str], width: int = 80, _print: bool = False\n) -> str | None:\n    <IND>"
      }
    ]
  }
]