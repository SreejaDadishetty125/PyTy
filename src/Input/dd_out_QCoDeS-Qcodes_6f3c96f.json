[
  {
    "project": "QCoDeS/Qcodes",
    "commit": "6f3c96f702aab47dca0e4590cb55de21badd2b9e",
    "filename": "qcodes/dataset/measurements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/QCoDeS-Qcodes/qcodes/dataset/measurements.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qcodes/dataset/measurements.py:687:8 Incompatible return type [7]: Expected `None` but got `Measurement`.",
    "message": " Expected `None` but got `Measurement`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 687,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _register_parameter(self, name: str,\n                            label: str,\n",
        "source_code_len": 86,
        "target_code": "\n    def _register_parameter(self : T, name: str,\n                            label: str,\n",
        "target_code_len": 90,
        "diff_format": "@@ -651,3 +651,3 @@\n \n-    def _register_parameter(self, name: str,\n+    def _register_parameter(self : T, name: str,\n                             label: str,\n",
        "source_code_with_indent": "\n    <DED>def _register_parameter(self, name: str,\n                            label: str,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _register_parameter(self : T, name: str,\n                            label: str,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                            basis: setpoints_type,\n                            paramtype: str) -> None:\n        \"\"\"\n",
        "source_code_len": 116,
        "target_code": "                            basis: setpoints_type,\n                            paramtype: str) -> T:\n        \"\"\"\n",
        "target_code_len": 113,
        "diff_format": "@@ -656,3 +656,3 @@\n                             basis: setpoints_type,\n-                            paramtype: str) -> None:\n+                            paramtype: str) -> T:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                            basis: setpoints_type,\n                            paramtype: str) -> None:\n        <IND>",
        "target_code_with_indent": "                            basis: setpoints_type,\n                            paramtype: str) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "QCoDeS/Qcodes",
    "commit": "6f3c96f702aab47dca0e4590cb55de21badd2b9e",
    "filename": "qcodes/dataset/measurements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/QCoDeS-Qcodes/qcodes/dataset/measurements.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qcodes/dataset/measurements.py:802:8 Incompatible return type [7]: Expected `Variable[T (bound to Measurement)]` but got implicit return value of `None`.",
    "message": " Expected `Variable[T (bound to Measurement)]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 802,
    "warning_line": "        self._register_parameter(name,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _register_parameter(self, name: str,\n                            label: str,\n",
        "source_code_len": 86,
        "target_code": "\n    def _register_parameter(self : T, name: str,\n                            label: str,\n",
        "target_code_len": 90,
        "diff_format": "@@ -651,3 +651,3 @@\n \n-    def _register_parameter(self, name: str,\n+    def _register_parameter(self : T, name: str,\n                             label: str,\n",
        "source_code_with_indent": "\n    <DED>def _register_parameter(self, name: str,\n                            label: str,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _register_parameter(self : T, name: str,\n                            label: str,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                            basis: setpoints_type,\n                            paramtype: str) -> None:\n        \"\"\"\n",
        "source_code_len": 116,
        "target_code": "                            basis: setpoints_type,\n                            paramtype: str) -> T:\n        \"\"\"\n",
        "target_code_len": 113,
        "diff_format": "@@ -656,3 +656,3 @@\n                             basis: setpoints_type,\n-                            paramtype: str) -> None:\n+                            paramtype: str) -> T:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                            basis: setpoints_type,\n                            paramtype: str) -> None:\n        <IND>",
        "target_code_with_indent": "                            basis: setpoints_type,\n                            paramtype: str) -> T:\n        <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"\n        self._register_parameter(name,\n                                 label,\n                                 unit,\n                                 setpoints,\n                                 basis,\n                                 paramtype)\n\n",
        "source_code_len": 259,
        "target_code": "        \"\"\"\n        return self._register_parameter(name,\n                                        label,\n                                        unit,\n                                        setpoints,\n                                        basis,\n                                        paramtype)\n\n",
        "target_code_len": 301,
        "diff_format": "@@ -801,8 +801,8 @@\n         \"\"\"\n-        self._register_parameter(name,\n-                                 label,\n-                                 unit,\n-                                 setpoints,\n-                                 basis,\n-                                 paramtype)\n+        return self._register_parameter(name,\n+                                        label,\n+                                        unit,\n+                                        setpoints,\n+                                        basis,\n+                                        paramtype)\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        self._register_parameter(name,\n                                 label,\n                                 unit,\n                                 setpoints,\n                                 basis,\n                                 paramtype)\n\n",
        "target_code_with_indent": "\n        return self._register_parameter(name,\n                                        label,\n                                        unit,\n                                        setpoints,\n                                        basis,\n                                        paramtype)\n\n"
      }
    ]
  },
  {
    "project": "QCoDeS/Qcodes",
    "commit": "6f3c96f702aab47dca0e4590cb55de21badd2b9e",
    "filename": "qcodes/dataset/measurements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/QCoDeS-Qcodes/qcodes/dataset/measurements.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qcodes/dataset/measurements.py:853:8 Incompatible return type [7]: Expected `Variable[T (bound to Measurement)]` but got implicit return value of `None`.",
    "message": " Expected `Variable[T (bound to Measurement)]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 853,
    "warning_line": "        self.enteractions.append((func, args))",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_after_run(self, func: Callable, args: tuple) -> None:\n        \"\"\"\n",
        "source_code_len": 79,
        "target_code": "\n        return self\n\n    def add_after_run(self : T, func: Callable, args: tuple) -> T:\n        \"\"\"\n",
        "target_code_len": 101,
        "diff_format": "@@ -854,3 +854,5 @@\n \n-    def add_after_run(self, func: Callable, args: tuple) -> None:\n+        return self\n+\n+    def add_after_run(self : T, func: Callable, args: tuple) -> T:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add_after_run(self, func: Callable, args: tuple) -> None:\n        <IND>",
        "target_code_with_indent": "\n        return self\n\n    <DED>def add_after_run(self : T, func: Callable, args: tuple) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "QCoDeS/Qcodes",
    "commit": "6f3c96f702aab47dca0e4590cb55de21badd2b9e",
    "filename": "qcodes/dataset/measurements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/QCoDeS-Qcodes/qcodes/dataset/measurements.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qcodes/dataset/measurements.py:871:8 Incompatible return type [7]: Expected `None` but got `Measurement`.",
    "message": " Expected `None` but got `Measurement`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 871,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add_after_run(self, func: Callable, args: tuple) -> None:\n        \"\"\"\n",
        "source_code_len": 79,
        "target_code": "\n        return self\n\n    def add_after_run(self : T, func: Callable, args: tuple) -> T:\n        \"\"\"\n",
        "target_code_len": 101,
        "diff_format": "@@ -854,3 +854,5 @@\n \n-    def add_after_run(self, func: Callable, args: tuple) -> None:\n+        return self\n+\n+    def add_after_run(self : T, func: Callable, args: tuple) -> T:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def add_after_run(self, func: Callable, args: tuple) -> None:\n        <IND>",
        "target_code_with_indent": "\n        return self\n\n    <DED>def add_after_run(self : T, func: Callable, args: tuple) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "QCoDeS/Qcodes",
    "commit": "6f3c96f702aab47dca0e4590cb55de21badd2b9e",
    "filename": "qcodes/dataset/measurements.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/QCoDeS-Qcodes/qcodes/dataset/measurements.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qcodes/dataset/measurements.py:887:8 Incompatible return type [7]: Expected `None` but got `Variable[T (bound to Measurement)]`.",
    "message": " Expected `None` but got `Variable[T (bound to Measurement)]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 887,
    "warning_line": "        return self",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                       func: Callable,\n                       state: Union[MutableSequence, MutableMapping]) -> None:\n        \"\"\"\n",
        "source_code_len": 130,
        "target_code": "                       func: Callable,\n                       state: Union[MutableSequence, MutableMapping]) -> T:\n        \"\"\"\n",
        "target_code_len": 127,
        "diff_format": "@@ -874,3 +876,3 @@\n                        func: Callable,\n-                       state: Union[MutableSequence, MutableMapping]) -> None:\n+                       state: Union[MutableSequence, MutableMapping]) -> T:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                       func: Callable,\n                       state: Union[MutableSequence, MutableMapping]) -> None:\n        <IND>",
        "target_code_with_indent": "                       func: Callable,\n                       state: Union[MutableSequence, MutableMapping]) -> T:\n        <IND>"
      }
    ]
  },
  {
    "project": "QCoDeS/Qcodes",
    "commit": "6f3c96f702aab47dca0e4590cb55de21badd2b9e",
    "filename": "qcodes/utils/metadata.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/QCoDeS-Qcodes/qcodes/utils/metadata.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "qcodes/utils/metadata.py:93:4 Incompatible return type [7]: Expected `Dict[str, Dict[Union[Tuple[str, str], str], typing.Any]]` but got `ParameterDiff`.",
    "message": " Expected `Dict[str, Dict[Union[Tuple[str, str], str], typing.Any]]` but got `ParameterDiff`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 93,
    "warning_line": "    return ParameterDiff(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                      right_snapshot: Dict[str, Any]\n                     ) -> Dict[str, Dict[ParameterKey, Any]]:\n    \"\"\"\n",
        "source_code_len": 123,
        "target_code": "                      right_snapshot: Dict[str, Any]\n                     ) -> ParameterDiff:\n    \"\"\"\n",
        "target_code_len": 102,
        "diff_format": "@@ -83,3 +83,3 @@\n                       right_snapshot: Dict[str, Any]\n-                     ) -> Dict[str, Dict[ParameterKey, Any]]:\n+                     ) -> ParameterDiff:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "                      right_snapshot: Dict[str, Any]\n                     ) -> Dict[str, Dict[ParameterKey, Any]]:\n    <IND>",
        "target_code_with_indent": "                      right_snapshot: Dict[str, Any]\n                     ) -> ParameterDiff:\n    <IND>"
      }
    ]
  }
]