[
  {
    "project": "great-expectations/great_expectations",
    "commit": "7af2f6232fdbdfb2a05ad44497f8b5dbf1657235",
    "filename": "great_expectations/data_context/store/ge_cloud_store_backend.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/data_context/store/ge_cloud_store_backend.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/data_context/store/ge_cloud_store_backend.py:50:12 Incompatible parameter type [6]: Expected `str` for 3rd parameter `manually_initialize_store_backend_id` to call `StoreBackend.__init__` but got `Optional[str]`.",
    "message": " Expected `str` for 3rd parameter `manually_initialize_store_backend_id` to call `StoreBackend.__init__` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 50,
    "warning_line": "            manually_initialize_store_backend_id=manually_initialize_store_backend_id,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        suppress_store_backend_id: bool = True,\n        manually_initialize_store_backend_id: Optional[str] = \"\",\n        store_name: Optional[str] = None,\n",
        "source_code_len": 156,
        "target_code": "        suppress_store_backend_id: bool = True,\n        manually_initialize_store_backend_id: str = \"\",\n        store_name: Optional[str] = None,\n",
        "target_code_len": 146,
        "diff_format": "@@ -43,3 +43,3 @@\n         suppress_store_backend_id: bool = True,\n-        manually_initialize_store_backend_id: Optional[str] = \"\",\n+        manually_initialize_store_backend_id: str = \"\",\n         store_name: Optional[str] = None,\n",
        "source_code_with_indent": "        suppress_store_backend_id: bool = True,\n        manually_initialize_store_backend_id: Optional[str] = \"\",\n        store_name: Optional[str] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        suppress_store_backend_id: bool = True,\n        manually_initialize_store_backend_id: str = \"\",\n        store_name: Optional[str] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "7af2f6232fdbdfb2a05ad44497f8b5dbf1657235",
    "filename": "great_expectations/datasource/data_connector/inferred_asset_filesystem_data_connector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/datasource/data_connector/inferred_asset_filesystem_data_connector.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/datasource/data_connector/inferred_asset_filesystem_data_connector.py:78:53 Incompatible parameter type [6]: Expected `str` for 2nd parameter `glob_directive` to call `get_filesystem_one_level_directory_glob_path_list` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd parameter `glob_directive` to call `get_filesystem_one_level_directory_glob_path_list` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 78,
    "warning_line": "            base_directory_path=self.base_directory, glob_directive=self._glob_directive",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        default_regex: Optional[dict] = None,\n        glob_directive: Optional[str] = \"*\",\n        sorters: Optional[list] = None,\n",
        "source_code_len": 131,
        "target_code": "        default_regex: Optional[dict] = None,\n        glob_directive: str = \"*\",\n        sorters: Optional[list] = None,\n",
        "target_code_len": 121,
        "diff_format": "@@ -36,3 +36,3 @@\n         default_regex: Optional[dict] = None,\n-        glob_directive: Optional[str] = \"*\",\n+        glob_directive: str = \"*\",\n         sorters: Optional[list] = None,\n",
        "source_code_with_indent": "        default_regex: Optional[dict] = None,\n        glob_directive: Optional[str] = \"*\",\n        sorters: Optional[list] = None,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        default_regex: Optional[dict] = None,\n        glob_directive: str = \"*\",\n        sorters: Optional[list] = None,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "7af2f6232fdbdfb2a05ad44497f8b5dbf1657235",
    "filename": "great_expectations/datasource/data_connector/inferred_asset_sql_data_connector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/datasource/data_connector/inferred_asset_sql_data_connector.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/datasource/data_connector/inferred_asset_sql_data_connector.py:87:12 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `InferredAssetSqlDataConnector._refresh_introspected_assets_cache` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `InferredAssetSqlDataConnector._refresh_introspected_assets_cache` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 87,
    "warning_line": "            self._data_asset_name_prefix,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        execution_engine: Optional[ExecutionEngine] = None,\n        data_asset_name_prefix: Optional[str] = \"\",\n        data_asset_name_suffix: Optional[str] = \"\",\n        include_schema_name: bool = False,\n",
        "source_code_len": 207,
        "target_code": "        execution_engine: Optional[ExecutionEngine] = None,\n        data_asset_name_prefix: str = \"\",\n        data_asset_name_suffix: str = \"\",\n        include_schema_name: bool = False,\n",
        "target_code_len": 187,
        "diff_format": "@@ -25,4 +25,4 @@\n         execution_engine: Optional[ExecutionEngine] = None,\n-        data_asset_name_prefix: Optional[str] = \"\",\n-        data_asset_name_suffix: Optional[str] = \"\",\n+        data_asset_name_prefix: str = \"\",\n+        data_asset_name_suffix: str = \"\",\n         include_schema_name: bool = False,\n",
        "source_code_with_indent": "        execution_engine: Optional[ExecutionEngine] = None,\n        data_asset_name_prefix: Optional[str] = \"\",\n        data_asset_name_suffix: Optional[str] = \"\",\n        include_schema_name: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        execution_engine: Optional[ExecutionEngine] = None,\n        data_asset_name_prefix: str = \"\",\n        data_asset_name_suffix: str = \"\",\n        include_schema_name: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "7af2f6232fdbdfb2a05ad44497f8b5dbf1657235",
    "filename": "great_expectations/datasource/data_connector/inferred_asset_sql_data_connector.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/datasource/data_connector/inferred_asset_sql_data_connector.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/datasource/data_connector/inferred_asset_sql_data_connector.py:88:12 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `InferredAssetSqlDataConnector._refresh_introspected_assets_cache` but got `Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `InferredAssetSqlDataConnector._refresh_introspected_assets_cache` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 88,
    "warning_line": "            self._data_asset_name_suffix,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        execution_engine: Optional[ExecutionEngine] = None,\n        data_asset_name_prefix: Optional[str] = \"\",\n        data_asset_name_suffix: Optional[str] = \"\",\n        include_schema_name: bool = False,\n",
        "source_code_len": 207,
        "target_code": "        execution_engine: Optional[ExecutionEngine] = None,\n        data_asset_name_prefix: str = \"\",\n        data_asset_name_suffix: str = \"\",\n        include_schema_name: bool = False,\n",
        "target_code_len": 187,
        "diff_format": "@@ -25,4 +25,4 @@\n         execution_engine: Optional[ExecutionEngine] = None,\n-        data_asset_name_prefix: Optional[str] = \"\",\n-        data_asset_name_suffix: Optional[str] = \"\",\n+        data_asset_name_prefix: str = \"\",\n+        data_asset_name_suffix: str = \"\",\n         include_schema_name: bool = False,\n",
        "source_code_with_indent": "        execution_engine: Optional[ExecutionEngine] = None,\n        data_asset_name_prefix: Optional[str] = \"\",\n        data_asset_name_suffix: Optional[str] = \"\",\n        include_schema_name: bool = False,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        execution_engine: Optional[ExecutionEngine] = None,\n        data_asset_name_prefix: str = \"\",\n        data_asset_name_suffix: str = \"\",\n        include_schema_name: bool = False,\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "7af2f6232fdbdfb2a05ad44497f8b5dbf1657235",
    "filename": "great_expectations/execution_engine/sqlalchemy_execution_engine.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/execution_engine/sqlalchemy_execution_engine.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/execution_engine/sqlalchemy_execution_engine.py:1022:41 Unsupported operand [58]: `*` is not supported for operand types `Optional[float]` and `int`.",
    "message": " `*` is not supported for operand types `Optional[float]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 1022,
    "warning_line": "                sample_size: int = round(p * num_rows)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "                ).scalar()\n                p: Optional[float] = batch_spec[\"sampling_kwargs\"][\"p\"] or 1.0\n                sample_size: int = round(p * num_rows)\n",
        "source_code_len": 161,
        "target_code": "                ).scalar()\n                p: float = batch_spec[\"sampling_kwargs\"][\"p\"] or 1.0\n                sample_size: int = round(p * num_rows)\n",
        "target_code_len": 151,
        "diff_format": "@@ -1020,3 +1020,3 @@\n                 ).scalar()\n-                p: Optional[float] = batch_spec[\"sampling_kwargs\"][\"p\"] or 1.0\n+                p: float = batch_spec[\"sampling_kwargs\"][\"p\"] or 1.0\n                 sample_size: int = round(p * num_rows)\n",
        "source_code_with_indent": "                ).scalar()\n                p: Optional[float] = batch_spec[\"sampling_kwargs\"][\"p\"] or 1.0\n                sample_size: int = round(p * num_rows)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                ).scalar()\n                p: float = batch_spec[\"sampling_kwargs\"][\"p\"] or 1.0\n                sample_size: int = round(p * num_rows)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "7af2f6232fdbdfb2a05ad44497f8b5dbf1657235",
    "filename": "great_expectations/render/types/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/render/types/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/render/types/__init__.py:513:8 Incompatible attribute type [8]: Attribute `template` declared in class `RenderedAtomicValue` has type `str` but is used as type `Optional[str]`.",
    "message": " Attribute `template` declared in class `RenderedAtomicValue` has type `str` but is used as type `Optional[str]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 513,
    "warning_line": "        self.template: str = template",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # StringValueType\n        self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n",
        "source_code_len": 135,
        "target_code": "        # StringValueType\n        self.template: Optional[str] = template\n        self.params: Optional[dict] = params\n        self.schema: Optional[dict] = schema\n\n",
        "target_code_len": 165,
        "diff_format": "@@ -512,5 +512,5 @@\n         # StringValueType\n-        self.template: str = template\n-        self.params: dict = params\n-        self.schema: dict = schema\n+        self.template: Optional[str] = template\n+        self.params: Optional[dict] = params\n+        self.schema: Optional[dict] = schema\n \n",
        "source_code_with_indent": "        # StringValueType\n        <IND>self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # StringValueType\n        <IND>self.template: Optional[str] = template\n        self.params: Optional[dict] = params\n        self.schema: Optional[dict] = schema\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "7af2f6232fdbdfb2a05ad44497f8b5dbf1657235",
    "filename": "great_expectations/render/types/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/render/types/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/render/types/__init__.py:514:8 Incompatible attribute type [8]: Attribute `params` declared in class `RenderedAtomicValue` has type `typing.Dict[typing.Any, typing.Any]` but is used as type `Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "message": " Attribute `params` declared in class `RenderedAtomicValue` has type `typing.Dict[typing.Any, typing.Any]` but is used as type `Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 514,
    "warning_line": "        self.params: dict = params",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # StringValueType\n        self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n",
        "source_code_len": 135,
        "target_code": "        # StringValueType\n        self.template: Optional[str] = template\n        self.params: Optional[dict] = params\n        self.schema: Optional[dict] = schema\n\n",
        "target_code_len": 165,
        "diff_format": "@@ -512,5 +512,5 @@\n         # StringValueType\n-        self.template: str = template\n-        self.params: dict = params\n-        self.schema: dict = schema\n+        self.template: Optional[str] = template\n+        self.params: Optional[dict] = params\n+        self.schema: Optional[dict] = schema\n \n",
        "source_code_with_indent": "        # StringValueType\n        <IND>self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # StringValueType\n        <IND>self.template: Optional[str] = template\n        self.params: Optional[dict] = params\n        self.schema: Optional[dict] = schema\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "7af2f6232fdbdfb2a05ad44497f8b5dbf1657235",
    "filename": "great_expectations/render/types/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/render/types/__init__.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/render/types/__init__.py:515:8 Incompatible attribute type [8]: Attribute `schema` declared in class `RenderedAtomicValue` has type `typing.Dict[typing.Any, typing.Any]` but is used as type `Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "message": " Attribute `schema` declared in class `RenderedAtomicValue` has type `typing.Dict[typing.Any, typing.Any]` but is used as type `Optional[typing.Dict[typing.Any, typing.Any]]`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 515,
    "warning_line": "        self.schema: dict = schema",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # StringValueType\n        self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n",
        "source_code_len": 135,
        "target_code": "        # StringValueType\n        self.template: Optional[str] = template\n        self.params: Optional[dict] = params\n        self.schema: Optional[dict] = schema\n\n",
        "target_code_len": 165,
        "diff_format": "@@ -512,5 +512,5 @@\n         # StringValueType\n-        self.template: str = template\n-        self.params: dict = params\n-        self.schema: dict = schema\n+        self.template: Optional[str] = template\n+        self.params: Optional[dict] = params\n+        self.schema: Optional[dict] = schema\n \n",
        "source_code_with_indent": "        # StringValueType\n        <IND>self.template: str = template\n        self.params: dict = params\n        self.schema: dict = schema\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # StringValueType\n        <IND>self.template: Optional[str] = template\n        self.params: Optional[dict] = params\n        self.schema: Optional[dict] = schema\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "great-expectations/great_expectations",
    "commit": "7af2f6232fdbdfb2a05ad44497f8b5dbf1657235",
    "filename": "great_expectations/self_check/util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/great-expectations-great_expectations/great_expectations/self_check/util.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "great_expectations/self_check/util.py:2094:22 Unsupported operand [58]: `+` is not supported for operand types `Optional[str]` and `str`.",
    "message": " `+` is not supported for operand types `Optional[str]` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 2094,
    "warning_line": "    table_name: str = default_table_name_prefix + \"\".join(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def generate_test_table_name(\n    default_table_name_prefix: Optional[str] = \"test_data_\",\n) -> str:\n",
        "source_code_len": 101,
        "target_code": "def generate_test_table_name(\n    default_table_name_prefix: str = \"test_data_\",\n) -> str:\n",
        "target_code_len": 91,
        "diff_format": "@@ -2091,3 +2091,3 @@\n def generate_test_table_name(\n-    default_table_name_prefix: Optional[str] = \"test_data_\",\n+    default_table_name_prefix: str = \"test_data_\",\n ) -> str:\n",
        "source_code_with_indent": "<DED><DED><DED><DED>def generate_test_table_name(\n    default_table_name_prefix: Optional[str] = \"test_data_\",\n) -> str:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED><DED><DED>def generate_test_table_name(\n    default_table_name_prefix: str = \"test_data_\",\n) -> str:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]