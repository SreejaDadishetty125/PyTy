[
  {
    "project": "bmoscon/cryptofeed",
    "commit": "31cd5359d1bb6efa55928a4e3c77501f87dbb809",
    "filename": "cryptofeed/backends/_util.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/bmoscon-cryptofeed/cryptofeed/backends/_util.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cryptofeed/backends/_util.py:71:4 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got `typing.List[typing.Any]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `typing.List[typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 71,
    "warning_line": "    return ret",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "'''\nfrom cryptofeed.defines import BID, ASK\n",
        "source_code_len": 44,
        "target_code": "'''\nfrom typing import Any, Dict, List, Union\n\nfrom cryptofeed.defines import BID, ASK\n",
        "target_code_len": 87,
        "diff_format": "@@ -6,2 +6,4 @@\n '''\n+from typing import Any, Dict, List, Union\n+\n from cryptofeed.defines import BID, ASK\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\nfrom cryptofeed.defines import BID, ASK\n",
        "target_code_with_indent": "\nfrom typing import Any, Dict, List, Union\n\nfrom cryptofeed.defines import BID, ASK\n"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef book_flatten(feed: str, symbol: str, book: dict, timestamp: float, delta: str) -> dict:\n    \"\"\"\n",
        "source_code_len": 101,
        "target_code": "\ndef book_flatten(feed: str, symbol: str, book: dict, timestamp: float, delta: str) -> List[Dict[str, Union[Union[str, float], Any]]]:\n    \"\"\"\n",
        "target_code_len": 143,
        "diff_format": "@@ -49,3 +51,3 @@\n \n-def book_flatten(feed: str, symbol: str, book: dict, timestamp: float, delta: str) -> dict:\n+def book_flatten(feed: str, symbol: str, book: dict, timestamp: float, delta: str) -> List[Dict[str, Union[Union[str, float], Any]]]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED><DED><DED>def book_flatten(feed: str, symbol: str, book: dict, timestamp: float, delta: str) -> dict:\n    <IND>",
        "target_code_with_indent": "\n<DED><DED><DED>def book_flatten(feed: str, symbol: str, book: dict, timestamp: float, delta: str) -> List[Dict[str, Union[Union[str, float], Any]]]:\n    <IND>"
      }
    ]
  }
]