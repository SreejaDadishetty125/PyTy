[
  {
    "project": "aherlihy/PythonLLVM",
    "commit": "a966d1d7f9d1c9913dd8a24393d28f3520c0613c",
    "filename": "lots_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aherlihy-PythonLLVM/lots_test.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lots_test.py:13:15 Unbound name [10]: Name `listf5` is used but not defined in the current scope.",
    "message": " Name `listf5` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 13,
    "warning_line": "def lretv5(lv5=listf5):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    return i+i\ndef lretv5(lv5=listf5):\n    return lv5\ndef lreti8(li8=listi8):\n    print li8\n    return li8\ndef lsubi(isub=int, lsi=listf5):\n    return lsi[isub]\ndef lsubf(isubf=int, lsf=listi8):\n    return lsf[isubf]+isubf\ndef sret(sl=list):\n    sret1 = sl[0]\n    return sret1\ndef nret():\n",
        "source_code_len": 289,
        "target_code": "    return i+i\n#def lretv5(lv5=listf5):\n#    return lv5\n#def lreti8(li8=listi8):\n#    print li8\n#    return li8\n#def lsubi(isub=int, lsi=listf5):\n#    return lsi[isub]\n#def lsubf(isubf=int, lsf=listi8):\n#    return lsf[isubf]+isubf\n#def sret(sl=list):\n#    sret1 = sl[0]\n#    return sret1\ndef nret():\n",
        "target_code_len": 301,
        "diff_format": "@@ -12,14 +12,14 @@\n     return i+i\n-def lretv5(lv5=listf5):\n-    return lv5\n-def lreti8(li8=listi8):\n-    print li8\n-    return li8\n-def lsubi(isub=int, lsi=listf5):\n-    return lsi[isub]\n-def lsubf(isubf=int, lsf=listi8):\n-    return lsf[isubf]+isubf\n-def sret(sl=list):\n-    sret1 = sl[0]\n-    return sret1\n+#def lretv5(lv5=listf5):\n+#    return lv5\n+#def lreti8(li8=listi8):\n+#    print li8\n+#    return li8\n+#def lsubi(isub=int, lsi=listf5):\n+#    return lsi[isub]\n+#def lsubf(isubf=int, lsf=listi8):\n+#    return lsf[isubf]+isubf\n+#def sret(sl=list):\n+#    sret1 = sl[0]\n+#    return sret1\n def nret():\n",
        "source_code_with_indent": "    <IND>return i+i\n<DED>def lretv5(lv5=listf5):\n    <IND>return lv5\n<DED>def lreti8(li8=listi8):\n    <IND>print li8\n    return li8\n<DED>def lsubi(isub=int, lsi=listf5):\n    <IND>return lsi[isub]\n<DED>def lsubf(isubf=int, lsf=listi8):\n    <IND>return lsf[isubf]+isubf\n<DED>def sret(sl=list):\n    <IND>sret1 = sl[0]\n    return sret1\n<DED>def nret():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>return i+i\n#def lretv5(lv5=listf5):\n#    return lv5\n#def lreti8(li8=listi8):\n#    print li8\n#    return li8\n#def lsubi(isub=int, lsi=listf5):\n#    return lsi[isub]\n#def lsubf(isubf=int, lsf=listi8):\n#    return lsf[isubf]+isubf\n#def sret(sl=list):\n#    sret1 = sl[0]\n#    return sret1\n<DED>def nret():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "aherlihy/PythonLLVM",
    "commit": "a966d1d7f9d1c9913dd8a24393d28f3520c0613c",
    "filename": "lots_test.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/aherlihy-PythonLLVM/lots_test.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "lots_test.py:15:15 Unbound name [10]: Name `listi8` is used but not defined in the current scope.",
    "message": " Name `listi8` is used but not defined in the current scope.",
    "rule_id": "Unbound name [10]",
    "warning_line_no": 15,
    "warning_line": "def lreti8(li8=listi8):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    return i+i\ndef lretv5(lv5=listf5):\n    return lv5\ndef lreti8(li8=listi8):\n    print li8\n    return li8\ndef lsubi(isub=int, lsi=listf5):\n    return lsi[isub]\ndef lsubf(isubf=int, lsf=listi8):\n    return lsf[isubf]+isubf\ndef sret(sl=list):\n    sret1 = sl[0]\n    return sret1\ndef nret():\n",
        "source_code_len": 289,
        "target_code": "    return i+i\n#def lretv5(lv5=listf5):\n#    return lv5\n#def lreti8(li8=listi8):\n#    print li8\n#    return li8\n#def lsubi(isub=int, lsi=listf5):\n#    return lsi[isub]\n#def lsubf(isubf=int, lsf=listi8):\n#    return lsf[isubf]+isubf\n#def sret(sl=list):\n#    sret1 = sl[0]\n#    return sret1\ndef nret():\n",
        "target_code_len": 301,
        "diff_format": "@@ -12,14 +12,14 @@\n     return i+i\n-def lretv5(lv5=listf5):\n-    return lv5\n-def lreti8(li8=listi8):\n-    print li8\n-    return li8\n-def lsubi(isub=int, lsi=listf5):\n-    return lsi[isub]\n-def lsubf(isubf=int, lsf=listi8):\n-    return lsf[isubf]+isubf\n-def sret(sl=list):\n-    sret1 = sl[0]\n-    return sret1\n+#def lretv5(lv5=listf5):\n+#    return lv5\n+#def lreti8(li8=listi8):\n+#    print li8\n+#    return li8\n+#def lsubi(isub=int, lsi=listf5):\n+#    return lsi[isub]\n+#def lsubf(isubf=int, lsf=listi8):\n+#    return lsf[isubf]+isubf\n+#def sret(sl=list):\n+#    sret1 = sl[0]\n+#    return sret1\n def nret():\n",
        "source_code_with_indent": "    <IND>return i+i\n<DED>def lretv5(lv5=listf5):\n    <IND>return lv5\n<DED>def lreti8(li8=listi8):\n    <IND>print li8\n    return li8\n<DED>def lsubi(isub=int, lsi=listf5):\n    <IND>return lsi[isub]\n<DED>def lsubf(isubf=int, lsf=listi8):\n    <IND>return lsf[isubf]+isubf\n<DED>def sret(sl=list):\n    <IND>sret1 = sl[0]\n    return sret1\n<DED>def nret():\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>return i+i\n#def lretv5(lv5=listf5):\n#    return lv5\n#def lreti8(li8=listi8):\n#    print li8\n#    return li8\n#def lsubi(isub=int, lsi=listf5):\n#    return lsi[isub]\n#def lsubf(isubf=int, lsf=listi8):\n#    return lsf[isubf]+isubf\n#def sret(sl=list):\n#    sret1 = sl[0]\n#    return sret1\n<DED>def nret():\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]