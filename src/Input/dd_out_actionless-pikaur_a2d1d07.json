[
  {
    "project": "actionless/pikaur",
    "commit": "a2d1d0716d340e6f140b59edb28f794953a8d5a6",
    "filename": "pikaur/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/actionless-pikaur/pikaur/core.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pikaur/core.py:176:8 Incompatible return type [7]: Expected `Optional[str]` but got `List[str]`.",
    "message": " Expected `Optional[str]` but got `List[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 176,
    "warning_line": "        return editor_line.split(' ')",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_editor() -> Optional[str]:\n    from .pprint import print_stderr, color_line, _\n",
        "source_code_len": 88,
        "target_code": "\ndef get_editor() -> Optional[List[str]]:\n    from .pprint import print_stderr, color_line, _\n",
        "target_code_len": 94,
        "diff_format": "@@ -171,3 +171,3 @@\n \n-def get_editor() -> Optional[str]:\n+def get_editor() -> Optional[List[str]]:\n     from .pprint import print_stderr, color_line, _\n",
        "source_code_with_indent": "\n<DED>def get_editor() -> Optional[str]:\n    <IND>from .pprint import print_stderr, color_line, _\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get_editor() -> Optional[List[str]]:\n    <IND>from .pprint import print_stderr, color_line, _\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "actionless/pikaur",
    "commit": "a2d1d0716d340e6f140b59edb28f794953a8d5a6",
    "filename": "pikaur/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/actionless-pikaur/pikaur/core.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "pikaur/core.py:180:12 Incompatible return type [7]: Expected `Optional[str]` but got `List[str]`.",
    "message": " Expected `Optional[str]` but got `List[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 180,
    "warning_line": "            return [editor, ]",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_editor() -> Optional[str]:\n    from .pprint import print_stderr, color_line, _\n",
        "source_code_len": 88,
        "target_code": "\ndef get_editor() -> Optional[List[str]]:\n    from .pprint import print_stderr, color_line, _\n",
        "target_code_len": 94,
        "diff_format": "@@ -171,3 +171,3 @@\n \n-def get_editor() -> Optional[str]:\n+def get_editor() -> Optional[List[str]]:\n     from .pprint import print_stderr, color_line, _\n",
        "source_code_with_indent": "\n<DED>def get_editor() -> Optional[str]:\n    <IND>from .pprint import print_stderr, color_line, _\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def get_editor() -> Optional[List[str]]:\n    <IND>from .pprint import print_stderr, color_line, _\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "actionless/pikaur",
    "commit": "a2d1d0716d340e6f140b59edb28f794953a8d5a6",
    "filename": "pikaur/install_cli.py",
    "min_patch_found": false,
    "full_warning_msg": "pikaur/install_cli.py:382:8 Incompatible return type [7]: Expected `Optional[List[str]]` but got `Optional[str]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  }
]