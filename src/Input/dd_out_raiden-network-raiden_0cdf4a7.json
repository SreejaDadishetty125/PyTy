[
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:273:8 Incompatible attribute type [8]: Attribute `secret` declared in class `MediatorTransferState` has type `Secret` but is used as type `None`.",
    "message": " Attribute `secret` declared in class `MediatorTransferState` has type `Secret` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 273,
    "warning_line": "        self.secret: Secret = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_len": 134,
        "target_code": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_len": 216,
        "diff_format": "@@ -13,4 +13,10 @@\n )\n-from raiden.utils import pex, serialization, sha3\n-from raiden.utils.serialization import map_dict\n+from raiden.utils import pex, sha3\n+from raiden.utils.serialization import (\n+    deserialize_secret,\n+    deserialize_secret_hash,\n+    identity,\n+    map_dict,\n+    serialize_bytes,\n+)\n from raiden.utils.typing import (\n",
        "source_code_with_indent": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_len": 174,
        "target_code": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_len": 146,
        "diff_format": "@@ -100,4 +106,4 @@\n             'initiator_transfers': map_dict(\n-                serialization.serialize_bytes,\n-                serialization.identity,\n+                serialize_bytes,\n+                identity,\n                 self.initiator_transfers,\n",
        "source_code_with_indent": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_len": 176,
        "target_code": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_len": 154,
        "diff_format": "@@ -111,4 +117,4 @@\n             initiator_transfers=map_dict(\n-                serialization.deserialize_bytes,\n-                serialization.identity,\n+                deserialize_secret_hash,\n+                identity,\n                 data['initiator_transfers'],\n",
        "source_code_with_indent": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.secrethash = secrethash\n        self.secret: Secret = None\n        self.transfers_pair: List[MediationPairState] = list()\n        self.waiting_transfer: WaitingTransferState = None\n        self.routes = routes\n",
        "source_code_len": 223,
        "target_code": "        self.secrethash = secrethash\n        self.secret: Optional[Secret] = None\n        self.transfers_pair: List[MediationPairState] = list()\n        self.waiting_transfer: Optional[WaitingTransferState] = None\n        self.routes = routes\n",
        "target_code_len": 243,
        "diff_format": "@@ -272,5 +278,5 @@\n         self.secrethash = secrethash\n-        self.secret: Secret = None\n+        self.secret: Optional[Secret] = None\n         self.transfers_pair: List[MediationPairState] = list()\n-        self.waiting_transfer: WaitingTransferState = None\n+        self.waiting_transfer: Optional[WaitingTransferState] = None\n         self.routes = routes\n",
        "source_code_with_indent": "        <IND>self.secrethash = secrethash\n        self.secret: Secret = None\n        self.transfers_pair: List[MediationPairState] = list()\n        self.waiting_transfer: WaitingTransferState = None\n        self.routes = routes\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>self.secrethash = secrethash\n        self.secret: Optional[Secret] = None\n        self.transfers_pair: List[MediationPairState] = list()\n        self.waiting_transfer: Optional[WaitingTransferState] = None\n        self.routes = routes\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_len": 144,
        "target_code": "        result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_len": 130,
        "diff_format": "@@ -298,3 +304,3 @@\n         result = {\n-            'secrethash': serialization.serialize_bytes(self.secrethash),\n+            'secrethash': serialize_bytes(self.secrethash),\n             'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent": "        <IND>result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -305,3 +311,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_len": 135,
        "target_code": "        restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_len": 127,
        "diff_format": "@@ -312,3 +318,3 @@\n         restored = cls(\n-            secrethash=serialization.deserialize_bytes(data['secrethash']),\n+            secrethash=deserialize_secret_hash(data['secrethash']),\n             routes=data['routes'],\n",
        "source_code_with_indent": "        <IND>restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -320,3 +326,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -387,3 +393,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -401,3 +407,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_len": 132,
        "target_code": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_len": 118,
        "diff_format": "@@ -684,3 +690,3 @@\n             'target': to_checksum_address(self.target),\n-            'secret': serialization.serialize_bytes(self.secret),\n+            'secret': serialize_bytes(self.secret),\n         }\n",
        "source_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_len": 135,
        "target_code": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_len": 122,
        "diff_format": "@@ -697,3 +703,3 @@\n             target=to_canonical_address(data['target']),\n-            secret=serialization.deserialize_bytes(data['secret']),\n+            secret=deserialize_secret(data['secret']),\n         )\n",
        "source_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:275:8 Incompatible attribute type [8]: Attribute `waiting_transfer` declared in class `MediatorTransferState` has type `WaitingTransferState` but is used as type `None`.",
    "message": " Attribute `waiting_transfer` declared in class `MediatorTransferState` has type `WaitingTransferState` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 275,
    "warning_line": "        self.waiting_transfer: WaitingTransferState = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_len": 134,
        "target_code": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_len": 216,
        "diff_format": "@@ -13,4 +13,10 @@\n )\n-from raiden.utils import pex, serialization, sha3\n-from raiden.utils.serialization import map_dict\n+from raiden.utils import pex, sha3\n+from raiden.utils.serialization import (\n+    deserialize_secret,\n+    deserialize_secret_hash,\n+    identity,\n+    map_dict,\n+    serialize_bytes,\n+)\n from raiden.utils.typing import (\n",
        "source_code_with_indent": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_len": 174,
        "target_code": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_len": 146,
        "diff_format": "@@ -100,4 +106,4 @@\n             'initiator_transfers': map_dict(\n-                serialization.serialize_bytes,\n-                serialization.identity,\n+                serialize_bytes,\n+                identity,\n                 self.initiator_transfers,\n",
        "source_code_with_indent": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_len": 176,
        "target_code": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_len": 154,
        "diff_format": "@@ -111,4 +117,4 @@\n             initiator_transfers=map_dict(\n-                serialization.deserialize_bytes,\n-                serialization.identity,\n+                deserialize_secret_hash,\n+                identity,\n                 data['initiator_transfers'],\n",
        "source_code_with_indent": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self.secrethash = secrethash\n        self.secret: Secret = None\n        self.transfers_pair: List[MediationPairState] = list()\n        self.waiting_transfer: WaitingTransferState = None\n        self.routes = routes\n",
        "source_code_len": 223,
        "target_code": "        self.secrethash = secrethash\n        self.secret: Optional[Secret] = None\n        self.transfers_pair: List[MediationPairState] = list()\n        self.waiting_transfer: Optional[WaitingTransferState] = None\n        self.routes = routes\n",
        "target_code_len": 243,
        "diff_format": "@@ -272,5 +278,5 @@\n         self.secrethash = secrethash\n-        self.secret: Secret = None\n+        self.secret: Optional[Secret] = None\n         self.transfers_pair: List[MediationPairState] = list()\n-        self.waiting_transfer: WaitingTransferState = None\n+        self.waiting_transfer: Optional[WaitingTransferState] = None\n         self.routes = routes\n",
        "source_code_with_indent": "        <IND>self.secrethash = secrethash\n        self.secret: Secret = None\n        self.transfers_pair: List[MediationPairState] = list()\n        self.waiting_transfer: WaitingTransferState = None\n        self.routes = routes\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>self.secrethash = secrethash\n        self.secret: Optional[Secret] = None\n        self.transfers_pair: List[MediationPairState] = list()\n        self.waiting_transfer: Optional[WaitingTransferState] = None\n        self.routes = routes\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_len": 144,
        "target_code": "        result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_len": 130,
        "diff_format": "@@ -298,3 +304,3 @@\n         result = {\n-            'secrethash': serialization.serialize_bytes(self.secrethash),\n+            'secrethash': serialize_bytes(self.secrethash),\n             'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent": "        <IND>result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -305,3 +311,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_len": 135,
        "target_code": "        restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_len": 127,
        "diff_format": "@@ -312,3 +318,3 @@\n         restored = cls(\n-            secrethash=serialization.deserialize_bytes(data['secrethash']),\n+            secrethash=deserialize_secret_hash(data['secrethash']),\n             routes=data['routes'],\n",
        "source_code_with_indent": "        <IND>restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -320,3 +326,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -387,3 +393,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -401,3 +407,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_len": 132,
        "target_code": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_len": 118,
        "diff_format": "@@ -684,3 +690,3 @@\n             'target': to_checksum_address(self.target),\n-            'secret': serialization.serialize_bytes(self.secret),\n+            'secret': serialize_bytes(self.secret),\n         }\n",
        "source_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_len": 135,
        "target_code": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_len": 122,
        "diff_format": "@@ -697,3 +703,3 @@\n             target=to_canonical_address(data['target']),\n-            secret=serialization.deserialize_bytes(data['secret']),\n+            secret=deserialize_secret(data['secret']),\n         )\n",
        "source_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:313:12 Incompatible parameter type [6]: Expected `SecretHash` for 1st parameter `secrethash` to call `MediatorTransferState.__init__` but got `bytes`.",
    "message": " Expected `SecretHash` for 1st parameter `secrethash` to call `MediatorTransferState.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 313,
    "warning_line": "            secrethash=serialization.deserialize_bytes(data['secrethash']),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_len": 134,
        "target_code": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_len": 216,
        "diff_format": "@@ -13,4 +13,10 @@\n )\n-from raiden.utils import pex, serialization, sha3\n-from raiden.utils.serialization import map_dict\n+from raiden.utils import pex, sha3\n+from raiden.utils.serialization import (\n+    deserialize_secret,\n+    deserialize_secret_hash,\n+    identity,\n+    map_dict,\n+    serialize_bytes,\n+)\n from raiden.utils.typing import (\n",
        "source_code_with_indent": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_len": 174,
        "target_code": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_len": 146,
        "diff_format": "@@ -100,4 +106,4 @@\n             'initiator_transfers': map_dict(\n-                serialization.serialize_bytes,\n-                serialization.identity,\n+                serialize_bytes,\n+                identity,\n                 self.initiator_transfers,\n",
        "source_code_with_indent": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_len": 176,
        "target_code": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_len": 154,
        "diff_format": "@@ -111,4 +117,4 @@\n             initiator_transfers=map_dict(\n-                serialization.deserialize_bytes,\n-                serialization.identity,\n+                deserialize_secret_hash,\n+                identity,\n                 data['initiator_transfers'],\n",
        "source_code_with_indent": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_len": 144,
        "target_code": "        result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_len": 130,
        "diff_format": "@@ -298,3 +304,3 @@\n         result = {\n-            'secrethash': serialization.serialize_bytes(self.secrethash),\n+            'secrethash': serialize_bytes(self.secrethash),\n             'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent": "        <IND>result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -305,3 +311,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_len": 135,
        "target_code": "        restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_len": 127,
        "diff_format": "@@ -312,3 +318,3 @@\n         restored = cls(\n-            secrethash=serialization.deserialize_bytes(data['secrethash']),\n+            secrethash=deserialize_secret_hash(data['secrethash']),\n             routes=data['routes'],\n",
        "source_code_with_indent": "        <IND>restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -320,3 +326,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -387,3 +393,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -401,3 +407,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_len": 132,
        "target_code": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_len": 118,
        "diff_format": "@@ -684,3 +690,3 @@\n             'target': to_checksum_address(self.target),\n-            'secret': serialization.serialize_bytes(self.secret),\n+            'secret': serialize_bytes(self.secret),\n         }\n",
        "source_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_len": 135,
        "target_code": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_len": 122,
        "diff_format": "@@ -697,3 +703,3 @@\n             target=to_canonical_address(data['target']),\n-            secret=serialization.deserialize_bytes(data['secret']),\n+            secret=deserialize_secret(data['secret']),\n         )\n",
        "source_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:321:12 Incompatible attribute type [8]: Attribute `secret` declared in class `MediatorTransferState` has type `Secret` but is used as type `bytes`.",
    "message": " Attribute `secret` declared in class `MediatorTransferState` has type `Secret` but is used as type `bytes`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 321,
    "warning_line": "            restored.secret = serialization.deserialize_bytes(secret)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_len": 134,
        "target_code": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_len": 216,
        "diff_format": "@@ -13,4 +13,10 @@\n )\n-from raiden.utils import pex, serialization, sha3\n-from raiden.utils.serialization import map_dict\n+from raiden.utils import pex, sha3\n+from raiden.utils.serialization import (\n+    deserialize_secret,\n+    deserialize_secret_hash,\n+    identity,\n+    map_dict,\n+    serialize_bytes,\n+)\n from raiden.utils.typing import (\n",
        "source_code_with_indent": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_len": 174,
        "target_code": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_len": 146,
        "diff_format": "@@ -100,4 +106,4 @@\n             'initiator_transfers': map_dict(\n-                serialization.serialize_bytes,\n-                serialization.identity,\n+                serialize_bytes,\n+                identity,\n                 self.initiator_transfers,\n",
        "source_code_with_indent": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_len": 176,
        "target_code": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_len": 154,
        "diff_format": "@@ -111,4 +117,4 @@\n             initiator_transfers=map_dict(\n-                serialization.deserialize_bytes,\n-                serialization.identity,\n+                deserialize_secret_hash,\n+                identity,\n                 data['initiator_transfers'],\n",
        "source_code_with_indent": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_len": 144,
        "target_code": "        result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_len": 130,
        "diff_format": "@@ -298,3 +304,3 @@\n         result = {\n-            'secrethash': serialization.serialize_bytes(self.secrethash),\n+            'secrethash': serialize_bytes(self.secrethash),\n             'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent": "        <IND>result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -305,3 +311,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_len": 135,
        "target_code": "        restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_len": 127,
        "diff_format": "@@ -312,3 +318,3 @@\n         restored = cls(\n-            secrethash=serialization.deserialize_bytes(data['secrethash']),\n+            secrethash=deserialize_secret_hash(data['secrethash']),\n             routes=data['routes'],\n",
        "source_code_with_indent": "        <IND>restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -320,3 +326,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -387,3 +393,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -401,3 +407,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_len": 132,
        "target_code": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_len": 118,
        "diff_format": "@@ -684,3 +690,3 @@\n             'target': to_checksum_address(self.target),\n-            'secret': serialization.serialize_bytes(self.secret),\n+            'secret': serialize_bytes(self.secret),\n         }\n",
        "source_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_len": 135,
        "target_code": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_len": 122,
        "diff_format": "@@ -697,3 +703,3 @@\n             target=to_canonical_address(data['target']),\n-            secret=serialization.deserialize_bytes(data['secret']),\n+            secret=deserialize_secret(data['secret']),\n         )\n",
        "source_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:402:12 Incompatible attribute type [8]: Attribute `secret` declared in class `TargetTransferState` has type `Secret` but is used as type `bytes`.",
    "message": " Attribute `secret` declared in class `TargetTransferState` has type `Secret` but is used as type `bytes`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 402,
    "warning_line": "            restored.secret = serialization.deserialize_bytes(secret)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_len": 134,
        "target_code": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_len": 216,
        "diff_format": "@@ -13,4 +13,10 @@\n )\n-from raiden.utils import pex, serialization, sha3\n-from raiden.utils.serialization import map_dict\n+from raiden.utils import pex, sha3\n+from raiden.utils.serialization import (\n+    deserialize_secret,\n+    deserialize_secret_hash,\n+    identity,\n+    map_dict,\n+    serialize_bytes,\n+)\n from raiden.utils.typing import (\n",
        "source_code_with_indent": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_len": 174,
        "target_code": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_len": 146,
        "diff_format": "@@ -100,4 +106,4 @@\n             'initiator_transfers': map_dict(\n-                serialization.serialize_bytes,\n-                serialization.identity,\n+                serialize_bytes,\n+                identity,\n                 self.initiator_transfers,\n",
        "source_code_with_indent": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_len": 176,
        "target_code": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_len": 154,
        "diff_format": "@@ -111,4 +117,4 @@\n             initiator_transfers=map_dict(\n-                serialization.deserialize_bytes,\n-                serialization.identity,\n+                deserialize_secret_hash,\n+                identity,\n                 data['initiator_transfers'],\n",
        "source_code_with_indent": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_len": 144,
        "target_code": "        result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_len": 130,
        "diff_format": "@@ -298,3 +304,3 @@\n         result = {\n-            'secrethash': serialization.serialize_bytes(self.secrethash),\n+            'secrethash': serialize_bytes(self.secrethash),\n             'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent": "        <IND>result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -305,3 +311,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_len": 135,
        "target_code": "        restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_len": 127,
        "diff_format": "@@ -312,3 +318,3 @@\n         restored = cls(\n-            secrethash=serialization.deserialize_bytes(data['secrethash']),\n+            secrethash=deserialize_secret_hash(data['secrethash']),\n             routes=data['routes'],\n",
        "source_code_with_indent": "        <IND>restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -320,3 +326,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -387,3 +393,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -401,3 +407,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_len": 132,
        "target_code": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_len": 118,
        "diff_format": "@@ -684,3 +690,3 @@\n             'target': to_checksum_address(self.target),\n-            'secret': serialization.serialize_bytes(self.secret),\n+            'secret': serialize_bytes(self.secret),\n         }\n",
        "source_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_len": 135,
        "target_code": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_len": 122,
        "diff_format": "@@ -697,3 +703,3 @@\n             target=to_canonical_address(data['target']),\n-            secret=serialization.deserialize_bytes(data['secret']),\n+            secret=deserialize_secret(data['secret']),\n         )\n",
        "source_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:493:12 Incompatible parameter type [6]: Expected `PaymentID` for 1st parameter `payment_identifier` to call `LockedTransferUnsignedState.__init__` but got `int`.",
    "message": " Expected `PaymentID` for 1st parameter `payment_identifier` to call `LockedTransferUnsignedState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 493,
    "warning_line": "            payment_identifier=int(data['payment_identifier']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        restored = cls(\n            payment_identifier=int(data['payment_identifier']),\n            token=to_canonical_address(data['token']),\n",
        "source_code_len": 143,
        "target_code": "        restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            token=to_canonical_address(data['token']),\n",
        "target_code_len": 154,
        "diff_format": "@@ -492,3 +498,3 @@\n         restored = cls(\n-            payment_identifier=int(data['payment_identifier']),\n+            payment_identifier=PaymentID(int(data['payment_identifier'])),\n             token=to_canonical_address(data['token']),\n",
        "source_code_with_indent": "        <IND>restored = cls(\n            payment_identifier=int(data['payment_identifier']),\n            token=to_canonical_address(data['token']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            token=to_canonical_address(data['token']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:595:12 Incompatible parameter type [6]: Expected `MessageID` for 1st parameter `message_identifier` to call `LockedTransferSignedState.__init__` but got `int`.",
    "message": " Expected `MessageID` for 1st parameter `message_identifier` to call `LockedTransferSignedState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 595,
    "warning_line": "            message_identifier=int(data['message_identifier']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        restored = cls(\n            message_identifier=int(data['message_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            token=to_canonical_address(data['token']),\n",
        "source_code_len": 207,
        "target_code": "        restored = cls(\n            message_identifier=MessageID(int(data['message_identifier'])),\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            token=to_canonical_address(data['token']),\n",
        "target_code_len": 229,
        "diff_format": "@@ -594,4 +600,4 @@\n         restored = cls(\n-            message_identifier=int(data['message_identifier']),\n-            payment_identifier=int(data['payment_identifier']),\n+            message_identifier=MessageID(int(data['message_identifier'])),\n+            payment_identifier=PaymentID(int(data['payment_identifier'])),\n             token=to_canonical_address(data['token']),\n",
        "source_code_with_indent": "        <IND>restored = cls(\n            message_identifier=int(data['message_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            token=to_canonical_address(data['token']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>restored = cls(\n            message_identifier=MessageID(int(data['message_identifier'])),\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            token=to_canonical_address(data['token']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:596:12 Incompatible parameter type [6]: Expected `PaymentID` for 2nd parameter `payment_identifier` to call `LockedTransferSignedState.__init__` but got `int`.",
    "message": " Expected `PaymentID` for 2nd parameter `payment_identifier` to call `LockedTransferSignedState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 596,
    "warning_line": "            payment_identifier=int(data['payment_identifier']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        restored = cls(\n            message_identifier=int(data['message_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            token=to_canonical_address(data['token']),\n",
        "source_code_len": 207,
        "target_code": "        restored = cls(\n            message_identifier=MessageID(int(data['message_identifier'])),\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            token=to_canonical_address(data['token']),\n",
        "target_code_len": 229,
        "diff_format": "@@ -594,4 +600,4 @@\n         restored = cls(\n-            message_identifier=int(data['message_identifier']),\n-            payment_identifier=int(data['payment_identifier']),\n+            message_identifier=MessageID(int(data['message_identifier'])),\n+            payment_identifier=PaymentID(int(data['payment_identifier'])),\n             token=to_canonical_address(data['token']),\n",
        "source_code_with_indent": "        <IND>restored = cls(\n            message_identifier=int(data['message_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            token=to_canonical_address(data['token']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>restored = cls(\n            message_identifier=MessageID(int(data['message_identifier'])),\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            token=to_canonical_address(data['token']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:692:12 Incompatible parameter type [6]: Expected `PaymentID` for 2nd parameter `payment_identifier` to call `TransferDescriptionWithSecretState.__init__` but got `int`.",
    "message": " Expected `PaymentID` for 2nd parameter `payment_identifier` to call `TransferDescriptionWithSecretState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 692,
    "warning_line": "            payment_identifier=int(data['payment_identifier']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            amount=int(data['amount']),\n            allocated_fee=int(data['allocated_fee']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_len": 348,
        "target_code": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            amount=PaymentAmount(int(data['amount'])),\n            allocated_fee=FeeAmount(int(data['allocated_fee'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_len": 385,
        "diff_format": "@@ -691,5 +697,5 @@\n             payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n-            payment_identifier=int(data['payment_identifier']),\n-            amount=int(data['amount']),\n-            allocated_fee=int(data['allocated_fee']),\n+            payment_identifier=PaymentID(int(data['payment_identifier'])),\n+            amount=PaymentAmount(int(data['amount'])),\n+            allocated_fee=FeeAmount(int(data['allocated_fee'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            amount=int(data['amount']),\n            allocated_fee=int(data['allocated_fee']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            amount=PaymentAmount(int(data['amount'])),\n            allocated_fee=FeeAmount(int(data['allocated_fee'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:693:12 Incompatible parameter type [6]: Expected `PaymentAmount` for 3rd parameter `amount` to call `TransferDescriptionWithSecretState.__init__` but got `int`.",
    "message": " Expected `PaymentAmount` for 3rd parameter `amount` to call `TransferDescriptionWithSecretState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 693,
    "warning_line": "            amount=int(data['amount']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            amount=int(data['amount']),\n            allocated_fee=int(data['allocated_fee']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_len": 348,
        "target_code": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            amount=PaymentAmount(int(data['amount'])),\n            allocated_fee=FeeAmount(int(data['allocated_fee'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_len": 385,
        "diff_format": "@@ -691,5 +697,5 @@\n             payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n-            payment_identifier=int(data['payment_identifier']),\n-            amount=int(data['amount']),\n-            allocated_fee=int(data['allocated_fee']),\n+            payment_identifier=PaymentID(int(data['payment_identifier'])),\n+            amount=PaymentAmount(int(data['amount'])),\n+            allocated_fee=FeeAmount(int(data['allocated_fee'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            amount=int(data['amount']),\n            allocated_fee=int(data['allocated_fee']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            amount=PaymentAmount(int(data['amount'])),\n            allocated_fee=FeeAmount(int(data['allocated_fee'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:694:12 Incompatible parameter type [6]: Expected `FeeAmount` for 4th parameter `allocated_fee` to call `TransferDescriptionWithSecretState.__init__` but got `int`.",
    "message": " Expected `FeeAmount` for 4th parameter `allocated_fee` to call `TransferDescriptionWithSecretState.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 694,
    "warning_line": "            allocated_fee=int(data['allocated_fee']),",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            amount=int(data['amount']),\n            allocated_fee=int(data['allocated_fee']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_len": 348,
        "target_code": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            amount=PaymentAmount(int(data['amount'])),\n            allocated_fee=FeeAmount(int(data['allocated_fee'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_len": 385,
        "diff_format": "@@ -691,5 +697,5 @@\n             payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n-            payment_identifier=int(data['payment_identifier']),\n-            amount=int(data['amount']),\n-            allocated_fee=int(data['allocated_fee']),\n+            payment_identifier=PaymentID(int(data['payment_identifier'])),\n+            amount=PaymentAmount(int(data['amount'])),\n+            allocated_fee=FeeAmount(int(data['allocated_fee'])),\n             token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=int(data['payment_identifier']),\n            amount=int(data['amount']),\n            allocated_fee=int(data['allocated_fee']),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            payment_network_identifier=to_canonical_address(data['payment_network_identifier']),\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            amount=PaymentAmount(int(data['amount'])),\n            allocated_fee=FeeAmount(int(data['allocated_fee'])),\n            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "raiden-network/raiden",
    "commit": "0cdf4a712ae848a05bba14f2f621deaa19fddfa1",
    "filename": "raiden/transfer/mediated_transfer/state.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/raiden-network-raiden/raiden/transfer/mediated_transfer/state.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "raiden/transfer/mediated_transfer/state.py:698:12 Incompatible parameter type [6]: Expected `Secret` for 8th parameter `secret` to call `TransferDescriptionWithSecretState.__init__` but got `bytes`.",
    "message": " Expected `Secret` for 8th parameter `secret` to call `TransferDescriptionWithSecretState.__init__` but got `bytes`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 698,
    "warning_line": "            secret=serialization.deserialize_bytes(data['secret']),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_len": 134,
        "target_code": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_len": 216,
        "diff_format": "@@ -13,4 +13,10 @@\n )\n-from raiden.utils import pex, serialization, sha3\n-from raiden.utils.serialization import map_dict\n+from raiden.utils import pex, sha3\n+from raiden.utils.serialization import (\n+    deserialize_secret,\n+    deserialize_secret_hash,\n+    identity,\n+    map_dict,\n+    serialize_bytes,\n+)\n from raiden.utils.typing import (\n",
        "source_code_with_indent": ")\nfrom raiden.utils import pex, serialization, sha3\nfrom raiden.utils.serialization import map_dict\nfrom raiden.utils.typing import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ")\nfrom raiden.utils import pex, sha3\nfrom raiden.utils.serialization import (\n    deserialize_secret,\n    deserialize_secret_hash,\n    identity,\n    map_dict,\n    serialize_bytes,\n)\nfrom raiden.utils.typing import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_len": 174,
        "target_code": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_len": 146,
        "diff_format": "@@ -100,4 +106,4 @@\n             'initiator_transfers': map_dict(\n-                serialization.serialize_bytes,\n-                serialization.identity,\n+                serialize_bytes,\n+                identity,\n                 self.initiator_transfers,\n",
        "source_code_with_indent": "            'initiator_transfers': map_dict(\n                serialization.serialize_bytes,\n                serialization.identity,\n                self.initiator_transfers,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'initiator_transfers': map_dict(\n                serialize_bytes,\n                identity,\n                self.initiator_transfers,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_len": 176,
        "target_code": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_len": 154,
        "diff_format": "@@ -111,4 +117,4 @@\n             initiator_transfers=map_dict(\n-                serialization.deserialize_bytes,\n-                serialization.identity,\n+                deserialize_secret_hash,\n+                identity,\n                 data['initiator_transfers'],\n",
        "source_code_with_indent": "            initiator_transfers=map_dict(\n                serialization.deserialize_bytes,\n                serialization.identity,\n                data['initiator_transfers'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            initiator_transfers=map_dict(\n                deserialize_secret_hash,\n                identity,\n                data['initiator_transfers'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_len": 144,
        "target_code": "        result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_len": 130,
        "diff_format": "@@ -298,3 +304,3 @@\n         result = {\n-            'secrethash': serialization.serialize_bytes(self.secrethash),\n+            'secrethash': serialize_bytes(self.secrethash),\n             'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent": "        <IND>result = {\n            'secrethash': serialization.serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>result = {\n            'secrethash': serialize_bytes(self.secrethash),\n            'transfers_pair': self.transfers_pair,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -305,3 +311,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_len": 135,
        "target_code": "        restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_len": 127,
        "diff_format": "@@ -312,3 +318,3 @@\n         restored = cls(\n-            secrethash=serialization.deserialize_bytes(data['secrethash']),\n+            secrethash=deserialize_secret_hash(data['secrethash']),\n             routes=data['routes'],\n",
        "source_code_with_indent": "        <IND>restored = cls(\n            secrethash=serialization.deserialize_bytes(data['secrethash']),\n            routes=data['routes'],\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>restored = cls(\n            secrethash=deserialize_secret_hash(data['secrethash']),\n            routes=data['routes'],\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -320,3 +326,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if self.secret is not None:\n            result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_len": 111,
        "target_code": "        if self.secret is not None:\n            result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_len": 97,
        "diff_format": "@@ -387,3 +393,3 @@\n         if self.secret is not None:\n-            result['secret'] = serialization.serialize_bytes(self.secret)\n+            result['secret'] = serialize_bytes(self.secret)\n \n",
        "source_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialization.serialize_bytes(self.secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if self.secret is not None:\n            <IND>result['secret'] = serialize_bytes(self.secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        if secret is not None:\n            restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_len": 102,
        "target_code": "        if secret is not None:\n            restored.secret = deserialize_secret(secret)\n\n",
        "target_code_len": 89,
        "diff_format": "@@ -401,3 +407,3 @@\n         if secret is not None:\n-            restored.secret = serialization.deserialize_bytes(secret)\n+            restored.secret = deserialize_secret(secret)\n \n",
        "source_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = serialization.deserialize_bytes(secret)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if secret is not None:\n            <IND>restored.secret = deserialize_secret(secret)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_len": 132,
        "target_code": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_len": 118,
        "diff_format": "@@ -684,3 +690,3 @@\n             'target': to_checksum_address(self.target),\n-            'secret': serialization.serialize_bytes(self.secret),\n+            'secret': serialize_bytes(self.secret),\n         }\n",
        "source_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialization.serialize_bytes(self.secret),\n        }\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            'target': to_checksum_address(self.target),\n            'secret': serialize_bytes(self.secret),\n        }\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_len": 135,
        "target_code": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_len": 122,
        "diff_format": "@@ -697,3 +703,3 @@\n             target=to_canonical_address(data['target']),\n-            secret=serialization.deserialize_bytes(data['secret']),\n+            secret=deserialize_secret(data['secret']),\n         )\n",
        "source_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=serialization.deserialize_bytes(data['secret']),\n        )\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "            target=to_canonical_address(data['target']),\n            secret=deserialize_secret(data['secret']),\n        )\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]