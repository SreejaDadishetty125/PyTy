[
  {
    "project": "DataBiosphere/toil",
    "commit": "c4555ccf9c67b61417e8ee483f3877bbed1d9684",
    "filename": "src/toil/lib/ec2.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/DataBiosphere-toil/src/toil/lib/ec2.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/toil/lib/ec2.py:513:39 Incompatible parameter type [6]: Expected `Dict[str, Union[Dict[str, str], List[Dict[str, typing.Any]]]]` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, Union[int, str]]`.",
    "message": " Expected `Dict[str, Union[Dict[str, str], List[Dict[str, typing.Any]]]]` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, Union[int, str]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 513,
    "warning_line": "        mip['InstancesDistribution'] = {'OnDemandPercentageAboveBaseCapacity': 0,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        raise RuntimeError(\"No VPC subnets specified to launch into; not clear where to put instances\")\n\n    # We always write the ASG with a MixedInstancesPolicy even when we have only one type.\n    mip = {'LaunchTemplate': {'LaunchTemplateSpecification': {'LaunchTemplateId': launch_template_id, 'Version': '$Default'},\n                              'Overrides': [{'InstanceType': t} for t in instance_types]}}\n\n",
        "source_code_len": 414,
        "target_code": "        raise RuntimeError(\"No VPC subnets specified to launch into; not clear where to put instances\")\n        \n    def get_launch_template_spec(instance_type):\n        \"\"\"\n        Get a LaunchTemplateSpecification for the given instance type.\n        \"\"\"\n        return {'LaunchTemplateId': launch_template_ids[instance_type], 'Version': '$Default'}\n\n    # We always write the ASG with a MixedInstancesPolicy even when we have only one type.\n    # And we use a separate launch template for every instance type, and apply it as an override.\n    # Overrides is the only way to get multiple instance types into one ASG; see:\n    # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/autoscaling.html#AutoScaling.Client.create_auto_scaling_group\n    # We need to use a launch template per instance type so that different\n    # instance types with specified EBS storage size overrides will get their\n    # storage.\n    mip = {'LaunchTemplate': {'LaunchTemplateSpecification': get_launch_template_spec(next(iter(instance_types))),\n                              'Overrides': [{'InstanceType': t, 'LaunchTemplateSpecification': get_launch_template_spec(t)} for t in instance_types]}}\n\n",
        "target_code_len": 1202,
        "diff_format": "@@ -505,6 +506,18 @@\n         raise RuntimeError(\"No VPC subnets specified to launch into; not clear where to put instances\")\n+        \n+    def get_launch_template_spec(instance_type):\n+        \"\"\"\n+        Get a LaunchTemplateSpecification for the given instance type.\n+        \"\"\"\n+        return {'LaunchTemplateId': launch_template_ids[instance_type], 'Version': '$Default'}\n \n     # We always write the ASG with a MixedInstancesPolicy even when we have only one type.\n-    mip = {'LaunchTemplate': {'LaunchTemplateSpecification': {'LaunchTemplateId': launch_template_id, 'Version': '$Default'},\n-                              'Overrides': [{'InstanceType': t} for t in instance_types]}}\n+    # And we use a separate launch template for every instance type, and apply it as an override.\n+    # Overrides is the only way to get multiple instance types into one ASG; see:\n+    # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/autoscaling.html#AutoScaling.Client.create_auto_scaling_group\n+    # We need to use a launch template per instance type so that different\n+    # instance types with specified EBS storage size overrides will get their\n+    # storage.\n+    mip = {'LaunchTemplate': {'LaunchTemplateSpecification': get_launch_template_spec(next(iter(instance_types))),\n+                              'Overrides': [{'InstanceType': t, 'LaunchTemplateSpecification': get_launch_template_spec(t)} for t in instance_types]}}\n \n",
        "source_code_with_indent": "        <IND>raise RuntimeError(\"No VPC subnets specified to launch into; not clear where to put instances\")\n\n    # We always write the ASG with a MixedInstancesPolicy even when we have only one type.\n    <DED>mip = {'LaunchTemplate': {'LaunchTemplateSpecification': {'LaunchTemplateId': launch_template_id, 'Version': '$Default'},\n                              'Overrides': [{'InstanceType': t} for t in instance_types]}}\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>raise RuntimeError(\"No VPC subnets specified to launch into; not clear where to put instances\")\n        \n    <DED>def get_launch_template_spec(instance_type):\n        <IND>\"\"\"\n        Get a LaunchTemplateSpecification for the given instance type.\n        \"\"\"\n        return {'LaunchTemplateId': launch_template_ids[instance_type], 'Version': '$Default'}\n\n    # We always write the ASG with a MixedInstancesPolicy even when we have only one type.\n    # And we use a separate launch template for every instance type, and apply it as an override.\n    # Overrides is the only way to get multiple instance types into one ASG; see:\n    # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/autoscaling.html#AutoScaling.Client.create_auto_scaling_group\n    # We need to use a launch template per instance type so that different\n    # instance types with specified EBS storage size overrides will get their\n    # storage.\n    <DED>mip = {'LaunchTemplate': {'LaunchTemplateSpecification': get_launch_template_spec(next(iter(instance_types))),\n                              'Overrides': [{'InstanceType': t, 'LaunchTemplateSpecification': get_launch_template_spec(t)} for t in instance_types]}}\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]