[
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/log/wasb_task_handler.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/log/wasb_task_handler.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/log/wasb_task_handler.py:123:54 Incompatible parameter type [6]: Expected `int` for 2nd positional only parameter to call `FileTaskHandler._render_filename` but got `str`.",
    "message": " Expected `int` for 2nd positional only parameter to call `FileTaskHandler._render_filename` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 123,
    "warning_line": "        log_relative_path = self._render_filename(ti, try_number)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _read(self, ti, try_number: str, metadata: Optional[str] = None) -> Tuple[str, Dict[str, bool]]:\n        \"\"\"\n",
        "source_code_len": 118,
        "target_code": "\n    def _read(self, ti, try_number: int, metadata: Optional[str] = None) -> Tuple[str, Dict[str, bool]]:\n        \"\"\"\n",
        "target_code_len": 118,
        "diff_format": "@@ -109,3 +109,3 @@\n \n-    def _read(self, ti, try_number: str, metadata: Optional[str] = None) -> Tuple[str, Dict[str, bool]]:\n+    def _read(self, ti, try_number: int, metadata: Optional[str] = None) -> Tuple[str, Dict[str, bool]]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _read(self, ti, try_number: str, metadata: Optional[str] = None) -> Tuple[str, Dict[str, bool]]:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _read(self, ti, try_number: int, metadata: Optional[str] = None) -> Tuple[str, Dict[str, bool]]:\n        <IND>"
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/operators/adls.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/operators/adls.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/operators/adls.py:60:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.operators.adls.ADLSDeleteOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.operators.adls.ADLSDeleteOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 60,
    "warning_line": "    def execute(self, context: dict) -> Any:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\n",
        "source_code_len": 81,
        "target_code": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -21,2 +21,5 @@\n from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> Any:\n        hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_len": 133,
        "target_code": "\n    def execute(self, context: \"Context\") -> Any:\n        hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "target_code_len": 138,
        "diff_format": "@@ -59,3 +62,3 @@\n \n-    def execute(self, context: dict) -> Any:\n+    def execute(self, context: \"Context\") -> Any:\n         hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> Any:\n        <IND>hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> Any:\n        <IND>hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> list:\n        hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_len": 134,
        "target_code": "\n    def execute(self, context: \"Context\") -> list:\n        hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "target_code_len": 139,
        "diff_format": "@@ -98,3 +101,3 @@\n \n-    def execute(self, context: dict) -> list:\n+    def execute(self, context: \"Context\") -> list:\n         hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> list:\n        <IND>hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> list:\n        <IND>hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/operators/adls.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/operators/adls.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/operators/adls.py:99:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.operators.adls.ADLSListOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.operators.adls.ADLSListOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 99,
    "warning_line": "    def execute(self, context: dict) -> list:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\n",
        "source_code_len": 81,
        "target_code": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -21,2 +21,5 @@\n from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> Any:\n        hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_len": 133,
        "target_code": "\n    def execute(self, context: \"Context\") -> Any:\n        hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "target_code_len": 138,
        "diff_format": "@@ -59,3 +62,3 @@\n \n-    def execute(self, context: dict) -> Any:\n+    def execute(self, context: \"Context\") -> Any:\n         hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> Any:\n        <IND>hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> Any:\n        <IND>hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> list:\n        hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_len": 134,
        "target_code": "\n    def execute(self, context: \"Context\") -> list:\n        hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "target_code_len": 139,
        "diff_format": "@@ -98,3 +101,3 @@\n \n-    def execute(self, context: dict) -> list:\n+    def execute(self, context: \"Context\") -> list:\n         hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> list:\n        <IND>hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> list:\n        <IND>hook = AzureDataLakeHook(azure_data_lake_conn_id=self.azure_data_lake_conn_id)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/operators/adx.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/operators/adx.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/operators/adx.py:69:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.operators.adx.AzureDataExplorerQueryOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.operators.adx.AzureDataExplorerQueryOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 69,
    "warning_line": "    def execute(self, context: dict) -> Union[KustoResultTable, str]:"
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/operators/batch.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/operators/batch.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/operators/batch.py:269:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.operators.batch.AzureBatchOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.operators.batch.AzureBatchOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 269,
    "warning_line": "    def execute(self, context: dict) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.microsoft.azure.hooks.batch import AzureBatchHook\n\n",
        "source_code_len": 74,
        "target_code": "from airflow.providers.microsoft.azure.hooks.batch import AzureBatchHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 139,
        "diff_format": "@@ -25,2 +25,5 @@\n from airflow.providers.microsoft.azure.hooks.batch import AzureBatchHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.providers.microsoft.azure.hooks.batch import AzureBatchHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.microsoft.azure.hooks.batch import AzureBatchHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> None:\n        self._check_inputs()\n",
        "source_code_len": 76,
        "target_code": "\n    def execute(self, context: \"Context\") -> None:\n        self._check_inputs()\n",
        "target_code_len": 81,
        "diff_format": "@@ -268,3 +271,3 @@\n \n-    def execute(self, context: dict) -> None:\n+    def execute(self, context: \"Context\") -> None:\n         self._check_inputs()\n",
        "source_code_with_indent": "\n    <DED><DED>def execute(self, context: dict) -> None:\n        <IND>self._check_inputs()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def execute(self, context: \"Context\") -> None:\n        <IND>self._check_inputs()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/operators/container_instances.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/operators/container_instances.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/operators/container_instances.py:198:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.operators.container_instances.AzureContainerInstancesOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.operators.container_instances.AzureContainerInstancesOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 198,
    "warning_line": "    def execute(self, context: dict) -> int:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.microsoft.azure.hooks.container_volume import AzureContainerVolumeHook\n\n",
        "source_code_len": 95,
        "target_code": "from airflow.providers.microsoft.azure.hooks.container_volume import AzureContainerVolumeHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n\n",
        "target_code_len": 161,
        "diff_format": "@@ -40,2 +40,6 @@\n from airflow.providers.microsoft.azure.hooks.container_volume import AzureContainerVolumeHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n+\n \n",
        "source_code_with_indent": "from airflow.providers.microsoft.azure.hooks.container_volume import AzureContainerVolumeHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.microsoft.azure.hooks.container_volume import AzureContainerVolumeHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> int:\n        # Check name again in case it was templated.\n",
        "source_code_len": 99,
        "target_code": "\n    def execute(self, context: \"Context\") -> int:\n        # Check name again in case it was templated.\n",
        "target_code_len": 104,
        "diff_format": "@@ -197,3 +201,3 @@\n \n-    def execute(self, context: dict) -> int:\n+    def execute(self, context: \"Context\") -> int:\n         # Check name again in case it was templated.\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> int:\n        # Check name again in case it was templated.\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> int:\n        # Check name again in case it was templated.\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/operators/cosmos.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/operators/cosmos.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/operators/cosmos.py:57:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.operators.cosmos.AzureCosmosInsertDocumentOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.operators.cosmos.AzureCosmosInsertDocumentOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 57,
    "warning_line": "    def execute(self, context: dict) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.microsoft.azure.hooks.cosmos import AzureCosmosDBHook\n\n",
        "source_code_len": 78,
        "target_code": "from airflow.providers.microsoft.azure.hooks.cosmos import AzureCosmosDBHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 143,
        "diff_format": "@@ -20,2 +21,5 @@\n from airflow.providers.microsoft.azure.hooks.cosmos import AzureCosmosDBHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.providers.microsoft.azure.hooks.cosmos import AzureCosmosDBHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.microsoft.azure.hooks.cosmos import AzureCosmosDBHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> None:\n        # Create the hook\n",
        "source_code_len": 73,
        "target_code": "\n    def execute(self, context: \"Context\") -> None:\n        # Create the hook\n",
        "target_code_len": 78,
        "diff_format": "@@ -56,3 +60,3 @@\n \n-    def execute(self, context: dict) -> None:\n+    def execute(self, context: \"Context\") -> None:\n         # Create the hook\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> None:\n        # Create the hook\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> None:\n        # Create the hook\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/operators/wasb_delete_blob.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/operators/wasb_delete_blob.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/operators/wasb_delete_blob.py:67:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.operators.wasb_delete_blob.WasbDeleteBlobOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.operators.wasb_delete_blob.WasbDeleteBlobOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 67,
    "warning_line": "    def execute(self, context: dict) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\n",
        "source_code_len": 67,
        "target_code": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -22,2 +22,5 @@\n from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> None:\n        self.log.info('Deleting blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "source_code_len": 142,
        "target_code": "\n    def execute(self, context: \"Context\") -> None:\n        self.log.info('Deleting blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "target_code_len": 147,
        "diff_format": "@@ -66,3 +69,3 @@\n \n-    def execute(self, context: dict) -> None:\n+    def execute(self, context: \"Context\") -> None:\n         self.log.info('Deleting blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> None:\n        <IND>self.log.info('Deleting blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> None:\n        <IND>self.log.info('Deleting blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/sensors/cosmos.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/sensors/cosmos.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/sensors/cosmos.py:65:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.sensors.cosmos.AzureCosmosDocumentSensor.poke` overrides method defined in `BaseSensorOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.sensors.cosmos.AzureCosmosDocumentSensor.poke` overrides method defined in `BaseSensorOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 65,
    "warning_line": "    def poke(self, context: dict) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.sensors.base import BaseSensorOperator\n\n",
        "source_code_len": 53,
        "target_code": "from airflow.sensors.base import BaseSensorOperator\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 118,
        "diff_format": "@@ -20,2 +21,5 @@\n from airflow.sensors.base import BaseSensorOperator\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.sensors.base import BaseSensorOperator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.sensors.base import BaseSensorOperator\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def poke(self, context: dict) -> bool:\n        self.log.info(\"*** Intering poke\")\n        hook = AzureCosmosDBHook(self.azure_cosmos_conn_id)\n",
        "source_code_len": 147,
        "target_code": "\n    def poke(self, context: \"Context\") -> bool:\n        self.log.info(\"*** Entering poke\")\n        hook = AzureCosmosDBHook(self.azure_cosmos_conn_id)\n",
        "target_code_len": 152,
        "diff_format": "@@ -64,4 +68,4 @@\n \n-    def poke(self, context: dict) -> bool:\n-        self.log.info(\"*** Intering poke\")\n+    def poke(self, context: \"Context\") -> bool:\n+        self.log.info(\"*** Entering poke\")\n         hook = AzureCosmosDBHook(self.azure_cosmos_conn_id)\n",
        "source_code_with_indent": "\n    <DED>def poke(self, context: dict) -> bool:\n        <IND>self.log.info(\"*** Intering poke\")\n        hook = AzureCosmosDBHook(self.azure_cosmos_conn_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def poke(self, context: \"Context\") -> bool:\n        <IND>self.log.info(\"*** Entering poke\")\n        hook = AzureCosmosDBHook(self.azure_cosmos_conn_id)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/sensors/data_factory.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/sensors/data_factory.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/sensors/data_factory.py:61:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.sensors.data_factory.AzureDataFactoryPipelineRunStatusSensor.poke` overrides method defined in `BaseSensorOperator` inconsistently. Parameter of type `Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.sensors.data_factory.AzureDataFactoryPipelineRunStatusSensor.poke` overrides method defined in `BaseSensorOperator` inconsistently. Parameter of type `Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 61,
    "warning_line": "    def poke(self, context: Dict) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.sensors.base import BaseSensorOperator\n\n",
        "source_code_len": 53,
        "target_code": "from airflow.sensors.base import BaseSensorOperator\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 118,
        "diff_format": "@@ -25,2 +25,5 @@\n from airflow.sensors.base import BaseSensorOperator\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.sensors.base import BaseSensorOperator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.sensors.base import BaseSensorOperator\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def poke(self, context: Dict) -> bool:\n        self.hook = AzureDataFactoryHook(azure_data_factory_conn_id=self.azure_data_factory_conn_id)\n",
        "source_code_len": 145,
        "target_code": "\n    def poke(self, context: \"Context\") -> bool:\n        self.hook = AzureDataFactoryHook(azure_data_factory_conn_id=self.azure_data_factory_conn_id)\n",
        "target_code_len": 150,
        "diff_format": "@@ -60,3 +63,3 @@\n \n-    def poke(self, context: Dict) -> bool:\n+    def poke(self, context: \"Context\") -> bool:\n         self.hook = AzureDataFactoryHook(azure_data_factory_conn_id=self.azure_data_factory_conn_id)\n",
        "source_code_with_indent": "\n    <DED>def poke(self, context: Dict) -> bool:\n        <IND>self.hook = AzureDataFactoryHook(azure_data_factory_conn_id=self.azure_data_factory_conn_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def poke(self, context: \"Context\") -> bool:\n        <IND>self.hook = AzureDataFactoryHook(azure_data_factory_conn_id=self.azure_data_factory_conn_id)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/sensors/wasb.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/sensors/wasb.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/sensors/wasb.py:59:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.sensors.wasb.WasbBlobSensor.poke` overrides method defined in `BaseSensorOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.sensors.wasb.WasbBlobSensor.poke` overrides method defined in `BaseSensorOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 59,
    "warning_line": "    def poke(self, context: dict):",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.sensors.base import BaseSensorOperator\n\n",
        "source_code_len": 53,
        "target_code": "from airflow.sensors.base import BaseSensorOperator\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 118,
        "diff_format": "@@ -22,2 +22,5 @@\n from airflow.sensors.base import BaseSensorOperator\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.sensors.base import BaseSensorOperator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.sensors.base import BaseSensorOperator\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def poke(self, context: dict):\n        self.log.info('Poking for blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "source_code_len": 133,
        "target_code": "\n    def poke(self, context: \"Context\"):\n        self.log.info('Poking for blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "target_code_len": 138,
        "diff_format": "@@ -58,3 +61,3 @@\n \n-    def poke(self, context: dict):\n+    def poke(self, context: \"Context\"):\n         self.log.info('Poking for blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "source_code_with_indent": "\n    <DED>def poke(self, context: dict):\n        <IND>self.log.info('Poking for blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def poke(self, context: \"Context\"):\n        <IND>self.log.info('Poking for blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def poke(self, context: dict) -> bool:\n        self.log.info('Poking for prefix: %s in wasb://%s', self.prefix, self.container_name)\n",
        "source_code_len": 138,
        "target_code": "\n    def poke(self, context: \"Context\") -> bool:\n        self.log.info('Poking for prefix: %s in wasb://%s', self.prefix, self.container_name)\n",
        "target_code_len": 143,
        "diff_format": "@@ -98,3 +101,3 @@\n \n-    def poke(self, context: dict) -> bool:\n+    def poke(self, context: \"Context\") -> bool:\n         self.log.info('Poking for prefix: %s in wasb://%s', self.prefix, self.container_name)\n",
        "source_code_with_indent": "\n    <DED>def poke(self, context: dict) -> bool:\n        <IND>self.log.info('Poking for prefix: %s in wasb://%s', self.prefix, self.container_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def poke(self, context: \"Context\") -> bool:\n        <IND>self.log.info('Poking for prefix: %s in wasb://%s', self.prefix, self.container_name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/sensors/wasb.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/sensors/wasb.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/sensors/wasb.py:99:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.sensors.wasb.WasbPrefixSensor.poke` overrides method defined in `BaseSensorOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.sensors.wasb.WasbPrefixSensor.poke` overrides method defined in `BaseSensorOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 99,
    "warning_line": "    def poke(self, context: dict) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.sensors.base import BaseSensorOperator\n\n",
        "source_code_len": 53,
        "target_code": "from airflow.sensors.base import BaseSensorOperator\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 118,
        "diff_format": "@@ -22,2 +22,5 @@\n from airflow.sensors.base import BaseSensorOperator\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.sensors.base import BaseSensorOperator\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.sensors.base import BaseSensorOperator\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def poke(self, context: dict):\n        self.log.info('Poking for blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "source_code_len": 133,
        "target_code": "\n    def poke(self, context: \"Context\"):\n        self.log.info('Poking for blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "target_code_len": 138,
        "diff_format": "@@ -58,3 +61,3 @@\n \n-    def poke(self, context: dict):\n+    def poke(self, context: \"Context\"):\n         self.log.info('Poking for blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "source_code_with_indent": "\n    <DED>def poke(self, context: dict):\n        <IND>self.log.info('Poking for blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def poke(self, context: \"Context\"):\n        <IND>self.log.info('Poking for blob: %s\\n in wasb://%s', self.blob_name, self.container_name)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def poke(self, context: dict) -> bool:\n        self.log.info('Poking for prefix: %s in wasb://%s', self.prefix, self.container_name)\n",
        "source_code_len": 138,
        "target_code": "\n    def poke(self, context: \"Context\") -> bool:\n        self.log.info('Poking for prefix: %s in wasb://%s', self.prefix, self.container_name)\n",
        "target_code_len": 143,
        "diff_format": "@@ -98,3 +101,3 @@\n \n-    def poke(self, context: dict) -> bool:\n+    def poke(self, context: \"Context\") -> bool:\n         self.log.info('Poking for prefix: %s in wasb://%s', self.prefix, self.container_name)\n",
        "source_code_with_indent": "\n    <DED>def poke(self, context: dict) -> bool:\n        <IND>self.log.info('Poking for prefix: %s in wasb://%s', self.prefix, self.container_name)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def poke(self, context: \"Context\") -> bool:\n        <IND>self.log.info('Poking for prefix: %s in wasb://%s', self.prefix, self.container_name)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/transfers/azure_blob_to_gcs.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/transfers/azure_blob_to_gcs.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/transfers/azure_blob_to_gcs.py:106:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.transfers.azure_blob_to_gcs.AzureBlobStorageToGCSOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.transfers.azure_blob_to_gcs.AzureBlobStorageToGCSOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 106,
    "warning_line": "    def execute(self, context: dict) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\n",
        "source_code_len": 67,
        "target_code": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -24,2 +24,5 @@\n from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> str:\n        azure_hook = WasbHook(wasb_conn_id=self.wasb_conn_id)\n",
        "source_code_len": 108,
        "target_code": "\n    def execute(self, context: \"Context\") -> str:\n        azure_hook = WasbHook(wasb_conn_id=self.wasb_conn_id)\n",
        "target_code_len": 113,
        "diff_format": "@@ -105,3 +108,3 @@\n \n-    def execute(self, context: dict) -> str:\n+    def execute(self, context: \"Context\") -> str:\n         azure_hook = WasbHook(wasb_conn_id=self.wasb_conn_id)\n",
        "source_code_with_indent": "\n    def execute(self, context: dict) -> str:\n        <IND>azure_hook = WasbHook(wasb_conn_id=self.wasb_conn_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    def execute(self, context: \"Context\") -> str:\n        <IND>azure_hook = WasbHook(wasb_conn_id=self.wasb_conn_id)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/transfers/local_to_adls.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/transfers/local_to_adls.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/transfers/local_to_adls.py:87:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.transfers.local_to_adls.LocalFilesystemToADLSOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.transfers.local_to_adls.LocalFilesystemToADLSOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 87,
    "warning_line": "    def execute(self, context: dict) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\n",
        "source_code_len": 81,
        "target_code": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 146,
        "diff_format": "@@ -22,2 +22,5 @@\n from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.microsoft.azure.hooks.data_lake import AzureDataLakeHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> None:\n        if '**' in self.local_path:\n",
        "source_code_len": 83,
        "target_code": "\n    def execute(self, context: \"Context\") -> None:\n        if '**' in self.local_path:\n",
        "target_code_len": 88,
        "diff_format": "@@ -86,3 +89,3 @@\n \n-    def execute(self, context: dict) -> None:\n+    def execute(self, context: \"Context\") -> None:\n         if '**' in self.local_path:\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> None:\n        <IND>if '**' in self.local_path:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> None:\n        <IND>if '**' in self.local_path:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/transfers/local_to_wasb.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/transfers/local_to_wasb.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/transfers/local_to_wasb.py:63:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.transfers.local_to_wasb.LocalFilesystemToWasbOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.transfers.local_to_wasb.LocalFilesystemToWasbOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 63,
    "warning_line": "    def execute(self, context: dict) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\n",
        "source_code_len": 67,
        "target_code": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 132,
        "diff_format": "@@ -22,2 +22,5 @@\n from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.microsoft.azure.hooks.wasb import WasbHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> None:\n        \"\"\"Upload a file to Azure Blob Storage.\"\"\"\n",
        "source_code_len": 98,
        "target_code": "\n    def execute(self, context: \"Context\") -> None:\n        \"\"\"Upload a file to Azure Blob Storage.\"\"\"\n",
        "target_code_len": 103,
        "diff_format": "@@ -62,3 +65,3 @@\n \n-    def execute(self, context: dict) -> None:\n+    def execute(self, context: \"Context\") -> None:\n         \"\"\"Upload a file to Azure Blob Storage.\"\"\"\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> None:\n        <IND>\"\"\"Upload a file to Azure Blob Storage.\"\"\"\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> None:\n        <IND>\"\"\"Upload a file to Azure Blob Storage.\"\"\"\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/azure/transfers/oracle_to_azure_data_lake.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/azure/transfers/oracle_to_azure_data_lake.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/azure/transfers/oracle_to_azure_data_lake.py:104:4 Inconsistent override [14]: `airflow.providers.microsoft.azure.transfers.oracle_to_azure_data_lake.OracleToAzureDataLakeOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.azure.transfers.oracle_to_azure_data_lake.OracleToAzureDataLakeOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 104,
    "warning_line": "    def execute(self, context: dict) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.oracle.hooks.oracle import OracleHook\n\n",
        "source_code_len": 62,
        "target_code": "from airflow.providers.oracle.hooks.oracle import OracleHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 127,
        "diff_format": "@@ -27,2 +27,5 @@\n from airflow.providers.oracle.hooks.oracle import OracleHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.providers.oracle.hooks.oracle import OracleHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.oracle.hooks.oracle import OracleHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> None:\n        oracle_hook = OracleHook(oracle_conn_id=self.oracle_conn_id)\n",
        "source_code_len": 116,
        "target_code": "\n    def execute(self, context: \"Context\") -> None:\n        oracle_hook = OracleHook(oracle_conn_id=self.oracle_conn_id)\n",
        "target_code_len": 121,
        "diff_format": "@@ -103,3 +106,3 @@\n \n-    def execute(self, context: dict) -> None:\n+    def execute(self, context: \"Context\") -> None:\n         oracle_hook = OracleHook(oracle_conn_id=self.oracle_conn_id)\n",
        "source_code_with_indent": "\n    <DED><DED>def execute(self, context: dict) -> None:\n        <IND>oracle_hook = OracleHook(oracle_conn_id=self.oracle_conn_id)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def execute(self, context: \"Context\") -> None:\n        <IND>oracle_hook = OracleHook(oracle_conn_id=self.oracle_conn_id)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/mssql/operators/mssql.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/mssql/operators/mssql.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/mssql/operators/mssql.py:93:4 Inconsistent override [14]: `airflow.providers.microsoft.mssql.operators.mssql.MsSqlOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.mssql.operators.mssql.MsSqlOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 93,
    "warning_line": "    def execute(self, context: dict) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    from airflow.hooks.dbapi import DbApiHook\n\n",
        "source_code_len": 47,
        "target_code": "    from airflow.hooks.dbapi import DbApiHook\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 93,
        "diff_format": "@@ -25,2 +25,3 @@\n     from airflow.hooks.dbapi import DbApiHook\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "    <IND>from airflow.hooks.dbapi import DbApiHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <IND>from airflow.hooks.dbapi import DbApiHook\n    from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> None:\n        self.log.info('Executing: %s', self.sql)\n",
        "source_code_len": 96,
        "target_code": "\n    def execute(self, context: 'Context') -> None:\n        self.log.info('Executing: %s', self.sql)\n",
        "target_code_len": 101,
        "diff_format": "@@ -92,3 +93,3 @@\n \n-    def execute(self, context: dict) -> None:\n+    def execute(self, context: 'Context') -> None:\n         self.log.info('Executing: %s', self.sql)\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> None:\n        <IND>self.log.info('Executing: %s', self.sql)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: 'Context') -> None:\n        <IND>self.log.info('Executing: %s', self.sql)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/psrp/operators/psrp.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/psrp/operators/psrp.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/psrp/operators/psrp.py:59:4 Inconsistent override [14]: `airflow.providers.microsoft.psrp.operators.psrp.PSRPOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.psrp.operators.psrp.PSRPOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 59,
    "warning_line": "    def execute(self, context: dict) -> List[str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from airflow.providers.microsoft.psrp.hooks.psrp import PSRPHook\n\n",
        "source_code_len": 66,
        "target_code": "from airflow.providers.microsoft.psrp.hooks.psrp import PSRPHook\n\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n",
        "target_code_len": 131,
        "diff_format": "@@ -23,2 +23,5 @@\n from airflow.providers.microsoft.psrp.hooks.psrp import PSRPHook\n+\n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n \n",
        "source_code_with_indent": "from airflow.providers.microsoft.psrp.hooks.psrp import PSRPHook\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from airflow.providers.microsoft.psrp.hooks.psrp import PSRPHook\n\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> List[str]:\n        with PSRPHook(self.conn_id) as hook:\n",
        "source_code_len": 97,
        "target_code": "\n    def execute(self, context: \"Context\") -> List[str]:\n        with PSRPHook(self.conn_id) as hook:\n",
        "target_code_len": 102,
        "diff_format": "@@ -58,3 +61,3 @@\n \n-    def execute(self, context: dict) -> List[str]:\n+    def execute(self, context: \"Context\") -> List[str]:\n         with PSRPHook(self.conn_id) as hook:\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> List[str]:\n        <IND>with PSRPHook(self.conn_id) as hook:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> List[str]:\n        <IND>with PSRPHook(self.conn_id) as hook:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "apache/airflow",
    "commit": "e63e23c582cd757ea6593bdb4dfde66d76a8c9f1",
    "filename": "airflow/providers/microsoft/winrm/operators/winrm.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/apache-airflow/airflow/providers/microsoft/winrm/operators/winrm.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "airflow/providers/microsoft/winrm/operators/winrm.py:81:4 Inconsistent override [14]: `airflow.providers.microsoft.winrm.operators.winrm.WinRMOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "message": " `airflow.providers.microsoft.winrm.operators.winrm.WinRMOperator.execute` overrides method defined in `airflow.models.baseoperator.BaseOperator` inconsistently. Parameter of type `typing.Dict[typing.Any, typing.Any]` is not a supertype of the overridden parameter `airflow.utils.context.Context`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 81,
    "warning_line": "    def execute(self, context: dict) -> Union[list, str]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n# Hide the following error message in urllib3 when making WinRM connections:\n",
        "source_code_len": 78,
        "target_code": "\nif TYPE_CHECKING:\n    from airflow.utils.context import Context\n\n# Hide the following error message in urllib3 when making WinRM connections:\n",
        "target_code_len": 143,
        "diff_format": "@@ -29,2 +29,5 @@\n \n+if TYPE_CHECKING:\n+    from airflow.utils.context import Context\n+\n # Hide the following error message in urllib3 when making WinRM connections:\n",
        "source_code_with_indent": "\n# Hide the following error message in urllib3 when making WinRM connections:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nif TYPE_CHECKING:\n    <IND>from airflow.utils.context import Context\n\n# Hide the following error message in urllib3 when making WinRM connections:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def execute(self, context: dict) -> Union[list, str]:\n        if self.ssh_conn_id and not self.winrm_hook:\n",
        "source_code_len": 112,
        "target_code": "\n    def execute(self, context: \"Context\") -> Union[list, str]:\n        if self.ssh_conn_id and not self.winrm_hook:\n",
        "target_code_len": 117,
        "diff_format": "@@ -80,3 +84,3 @@\n \n-    def execute(self, context: dict) -> Union[list, str]:\n+    def execute(self, context: \"Context\") -> Union[list, str]:\n         if self.ssh_conn_id and not self.winrm_hook:\n",
        "source_code_with_indent": "\n    <DED>def execute(self, context: dict) -> Union[list, str]:\n        <IND>if self.ssh_conn_id and not self.winrm_hook:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def execute(self, context: \"Context\") -> Union[list, str]:\n        <IND>if self.ssh_conn_id and not self.winrm_hook:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]