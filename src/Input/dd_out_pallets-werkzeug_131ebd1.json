[
  {
    "project": "pallets/werkzeug",
    "commit": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "filename": "src/werkzeug/datastructures.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/datastructures.pyi",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/datastructures.pyi:51:4 Inconsistent override [14]: `src.werkzeug.datastructures.ImmutableListMixin.insert` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
    "message": " `src.werkzeug.datastructures.ImmutableListMixin.insert` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 51,
    "warning_line": "    def insert(self, pos: int, value: V) -> NoReturn: ..."
  },
  {
    "project": "pallets/werkzeug",
    "commit": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "filename": "src/werkzeug/datastructures.pyi",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/datastructures.pyi",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/datastructures.pyi:52:4 Inconsistent override [14]: `src.werkzeug.datastructures.ImmutableListMixin.pop` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
    "message": " `src.werkzeug.datastructures.ImmutableListMixin.pop` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 52,
    "warning_line": "    def pop(self, index: int = -1) -> NoReturn: ...",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: int = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
        "source_code_len": 208,
        "target_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
        "target_code_len": 228,
        "diff_format": "@@ -50,4 +50,4 @@\n     def extend(self, values: Iterable[V]) -> NoReturn: ...\n-    def insert(self, pos: int, value: V) -> NoReturn: ...\n-    def pop(self, index: int = -1) -> NoReturn: ...\n+    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n+    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n     def reverse(self) -> NoReturn: ...\n",
        "source_code_with_indent": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: int = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/http.py:456:60 Unsupported operand [58]: `+` is not supported for operand types `str` and `t.Optional[str]`.",
    "message": " `+` is not supported for operand types `str` and `t.Optional[str]`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 456,
    "warning_line": "                options[option] = options.get(option, \"\") + option_value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                # out-of-order indices, which shouldn't happen anyway.\n                options[option] = options.get(option, \"\") + option_value\n            else:\n                options[option] = option_value\n            rest = rest[optmatch.end() :]\n",
        "source_code_len": 251,
        "target_code": "                # out-of-order indices, which shouldn't happen anyway.\n                if option_value is not None:\n                    options[option] = options.get(option, \"\") + option_value\n            else:\n                options[option] = option_value  # type: ignore[assignment]\n\n            rest = rest[optmatch.end() :]\n",
        "target_code_len": 329,
        "diff_format": "@@ -455,5 +458,7 @@\n                 # out-of-order indices, which shouldn't happen anyway.\n-                options[option] = options.get(option, \"\") + option_value\n+                if option_value is not None:\n+                    options[option] = options.get(option, \"\") + option_value\n             else:\n-                options[option] = option_value\n+                options[option] = option_value  # type: ignore[assignment]\n+\n             rest = rest[optmatch.end() :]\n",
        "source_code_with_indent": "                # out-of-order indices, which shouldn't happen anyway.\n                <IND>options[option] = options.get(option, \"\") + option_value\n            <DED>else:\n                <IND>options[option] = option_value\n            <DED>rest = rest[optmatch.end() :]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # out-of-order indices, which shouldn't happen anyway.\n                <IND>if option_value is not None:\n                    <IND>options[option] = options.get(option, \"\") + option_value\n            <DED><DED>else:\n                <IND>options[option] = option_value  # type: ignore[assignment]\n\n            <DED>rest = rest[optmatch.end() :]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "filename": "src/werkzeug/http.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/http.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "src/werkzeug/http.py:458:34 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `t.Optional[str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `dict.__setitem__` but got `t.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 458,
    "warning_line": "                options[option] = option_value",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "                # out-of-order indices, which shouldn't happen anyway.\n                options[option] = options.get(option, \"\") + option_value\n            else:\n                options[option] = option_value\n            rest = rest[optmatch.end() :]\n",
        "source_code_len": 251,
        "target_code": "                # out-of-order indices, which shouldn't happen anyway.\n                if option_value is not None:\n                    options[option] = options.get(option, \"\") + option_value\n            else:\n                options[option] = option_value  # type: ignore[assignment]\n\n            rest = rest[optmatch.end() :]\n",
        "target_code_len": 329,
        "diff_format": "@@ -455,5 +458,7 @@\n                 # out-of-order indices, which shouldn't happen anyway.\n-                options[option] = options.get(option, \"\") + option_value\n+                if option_value is not None:\n+                    options[option] = options.get(option, \"\") + option_value\n             else:\n-                options[option] = option_value\n+                options[option] = option_value  # type: ignore[assignment]\n+\n             rest = rest[optmatch.end() :]\n",
        "source_code_with_indent": "                # out-of-order indices, which shouldn't happen anyway.\n                <IND>options[option] = options.get(option, \"\") + option_value\n            <DED>else:\n                <IND>options[option] = option_value\n            <DED>rest = rest[optmatch.end() :]\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "                # out-of-order indices, which shouldn't happen anyway.\n                <IND>if option_value is not None:\n                    <IND>options[option] = options.get(option, \"\") + option_value\n            <DED><DED>else:\n                <IND>options[option] = option_value  # type: ignore[assignment]\n\n            <DED>rest = rest[optmatch.end() :]\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "pallets/werkzeug",
    "commit": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "filename": "src/werkzeug/serving.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/pallets-werkzeug/src/werkzeug/serving.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "src/werkzeug/serving.py:728:4 Inconsistent override [14]: `src.werkzeug.serving.BaseWSGIServer.handle_error` overrides method defined in `socketserver.TCPServer` inconsistently. Parameter of type `t.Tuple[str, int]` is not a supertype of the overridden parameter `t.Union[t.Tuple[str, int], str]`.",
    "message": " `src.werkzeug.serving.BaseWSGIServer.handle_error` overrides method defined in `socketserver.TCPServer` inconsistently. Parameter of type `t.Tuple[str, int]` is not a supertype of the overridden parameter `t.Union[t.Tuple[str, int], str]`.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 728,
    "warning_line": "    def handle_error(self, request: t.Any, client_address: t.Tuple[str, int]) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def handle_error(self, request: t.Any, client_address: t.Tuple[str, int]) -> None:\n        if self.passthrough_errors:\n",
        "source_code_len": 124,
        "target_code": "\n    def handle_error(\n        self, request: t.Any, client_address: t.Union[t.Tuple[str, int], str]\n    ) -> None:\n        if self.passthrough_errors:\n",
        "target_code_len": 152,
        "diff_format": "@@ -727,3 +729,5 @@\n \n-    def handle_error(self, request: t.Any, client_address: t.Tuple[str, int]) -> None:\n+    def handle_error(\n+        self, request: t.Any, client_address: t.Union[t.Tuple[str, int], str]\n+    ) -> None:\n         if self.passthrough_errors:\n",
        "source_code_with_indent": "\n    <DED><DED>def handle_error(self, request: t.Any, client_address: t.Tuple[str, int]) -> None:\n        <IND>if self.passthrough_errors:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def handle_error(\n        self, request: t.Any, client_address: t.Union[t.Tuple[str, int], str]\n    ) -> None:\n        <IND>if self.passthrough_errors:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]