[
  {
    "project": "NVIDIA-Merlin/Transformers4Rec",
    "commit": "3f95dc83ca78bde7b300a1f0016c213728b8b775",
    "filename": "transformers4rec/tf/masking.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/NVIDIA-Merlin-Transformers4Rec/transformers4rec/tf/masking.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "transformers4rec/tf/masking.py:38:25 Incompatible parameter type [6]: Expected `int` for 1st positional only parameter to call `_MaskSequence.__init__` but got `None`.",
    "message": " Expected `int` for 1st positional only parameter to call `_MaskSequence.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 38,
    "warning_line": "        super().__init__(None, pad_token)"
  },
  {
    "project": "NVIDIA-Merlin/Transformers4Rec",
    "commit": "3f95dc83ca78bde7b300a1f0016c213728b8b775",
    "filename": "transformers4rec/tf/masking.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/NVIDIA-Merlin-Transformers4Rec/transformers4rec/tf/masking.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "transformers4rec/tf/masking.py:38:31 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `_MaskSequence.__init__` but got `int`.",
    "message": " Expected `str` for 2nd positional only parameter to call `_MaskSequence.__init__` but got `int`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 38,
    "warning_line": "        super().__init__(None, pad_token)"
  },
  {
    "project": "NVIDIA-Merlin/Transformers4Rec",
    "commit": "3f95dc83ca78bde7b300a1f0016c213728b8b775",
    "filename": "transformers4rec/torch/masking.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/NVIDIA-Merlin-Transformers4Rec/transformers4rec/torch/masking.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "transformers4rec/torch/masking.py:108:9 Invalid type [31]: Expression `[$local_transformers4rec?torch?masking$MaskingSchema, $local_transformers4rec?torch?masking$MaskedTargets]` is not a valid type.",
    "message": " Expression `[$local_transformers4rec?torch?masking$MaskingSchema, $local_transformers4rec?torch?masking$MaskedTargets]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 108,
    "warning_line": "    ) -> [MaskingSchema, MaskedTargets]:"
  },
  {
    "project": "NVIDIA-Merlin/Transformers4Rec",
    "commit": "3f95dc83ca78bde7b300a1f0016c213728b8b775",
    "filename": "transformers4rec/torch/masking.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/NVIDIA-Merlin-Transformers4Rec/transformers4rec/torch/masking.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "transformers4rec/torch/masking.py:187:9 Invalid type [31]: Expression `[$local_transformers4rec?torch?masking$MaskingSchema, $local_transformers4rec?torch?masking$MaskedTargets]` is not a valid type.",
    "message": " Expression `[$local_transformers4rec?torch?masking$MaskingSchema, $local_transformers4rec?torch?masking$MaskedTargets]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 187,
    "warning_line": "    ) -> [MaskingSchema, MaskedTargets]:"
  },
  {
    "project": "NVIDIA-Merlin/Transformers4Rec",
    "commit": "3f95dc83ca78bde7b300a1f0016c213728b8b775",
    "filename": "transformers4rec/torch/masking.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/NVIDIA-Merlin-Transformers4Rec/transformers4rec/torch/masking.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "transformers4rec/torch/masking.py:253:4 Inconsistent override [14]: `transformers4rec.torch.masking.MaskedLanguageModeling.apply_mask_to_inputs` overrides method defined in `MaskSequence` inconsistently. Could not find parameter `schema` in overriding signature.",
    "message": " `transformers4rec.torch.masking.MaskedLanguageModeling.apply_mask_to_inputs` overrides method defined in `MaskSequence` inconsistently. Could not find parameter `schema` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 253,
    "warning_line": "    def apply_mask_to_inputs(self, inputs: torch.Tensor, mask_schema: MaskingSchema):"
  },
  {
    "project": "NVIDIA-Merlin/Transformers4Rec",
    "commit": "3f95dc83ca78bde7b300a1f0016c213728b8b775",
    "filename": "transformers4rec/torch/masking.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/NVIDIA-Merlin-Transformers4Rec/transformers4rec/torch/masking.py",
    "file_hunks_size": 27,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "transformers4rec/torch/masking.py:456:4 Inconsistent override [14]: `transformers4rec.torch.masking.PermutationLanguageModeling.apply_mask_to_inputs` overrides method defined in `MaskSequence` inconsistently. Could not find parameter `schema` in overriding signature.",
    "message": " `transformers4rec.torch.masking.PermutationLanguageModeling.apply_mask_to_inputs` overrides method defined in `MaskSequence` inconsistently. Could not find parameter `schema` in overriding signature.",
    "rule_id": "Inconsistent override [14]",
    "warning_line_no": 456,
    "warning_line": "    def apply_mask_to_inputs(self, inputs: torch.Tensor, mask_schema: MaskingSchema):"
  }
]