[
  {
    "project": "omnilib/aiosqlite",
    "commit": "3c56a655db0b940272306894d15d99ad9805e5a4",
    "filename": "aiosqlite/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/omnilib-aiosqlite/aiosqlite/core.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiosqlite/core.py:119:8 Incompatible attribute type [8]: Attribute `_conn` declared in class `Connection` has type `sqlite3.dbapi2.Connection` but is used as type `None`.",
    "message": " Attribute `_conn` declared in class `Connection` has type `sqlite3.dbapi2.Connection` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 119,
    "warning_line": "        self._conn = None  # type: sqlite3.Connection",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._running = True\n        self._conn = None  # type: sqlite3.Connection\n        self._connector = connector\n",
        "source_code_len": 119,
        "target_code": "        self._running = True\n        self._connection = None  # type: Optional[sqlite3.Connection]\n        self._connector = connector\n",
        "target_code_len": 135,
        "diff_format": "@@ -118,3 +118,3 @@\n         self._running = True\n-        self._conn = None  # type: sqlite3.Connection\n+        self._connection = None  # type: Optional[sqlite3.Connection]\n         self._connector = connector\n",
        "source_code_with_indent": "        self._running = True\n        self._conn = None  # type: sqlite3.Connection\n        self._connector = connector\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._running = True\n        self._connection = None  # type: Optional[sqlite3.Connection]\n        self._connector = connector\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._rx = Queue()  # type: Queue\n\n",
        "source_code_len": 43,
        "target_code": "        self._rx = Queue()  # type: Queue\n\n    @property\n    def _conn(self) -> sqlite3.Connection:\n        if self._connection is None:\n            raise ValueError(\"no active connection\")\n\n        return self._connection\n\n",
        "target_code_len": 224,
        "diff_format": "@@ -124,2 +124,9 @@\n         self._rx = Queue()  # type: Queue\n+\n+    @property\n+    def _conn(self) -> sqlite3.Connection:\n+        if self._connection is None:\n+            raise ValueError(\"no active connection\")\n+\n+        return self._connection\n \n",
        "source_code_with_indent": "        self._rx = Queue()  # type: Queue\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._rx = Queue()  # type: Queue\n\n    <DED>@property\n    def _conn(self) -> sqlite3.Connection:\n        <IND>if self._connection is None:\n            <IND>raise ValueError(\"no active connection\")\n\n        <DED>return self._connection\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        await self.close()\n        self._conn = None\n\n",
        "source_code_len": 54,
        "target_code": "        await self.close()\n        self._connection = None\n\n",
        "target_code_len": 60,
        "diff_format": "@@ -174,3 +181,3 @@\n         await self.close()\n-        self._conn = None\n+        self._connection = None\n \n",
        "source_code_with_indent": "        <IND>await self.close()\n        self._conn = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>await self.close()\n        self._connection = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "omnilib/aiosqlite",
    "commit": "3c56a655db0b940272306894d15d99ad9805e5a4",
    "filename": "aiosqlite/core.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/omnilib-aiosqlite/aiosqlite/core.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "aiosqlite/core.py:175:8 Incompatible attribute type [8]: Attribute `_conn` declared in class `Connection` has type `sqlite3.dbapi2.Connection` but is used as type `None`.",
    "message": " Attribute `_conn` declared in class `Connection` has type `sqlite3.dbapi2.Connection` but is used as type `None`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 175,
    "warning_line": "        self._conn = None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._running = True\n        self._conn = None  # type: sqlite3.Connection\n        self._connector = connector\n",
        "source_code_len": 119,
        "target_code": "        self._running = True\n        self._connection = None  # type: Optional[sqlite3.Connection]\n        self._connector = connector\n",
        "target_code_len": 135,
        "diff_format": "@@ -118,3 +118,3 @@\n         self._running = True\n-        self._conn = None  # type: sqlite3.Connection\n+        self._connection = None  # type: Optional[sqlite3.Connection]\n         self._connector = connector\n",
        "source_code_with_indent": "        self._running = True\n        self._conn = None  # type: sqlite3.Connection\n        self._connector = connector\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._running = True\n        self._connection = None  # type: Optional[sqlite3.Connection]\n        self._connector = connector\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self._rx = Queue()  # type: Queue\n\n",
        "source_code_len": 43,
        "target_code": "        self._rx = Queue()  # type: Queue\n\n    @property\n    def _conn(self) -> sqlite3.Connection:\n        if self._connection is None:\n            raise ValueError(\"no active connection\")\n\n        return self._connection\n\n",
        "target_code_len": 224,
        "diff_format": "@@ -124,2 +124,9 @@\n         self._rx = Queue()  # type: Queue\n+\n+    @property\n+    def _conn(self) -> sqlite3.Connection:\n+        if self._connection is None:\n+            raise ValueError(\"no active connection\")\n+\n+        return self._connection\n \n",
        "source_code_with_indent": "        self._rx = Queue()  # type: Queue\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self._rx = Queue()  # type: Queue\n\n    <DED>@property\n    def _conn(self) -> sqlite3.Connection:\n        <IND>if self._connection is None:\n            <IND>raise ValueError(\"no active connection\")\n\n        <DED>return self._connection\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        await self.close()\n        self._conn = None\n\n",
        "source_code_len": 54,
        "target_code": "        await self.close()\n        self._connection = None\n\n",
        "target_code_len": 60,
        "diff_format": "@@ -174,3 +181,3 @@\n         await self.close()\n-        self._conn = None\n+        self._connection = None\n \n",
        "source_code_with_indent": "        <IND>await self.close()\n        self._conn = None\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>await self.close()\n        self._connection = None\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]