[
  {
    "project": "jwkvam/bowtie",
    "commit": "b1898b745f0fc5e94abbbc2066bea30a031b4780",
    "filename": "bowtie/_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie/bowtie/_app.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bowtie/_app.py:184:8 Incompatible return type [7]: Expected `str` but got `Optional[str]`.",
    "message": " Expected `str` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 184,
    "warning_line": "        return self.maximum",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Create a default row or column size with fraction = 1.\"\"\"\n        self.minimum = None  # type: Optional[str]\n        self.maximum = None  # type: Optional[str]\n        self.fraction(1)\n",
        "source_code_len": 196,
        "target_code": "        \"\"\"Create a default row or column size with fraction = 1.\"\"\"\n        self.minimum = ''  # type: str\n        self.maximum = ''  # type: str\n        self.fraction(1)\n",
        "target_code_len": 172,
        "diff_format": "@@ -123,4 +123,4 @@\n         \"\"\"Create a default row or column size with fraction = 1.\"\"\"\n-        self.minimum = None  # type: Optional[str]\n-        self.maximum = None  # type: Optional[str]\n+        self.minimum = ''  # type: str\n+        self.maximum = ''  # type: str\n         self.fraction(1)\n",
        "source_code_with_indent": "        <IND>\"\"\"Create a default row or column size with fraction = 1.\"\"\"\n        self.minimum = None  # type: Optional[str]\n        self.maximum = None  # type: Optional[str]\n        self.fraction(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Create a default row or column size with fraction = 1.\"\"\"\n        self.minimum = ''  # type: str\n        self.maximum = ''  # type: str\n        self.fraction(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jwkvam/bowtie",
    "commit": "b1898b745f0fc5e94abbbc2066bea30a031b4780",
    "filename": "bowtie/_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie/bowtie/_app.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bowtie/_app.py:227:8 Incompatible return type [7]: Expected `str` but got `Optional[str]`.",
    "message": " Expected `str` but got `Optional[str]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 227,
    "warning_line": "        return self.gap",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        \"\"\"Create a default margin of zero.\"\"\"\n        self.gap = None  # type: Optional[str]\n        self.pixels(0)\n",
        "source_code_len": 117,
        "target_code": "        \"\"\"Create a default margin of zero.\"\"\"\n        self.gap = ''  # type: str\n        self.pixels(0)\n",
        "target_code_len": 105,
        "diff_format": "@@ -203,3 +203,3 @@\n         \"\"\"Create a default margin of zero.\"\"\"\n-        self.gap = None  # type: Optional[str]\n+        self.gap = ''  # type: str\n         self.pixels(0)\n",
        "source_code_with_indent": "        <IND>\"\"\"Create a default margin of zero.\"\"\"\n        self.gap = None  # type: Optional[str]\n        self.pixels(0)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>\"\"\"Create a default margin of zero.\"\"\"\n        self.gap = ''  # type: str\n        self.pixels(0)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jwkvam/bowtie",
    "commit": "b1898b745f0fc5e94abbbc2066bea30a031b4780",
    "filename": "bowtie/_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie/bowtie/_app.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bowtie/_app.py:313:30 Unsupported operand [58]: `+` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `+` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 313,
    "warning_line": "                    row_end = row_start + 1",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n    if value is not None:\n        if not isinstance(value, int):\n            raise GridIndexError('Indices must be integers, found {}.'.format(value))\n        if value < 0:\n            value = value + length\n        if value < 0 + bound or value >= length + bound:\n            raise GridIndexError('Index out of range.')\n    return value\n",
        "source_code_len": 422,
        "target_code": "\ndef _check_index(value: int, length: int, bound: bool) -> int:\n    if not isinstance(value, int):\n        raise GridIndexError('Indices must be integers, found {}.'.format(value))\n    if value < 0:\n        value = value + length\n    if value < 0 + bound or value >= length + bound:\n        raise GridIndexError('Index out of range.')\n    return value\n",
        "target_code_len": 352,
        "diff_format": "@@ -229,10 +229,9 @@\n \n-def _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n-    if value is not None:\n-        if not isinstance(value, int):\n-            raise GridIndexError('Indices must be integers, found {}.'.format(value))\n-        if value < 0:\n-            value = value + length\n-        if value < 0 + bound or value >= length + bound:\n-            raise GridIndexError('Index out of range.')\n+def _check_index(value: int, length: int, bound: bool) -> int:\n+    if not isinstance(value, int):\n+        raise GridIndexError('Indices must be integers, found {}.'.format(value))\n+    if value < 0:\n+        value = value + length\n+    if value < 0 + bound or value >= length + bound:\n+        raise GridIndexError('Index out of range.')\n     return value\n",
        "source_code_with_indent": "\n<DED><DED>def _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n    <IND>if value is not None:\n        <IND>if not isinstance(value, int):\n            <IND>raise GridIndexError('Indices must be integers, found {}.'.format(value))\n        <DED>if value < 0:\n            <IND>value = value + length\n        <DED>if value < 0 + bound or value >= length + bound:\n            <IND>raise GridIndexError('Index out of range.')\n    <DED><DED>return value\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _check_index(value: int, length: int, bound: bool) -> int:\n    <IND>if not isinstance(value, int):\n        <IND>raise GridIndexError('Indices must be integers, found {}.'.format(value))\n    <DED>if value < 0:\n        <IND>value = value + length\n    <DED>if value < 0 + bound or value >= length + bound:\n        <IND>raise GridIndexError('Index out of range.')\n    <DED>return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jwkvam/bowtie",
    "commit": "b1898b745f0fc5e94abbbc2066bea30a031b4780",
    "filename": "bowtie/_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie/bowtie/_app.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bowtie/_app.py:325:33 Unsupported operand [58]: `+` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `+` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 325,
    "warning_line": "                    column_end = column_start + 1",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n    if value is not None:\n        if not isinstance(value, int):\n            raise GridIndexError('Indices must be integers, found {}.'.format(value))\n        if value < 0:\n            value = value + length\n        if value < 0 + bound or value >= length + bound:\n            raise GridIndexError('Index out of range.')\n    return value\n",
        "source_code_len": 422,
        "target_code": "\ndef _check_index(value: int, length: int, bound: bool) -> int:\n    if not isinstance(value, int):\n        raise GridIndexError('Indices must be integers, found {}.'.format(value))\n    if value < 0:\n        value = value + length\n    if value < 0 + bound or value >= length + bound:\n        raise GridIndexError('Index out of range.')\n    return value\n",
        "target_code_len": 352,
        "diff_format": "@@ -229,10 +229,9 @@\n \n-def _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n-    if value is not None:\n-        if not isinstance(value, int):\n-            raise GridIndexError('Indices must be integers, found {}.'.format(value))\n-        if value < 0:\n-            value = value + length\n-        if value < 0 + bound or value >= length + bound:\n-            raise GridIndexError('Index out of range.')\n+def _check_index(value: int, length: int, bound: bool) -> int:\n+    if not isinstance(value, int):\n+        raise GridIndexError('Indices must be integers, found {}.'.format(value))\n+    if value < 0:\n+        value = value + length\n+    if value < 0 + bound or value >= length + bound:\n+        raise GridIndexError('Index out of range.')\n     return value\n",
        "source_code_with_indent": "\n<DED><DED>def _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n    <IND>if value is not None:\n        <IND>if not isinstance(value, int):\n            <IND>raise GridIndexError('Indices must be integers, found {}.'.format(value))\n        <DED>if value < 0:\n            <IND>value = value + length\n        <DED>if value < 0 + bound or value >= length + bound:\n            <IND>raise GridIndexError('Index out of range.')\n    <DED><DED>return value\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _check_index(value: int, length: int, bound: bool) -> int:\n    <IND>if not isinstance(value, int):\n        <IND>raise GridIndexError('Indices must be integers, found {}.'.format(value))\n    <DED>if value < 0:\n        <IND>value = value + length\n    <DED>if value < 0 + bound or value >= length + bound:\n        <IND>raise GridIndexError('Index out of range.')\n    <DED>return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jwkvam/bowtie",
    "commit": "b1898b745f0fc5e94abbbc2066bea30a031b4780",
    "filename": "bowtie/_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie/bowtie/_app.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bowtie/_app.py:343:38 Unsupported operand [58]: `+` is not supported for operand types `Optional[int]` and `int`.",
    "message": " `+` is not supported for operand types `Optional[int]` and `int`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 343,
    "warning_line": "            rows_cols = row_start, 0, row_start + 1, len(self.columns)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n    if value is not None:\n        if not isinstance(value, int):\n            raise GridIndexError('Indices must be integers, found {}.'.format(value))\n        if value < 0:\n            value = value + length\n        if value < 0 + bound or value >= length + bound:\n            raise GridIndexError('Index out of range.')\n    return value\n",
        "source_code_len": 422,
        "target_code": "\ndef _check_index(value: int, length: int, bound: bool) -> int:\n    if not isinstance(value, int):\n        raise GridIndexError('Indices must be integers, found {}.'.format(value))\n    if value < 0:\n        value = value + length\n    if value < 0 + bound or value >= length + bound:\n        raise GridIndexError('Index out of range.')\n    return value\n",
        "target_code_len": 352,
        "diff_format": "@@ -229,10 +229,9 @@\n \n-def _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n-    if value is not None:\n-        if not isinstance(value, int):\n-            raise GridIndexError('Indices must be integers, found {}.'.format(value))\n-        if value < 0:\n-            value = value + length\n-        if value < 0 + bound or value >= length + bound:\n-            raise GridIndexError('Index out of range.')\n+def _check_index(value: int, length: int, bound: bool) -> int:\n+    if not isinstance(value, int):\n+        raise GridIndexError('Indices must be integers, found {}.'.format(value))\n+    if value < 0:\n+        value = value + length\n+    if value < 0 + bound or value >= length + bound:\n+        raise GridIndexError('Index out of range.')\n     return value\n",
        "source_code_with_indent": "\n<DED><DED>def _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n    <IND>if value is not None:\n        <IND>if not isinstance(value, int):\n            <IND>raise GridIndexError('Indices must be integers, found {}.'.format(value))\n        <DED>if value < 0:\n            <IND>value = value + length\n        <DED>if value < 0 + bound or value >= length + bound:\n            <IND>raise GridIndexError('Index out of range.')\n    <DED><DED>return value\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _check_index(value: int, length: int, bound: bool) -> int:\n    <IND>if not isinstance(value, int):\n        <IND>raise GridIndexError('Indices must be integers, found {}.'.format(value))\n    <DED>if value < 0:\n        <IND>value = value + length\n    <DED>if value < 0 + bound or value >= length + bound:\n        <IND>raise GridIndexError('Index out of range.')\n    <DED>return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jwkvam/bowtie",
    "commit": "b1898b745f0fc5e94abbbc2066bea30a031b4780",
    "filename": "bowtie/_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie/bowtie/_app.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bowtie/_app.py:346:8 Incompatible return type [7]: Expected `Tuple[int, int, int, int]` but got `Tuple[Optional[int], Optional[int], Optional[int], Optional[int]]`.",
    "message": " Expected `Tuple[int, int, int, int]` but got `Tuple[Optional[int], Optional[int], Optional[int], Optional[int]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 346,
    "warning_line": "        return rows_cols",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n    if value is not None:\n        if not isinstance(value, int):\n            raise GridIndexError('Indices must be integers, found {}.'.format(value))\n        if value < 0:\n            value = value + length\n        if value < 0 + bound or value >= length + bound:\n            raise GridIndexError('Index out of range.')\n    return value\n",
        "source_code_len": 422,
        "target_code": "\ndef _check_index(value: int, length: int, bound: bool) -> int:\n    if not isinstance(value, int):\n        raise GridIndexError('Indices must be integers, found {}.'.format(value))\n    if value < 0:\n        value = value + length\n    if value < 0 + bound or value >= length + bound:\n        raise GridIndexError('Index out of range.')\n    return value\n",
        "target_code_len": 352,
        "diff_format": "@@ -229,10 +229,9 @@\n \n-def _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n-    if value is not None:\n-        if not isinstance(value, int):\n-            raise GridIndexError('Indices must be integers, found {}.'.format(value))\n-        if value < 0:\n-            value = value + length\n-        if value < 0 + bound or value >= length + bound:\n-            raise GridIndexError('Index out of range.')\n+def _check_index(value: int, length: int, bound: bool) -> int:\n+    if not isinstance(value, int):\n+        raise GridIndexError('Indices must be integers, found {}.'.format(value))\n+    if value < 0:\n+        value = value + length\n+    if value < 0 + bound or value >= length + bound:\n+        raise GridIndexError('Index out of range.')\n     return value\n",
        "source_code_with_indent": "\n<DED><DED>def _check_index(value: Optional[int], length: int, bound: bool) -> Optional[int]:\n    <IND>if value is not None:\n        <IND>if not isinstance(value, int):\n            <IND>raise GridIndexError('Indices must be integers, found {}.'.format(value))\n        <DED>if value < 0:\n            <IND>value = value + length\n        <DED>if value < 0 + bound or value >= length + bound:\n            <IND>raise GridIndexError('Index out of range.')\n    <DED><DED>return value\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED><DED>def _check_index(value: int, length: int, bound: bool) -> int:\n    <IND>if not isinstance(value, int):\n        <IND>raise GridIndexError('Indices must be integers, found {}.'.format(value))\n    <DED>if value < 0:\n        <IND>value = value + length\n    <DED>if value < 0 + bound or value >= length + bound:\n        <IND>raise GridIndexError('Index out of range.')\n    <DED>return value\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "jwkvam/bowtie",
    "commit": "b1898b745f0fc5e94abbbc2066bea30a031b4780",
    "filename": "bowtie/_app.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/jwkvam-bowtie/bowtie/_app.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "bowtie/_app.py:878:25 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `set.discard` but got `None`.",
    "message": " Expected `str` for 1st positional only parameter to call `set.discard` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 878,
    "warning_line": "        packages.discard(None)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "\n        packages.discard(None)\n        if packages:\n",
        "source_code_len": 53,
        "target_code": "\n        if packages:\n",
        "target_code_len": 22,
        "diff_format": "@@ -877,3 +878,2 @@\n \n-        packages.discard(None)\n         if packages:\n",
        "source_code_with_indent": "\n        <DED>packages.discard(None)\n        if packages:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n        <DED>if packages:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]