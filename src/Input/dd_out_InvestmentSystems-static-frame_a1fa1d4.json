[
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/core/index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/core/index_hierarchy.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "static_frame/core/index_hierarchy.py:1586:23 Incompatible parameter type [6]: Expected `static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])` for 1st positional only parameter to anonymous call but got `tp.Union[tp.List[typing.Any], static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])]`.",
    "message": " Expected `static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])` for 1st positional only parameter to anonymous call but got `tp.Union[tp.List[typing.Any], static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1586,
    "warning_line": "            add_labels(tree[outermost_label], inner_labels)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        '''\n        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n            # For a set of labels, add them into a tree\n            outermost_label, *inner_labels = labels\n            if len(inner_labels) == 1:\n                if outermost_label not in tree:\n                    tree[outermost_label] = []\n                tree[outermost_label].append(inner_labels[0])\n                return\n\n            if outermost_label not in tree:\n                tree[outermost_label] = {}\n            add_labels(tree[outermost_label], inner_labels)\n\n        tree: TreeNodeGrowableT = {}\n        for labels in self.iter_label():\n            add_labels(tree, labels)\n\n        def clean(tree: TreeNodeGrowableT) -> None:\n            # Make the leafs immutable!\n            for k in tuple(tree.keys()):\n                if isinstance(tree[k], list):\n                    tree[k] = tuple(tree[k])\n                else:\n                    clean(tree[k])\n\n        clean(tree)\n        return tree\n\n",
        "source_code_len": 1013,
        "target_code": "        '''\n        return self._levels.traverse() # type: ignore\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -1574,29 +1571,3 @@\n         '''\n-        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n-            # For a set of labels, add them into a tree\n-            outermost_label, *inner_labels = labels\n-            if len(inner_labels) == 1:\n-                if outermost_label not in tree:\n-                    tree[outermost_label] = []\n-                tree[outermost_label].append(inner_labels[0])\n-                return\n-\n-            if outermost_label not in tree:\n-                tree[outermost_label] = {}\n-            add_labels(tree[outermost_label], inner_labels)\n-\n-        tree: TreeNodeGrowableT = {}\n-        for labels in self.iter_label():\n-            add_labels(tree, labels)\n-\n-        def clean(tree: TreeNodeGrowableT) -> None:\n-            # Make the leafs immutable!\n-            for k in tuple(tree.keys()):\n-                if isinstance(tree[k], list):\n-                    tree[k] = tuple(tree[k])\n-                else:\n-                    clean(tree[k])\n-\n-        clean(tree)\n-        return tree\n+        return self._levels.traverse() # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n            # For a set of labels, add them into a tree\n            <IND>outermost_label, *inner_labels = labels\n            if len(inner_labels) == 1:\n                <IND>if outermost_label not in tree:\n                    <IND>tree[outermost_label] = []\n                <DED>tree[outermost_label].append(inner_labels[0])\n                return\n\n            <DED>if outermost_label not in tree:\n                <IND>tree[outermost_label] = {}\n            <DED>add_labels(tree[outermost_label], inner_labels)\n\n        <DED>tree: TreeNodeGrowableT = {}\n        for labels in self.iter_label():\n            <IND>add_labels(tree, labels)\n\n        <DED>def clean(tree: TreeNodeGrowableT) -> None:\n            # Make the leafs immutable!\n            <IND>for k in tuple(tree.keys()):\n                <IND>if isinstance(tree[k], list):\n                    <IND>tree[k] = tuple(tree[k])\n                <DED>else:\n                    <IND>clean(tree[k])\n\n        <DED><DED><DED>clean(tree)\n        return tree\n\n",
        "target_code_with_indent": "\n        return self._levels.traverse() # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/core/index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/core/index_hierarchy.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "static_frame/core/index_hierarchy.py:1596:30 Incompatible parameter type [6]: Expected `tp.Union[tp.List[typing.Any], static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Tuple[typing.Any, ...]`.",
    "message": " Expected `tp.Union[tp.List[typing.Any], static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])]` for 2nd positional only parameter to call `dict.__setitem__` but got `typing.Tuple[typing.Any, ...]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1596,
    "warning_line": "                    tree[k] = tuple(tree[k])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        '''\n        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n            # For a set of labels, add them into a tree\n            outermost_label, *inner_labels = labels\n            if len(inner_labels) == 1:\n                if outermost_label not in tree:\n                    tree[outermost_label] = []\n                tree[outermost_label].append(inner_labels[0])\n                return\n\n            if outermost_label not in tree:\n                tree[outermost_label] = {}\n            add_labels(tree[outermost_label], inner_labels)\n\n        tree: TreeNodeGrowableT = {}\n        for labels in self.iter_label():\n            add_labels(tree, labels)\n\n        def clean(tree: TreeNodeGrowableT) -> None:\n            # Make the leafs immutable!\n            for k in tuple(tree.keys()):\n                if isinstance(tree[k], list):\n                    tree[k] = tuple(tree[k])\n                else:\n                    clean(tree[k])\n\n        clean(tree)\n        return tree\n\n",
        "source_code_len": 1013,
        "target_code": "        '''\n        return self._levels.traverse() # type: ignore\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -1574,29 +1571,3 @@\n         '''\n-        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n-            # For a set of labels, add them into a tree\n-            outermost_label, *inner_labels = labels\n-            if len(inner_labels) == 1:\n-                if outermost_label not in tree:\n-                    tree[outermost_label] = []\n-                tree[outermost_label].append(inner_labels[0])\n-                return\n-\n-            if outermost_label not in tree:\n-                tree[outermost_label] = {}\n-            add_labels(tree[outermost_label], inner_labels)\n-\n-        tree: TreeNodeGrowableT = {}\n-        for labels in self.iter_label():\n-            add_labels(tree, labels)\n-\n-        def clean(tree: TreeNodeGrowableT) -> None:\n-            # Make the leafs immutable!\n-            for k in tuple(tree.keys()):\n-                if isinstance(tree[k], list):\n-                    tree[k] = tuple(tree[k])\n-                else:\n-                    clean(tree[k])\n-\n-        clean(tree)\n-        return tree\n+        return self._levels.traverse() # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n            # For a set of labels, add them into a tree\n            <IND>outermost_label, *inner_labels = labels\n            if len(inner_labels) == 1:\n                <IND>if outermost_label not in tree:\n                    <IND>tree[outermost_label] = []\n                <DED>tree[outermost_label].append(inner_labels[0])\n                return\n\n            <DED>if outermost_label not in tree:\n                <IND>tree[outermost_label] = {}\n            <DED>add_labels(tree[outermost_label], inner_labels)\n\n        <DED>tree: TreeNodeGrowableT = {}\n        for labels in self.iter_label():\n            <IND>add_labels(tree, labels)\n\n        <DED>def clean(tree: TreeNodeGrowableT) -> None:\n            # Make the leafs immutable!\n            <IND>for k in tuple(tree.keys()):\n                <IND>if isinstance(tree[k], list):\n                    <IND>tree[k] = tuple(tree[k])\n                <DED>else:\n                    <IND>clean(tree[k])\n\n        <DED><DED><DED>clean(tree)\n        return tree\n\n",
        "target_code_with_indent": "\n        return self._levels.traverse() # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/core/index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/core/index_hierarchy.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "static_frame/core/index_hierarchy.py:1598:26 Incompatible parameter type [6]: Expected `static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])` for 1st positional only parameter to anonymous call but got `tp.Union[tp.List[typing.Any], static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])]`.",
    "message": " Expected `static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])` for 1st positional only parameter to anonymous call but got `tp.Union[tp.List[typing.Any], static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1598,
    "warning_line": "                    clean(tree[k])",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        '''\n        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n            # For a set of labels, add them into a tree\n            outermost_label, *inner_labels = labels\n            if len(inner_labels) == 1:\n                if outermost_label not in tree:\n                    tree[outermost_label] = []\n                tree[outermost_label].append(inner_labels[0])\n                return\n\n            if outermost_label not in tree:\n                tree[outermost_label] = {}\n            add_labels(tree[outermost_label], inner_labels)\n\n        tree: TreeNodeGrowableT = {}\n        for labels in self.iter_label():\n            add_labels(tree, labels)\n\n        def clean(tree: TreeNodeGrowableT) -> None:\n            # Make the leafs immutable!\n            for k in tuple(tree.keys()):\n                if isinstance(tree[k], list):\n                    tree[k] = tuple(tree[k])\n                else:\n                    clean(tree[k])\n\n        clean(tree)\n        return tree\n\n",
        "source_code_len": 1013,
        "target_code": "        '''\n        return self._levels.traverse() # type: ignore\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -1574,29 +1571,3 @@\n         '''\n-        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n-            # For a set of labels, add them into a tree\n-            outermost_label, *inner_labels = labels\n-            if len(inner_labels) == 1:\n-                if outermost_label not in tree:\n-                    tree[outermost_label] = []\n-                tree[outermost_label].append(inner_labels[0])\n-                return\n-\n-            if outermost_label not in tree:\n-                tree[outermost_label] = {}\n-            add_labels(tree[outermost_label], inner_labels)\n-\n-        tree: TreeNodeGrowableT = {}\n-        for labels in self.iter_label():\n-            add_labels(tree, labels)\n-\n-        def clean(tree: TreeNodeGrowableT) -> None:\n-            # Make the leafs immutable!\n-            for k in tuple(tree.keys()):\n-                if isinstance(tree[k], list):\n-                    tree[k] = tuple(tree[k])\n-                else:\n-                    clean(tree[k])\n-\n-        clean(tree)\n-        return tree\n+        return self._levels.traverse() # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n            # For a set of labels, add them into a tree\n            <IND>outermost_label, *inner_labels = labels\n            if len(inner_labels) == 1:\n                <IND>if outermost_label not in tree:\n                    <IND>tree[outermost_label] = []\n                <DED>tree[outermost_label].append(inner_labels[0])\n                return\n\n            <DED>if outermost_label not in tree:\n                <IND>tree[outermost_label] = {}\n            <DED>add_labels(tree[outermost_label], inner_labels)\n\n        <DED>tree: TreeNodeGrowableT = {}\n        for labels in self.iter_label():\n            <IND>add_labels(tree, labels)\n\n        <DED>def clean(tree: TreeNodeGrowableT) -> None:\n            # Make the leafs immutable!\n            <IND>for k in tuple(tree.keys()):\n                <IND>if isinstance(tree[k], list):\n                    <IND>tree[k] = tuple(tree[k])\n                <DED>else:\n                    <IND>clean(tree[k])\n\n        <DED><DED><DED>clean(tree)\n        return tree\n\n",
        "target_code_with_indent": "\n        return self._levels.traverse() # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/core/index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/core/index_hierarchy.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "static_frame/core/index_hierarchy.py:1601:8 Incompatible return type [7]: Expected `static_frame.core.index_level.TreeNodeT (resolves to tp.Dict[typing.Any, tp.Union[tp.Tuple[typing.Any], Index, TreeNodeT]])` but got `static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to tp.Dict[typing.Any, tp.Union[tp.Tuple[typing.Any], Index, TreeNodeT]])` but got `static_frame.core.index_hierarchy.TreeNodeGrowableT (resolves to tp.Dict[typing.Any, tp.Union[tp.List[typing.Any], TreeNodeGrowableT]])`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1601,
    "warning_line": "        return tree",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        '''\n        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n            # For a set of labels, add them into a tree\n            outermost_label, *inner_labels = labels\n            if len(inner_labels) == 1:\n                if outermost_label not in tree:\n                    tree[outermost_label] = []\n                tree[outermost_label].append(inner_labels[0])\n                return\n\n            if outermost_label not in tree:\n                tree[outermost_label] = {}\n            add_labels(tree[outermost_label], inner_labels)\n\n        tree: TreeNodeGrowableT = {}\n        for labels in self.iter_label():\n            add_labels(tree, labels)\n\n        def clean(tree: TreeNodeGrowableT) -> None:\n            # Make the leafs immutable!\n            for k in tuple(tree.keys()):\n                if isinstance(tree[k], list):\n                    tree[k] = tuple(tree[k])\n                else:\n                    clean(tree[k])\n\n        clean(tree)\n        return tree\n\n",
        "source_code_len": 1013,
        "target_code": "        '''\n        return self._levels.traverse() # type: ignore\n\n",
        "target_code_len": 67,
        "diff_format": "@@ -1574,29 +1571,3 @@\n         '''\n-        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n-            # For a set of labels, add them into a tree\n-            outermost_label, *inner_labels = labels\n-            if len(inner_labels) == 1:\n-                if outermost_label not in tree:\n-                    tree[outermost_label] = []\n-                tree[outermost_label].append(inner_labels[0])\n-                return\n-\n-            if outermost_label not in tree:\n-                tree[outermost_label] = {}\n-            add_labels(tree[outermost_label], inner_labels)\n-\n-        tree: TreeNodeGrowableT = {}\n-        for labels in self.iter_label():\n-            add_labels(tree, labels)\n-\n-        def clean(tree: TreeNodeGrowableT) -> None:\n-            # Make the leafs immutable!\n-            for k in tuple(tree.keys()):\n-                if isinstance(tree[k], list):\n-                    tree[k] = tuple(tree[k])\n-                else:\n-                    clean(tree[k])\n-\n-        clean(tree)\n-        return tree\n+        return self._levels.traverse() # type: ignore\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n        def add_labels(tree: TreeNodeGrowableT, labels: tp.Sequence[tp.Any]) -> None:\n            # For a set of labels, add them into a tree\n            <IND>outermost_label, *inner_labels = labels\n            if len(inner_labels) == 1:\n                <IND>if outermost_label not in tree:\n                    <IND>tree[outermost_label] = []\n                <DED>tree[outermost_label].append(inner_labels[0])\n                return\n\n            <DED>if outermost_label not in tree:\n                <IND>tree[outermost_label] = {}\n            <DED>add_labels(tree[outermost_label], inner_labels)\n\n        <DED>tree: TreeNodeGrowableT = {}\n        for labels in self.iter_label():\n            <IND>add_labels(tree, labels)\n\n        <DED>def clean(tree: TreeNodeGrowableT) -> None:\n            # Make the leafs immutable!\n            <IND>for k in tuple(tree.keys()):\n                <IND>if isinstance(tree[k], list):\n                    <IND>tree[k] = tuple(tree[k])\n                <DED>else:\n                    <IND>clean(tree[k])\n\n        <DED><DED><DED>clean(tree)\n        return tree\n\n",
        "target_code_with_indent": "\n        return self._levels.traverse() # type: ignore\n\n"
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:331:38 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 331,
    "warning_line": "        ih = IndexHierarchy.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:332:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 332,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:386:38 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 386,
    "warning_line": "        ih = IndexHierarchy.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:387:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 387,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:582:39 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `typing.Dict[str, static_frame.core.index.Index]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `typing.Dict[str, static_frame.core.index.Index]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 582,
    "warning_line": "        ih1 = IndexHierarchy.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:585:43 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `typing.Dict[str, static_frame.core.index.Index]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `typing.Dict[str, static_frame.core.index.Index]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 585,
    "warning_line": "        ih1_alt = IndexHierarchy.from_tree(tree_alt)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:747:38 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int, int]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 747,
    "warning_line": "        ih = IndexHierarchy.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:748:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int, int]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 748,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:767:38 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 767,
    "warning_line": "        ih = IndexHierarchy.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:768:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, typing.Union[OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int, int]]], OrderedDict[str, typing.Union[typing.Tuple[int, int], typing.Tuple[int, int, int]]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 768,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1102:38 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1102,
    "warning_line": "        ih = IndexHierarchy.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1103:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1103,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1140:40 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1140,
    "warning_line": "        ih = IndexHierarchyGO.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1141:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1141,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1167:38 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1167,
    "warning_line": "        ih = IndexHierarchy.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1168:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1168,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1190:38 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1190,
    "warning_line": "        ih = IndexHierarchy.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1191:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Tuple[int, int]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1191,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1206:46 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `typing.Dict[str, typing.Tuple[int, int, int]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `typing.Dict[str, typing.Tuple[int, int, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1206,
    "warning_line": "        s1 = Series.from_element(23, index=f1(tree))"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1207:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `typing.Dict[str, typing.Tuple[int, int, int]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `typing.Dict[str, typing.Tuple[int, int, int]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1207,
    "warning_line": "        self._assert_to_tree_consistency(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1229:38 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1229,
    "warning_line": "        ih = IndexHierarchy.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1230:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1230,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1266:40 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1266,
    "warning_line": "        ih = IndexHierarchyGO.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1267:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1267,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1303:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1303,
    "warning_line": "        ih1 = IndexHierarchyGO.from_tree(tree1)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1304:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1304,
    "warning_line": "        self._assert_to_tree_consistency(tree1)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1316:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1316,
    "warning_line": "        ih2 = IndexHierarchyGO.from_tree(tree2)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:1317:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `OrderedDict[str, OrderedDict[str, typing.Union[typing.Tuple[int], typing.Tuple[int, int]]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 1317,
    "warning_line": "        self._assert_to_tree_consistency(tree2)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:2148:38 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `typing.Dict[str, typing.Dict[str, typing.Tuple[str]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `static_frame.core.index_hierarchy.IndexHierarchy.from_tree` but got `typing.Dict[str, typing.Dict[str, typing.Tuple[str]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 2148,
    "warning_line": "        ih = IndexHierarchy.from_tree(tree)"
  },
  {
    "project": "InvestmentSystems/static-frame",
    "commit": "a1fa1d41750b7e0002c9de79dd9ef2018b85fc78",
    "filename": "static_frame/test/unit/test_index_hierarchy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/InvestmentSystems-static-frame/static_frame/test/unit/test_index_hierarchy.py",
    "file_hunks_size": 16,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "static_frame/test/unit/test_index_hierarchy.py:2149:41 Incompatible parameter type [6]: Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `typing.Dict[str, typing.Dict[str, typing.Tuple[str]]]`.",
    "message": " Expected `static_frame.core.index_level.TreeNodeT (resolves to typing.Dict[typing.Any, typing.Union[typing.Tuple[typing.Any], TreeNodeT, static_frame.core.index.Index]])` for 1st positional only parameter to call `TestUnit._assert_to_tree_consistency` but got `typing.Dict[str, typing.Dict[str, typing.Tuple[str]]]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 2149,
    "warning_line": "        self._assert_to_tree_consistency(tree)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_len": 264,
        "target_code": "\n    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_len": 290,
        "diff_format": "@@ -33,6 +32,7 @@\n \n-    def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n+    def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n         # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n-        ih = IndexHierarchy.from_tree(tree)\n-        self.assertDictEqual(tree, ih.to_tree())\n+        tree = ih1.to_tree()\n+        ih2 = IndexHierarchy.from_tree(tree)\n+        self.assertTrue(ih1.equals(ih2))\n \n",
        "source_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, tree: TreeNodeT) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>ih = IndexHierarchy.from_tree(tree)\n        self.assertDictEqual(tree, ih.to_tree())\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <IND>def _assert_to_tree_consistency(self, ih1: IndexHierarchy) -> None:\n        # Ensure all IndexHierarchy's created using `from_tree` return the same tree using `to_tree`\n        <IND>tree = ih1.to_tree()\n        ih2 = IndexHierarchy.from_tree(tree)\n        self.assertTrue(ih1.equals(ih2))\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -331,3 +331,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -386,3 +386,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -747,3 +747,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_len": 143,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_len": 141,
        "diff_format": "@@ -767,3 +767,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        self.assertEqual(ih.to_frame().to_pairs(0),\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1102,3 +1102,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 94,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 92,
        "diff_format": "@@ -1140,3 +1140,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1167,3 +1167,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1190,3 +1190,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_len": 159,
        "target_code": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_len": 163,
        "diff_format": "@@ -1206,3 +1206,3 @@\n         s1 = Series.from_element(23, index=f1(tree))\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(f1(tree))\n         self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(tree)\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        s1 = Series.from_element(23, index=f1(tree))\n        self._assert_to_tree_consistency(f1(tree))\n        self.assertEqual(s1.values.tolist(), [23, 23, 23])\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_len": 92,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_len": 90,
        "diff_format": "@@ -1229,3 +1229,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n \n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_len": 137,
        "target_code": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_len": 135,
        "diff_format": "@@ -1266,3 +1266,3 @@\n         ih = IndexHierarchyGO.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchyGO.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        data = np.arange(6*6).reshape(6, 6)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_len": 97,
        "target_code": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1303,3 +1303,3 @@\n         ih1 = IndexHierarchyGO.from_tree(tree1)\n-        self._assert_to_tree_consistency(tree1)\n+        self._assert_to_tree_consistency(ih1)\n \n",
        "source_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(tree1)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih1 = IndexHierarchyGO.from_tree(tree1)\n        self._assert_to_tree_consistency(ih1)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_len": 97,
        "target_code": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_len": 95,
        "diff_format": "@@ -1316,3 +1316,3 @@\n         ih2 = IndexHierarchyGO.from_tree(tree2)\n-        self._assert_to_tree_consistency(tree2)\n+        self._assert_to_tree_consistency(ih2)\n \n",
        "source_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(tree2)\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih2 = IndexHierarchyGO.from_tree(tree2)\n        self._assert_to_tree_consistency(ih2)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_len": 123,
        "target_code": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_len": 121,
        "diff_format": "@@ -2148,3 +2148,3 @@\n         ih = IndexHierarchy.from_tree(tree)\n-        self._assert_to_tree_consistency(tree)\n+        self._assert_to_tree_consistency(ih)\n         post = ih.level_drop(1)\n",
        "source_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(tree)\n        post = ih.level_drop(1)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        ih = IndexHierarchy.from_tree(tree)\n        self._assert_to_tree_consistency(ih)\n        post = ih.level_drop(1)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]