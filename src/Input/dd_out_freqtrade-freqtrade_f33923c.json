[
  {
    "project": "freqtrade/freqtrade",
    "commit": "f33923c7842ad0c440d5d5f9bd028331ea4b9ac3",
    "filename": "freqtrade/optimize/hyperopt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/optimize/hyperopt.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/optimize/hyperopt.py:239:4 Incompatible return type [7]: Expected `List[Dict[typing.Any, typing.Any]]` but got `Dict[str, typing.Any]`.",
    "message": " Expected `List[Dict[typing.Any, typing.Any]]` but got `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 239,
    "warning_line": "    return {",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from operator import itemgetter\nfrom typing import Dict, List\n\n",
        "source_code_len": 63,
        "target_code": "from operator import itemgetter\nfrom typing import Dict, Any, Callable\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -12,3 +12,3 @@\n from operator import itemgetter\n-from typing import Dict, List\n+from typing import Dict, Any, Callable\n \n",
        "source_code_with_indent": "from operator import itemgetter\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from operator import itemgetter\nfrom typing import Dict, Any, Callable\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef roi_space() -> List[Dict]:\n    return {\n",
        "source_code_len": 45,
        "target_code": "\ndef roi_space() -> Dict[str, Any]:\n    return {\n",
        "target_code_len": 49,
        "diff_format": "@@ -237,3 +237,3 @@\n \n-def roi_space() -> List[Dict]:\n+def roi_space() -> Dict[str, Any]:\n     return {\n",
        "source_code_with_indent": "\n<DED>def roi_space() -> List[Dict]:\n    <IND>return {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def roi_space() -> Dict[str, Any]:\n    <IND>return {\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef indicator_space() -> List[Dict]:\n    \"\"\"\n",
        "source_code_len": 46,
        "target_code": "\ndef indicator_space() -> Dict[str, Any]:\n    \"\"\"\n",
        "target_code_len": 50,
        "diff_format": "@@ -254,3 +254,3 @@\n \n-def indicator_space() -> List[Dict]:\n+def indicator_space() -> Dict[str, Any]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def indicator_space() -> List[Dict]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def indicator_space() -> Dict[str, Any]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef hyperopt_space() -> List[Dict]:\n    return {**indicator_space(), **roi_space(), **stoploss_space()}\n",
        "source_code_len": 105,
        "target_code": "\ndef hyperopt_space() -> Dict[str, Any]:\n    return {**indicator_space(), **roi_space(), **stoploss_space()}\n",
        "target_code_len": 109,
        "diff_format": "@@ -314,3 +314,3 @@\n \n-def hyperopt_space() -> List[Dict]:\n+def hyperopt_space() -> Dict[str, Any]:\n     return {**indicator_space(), **roi_space(), **stoploss_space()}\n",
        "source_code_with_indent": "\n<DED>def hyperopt_space() -> List[Dict]:\n    <IND>return {**indicator_space(), **roi_space(), **stoploss_space()}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def hyperopt_space() -> Dict[str, Any]:\n    <IND>return {**indicator_space(), **roi_space(), **stoploss_space()}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "freqtrade/freqtrade",
    "commit": "f33923c7842ad0c440d5d5f9bd028331ea4b9ac3",
    "filename": "freqtrade/optimize/hyperopt.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/freqtrade-freqtrade/freqtrade/optimize/hyperopt.py",
    "file_hunks_size": 8,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "freqtrade/optimize/hyperopt.py:259:4 Incompatible return type [7]: Expected `List[Dict[typing.Any, typing.Any]]` but got `Dict[str, typing.Any]`.",
    "message": " Expected `List[Dict[typing.Any, typing.Any]]` but got `Dict[str, typing.Any]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 259,
    "warning_line": "    return {",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from operator import itemgetter\nfrom typing import Dict, List\n\n",
        "source_code_len": 63,
        "target_code": "from operator import itemgetter\nfrom typing import Dict, Any, Callable\n\n",
        "target_code_len": 72,
        "diff_format": "@@ -12,3 +12,3 @@\n from operator import itemgetter\n-from typing import Dict, List\n+from typing import Dict, Any, Callable\n \n",
        "source_code_with_indent": "from operator import itemgetter\nfrom typing import Dict, List\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from operator import itemgetter\nfrom typing import Dict, Any, Callable\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef roi_space() -> List[Dict]:\n    return {\n",
        "source_code_len": 45,
        "target_code": "\ndef roi_space() -> Dict[str, Any]:\n    return {\n",
        "target_code_len": 49,
        "diff_format": "@@ -237,3 +237,3 @@\n \n-def roi_space() -> List[Dict]:\n+def roi_space() -> Dict[str, Any]:\n     return {\n",
        "source_code_with_indent": "\n<DED>def roi_space() -> List[Dict]:\n    <IND>return {\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def roi_space() -> Dict[str, Any]:\n    <IND>return {\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef indicator_space() -> List[Dict]:\n    \"\"\"\n",
        "source_code_len": 46,
        "target_code": "\ndef indicator_space() -> Dict[str, Any]:\n    \"\"\"\n",
        "target_code_len": 50,
        "diff_format": "@@ -254,3 +254,3 @@\n \n-def indicator_space() -> List[Dict]:\n+def indicator_space() -> Dict[str, Any]:\n     \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def indicator_space() -> List[Dict]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def indicator_space() -> Dict[str, Any]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef hyperopt_space() -> List[Dict]:\n    return {**indicator_space(), **roi_space(), **stoploss_space()}\n",
        "source_code_len": 105,
        "target_code": "\ndef hyperopt_space() -> Dict[str, Any]:\n    return {**indicator_space(), **roi_space(), **stoploss_space()}\n",
        "target_code_len": 109,
        "diff_format": "@@ -314,3 +314,3 @@\n \n-def hyperopt_space() -> List[Dict]:\n+def hyperopt_space() -> Dict[str, Any]:\n     return {**indicator_space(), **roi_space(), **stoploss_space()}\n",
        "source_code_with_indent": "\n<DED>def hyperopt_space() -> List[Dict]:\n    <IND>return {**indicator_space(), **roi_space(), **stoploss_space()}\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def hyperopt_space() -> Dict[str, Any]:\n    <IND>return {**indicator_space(), **roi_space(), **stoploss_space()}\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]