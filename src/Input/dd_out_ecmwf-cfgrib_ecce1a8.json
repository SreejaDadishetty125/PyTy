[
  {
    "project": "ecmwf/cfgrib",
    "commit": "ecce1a8a2ee380902c7ed10b0a93116ce596291f",
    "filename": "cfgrib/xarray_to_grib.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ecmwf-cfgrib/cfgrib/xarray_to_grib.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cfgrib/xarray_to_grib.py:201:4 Incompatible return type [7]: Expected `cfmessage.CfMessage` but got `cfgrib.messages.Message`.",
    "message": " Expected `cfmessage.CfMessage` but got `cfgrib.messages.Message`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 201,
    "warning_line": "    return template_message",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom . import cfmessage, dataset\n\n",
        "source_code_len": 35,
        "target_code": "\nfrom . import cfmessage, dataset, messages\n\n",
        "target_code_len": 45,
        "diff_format": "@@ -29,3 +29,3 @@\n \n-from . import cfmessage, dataset\n+from . import cfmessage, dataset, messages\n \n",
        "source_code_with_indent": "\nfrom . import cfmessage, dataset\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom . import cfmessage, dataset, messages\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def make_template_message(merged_grib_keys, template_path=None, sample_name=None):\n    # type: (T.Dict[str, T.Any], T.Optional[str], T.Optional[str]) -> cfmessage.CfMessage\n    if template_path and sample_name:\n",
        "source_code_len": 211,
        "target_code": "def make_template_message(merged_grib_keys, template_path=None, sample_name=None):\n    # type: (T.Dict[str, T.Any], T.Optional[str], T.Optional[str]) -> messages.Message\n    if template_path and sample_name:\n",
        "target_code_len": 208,
        "diff_format": "@@ -177,3 +177,3 @@\n def make_template_message(merged_grib_keys, template_path=None, sample_name=None):\n-    # type: (T.Dict[str, T.Any], T.Optional[str], T.Optional[str]) -> cfmessage.CfMessage\n+    # type: (T.Dict[str, T.Any], T.Optional[str], T.Optional[str]) -> messages.Message\n     if template_path and sample_name:\n",
        "source_code_with_indent": "<DED>def make_template_message(merged_grib_keys, template_path=None, sample_name=None):\n    # type: (T.Dict[str, T.Any], T.Optional[str], T.Optional[str]) -> cfmessage.CfMessage\n    <IND>if template_path and sample_name:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def make_template_message(merged_grib_keys, template_path=None, sample_name=None):\n    # type: (T.Dict[str, T.Any], T.Optional[str], T.Optional[str]) -> messages.Message\n    <IND>if template_path and sample_name:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]