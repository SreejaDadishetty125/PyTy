[
  {
    "project": "rotki/rotki",
    "commit": "61d14a4e3095f5bd8a33fd7f1afaa73d8c8d5194",
    "filename": "rotkehlchen/api/v1/encoding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/api/v1/encoding.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/api/v1/encoding.py:1520:8 Incompatible return type [7]: Expected `Union[KusamaAddress, PolkadotAddress]` but got implicit return value of `None`.",
    "message": " Expected `Union[KusamaAddress, PolkadotAddress]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 1520,
    "warning_line": "        raise ValidationError(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    PolkadotAddress,\n    SubstrateAddress,\n    SubstratePublicKey,\n",
        "source_code_len": 67,
        "target_code": "    PolkadotAddress,\n    SubstrateChain,\n    SubstratePublicKey,\n",
        "target_code_len": 65,
        "diff_format": "@@ -27,3 +38,3 @@\n     PolkadotAddress,\n-    SubstrateAddress,\n+    SubstrateChain,\n     SubstratePublicKey,\n",
        "source_code_with_indent": "    PolkadotAddress,\n    SubstrateAddress,\n    SubstratePublicKey,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    PolkadotAddress,\n    SubstrateChain,\n    SubstratePublicKey,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from rotkehlchen.chain.substrate.utils import (\n    get_kusama_address_from_public_key,\n    get_polkadot_address_from_public_key,\n    is_valid_kusama_address,\n",
        "source_code_len": 159,
        "target_code": "from rotkehlchen.chain.substrate.utils import (\n    get_substrate_address_from_public_key,\n    is_valid_kusama_address,\n",
        "target_code_len": 120,
        "diff_format": "@@ -31,4 +42,3 @@\n from rotkehlchen.chain.substrate.utils import (\n-    get_kusama_address_from_public_key,\n-    get_polkadot_address_from_public_key,\n+    get_substrate_address_from_public_key,\n     is_valid_kusama_address,\n",
        "source_code_with_indent": "from rotkehlchen.chain.substrate.utils import (\n    get_kusama_address_from_public_key,\n    get_polkadot_address_from_public_key,\n    is_valid_kusama_address,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from rotkehlchen.chain.substrate.utils import (\n    get_substrate_address_from_public_key,\n    is_valid_kusama_address,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        chain: Literal['Kusama', 'Polkadot'],\n) -> SubstrateAddress:\n    \"\"\"Returns a DOT or KSM address (if exists) given an ENS domain. At this point any\n    given address has been already validated either as an ENS name or as a\n    valid Polkadot address (ss58 format).\n\n",
        "source_code_len": 274,
        "target_code": "        chain: Literal['Kusama', 'Polkadot'],\n) -> Union[KusamaAddress, PolkadotAddress]:\n    \"\"\"Returns a DOT or KSM address (if exists) given an ENS domain. At this point any\n    given address has been already validated either as an ENS name or as a\n    valid Substrate address (ss58 format).\n\n",
        "target_code_len": 296,
        "diff_format": "@@ -1464,6 +1492,6 @@\n         chain: Literal['Kusama', 'Polkadot'],\n-) -> SubstrateAddress:\n+) -> Union[KusamaAddress, PolkadotAddress]:\n     \"\"\"Returns a DOT or KSM address (if exists) given an ENS domain. At this point any\n     given address has been already validated either as an ENS name or as a\n-    valid Polkadot address (ss58 format).\n+    valid Substrate address (ss58 format).\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "        chain: Literal['Kusama', 'Polkadot'],\n) -> SubstrateAddress:\n    <IND>",
        "target_code_with_indent": "        chain: Literal['Kusama', 'Polkadot'],\n) -> Union[KusamaAddress, PolkadotAddress]:\n    <IND>"
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    try:\n        if(chain == 'Polkadot'):\n            address = get_polkadot_address_from_public_key(SubstratePublicKey(resolved_address))\n            log.debug(f'Resolved polkadot ENS {given_address} to {address}')\n            return PolkadotAddress(address)\n        if(chain == 'Kusama'):\n            address = get_kusama_address_from_public_key(SubstratePublicKey(resolved_address))\n            log.debug(f'Resolved kusama ENS {given_address} to {address}')\n            return KusamaAddress(address)\n    except (TypeError, ValueError) as e:\n",
        "source_code_len": 545,
        "target_code": "\n    address: Union[PolkadotAddress, KusamaAddress]\n    try:\n        if chain == 'Polkadot':\n            address = get_substrate_address_from_public_key(\n                chain=SubstrateChain.POLKADOT,\n                public_key=SubstratePublicKey(resolved_address),\n            )\n            log.debug(f'Resolved polkadot ENS {given_address} to {address}')\n            return PolkadotAddress(address)\n\n        # else can only be kusama\n        address = get_substrate_address_from_public_key(\n            chain=SubstrateChain.KUSAMA,\n            public_key=SubstratePublicKey(resolved_address),\n        )\n        log.debug(f'Resolved kusama ENS {given_address} to {address}')\n        return KusamaAddress(address)\n\n    except (TypeError, ValueError) as e:\n",
        "target_code_len": 756,
        "diff_format": "@@ -1509,11 +1531,20 @@\n \n+    address: Union[PolkadotAddress, KusamaAddress]\n     try:\n-        if(chain == 'Polkadot'):\n-            address = get_polkadot_address_from_public_key(SubstratePublicKey(resolved_address))\n+        if chain == 'Polkadot':\n+            address = get_substrate_address_from_public_key(\n+                chain=SubstrateChain.POLKADOT,\n+                public_key=SubstratePublicKey(resolved_address),\n+            )\n             log.debug(f'Resolved polkadot ENS {given_address} to {address}')\n             return PolkadotAddress(address)\n-        if(chain == 'Kusama'):\n-            address = get_kusama_address_from_public_key(SubstratePublicKey(resolved_address))\n-            log.debug(f'Resolved kusama ENS {given_address} to {address}')\n-            return KusamaAddress(address)\n+\n+        # else can only be kusama\n+        address = get_substrate_address_from_public_key(\n+            chain=SubstrateChain.KUSAMA,\n+            public_key=SubstratePublicKey(resolved_address),\n+        )\n+        log.debug(f'Resolved kusama ENS {given_address} to {address}')\n+        return KusamaAddress(address)\n+\n     except (TypeError, ValueError) as e:\n",
        "source_code_with_indent": "\n    <DED>try:\n        <IND>if(chain == 'Polkadot'):\n            <IND>address = get_polkadot_address_from_public_key(SubstratePublicKey(resolved_address))\n            log.debug(f'Resolved polkadot ENS {given_address} to {address}')\n            return PolkadotAddress(address)\n        <DED>if(chain == 'Kusama'):\n            <IND>address = get_kusama_address_from_public_key(SubstratePublicKey(resolved_address))\n            log.debug(f'Resolved kusama ENS {given_address} to {address}')\n            return KusamaAddress(address)\n    <DED><DED>except (TypeError, ValueError) as e:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>address: Union[PolkadotAddress, KusamaAddress]\n    try:\n        <IND>if chain == 'Polkadot':\n            <IND>address = get_substrate_address_from_public_key(\n                chain=SubstrateChain.POLKADOT,\n                public_key=SubstratePublicKey(resolved_address),\n            )\n            log.debug(f'Resolved polkadot ENS {given_address} to {address}')\n            return PolkadotAddress(address)\n\n        # else can only be kusama\n        <DED>address = get_substrate_address_from_public_key(\n            chain=SubstrateChain.KUSAMA,\n            public_key=SubstratePublicKey(resolved_address),\n        )\n        log.debug(f'Resolved kusama ENS {given_address} to {address}')\n        return KusamaAddress(address)\n\n    <DED>except (TypeError, ValueError) as e:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "61d14a4e3095f5bd8a33fd7f1afaa73d8c8d5194",
    "filename": "rotkehlchen/chain/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/manager.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/manager.py:575:58 Incompatible parameter type [6]: Expected `List[Union[KusamaAddress, PolkadotAddress]]` for 1st positional only parameter to call `SubstrateManager.get_accounts_balance` but got `List[KusamaAddress]`.",
    "message": " Expected `List[Union[KusamaAddress, PolkadotAddress]]` for 1st positional only parameter to call `SubstrateManager.get_accounts_balance` but got `List[KusamaAddress]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 575,
    "warning_line": "        account_amount = self.kusama.get_accounts_balance(self.accounts.ksm)"
  },
  {
    "project": "rotki/rotki",
    "commit": "61d14a4e3095f5bd8a33fd7f1afaa73d8c8d5194",
    "filename": "rotkehlchen/chain/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/manager.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/manager.py:582:30 Incompatible parameter type [6]: Expected `KusamaAddress` for 1st positional only parameter to call `dict.__setitem__` but got `Union[KusamaAddress, PolkadotAddress]`.",
    "message": " Expected `KusamaAddress` for 1st positional only parameter to call `dict.__setitem__` but got `Union[KusamaAddress, PolkadotAddress]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 582,
    "warning_line": "            self.balances.ksm[account] = BalanceSheet("
  },
  {
    "project": "rotki/rotki",
    "commit": "61d14a4e3095f5bd8a33fd7f1afaa73d8c8d5194",
    "filename": "rotkehlchen/chain/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/manager.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/manager.py:632:60 Incompatible parameter type [6]: Expected `List[Union[KusamaAddress, PolkadotAddress]]` for 1st positional only parameter to call `SubstrateManager.get_accounts_balance` but got `List[PolkadotAddress]`.",
    "message": " Expected `List[Union[KusamaAddress, PolkadotAddress]]` for 1st positional only parameter to call `SubstrateManager.get_accounts_balance` but got `List[PolkadotAddress]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 632,
    "warning_line": "        account_amount = self.polkadot.get_accounts_balance(self.accounts.dot)"
  },
  {
    "project": "rotki/rotki",
    "commit": "61d14a4e3095f5bd8a33fd7f1afaa73d8c8d5194",
    "filename": "rotkehlchen/chain/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/manager.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/manager.py:639:30 Incompatible parameter type [6]: Expected `PolkadotAddress` for 1st positional only parameter to call `dict.__setitem__` but got `Union[KusamaAddress, PolkadotAddress]`.",
    "message": " Expected `PolkadotAddress` for 1st positional only parameter to call `dict.__setitem__` but got `Union[KusamaAddress, PolkadotAddress]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 639,
    "warning_line": "            self.balances.dot[account] = BalanceSheet("
  },
  {
    "project": "rotki/rotki",
    "commit": "61d14a4e3095f5bd8a33fd7f1afaa73d8c8d5194",
    "filename": "rotkehlchen/chain/substrate/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/substrate/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/substrate/utils.py:100:4 Incompatible return type [7]: Expected `KusamaAddress` but got `typing.Union[KusamaAddress, PolkadotAddress]`.",
    "message": " Expected `KusamaAddress` but got `typing.Union[KusamaAddress, PolkadotAddress]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 100,
    "warning_line": "    return get_substrate_address_from_public_key(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from substrateinterface import Keypair\nfrom substrateinterface.utils.ss58 import ss58_decode\n\n\n",
        "source_code_len": 95,
        "target_code": "from typing import Union, overload\n\nfrom substrateinterface import Keypair\nfrom substrateinterface.utils.ss58 import ss58_decode\nfrom typing_extensions import Literal\n\n",
        "target_code_len": 168,
        "diff_format": "@@ -1,4 +1,6 @@\n+from typing import Union, overload\n+\n from substrateinterface import Keypair\n from substrateinterface.utils.ss58 import ss58_decode\n-\n+from typing_extensions import Literal\n \n",
        "source_code_with_indent": "from substrateinterface import Keypair\nfrom substrateinterface.utils.ss58 import ss58_decode\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, overload\n\nfrom substrateinterface import Keypair\nfrom substrateinterface.utils.ss58 import ss58_decode\nfrom typing_extensions import Literal\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_kusama_address_from_public_key(public_key: SubstratePublicKey) -> KusamaAddress:\n    \"\"\"Return a valid Kusama address given a Substrate public key.\n\n    Public key: 32 len str, leading '0x' is optional.\n\n    May raise:\n    - AttributeError: if public key is not a string.\n    - TypeError: if ss58_format is not an int.\n    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n    a valid int.\n    \"\"\"\n    return get_substrate_address_from_public_key(\n        chain=SubstrateChain.KUSAMA,\n        public_key=public_key,\n    )\n\n\ndef get_polkadot_address_from_public_key(public_key: SubstratePublicKey) -> PolkadotAddress:\n    \"\"\"Return a valid Polkadot address given a Substrate public key.\n\n    Public key: 32 len str, leading '0x' is optional.\n\n    May raise:\n    - AttributeError: if public key is not a string.\n    - TypeError: if ss58_format is not an int.\n    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n    a valid int.\n    \"\"\"\n    return get_substrate_address_from_public_key(\n        chain=SubstrateChain.POLKADOT,\n        public_key=public_key,\n    )\n\n",
        "source_code_len": 1122,
        "target_code": "\n@overload\ndef get_substrate_address_from_public_key(\n        chain: Literal[SubstrateChain.POLKADOT],\n        public_key: SubstratePublicKey,\n) -> PolkadotAddress:\n    ...\n\n\n@overload\ndef get_substrate_address_from_public_key(\n        chain: Literal[SubstrateChain.KUSAMA],\n        public_key: SubstratePublicKey,\n) -> KusamaAddress:\n    ...\n\n",
        "target_code_len": 344,
        "diff_format": "@@ -88,34 +89,16 @@\n \n-def get_kusama_address_from_public_key(public_key: SubstratePublicKey) -> KusamaAddress:\n-    \"\"\"Return a valid Kusama address given a Substrate public key.\n-\n-    Public key: 32 len str, leading '0x' is optional.\n-\n-    May raise:\n-    - AttributeError: if public key is not a string.\n-    - TypeError: if ss58_format is not an int.\n-    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n-    a valid int.\n-    \"\"\"\n-    return get_substrate_address_from_public_key(\n-        chain=SubstrateChain.KUSAMA,\n-        public_key=public_key,\n-    )\n+@overload\n+def get_substrate_address_from_public_key(\n+        chain: Literal[SubstrateChain.POLKADOT],\n+        public_key: SubstratePublicKey,\n+) -> PolkadotAddress:\n+    ...\n \n \n-def get_polkadot_address_from_public_key(public_key: SubstratePublicKey) -> PolkadotAddress:\n-    \"\"\"Return a valid Polkadot address given a Substrate public key.\n-\n-    Public key: 32 len str, leading '0x' is optional.\n-\n-    May raise:\n-    - AttributeError: if public key is not a string.\n-    - TypeError: if ss58_format is not an int.\n-    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n-    a valid int.\n-    \"\"\"\n-    return get_substrate_address_from_public_key(\n-        chain=SubstrateChain.POLKADOT,\n-        public_key=public_key,\n-    )\n+@overload\n+def get_substrate_address_from_public_key(\n+        chain: Literal[SubstrateChain.KUSAMA],\n+        public_key: SubstratePublicKey,\n+) -> KusamaAddress:\n+    ...\n \n",
        "source_code_with_indent": "\n<DED>def get_kusama_address_from_public_key(public_key: SubstratePublicKey) -> KusamaAddress:\n    <IND>\"\"\"Return a valid Kusama address given a Substrate public key.\n\n    Public key: 32 len str, leading '0x' is optional.\n\n    May raise:\n    - AttributeError: if public key is not a string.\n    - TypeError: if ss58_format is not an int.\n    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n    a valid int.\n    \"\"\"\n    return get_substrate_address_from_public_key(\n        chain=SubstrateChain.KUSAMA,\n        public_key=public_key,\n    )\n\n\n<DED>def get_polkadot_address_from_public_key(public_key: SubstratePublicKey) -> PolkadotAddress:\n    <IND>\"\"\"Return a valid Polkadot address given a Substrate public key.\n\n    Public key: 32 len str, leading '0x' is optional.\n\n    May raise:\n    - AttributeError: if public key is not a string.\n    - TypeError: if ss58_format is not an int.\n    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n    a valid int.\n    \"\"\"\n    return get_substrate_address_from_public_key(\n        chain=SubstrateChain.POLKADOT,\n        public_key=public_key,\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>@overload\ndef get_substrate_address_from_public_key(\n        chain: Literal[SubstrateChain.POLKADOT],\n        public_key: SubstratePublicKey,\n) -> PolkadotAddress:\n    <IND>...\n\n\n<DED>@overload\ndef get_substrate_address_from_public_key(\n        chain: Literal[SubstrateChain.KUSAMA],\n        public_key: SubstratePublicKey,\n) -> KusamaAddress:\n    <IND>...\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return KusamaAddress(keypair.ss58_address)\n    if chain == SubstrateChain.POLKADOT:\n        return PolkadotAddress(keypair.ss58_address)\n",
        "source_code_len": 145,
        "target_code": "        return KusamaAddress(keypair.ss58_address)\n    # else can only be polkadot\n    return PolkadotAddress(keypair.ss58_address)\n",
        "target_code_len": 132,
        "diff_format": "@@ -149,3 +132,3 @@\n         return KusamaAddress(keypair.ss58_address)\n-    if chain == SubstrateChain.POLKADOT:\n-        return PolkadotAddress(keypair.ss58_address)\n+    # else can only be polkadot\n+    return PolkadotAddress(keypair.ss58_address)\n",
        "source_code_with_indent": "        <IND>return KusamaAddress(keypair.ss58_address)\n    <DED>if chain == SubstrateChain.POLKADOT:\n        <IND>return PolkadotAddress(keypair.ss58_address)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return KusamaAddress(keypair.ss58_address)\n    # else can only be polkadot\n    <DED>return PolkadotAddress(keypair.ss58_address)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "61d14a4e3095f5bd8a33fd7f1afaa73d8c8d5194",
    "filename": "rotkehlchen/chain/substrate/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/substrate/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/substrate/utils.py:117:4 Incompatible return type [7]: Expected `PolkadotAddress` but got `typing.Union[KusamaAddress, PolkadotAddress]`.",
    "message": " Expected `PolkadotAddress` but got `typing.Union[KusamaAddress, PolkadotAddress]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 117,
    "warning_line": "    return get_substrate_address_from_public_key(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from substrateinterface import Keypair\nfrom substrateinterface.utils.ss58 import ss58_decode\n\n\n",
        "source_code_len": 95,
        "target_code": "from typing import Union, overload\n\nfrom substrateinterface import Keypair\nfrom substrateinterface.utils.ss58 import ss58_decode\nfrom typing_extensions import Literal\n\n",
        "target_code_len": 168,
        "diff_format": "@@ -1,4 +1,6 @@\n+from typing import Union, overload\n+\n from substrateinterface import Keypair\n from substrateinterface.utils.ss58 import ss58_decode\n-\n+from typing_extensions import Literal\n \n",
        "source_code_with_indent": "from substrateinterface import Keypair\nfrom substrateinterface.utils.ss58 import ss58_decode\n\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import Union, overload\n\nfrom substrateinterface import Keypair\nfrom substrateinterface.utils.ss58 import ss58_decode\nfrom typing_extensions import Literal\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef get_kusama_address_from_public_key(public_key: SubstratePublicKey) -> KusamaAddress:\n    \"\"\"Return a valid Kusama address given a Substrate public key.\n\n    Public key: 32 len str, leading '0x' is optional.\n\n    May raise:\n    - AttributeError: if public key is not a string.\n    - TypeError: if ss58_format is not an int.\n    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n    a valid int.\n    \"\"\"\n    return get_substrate_address_from_public_key(\n        chain=SubstrateChain.KUSAMA,\n        public_key=public_key,\n    )\n\n\ndef get_polkadot_address_from_public_key(public_key: SubstratePublicKey) -> PolkadotAddress:\n    \"\"\"Return a valid Polkadot address given a Substrate public key.\n\n    Public key: 32 len str, leading '0x' is optional.\n\n    May raise:\n    - AttributeError: if public key is not a string.\n    - TypeError: if ss58_format is not an int.\n    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n    a valid int.\n    \"\"\"\n    return get_substrate_address_from_public_key(\n        chain=SubstrateChain.POLKADOT,\n        public_key=public_key,\n    )\n\n",
        "source_code_len": 1122,
        "target_code": "\n@overload\ndef get_substrate_address_from_public_key(\n        chain: Literal[SubstrateChain.POLKADOT],\n        public_key: SubstratePublicKey,\n) -> PolkadotAddress:\n    ...\n\n\n@overload\ndef get_substrate_address_from_public_key(\n        chain: Literal[SubstrateChain.KUSAMA],\n        public_key: SubstratePublicKey,\n) -> KusamaAddress:\n    ...\n\n",
        "target_code_len": 344,
        "diff_format": "@@ -88,34 +89,16 @@\n \n-def get_kusama_address_from_public_key(public_key: SubstratePublicKey) -> KusamaAddress:\n-    \"\"\"Return a valid Kusama address given a Substrate public key.\n-\n-    Public key: 32 len str, leading '0x' is optional.\n-\n-    May raise:\n-    - AttributeError: if public key is not a string.\n-    - TypeError: if ss58_format is not an int.\n-    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n-    a valid int.\n-    \"\"\"\n-    return get_substrate_address_from_public_key(\n-        chain=SubstrateChain.KUSAMA,\n-        public_key=public_key,\n-    )\n+@overload\n+def get_substrate_address_from_public_key(\n+        chain: Literal[SubstrateChain.POLKADOT],\n+        public_key: SubstratePublicKey,\n+) -> PolkadotAddress:\n+    ...\n \n \n-def get_polkadot_address_from_public_key(public_key: SubstratePublicKey) -> PolkadotAddress:\n-    \"\"\"Return a valid Polkadot address given a Substrate public key.\n-\n-    Public key: 32 len str, leading '0x' is optional.\n-\n-    May raise:\n-    - AttributeError: if public key is not a string.\n-    - TypeError: if ss58_format is not an int.\n-    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n-    a valid int.\n-    \"\"\"\n-    return get_substrate_address_from_public_key(\n-        chain=SubstrateChain.POLKADOT,\n-        public_key=public_key,\n-    )\n+@overload\n+def get_substrate_address_from_public_key(\n+        chain: Literal[SubstrateChain.KUSAMA],\n+        public_key: SubstratePublicKey,\n+) -> KusamaAddress:\n+    ...\n \n",
        "source_code_with_indent": "\n<DED>def get_kusama_address_from_public_key(public_key: SubstratePublicKey) -> KusamaAddress:\n    <IND>\"\"\"Return a valid Kusama address given a Substrate public key.\n\n    Public key: 32 len str, leading '0x' is optional.\n\n    May raise:\n    - AttributeError: if public key is not a string.\n    - TypeError: if ss58_format is not an int.\n    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n    a valid int.\n    \"\"\"\n    return get_substrate_address_from_public_key(\n        chain=SubstrateChain.KUSAMA,\n        public_key=public_key,\n    )\n\n\n<DED>def get_polkadot_address_from_public_key(public_key: SubstratePublicKey) -> PolkadotAddress:\n    <IND>\"\"\"Return a valid Polkadot address given a Substrate public key.\n\n    Public key: 32 len str, leading '0x' is optional.\n\n    May raise:\n    - AttributeError: if public key is not a string.\n    - TypeError: if ss58_format is not an int.\n    - ValueError: if public key is not 32 bytes long or the ss58_format is not\n    a valid int.\n    \"\"\"\n    return get_substrate_address_from_public_key(\n        chain=SubstrateChain.POLKADOT,\n        public_key=public_key,\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>@overload\ndef get_substrate_address_from_public_key(\n        chain: Literal[SubstrateChain.POLKADOT],\n        public_key: SubstratePublicKey,\n) -> PolkadotAddress:\n    <IND>...\n\n\n<DED>@overload\ndef get_substrate_address_from_public_key(\n        chain: Literal[SubstrateChain.KUSAMA],\n        public_key: SubstratePublicKey,\n) -> KusamaAddress:\n    <IND>...\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return KusamaAddress(keypair.ss58_address)\n    if chain == SubstrateChain.POLKADOT:\n        return PolkadotAddress(keypair.ss58_address)\n",
        "source_code_len": 145,
        "target_code": "        return KusamaAddress(keypair.ss58_address)\n    # else can only be polkadot\n    return PolkadotAddress(keypair.ss58_address)\n",
        "target_code_len": 132,
        "diff_format": "@@ -149,3 +132,3 @@\n         return KusamaAddress(keypair.ss58_address)\n-    if chain == SubstrateChain.POLKADOT:\n-        return PolkadotAddress(keypair.ss58_address)\n+    # else can only be polkadot\n+    return PolkadotAddress(keypair.ss58_address)\n",
        "source_code_with_indent": "        <IND>return KusamaAddress(keypair.ss58_address)\n    <DED>if chain == SubstrateChain.POLKADOT:\n        <IND>return PolkadotAddress(keypair.ss58_address)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return KusamaAddress(keypair.ss58_address)\n    # else can only be polkadot\n    <DED>return PolkadotAddress(keypair.ss58_address)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "rotki/rotki",
    "commit": "61d14a4e3095f5bd8a33fd7f1afaa73d8c8d5194",
    "filename": "rotkehlchen/chain/substrate/utils.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/rotki-rotki/rotkehlchen/chain/substrate/utils.py",
    "file_hunks_size": 5,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "rotkehlchen/chain/substrate/utils.py:151:8 Incompatible return type [7]: Expected `typing.Union[KusamaAddress, PolkadotAddress]` but got implicit return value of `None`.",
    "message": " Expected `typing.Union[KusamaAddress, PolkadotAddress]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 151,
    "warning_line": "        return PolkadotAddress(keypair.ss58_address)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        return KusamaAddress(keypair.ss58_address)\n    if chain == SubstrateChain.POLKADOT:\n        return PolkadotAddress(keypair.ss58_address)\n",
        "source_code_len": 145,
        "target_code": "        return KusamaAddress(keypair.ss58_address)\n    # else can only be polkadot\n    return PolkadotAddress(keypair.ss58_address)\n",
        "target_code_len": 132,
        "diff_format": "@@ -149,3 +132,3 @@\n         return KusamaAddress(keypair.ss58_address)\n-    if chain == SubstrateChain.POLKADOT:\n-        return PolkadotAddress(keypair.ss58_address)\n+    # else can only be polkadot\n+    return PolkadotAddress(keypair.ss58_address)\n",
        "source_code_with_indent": "        <IND>return KusamaAddress(keypair.ss58_address)\n    <DED>if chain == SubstrateChain.POLKADOT:\n        <IND>return PolkadotAddress(keypair.ss58_address)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>return KusamaAddress(keypair.ss58_address)\n    # else can only be polkadot\n    <DED>return PolkadotAddress(keypair.ss58_address)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]