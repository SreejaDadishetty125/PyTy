[
  {
    "project": "commitizen-tools/commitizen",
    "commit": "ce870cdf73ce9c4399678788ed6b655b6d41d019",
    "filename": "commitizen/config/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/commitizen-tools-commitizen/commitizen/config/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "commitizen/config/__init__.py:15:8 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 15,
    "warning_line": "        return None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\n\n",
        "source_code_len": 26,
        "target_code": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -3,2 +3,3 @@\n from pathlib import Path\n+from typing import Optional\n \n",
        "source_code_with_indent": "from pathlib import Path\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef load_global_conf() -> dict:\n    home = str(Path.home())\n",
        "source_code_len": 61,
        "target_code": "\ndef load_global_conf() -> Optional[IniConfig]:\n    home = str(Path.home())\n",
        "target_code_len": 76,
        "diff_format": "@@ -10,3 +11,3 @@\n \n-def load_global_conf() -> dict:\n+def load_global_conf() -> Optional[IniConfig]:\n     home = str(Path.home())\n",
        "source_code_with_indent": "\ndef load_global_conf() -> dict:\n    <IND>home = str(Path.home())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef load_global_conf() -> Optional[IniConfig]:\n    <IND>home = str(Path.home())\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef read_cfg() -> dict:\n    conf = BaseConfig()\n",
        "source_code_len": 49,
        "target_code": "\ndef read_cfg() -> BaseConfig:\n    conf = BaseConfig()\n",
        "target_code_len": 55,
        "diff_format": "@@ -33,3 +34,3 @@\n \n-def read_cfg() -> dict:\n+def read_cfg() -> BaseConfig:\n     conf = BaseConfig()\n",
        "source_code_with_indent": "\n<DED>def read_cfg() -> dict:\n    <IND>conf = BaseConfig()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def read_cfg() -> BaseConfig:\n    <IND>conf = BaseConfig()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "commitizen-tools/commitizen",
    "commit": "ce870cdf73ce9c4399678788ed6b655b6d41d019",
    "filename": "commitizen/config/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/commitizen-tools-commitizen/commitizen/config/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "commitizen/config/__init__.py:31:4 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got `IniConfig`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `IniConfig`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 31,
    "warning_line": "    return conf",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\n\n",
        "source_code_len": 26,
        "target_code": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -3,2 +3,3 @@\n from pathlib import Path\n+from typing import Optional\n \n",
        "source_code_with_indent": "from pathlib import Path\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef load_global_conf() -> dict:\n    home = str(Path.home())\n",
        "source_code_len": 61,
        "target_code": "\ndef load_global_conf() -> Optional[IniConfig]:\n    home = str(Path.home())\n",
        "target_code_len": 76,
        "diff_format": "@@ -10,3 +11,3 @@\n \n-def load_global_conf() -> dict:\n+def load_global_conf() -> Optional[IniConfig]:\n     home = str(Path.home())\n",
        "source_code_with_indent": "\ndef load_global_conf() -> dict:\n    <IND>home = str(Path.home())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef load_global_conf() -> Optional[IniConfig]:\n    <IND>home = str(Path.home())\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef read_cfg() -> dict:\n    conf = BaseConfig()\n",
        "source_code_len": 49,
        "target_code": "\ndef read_cfg() -> BaseConfig:\n    conf = BaseConfig()\n",
        "target_code_len": 55,
        "diff_format": "@@ -33,3 +34,3 @@\n \n-def read_cfg() -> dict:\n+def read_cfg() -> BaseConfig:\n     conf = BaseConfig()\n",
        "source_code_with_indent": "\n<DED>def read_cfg() -> dict:\n    <IND>conf = BaseConfig()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def read_cfg() -> BaseConfig:\n    <IND>conf = BaseConfig()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "commitizen-tools/commitizen",
    "commit": "ce870cdf73ce9c4399678788ed6b655b6d41d019",
    "filename": "commitizen/config/__init__.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/commitizen-tools-commitizen/commitizen/config/__init__.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "commitizen/config/__init__.py:67:4 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got `typing.Union[typing.Dict[typing.Any, typing.Any], BaseConfig]`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `typing.Union[typing.Dict[typing.Any, typing.Any], BaseConfig]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 67,
    "warning_line": "    return conf",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from pathlib import Path\n\n",
        "source_code_len": 26,
        "target_code": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_len": 54,
        "diff_format": "@@ -3,2 +3,3 @@\n from pathlib import Path\n+from typing import Optional\n \n",
        "source_code_with_indent": "from pathlib import Path\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from pathlib import Path\nfrom typing import Optional\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef load_global_conf() -> dict:\n    home = str(Path.home())\n",
        "source_code_len": 61,
        "target_code": "\ndef load_global_conf() -> Optional[IniConfig]:\n    home = str(Path.home())\n",
        "target_code_len": 76,
        "diff_format": "@@ -10,3 +11,3 @@\n \n-def load_global_conf() -> dict:\n+def load_global_conf() -> Optional[IniConfig]:\n     home = str(Path.home())\n",
        "source_code_with_indent": "\ndef load_global_conf() -> dict:\n    <IND>home = str(Path.home())\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef load_global_conf() -> Optional[IniConfig]:\n    <IND>home = str(Path.home())\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef read_cfg() -> dict:\n    conf = BaseConfig()\n",
        "source_code_len": 49,
        "target_code": "\ndef read_cfg() -> BaseConfig:\n    conf = BaseConfig()\n",
        "target_code_len": 55,
        "diff_format": "@@ -33,3 +34,3 @@\n \n-def read_cfg() -> dict:\n+def read_cfg() -> BaseConfig:\n     conf = BaseConfig()\n",
        "source_code_with_indent": "\n<DED>def read_cfg() -> dict:\n    <IND>conf = BaseConfig()\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n<DED>def read_cfg() -> BaseConfig:\n    <IND>conf = BaseConfig()\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "commitizen-tools/commitizen",
    "commit": "ce870cdf73ce9c4399678788ed6b655b6d41d019",
    "filename": "commitizen/config/ini_config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/commitizen-tools-commitizen/commitizen/config/ini_config.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "commitizen/config/ini_config.py:69:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 69,
    "warning_line": "            self.is_empty_config = True",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _parse_setting(self, data: str) -> dict:\n        \"\"\"We expect to have a section like this\n",
        "source_code_len": 99,
        "target_code": "\n    def _parse_setting(self, data: str):\n        \"\"\"We expect to have a section like this\n",
        "target_code_len": 91,
        "diff_format": "@@ -37,3 +37,3 @@\n \n-    def _parse_setting(self, data: str) -> dict:\n+    def _parse_setting(self, data: str):\n         \"\"\"We expect to have a section like this\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _parse_setting(self, data: str) -> dict:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _parse_setting(self, data: str):\n        <IND>"
      }
    ]
  },
  {
    "project": "commitizen-tools/commitizen",
    "commit": "ce870cdf73ce9c4399678788ed6b655b6d41d019",
    "filename": "commitizen/config/toml_config.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/commitizen-tools-commitizen/commitizen/config/toml_config.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "commitizen/config/toml_config.py:39:12 Incompatible return type [7]: Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got implicit return value of `None`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 39,
    "warning_line": "            self.is_empty_config = True",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _parse_setting(self, data: str) -> dict:\n        \"\"\"We expect to have a section in pyproject looking like\n",
        "source_code_len": 115,
        "target_code": "\n    def _parse_setting(self, data: str):\n        \"\"\"We expect to have a section in pyproject looking like\n",
        "target_code_len": 107,
        "diff_format": "@@ -26,3 +26,3 @@\n \n-    def _parse_setting(self, data: str) -> dict:\n+    def _parse_setting(self, data: str):\n         \"\"\"We expect to have a section in pyproject looking like\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def _parse_setting(self, data: str) -> dict:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def _parse_setting(self, data: str):\n        <IND>"
      }
    ]
  }
]