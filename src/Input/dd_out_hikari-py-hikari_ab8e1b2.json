[
  {
    "project": "hikari-py/hikari",
    "commit": "ab8e1b2acd31cb0579fa0ab11a11a59f58a64a60",
    "filename": "hikari/models/embeds.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/embeds.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/embeds.py:187:4 Incompatible attribute type [8]: Attribute `colour` declared in class `Embed` has type `typing.Optional[colors.Color]` but is used as type `property`.",
    "message": " Attribute `colour` declared in class `Embed` has type `typing.Optional[colors.Color]` but is used as type `property`.",
    "rule_id": "Incompatible attribute type [8]",
    "warning_line_no": 187,
    "warning_line": "    colour: typing.Optional[colors.Color] = property(",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n@attr.s(slots=True, kw_only=True, init=False)\n",
        "source_code_len": 47,
        "target_code": "\ndef _maybe_color(value: typing.Optional[colors.ColorLike]) -> typing.Optional[colors.Color]:\n    return colors.Color.of(value) if value is not None else None\n\n\n@attr.s(slots=True, kw_only=True, init=False)\n",
        "target_code_len": 207,
        "diff_format": "@@ -43,2 +43,6 @@\n \n+def _maybe_color(value: typing.Optional[colors.ColorLike]) -> typing.Optional[colors.Color]:\n+    return colors.Color.of(value) if value is not None else None\n+\n+\n @attr.s(slots=True, kw_only=True, init=False)\n",
        "source_code_with_indent": "\n@attr.s(slots=True, kw_only=True, init=False)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\ndef _maybe_color(value: typing.Optional[colors.ColorLike]) -> typing.Optional[colors.Color]:\n    <IND>return colors.Color.of(value) if value is not None else None\n\n\n<DED>@attr.s(slots=True, kw_only=True, init=False)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "\n    color: typing.Optional[colors.Color] = attr.ib(\n        default=None, repr=False, converter=lambda c: colors.Color.of(c) if c is not None else None,\n    )\n    \"\"\"The colour of the embed, or `None` to use the default.\"\"\"\n\n    colour: typing.Optional[colors.Color] = property(\n        lambda self: self.color, lambda self, colour: setattr(self, \"color\", colour)\n    )\n\n",
        "source_code_len": 372,
        "target_code": "\n    color: typing.Optional[colors.Color] = attr.ib(default=None, repr=False, converter=_maybe_color)\n    \"\"\"Colour of the embed, or `None` to use the default.\"\"\"\n\n    @property\n    def colour(self) -> typing.Optional[colors.Color]:\n        \"\"\"Colour of the embed, or `None` to use the default.\n\n        !!! note\n            This is an alias for `color` for people who do not use Americanized\n            English.\n        \"\"\"\n        return self.color\n\n    @colour.setter\n    def colour(self, value: typing.Optional[colors.ColorLike]) -> None:\n        # implicit attrs conversion.\n        self.color = value  # type: ignore\n\n    @colour.deleter\n    def colour(self) -> None:\n        del self.color\n\n",
        "target_code_len": 699,
        "diff_format": "@@ -181,10 +186,23 @@\n \n-    color: typing.Optional[colors.Color] = attr.ib(\n-        default=None, repr=False, converter=lambda c: colors.Color.of(c) if c is not None else None,\n-    )\n-    \"\"\"The colour of the embed, or `None` to use the default.\"\"\"\n-\n-    colour: typing.Optional[colors.Color] = property(\n-        lambda self: self.color, lambda self, colour: setattr(self, \"color\", colour)\n-    )\n+    color: typing.Optional[colors.Color] = attr.ib(default=None, repr=False, converter=_maybe_color)\n+    \"\"\"Colour of the embed, or `None` to use the default.\"\"\"\n+\n+    @property\n+    def colour(self) -> typing.Optional[colors.Color]:\n+        \"\"\"Colour of the embed, or `None` to use the default.\n+\n+        !!! note\n+            This is an alias for `color` for people who do not use Americanized\n+            English.\n+        \"\"\"\n+        return self.color\n+\n+    @colour.setter\n+    def colour(self, value: typing.Optional[colors.ColorLike]) -> None:\n+        # implicit attrs conversion.\n+        self.color = value  # type: ignore\n+\n+    @colour.deleter\n+    def colour(self) -> None:\n+        del self.color\n \n",
        "source_code_with_indent": "\n    color: typing.Optional[colors.Color] = attr.ib(\n        default=None, repr=False, converter=lambda c: colors.Color.of(c) if c is not None else None,\n    )\n    \"\"\"The colour of the embed, or `None` to use the default.\"\"\"\n\n    colour: typing.Optional[colors.Color] = property(\n        lambda self: self.color, lambda self, colour: setattr(self, \"color\", colour)\n    )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    color: typing.Optional[colors.Color] = attr.ib(default=None, repr=False, converter=_maybe_color)\n    \"\"\"Colour of the embed, or `None` to use the default.\"\"\"\n\n    @property\n    def colour(self) -> typing.Optional[colors.Color]:\n        <IND>\"\"\"Colour of the embed, or `None` to use the default.\n\n        !!! note\n            This is an alias for `color` for people who do not use Americanized\n            English.\n        \"\"\"\n        return self.color\n\n    <DED>@colour.setter\n    def colour(self, value: typing.Optional[colors.ColorLike]) -> None:\n        # implicit attrs conversion.\n        <IND>self.color = value  # type: ignore\n\n    <DED>@colour.deleter\n    def colour(self) -> None:\n        <IND>del self.color\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "ab8e1b2acd31cb0579fa0ab11a11a59f58a64a60",
    "filename": "hikari/models/guilds.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/models/guilds.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/models/guilds.py:453:78 Incompatible parameter type [6]: Expected `str` for 4th parameter `format_` to call `cdn.generate_cdn_url` but got `typing.Optional[str]`.",
    "message": " Expected `str` for 4th parameter `format_` to call `cdn.generate_cdn_url` but got `typing.Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 453,
    "warning_line": "            url = cdn.generate_cdn_url(\"icons\", str(self.id), self.icon_hash, format_=format_, size=size)"
  },
  {
    "project": "hikari-py/hikari",
    "commit": "ab8e1b2acd31cb0579fa0ab11a11a59f58a64a60",
    "filename": "hikari/utilities/files.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/utilities/files.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/utilities/files.py:95:23 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `URL.__init__` but got `typing.Union[os.PathLike[typing.Any], str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `URL.__init__` but got `typing.Union[os.PathLike[typing.Any], str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 95,
    "warning_line": "            return URL(url_or_resource)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\ndef ensure_resource(url_or_resource: typing.Union[None, str, os.PathLike, Resource], /) -> typing.Optional[Resource]:\n    \"\"\"Given a resource or string, convert it to a valid resource as needed.\n",
        "source_code_len": 196,
        "target_code": "\ndef ensure_resource(url_or_resource: typing.Union[None, str, Resource], /) -> typing.Optional[Resource]:\n    \"\"\"Given a resource or string, convert it to a valid resource as needed.\n",
        "target_code_len": 183,
        "diff_format": "@@ -75,3 +75,3 @@\n \n-def ensure_resource(url_or_resource: typing.Union[None, str, os.PathLike, Resource], /) -> typing.Optional[Resource]:\n+def ensure_resource(url_or_resource: typing.Union[None, str, Resource], /) -> typing.Optional[Resource]:\n     \"\"\"Given a resource or string, convert it to a valid resource as needed.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n<DED>def ensure_resource(url_or_resource: typing.Union[None, str, os.PathLike, Resource], /) -> typing.Optional[Resource]:\n    <IND>",
        "target_code_with_indent": "\n<DED>def ensure_resource(url_or_resource: typing.Union[None, str, Resource], /) -> typing.Optional[Resource]:\n    <IND>"
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "ab8e1b2acd31cb0579fa0ab11a11a59f58a64a60",
    "filename": "hikari/utilities/files.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/utilities/files.py",
    "file_hunks_size": 13,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/utilities/files.py:116:4 Incompatible return type [7]: Expected `typing.Optional[str]` but got `typing.Tuple[typing.Optional[str], typing.Optional[str]]`.",
    "message": " Expected `typing.Optional[str]` but got `typing.Tuple[typing.Optional[str], typing.Optional[str]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 116,
    "warning_line": "    return mimetypes.guess_type(name)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \"\"\"\n    return mimetypes.guess_type(name)\n\n",
        "source_code_len": 47,
        "target_code": "    \"\"\"\n    guess, _ = mimetypes.guess_type(name)\n    return guess\n\n",
        "target_code_len": 68,
        "diff_format": "@@ -115,3 +115,4 @@\n     \"\"\"\n-    return mimetypes.guess_type(name)\n+    guess, _ = mimetypes.guess_type(name)\n+    return guess\n \n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    return mimetypes.guess_type(name)\n\n",
        "target_code_with_indent": "\n    guess, _ = mimetypes.guess_type(name)\n    return guess\n\n"
      }
    ]
  },
  {
    "project": "hikari-py/hikari",
    "commit": "ab8e1b2acd31cb0579fa0ab11a11a59f58a64a60",
    "filename": "hikari/utilities/files.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hikari-py-hikari/hikari/utilities/files.py",
    "file_hunks_size": 13,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "hikari/utilities/files.py:272:12 Incompatible return type [7]: Expected `typing.AsyncGenerator[typing.Any, bytes]` but got `typing.Generator[bytes, None, None]`.",
    "message": " Expected `typing.AsyncGenerator[typing.Any, bytes]` but got `typing.Generator[bytes, None, None]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 272,
    "warning_line": "            yield self.data[i : i + _MAGIC]"
  }
]