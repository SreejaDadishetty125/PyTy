[
  {
    "project": "ubisoft/mixer",
    "commit": "e385fdd5ed8fac155fa2f61abcf56c7d4573bc5a",
    "filename": "mixer/blender_data/datablock_proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/datablock_proxy.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/blender_data/datablock_proxy.py:244:8 Incompatible variable type [9]: filepath is declared to have type `str` but is used as type `pathlib.Path`.",
    "message": " filepath is declared to have type `str` but is used as type `pathlib.Path`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 244,
    "warning_line": "        filepath = pathlib.Path(filepath)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def matches_shared_folder(self, filepath: str, context: Context):\n        filepath = pathlib.Path(filepath)\n        for shared_folder in context.proxy_state.shared_folders:\n",
        "source_code_len": 178,
        "target_code": "\n    def matches_shared_folder(self, filepath_str: str, context: Context):\n        filepath = pathlib.Path(filepath_str)\n        for shared_folder in context.proxy_state.shared_folders:\n",
        "target_code_len": 186,
        "diff_format": "@@ -242,4 +242,4 @@\n \n-    def matches_shared_folder(self, filepath: str, context: Context):\n-        filepath = pathlib.Path(filepath)\n+    def matches_shared_folder(self, filepath_str: str, context: Context):\n+        filepath = pathlib.Path(filepath_str)\n         for shared_folder in context.proxy_state.shared_folders:\n",
        "source_code_with_indent": "\n    <DED><DED>def matches_shared_folder(self, filepath: str, context: Context):\n        <IND>filepath = pathlib.Path(filepath)\n        for shared_folder in context.proxy_state.shared_folders:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def matches_shared_folder(self, filepath_str: str, context: Context):\n        <IND>filepath = pathlib.Path(filepath_str)\n        for shared_folder in context.proxy_state.shared_folders:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "e385fdd5ed8fac155fa2f61abcf56c7d4573bc5a",
    "filename": "mixer/blender_data/datablock_proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/datablock_proxy.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/blender_data/datablock_proxy.py:256:33 Unsupported operand [58]: `/` is not supported for operand types `str` and `str`.",
    "message": " `/` is not supported for operand types `str` and `str`.",
    "rule_id": "Unsupported operand [58]",
    "warning_line_no": 256,
    "warning_line": "            shared_folder_file = shared_folder / relative_path"
  },
  {
    "project": "ubisoft/mixer",
    "commit": "e385fdd5ed8fac155fa2f61abcf56c7d4573bc5a",
    "filename": "mixer/blender_data/datablock_proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/datablock_proxy.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/blender_data/datablock_proxy.py:311:40 Incompatible parameter type [6]: Expected `str` for 1st positional only parameter to call `get_source_file_path` but got `Optional[str]`.",
    "message": " Expected `str` for 1st positional only parameter to call `get_source_file_path` but got `Optional[str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 311,
    "warning_line": "            path = get_source_file_path(self._filepath_raw)"
  },
  {
    "project": "ubisoft/mixer",
    "commit": "e385fdd5ed8fac155fa2f61abcf56c7d4573bc5a",
    "filename": "mixer/blender_data/messages.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/messages.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/blender_data/messages.py:158:8 Incompatible return type [7]: Expected `Tuple[List[Soa], int]` but got `List[Variable[_T]]`.",
    "message": " Expected `Tuple[List[Soa], int]` but got `List[Variable[_T]]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 158,
    "warning_line": "        return []",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        logger.error(\"ignored\")\n        return []\n\n",
        "source_code_len": 51,
        "target_code": "        logger.error(\"ignored\")\n        raise\n\n",
        "target_code_len": 47,
        "diff_format": "@@ -157,3 +157,3 @@\n         logger.error(\"ignored\")\n-        return []\n+        raise\n \n",
        "source_code_with_indent": "        <DED>logger.error(\"ignored\")\n        return []\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <DED>logger.error(\"ignored\")\n        raise\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "e385fdd5ed8fac155fa2f61abcf56c7d4573bc5a",
    "filename": "mixer/blender_data/object_proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/object_proxy.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mixer/blender_data/object_proxy.py:211:61 Incompatible parameter type [6]: Expected `StructProxy` for 5th positional only parameter to call `StructProxy._diff` but got `mixer.blender_data.proxy.Proxy`.",
    "message": " Expected `StructProxy` for 5th positional only parameter to call `StructProxy._diff` but got `mixer.blender_data.proxy.Proxy`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 211,
    "warning_line": "            return super()._diff(struct, key, prop, context, diff)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _diff(self, struct: T.Object, key: str, prop: T.Property, context: Context, diff: Proxy) -> Optional[Delta]:\n        from mixer.blender_data.attributes import diff_attribute\n",
        "source_code_len": 183,
        "target_code": "\n    def _diff(\n        self, struct: T.Object, key: str, prop: T.Property, context: Context, diff: StructProxy\n    ) -> Optional[Delta]:\n        from mixer.blender_data.attributes import diff_attribute\n",
        "target_code_len": 203,
        "diff_format": "@@ -184,3 +184,5 @@\n \n-    def _diff(self, struct: T.Object, key: str, prop: T.Property, context: Context, diff: Proxy) -> Optional[Delta]:\n+    def _diff(\n+        self, struct: T.Object, key: str, prop: T.Property, context: Context, diff: StructProxy\n+    ) -> Optional[Delta]:\n         from mixer.blender_data.attributes import diff_attribute\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def _diff(self, struct: T.Object, key: str, prop: T.Property, context: Context, diff: Proxy) -> Optional[Delta]:\n        <IND>from mixer.blender_data.attributes import diff_attribute\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def _diff(\n        self, struct: T.Object, key: str, prop: T.Property, context: Context, diff: StructProxy\n    ) -> Optional[Delta]:\n        <IND>from mixer.blender_data.attributes import diff_attribute\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ubisoft/mixer",
    "commit": "e385fdd5ed8fac155fa2f61abcf56c7d4573bc5a",
    "filename": "mixer/blender_data/proxy.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ubisoft-mixer/mixer/blender_data/proxy.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": true,
    "full_warning_msg": "mixer/blender_data/proxy.py:254:34 Incompatible parameter type [6]: Expected `str` for 2nd positional only parameter to call `getattr` but got `Union[int, str]`.",
    "message": " Expected `str` for 2nd positional only parameter to call `getattr` but got `Union[int, str]`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 254,
    "warning_line": "            bl = getattr(bl_item, head)",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": true,
        "source_code": "        if isinstance(bl_item, T.bpy_struct):\n            bl = getattr(bl_item, head)\n        elif isinstance(bl_item, T.bpy_prop_collection):\n",
        "source_code_len": 143,
        "target_code": "        if isinstance(bl_item, T.bpy_struct):\n            bl = getattr(bl_item, head)  # type: ignore\n        elif isinstance(bl_item, T.bpy_prop_collection):\n",
        "target_code_len": 159,
        "diff_format": "@@ -253,3 +253,3 @@\n         if isinstance(bl_item, T.bpy_struct):\n-            bl = getattr(bl_item, head)\n+            bl = getattr(bl_item, head)  # type: ignore\n         elif isinstance(bl_item, T.bpy_prop_collection):\n",
        "source_code_with_indent": "        if isinstance(bl_item, T.bpy_struct):\n            <IND>bl = getattr(bl_item, head)\n        <DED>elif isinstance(bl_item, T.bpy_prop_collection):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        if isinstance(bl_item, T.bpy_struct):\n            <IND>bl = getattr(bl_item, head)  # type: ignore\n        <DED>elif isinstance(bl_item, T.bpy_prop_collection):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]