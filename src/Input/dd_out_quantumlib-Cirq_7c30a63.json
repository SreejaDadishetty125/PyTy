[
  {
    "project": "quantumlib/Cirq",
    "commit": "7c30a63283cd9dd6a3837337c5a9d304d79f8675",
    "filename": "cirq/devices/device.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/devices/device.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/devices/device.py:32:32 Invalid type [31]: Expression `type(None)` is not a valid type.",
    "message": " Expression `type(None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 32,
    "warning_line": "                           ) -> type(None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def validate_operation(self, operation: 'cirq.ops.Operation'\n                           ) -> type(None):\n        \"\"\"Raises an exception if an operation is not valid.\n",
        "source_code_len": 170,
        "target_code": "    def validate_operation(self, operation: 'cirq.ops.Operation'\n                           ) -> None:\n        \"\"\"Raises an exception if an operation is not valid.\n",
        "target_code_len": 164,
        "diff_format": "@@ -31,3 +31,3 @@\n     def validate_operation(self, operation: 'cirq.ops.Operation'\n-                           ) -> type(None):\n+                           ) -> None:\n         \"\"\"Raises an exception if an operation is not valid.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    def validate_operation(self, operation: 'cirq.ops.Operation'\n                           ) -> type(None):\n        <IND>",
        "target_code_with_indent": "    def validate_operation(self, operation: 'cirq.ops.Operation'\n                           ) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "7c30a63283cd9dd6a3837337c5a9d304d79f8675",
    "filename": "cirq/devices/device.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/devices/device.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/devices/device.py:48:9 Invalid type [31]: Expression `type(None)` is not a valid type.",
    "message": " Expression `type(None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 48,
    "warning_line": "    ) -> type(None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            scheduled_operation: 'cirq.schedules.ScheduledOperation'\n    ) -> type(None):\n        \"\"\"Raises an exception if the scheduled operation is not valid.\n",
        "source_code_len": 162,
        "target_code": "            scheduled_operation: 'cirq.schedules.ScheduledOperation'\n    ) -> None:\n        \"\"\"Raises an exception if the scheduled operation is not valid.\n",
        "target_code_len": 156,
        "diff_format": "@@ -47,3 +47,3 @@\n             scheduled_operation: 'cirq.schedules.ScheduledOperation'\n-    ) -> type(None):\n+    ) -> None:\n         \"\"\"Raises an exception if the scheduled operation is not valid.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "            scheduled_operation: 'cirq.schedules.ScheduledOperation'\n    ) -> type(None):\n        <IND>",
        "target_code_with_indent": "            scheduled_operation: 'cirq.schedules.ScheduledOperation'\n    ) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "7c30a63283cd9dd6a3837337c5a9d304d79f8675",
    "filename": "cirq/devices/device.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/devices/device.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/devices/device.py:62:68 Invalid type [31]: Expression `type(None)` is not a valid type.",
    "message": " Expression `type(None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 62,
    "warning_line": "    def validate_circuit(self, circuit: 'cirq.circuits.Circuit') -> type(None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @abc.abstractmethod\n    def validate_circuit(self, circuit: 'cirq.circuits.Circuit') -> type(None):\n        \"\"\"Raises an exception if a circuit is not valid.\n",
        "source_code_len": 162,
        "target_code": "    @abc.abstractmethod\n    def validate_circuit(self, circuit: 'cirq.circuits.Circuit') -> None:\n        \"\"\"Raises an exception if a circuit is not valid.\n",
        "target_code_len": 156,
        "diff_format": "@@ -61,3 +61,3 @@\n     @abc.abstractmethod\n-    def validate_circuit(self, circuit: 'cirq.circuits.Circuit') -> type(None):\n+    def validate_circuit(self, circuit: 'cirq.circuits.Circuit') -> None:\n         \"\"\"Raises an exception if a circuit is not valid.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    <DED>@abc.abstractmethod\n    def validate_circuit(self, circuit: 'cirq.circuits.Circuit') -> type(None):\n        <IND>",
        "target_code_with_indent": "    <DED>@abc.abstractmethod\n    def validate_circuit(self, circuit: 'cirq.circuits.Circuit') -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "7c30a63283cd9dd6a3837337c5a9d304d79f8675",
    "filename": "cirq/devices/device.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/devices/device.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/devices/device.py:75:31 Invalid type [31]: Expression `type(None)` is not a valid type.",
    "message": " Expression `type(None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 75,
    "warning_line": "                          ) -> type(None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def validate_schedule(self, schedule: 'cirq.schedules.Schedule'\n                          ) -> type(None):\n        \"\"\"Raises an exception if a schedule is not valid.\n",
        "source_code_len": 170,
        "target_code": "    def validate_schedule(self, schedule: 'cirq.schedules.Schedule'\n                          ) -> None:\n        \"\"\"Raises an exception if a schedule is not valid.\n",
        "target_code_len": 164,
        "diff_format": "@@ -74,3 +74,3 @@\n     def validate_schedule(self, schedule: 'cirq.schedules.Schedule'\n-                          ) -> type(None):\n+                          ) -> None:\n         \"\"\"Raises an exception if a schedule is not valid.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    def validate_schedule(self, schedule: 'cirq.schedules.Schedule'\n                          ) -> type(None):\n        <IND>",
        "target_code_with_indent": "    def validate_schedule(self, schedule: 'cirq.schedules.Schedule'\n                          ) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "7c30a63283cd9dd6a3837337c5a9d304d79f8675",
    "filename": "cirq/extension/extensions.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/extension/extensions.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/extension/extensions.py:67:18 Invalid type [31]: Expression `typing.Union[(type(None), $local_cirq?extension?extensions$T_DESIRED)]` is not a valid type.",
    "message": " Expression `typing.Union[(type(None), $local_cirq?extension?extensions$T_DESIRED)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 67,
    "warning_line": "             ) -> Union[type(None), T_DESIRED]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "             desired_type: Type[T_DESIRED]\n             ) -> Union[type(None), T_DESIRED]:\n        \"\"\"Represents the given value as the desired type, if possible.\n",
        "source_code_len": 163,
        "target_code": "             desired_type: Type[T_DESIRED]\n             ) -> Optional[T_DESIRED]:\n        \"\"\"Represents the given value as the desired type, if possible.\n",
        "target_code_len": 154,
        "diff_format": "@@ -66,3 +67,3 @@\n              desired_type: Type[T_DESIRED]\n-             ) -> Union[type(None), T_DESIRED]:\n+             ) -> Optional[T_DESIRED]:\n         \"\"\"Represents the given value as the desired type, if possible.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "             desired_type: Type[T_DESIRED]\n             ) -> Union[type(None), T_DESIRED]:\n        <IND>",
        "target_code_with_indent": "             desired_type: Type[T_DESIRED]\n             ) -> Optional[T_DESIRED]:\n        <IND>"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "7c30a63283cd9dd6a3837337c5a9d304d79f8675",
    "filename": "cirq/extension/potential_implementation.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/extension/potential_implementation.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/extension/potential_implementation.py:29:25 Invalid type [31]: Expression `typing.Union[(type(None), $local_cirq?extension?potential_implementation$T_DESIRED)]` is not a valid type.",
    "message": " Expression `typing.Union[(type(None), $local_cirq?extension?potential_implementation$T_DESIRED)]` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 29,
    "warning_line": "                    ) -> Union[type(None), T_DESIRED]:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\nfrom typing import Type, TypeVar, Union\n\n",
        "source_code_len": 42,
        "target_code": "\nfrom typing import Optional, Type, TypeVar\n\n",
        "target_code_len": 45,
        "diff_format": "@@ -15,3 +15,3 @@\n \n-from typing import Type, TypeVar, Union\n+from typing import Optional, Type, TypeVar\n \n",
        "source_code_with_indent": "\nfrom typing import Type, TypeVar, Union\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\nfrom typing import Optional, Type, TypeVar\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def try_cast_to(self, desired_type: Type[T_DESIRED]\n                    ) -> Union[type(None), T_DESIRED]:\n        \"\"\"Turns this value into the desired type, if possible.\n",
        "source_code_len": 175,
        "target_code": "    def try_cast_to(self, desired_type: Type[T_DESIRED]\n                    ) -> Optional[T_DESIRED]:\n        \"\"\"Turns this value into the desired type, if possible.\n",
        "target_code_len": 166,
        "diff_format": "@@ -28,3 +28,3 @@\n     def try_cast_to(self, desired_type: Type[T_DESIRED]\n-                    ) -> Union[type(None), T_DESIRED]:\n+                    ) -> Optional[T_DESIRED]:\n         \"\"\"Turns this value into the desired type, if possible.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    def try_cast_to(self, desired_type: Type[T_DESIRED]\n                    ) -> Union[type(None), T_DESIRED]:\n        <IND>",
        "target_code_with_indent": "    def try_cast_to(self, desired_type: Type[T_DESIRED]\n                    ) -> Optional[T_DESIRED]:\n        <IND>"
      }
    ]
  },
  {
    "project": "quantumlib/Cirq",
    "commit": "7c30a63283cd9dd6a3837337c5a9d304d79f8675",
    "filename": "cirq/ops/raw_types.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/quantumlib-Cirq/cirq/ops/raw_types.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "cirq/ops/raw_types.py:61:58 Invalid type [31]: Expression `type(None)` is not a valid type.",
    "message": " Expression `type(None)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 61,
    "warning_line": "    def validate_args(self, qubits: Sequence[QubitId]) -> type(None):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    # noinspection PyMethodMayBeStatic\n    def validate_args(self, qubits: Sequence[QubitId]) -> type(None):\n        \"\"\"Checks if this gate can be applied to the given qubits.\n",
        "source_code_len": 176,
        "target_code": "    # noinspection PyMethodMayBeStatic\n    def validate_args(self, qubits: Sequence[QubitId]) -> None:\n        \"\"\"Checks if this gate can be applied to the given qubits.\n",
        "target_code_len": 170,
        "diff_format": "@@ -60,3 +60,3 @@\n     # noinspection PyMethodMayBeStatic\n-    def validate_args(self, qubits: Sequence[QubitId]) -> type(None):\n+    def validate_args(self, qubits: Sequence[QubitId]) -> None:\n         \"\"\"Checks if this gate can be applied to the given qubits.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    # noinspection PyMethodMayBeStatic\n    def validate_args(self, qubits: Sequence[QubitId]) -> type(None):\n        <IND>",
        "target_code_with_indent": "    # noinspection PyMethodMayBeStatic\n    def validate_args(self, qubits: Sequence[QubitId]) -> None:\n        <IND>"
      }
    ]
  }
]