[
  {
    "project": "mautrix/signal",
    "commit": "4f39108cd5dd04128882792fc2a1ec463d2bd055",
    "filename": "mausignald/errors.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-signal/mausignald/errors.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mausignald/errors.py:37:39 Incompatible parameter type [6]: Expected `Dict[str, typing.Any]` for 1st positional only parameter to call `ResponseError.__init__` but got `str`.",
    "message": " Expected `Dict[str, typing.Any]` for 1st positional only parameter to call `ResponseError.__init__` but got `str`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 37,
    "warning_line": "        super(RPCError, self).__init__(message)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ResponseError(RPCError):\n    def __init__(self, data: Dict[str, Any], message_override: Optional[str] = None) -> None:\n        self.data = data\n        super().__init__(message_override or data[\"message\"])\n\n\nclass UnknownResponseError(ResponseError):\n    def __init__(self, message: str) -> None:\n        self.data = {}\n        super(RPCError, self).__init__(message)\n\n\nclass InvalidRequest(ResponseError):\n    def __init__(self, data: Dict[str, Any]) -> None:\n        super().__init__(data, \", \".join(data.get(\"validationResults\", \"\")))\n\n",
        "source_code_len": 545,
        "target_code": "class ResponseError(RPCError):\n    def __init__(self, data: Dict[str, Any], error_type: Optional[str] = None,\n                 message_override: Optional[str] = None) -> None:\n        self.data = data\n        msg = message_override or data[\"message\"]\n        if error_type:\n            msg = f\"{error_type}: {msg}\"\n        super().__init__(msg)\n\n",
        "target_code_len": 346,
        "diff_format": "@@ -28,16 +28,9 @@\n class ResponseError(RPCError):\n-    def __init__(self, data: Dict[str, Any], message_override: Optional[str] = None) -> None:\n+    def __init__(self, data: Dict[str, Any], error_type: Optional[str] = None,\n+                 message_override: Optional[str] = None) -> None:\n         self.data = data\n-        super().__init__(message_override or data[\"message\"])\n-\n-\n-class UnknownResponseError(ResponseError):\n-    def __init__(self, message: str) -> None:\n-        self.data = {}\n-        super(RPCError, self).__init__(message)\n-\n-\n-class InvalidRequest(ResponseError):\n-    def __init__(self, data: Dict[str, Any]) -> None:\n-        super().__init__(data, \", \".join(data.get(\"validationResults\", \"\")))\n+        msg = message_override or data[\"message\"]\n+        if error_type:\n+            msg = f\"{error_type}: {msg}\"\n+        super().__init__(msg)\n \n",
        "source_code_with_indent": "<DED>class ResponseError(RPCError):\n    <IND>def __init__(self, data: Dict[str, Any], message_override: Optional[str] = None) -> None:\n        <IND>self.data = data\n        super().__init__(message_override or data[\"message\"])\n\n\n<DED><DED>class UnknownResponseError(ResponseError):\n    <IND>def __init__(self, message: str) -> None:\n        <IND>self.data = {}\n        super(RPCError, self).__init__(message)\n\n\n<DED><DED>class InvalidRequest(ResponseError):\n    <IND>def __init__(self, data: Dict[str, Any]) -> None:\n        <IND>super().__init__(data, \", \".join(data.get(\"validationResults\", \"\")))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class ResponseError(RPCError):\n    <IND>def __init__(self, data: Dict[str, Any], error_type: Optional[str] = None,\n                 message_override: Optional[str] = None) -> None:\n        <IND>self.data = data\n        msg = message_override or data[\"message\"]\n        if error_type:\n            <IND>msg = f\"{error_type}: {msg}\"\n        <DED>super().__init__(msg)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "response_error_types = {\n    \"invalid_request\": InvalidRequest,\n    \"TimeoutException\": TimeoutException,\n",
        "source_code_len": 106,
        "target_code": "response_error_types = {\n    \"invalid_request\": RequestValidationFailure,\n    \"TimeoutException\": TimeoutException,\n",
        "target_code_len": 116,
        "diff_format": "@@ -63,3 +62,3 @@\n response_error_types = {\n-    \"invalid_request\": InvalidRequest,\n+    \"invalid_request\": RequestValidationFailure,\n     \"TimeoutException\": TimeoutException,\n",
        "source_code_with_indent": "<DED><DED>response_error_types = {\n    \"invalid_request\": InvalidRequest,\n    \"TimeoutException\": TimeoutException,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>response_error_types = {\n    \"invalid_request\": RequestValidationFailure,\n    \"TimeoutException\": TimeoutException,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        error_data = {\"message\": error_data}\n    return response_error_types.get(data[\"error_type\"], ResponseError)(error_data)\n",
        "source_code_len": 128,
        "target_code": "        error_data = {\"message\": error_data}\n    elif not isinstance(error_data, dict):\n        error_data = {\"message\": str(error_data)}\n    elif \"message\" not in error_data:\n        error_data[\"message\"] = \"<no message>\"\n    error_type = data[\"error_type\"]\n    try:\n        error_class = response_error_types[error_type]\n    except KeyError:\n        return ResponseError(data, error_type=error_type)\n    else:\n        return error_class(error_data)\n",
        "target_code_len": 451,
        "diff_format": "@@ -75,2 +76,12 @@\n         error_data = {\"message\": error_data}\n-    return response_error_types.get(data[\"error_type\"], ResponseError)(error_data)\n+    elif not isinstance(error_data, dict):\n+        error_data = {\"message\": str(error_data)}\n+    elif \"message\" not in error_data:\n+        error_data[\"message\"] = \"<no message>\"\n+    error_type = data[\"error_type\"]\n+    try:\n+        error_class = response_error_types[error_type]\n+    except KeyError:\n+        return ResponseError(data, error_type=error_type)\n+    else:\n+        return error_class(error_data)\n",
        "source_code_with_indent": "        <IND>error_data = {\"message\": error_data}\n    <DED>return response_error_types.get(data[\"error_type\"], ResponseError)(error_data)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>error_data = {\"message\": error_data}\n    <DED>elif not isinstance(error_data, dict):\n        <IND>error_data = {\"message\": str(error_data)}\n    <DED>elif \"message\" not in error_data:\n        <IND>error_data[\"message\"] = \"<no message>\"\n    <DED>error_type = data[\"error_type\"]\n    try:\n        <IND>error_class = response_error_types[error_type]\n    <DED>except KeyError:\n        <IND>return ResponseError(data, error_type=error_type)\n    <DED>else:\n        <IND>return error_class(error_data)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "mautrix/signal",
    "commit": "4f39108cd5dd04128882792fc2a1ec463d2bd055",
    "filename": "mausignald/errors.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/mautrix-signal/mausignald/errors.py",
    "file_hunks_size": 6,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "mausignald/errors.py:76:11 Call error [29]: `typing.Union[typing.Type[typing.Union[InvalidRequest, RequestValidationFailure, TimeoutException, UnknownIdentityKey, UserAlreadyExistsError]], typing.Type[ResponseError]]` is not a function.",
    "message": " `typing.Union[typing.Type[typing.Union[InvalidRequest, RequestValidationFailure, TimeoutException, UnknownIdentityKey, UserAlreadyExistsError]], typing.Type[ResponseError]]` is not a function.",
    "rule_id": "Call error [29]",
    "warning_line_no": 76,
    "warning_line": "    return response_error_types.get(data[\"error_type\"], ResponseError)(error_data)",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class ResponseError(RPCError):\n    def __init__(self, data: Dict[str, Any], message_override: Optional[str] = None) -> None:\n        self.data = data\n        super().__init__(message_override or data[\"message\"])\n\n\nclass UnknownResponseError(ResponseError):\n    def __init__(self, message: str) -> None:\n        self.data = {}\n        super(RPCError, self).__init__(message)\n\n\nclass InvalidRequest(ResponseError):\n    def __init__(self, data: Dict[str, Any]) -> None:\n        super().__init__(data, \", \".join(data.get(\"validationResults\", \"\")))\n\n",
        "source_code_len": 545,
        "target_code": "class ResponseError(RPCError):\n    def __init__(self, data: Dict[str, Any], error_type: Optional[str] = None,\n                 message_override: Optional[str] = None) -> None:\n        self.data = data\n        msg = message_override or data[\"message\"]\n        if error_type:\n            msg = f\"{error_type}: {msg}\"\n        super().__init__(msg)\n\n",
        "target_code_len": 346,
        "diff_format": "@@ -28,16 +28,9 @@\n class ResponseError(RPCError):\n-    def __init__(self, data: Dict[str, Any], message_override: Optional[str] = None) -> None:\n+    def __init__(self, data: Dict[str, Any], error_type: Optional[str] = None,\n+                 message_override: Optional[str] = None) -> None:\n         self.data = data\n-        super().__init__(message_override or data[\"message\"])\n-\n-\n-class UnknownResponseError(ResponseError):\n-    def __init__(self, message: str) -> None:\n-        self.data = {}\n-        super(RPCError, self).__init__(message)\n-\n-\n-class InvalidRequest(ResponseError):\n-    def __init__(self, data: Dict[str, Any]) -> None:\n-        super().__init__(data, \", \".join(data.get(\"validationResults\", \"\")))\n+        msg = message_override or data[\"message\"]\n+        if error_type:\n+            msg = f\"{error_type}: {msg}\"\n+        super().__init__(msg)\n \n",
        "source_code_with_indent": "<DED>class ResponseError(RPCError):\n    <IND>def __init__(self, data: Dict[str, Any], message_override: Optional[str] = None) -> None:\n        <IND>self.data = data\n        super().__init__(message_override or data[\"message\"])\n\n\n<DED><DED>class UnknownResponseError(ResponseError):\n    <IND>def __init__(self, message: str) -> None:\n        <IND>self.data = {}\n        super(RPCError, self).__init__(message)\n\n\n<DED><DED>class InvalidRequest(ResponseError):\n    <IND>def __init__(self, data: Dict[str, Any]) -> None:\n        <IND>super().__init__(data, \", \".join(data.get(\"validationResults\", \"\")))\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>class ResponseError(RPCError):\n    <IND>def __init__(self, data: Dict[str, Any], error_type: Optional[str] = None,\n                 message_override: Optional[str] = None) -> None:\n        <IND>self.data = data\n        msg = message_override or data[\"message\"]\n        if error_type:\n            <IND>msg = f\"{error_type}: {msg}\"\n        <DED>super().__init__(msg)\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "response_error_types = {\n    \"invalid_request\": InvalidRequest,\n    \"TimeoutException\": TimeoutException,\n",
        "source_code_len": 106,
        "target_code": "response_error_types = {\n    \"invalid_request\": RequestValidationFailure,\n    \"TimeoutException\": TimeoutException,\n",
        "target_code_len": 116,
        "diff_format": "@@ -63,3 +62,3 @@\n response_error_types = {\n-    \"invalid_request\": InvalidRequest,\n+    \"invalid_request\": RequestValidationFailure,\n     \"TimeoutException\": TimeoutException,\n",
        "source_code_with_indent": "<DED><DED>response_error_types = {\n    \"invalid_request\": InvalidRequest,\n    \"TimeoutException\": TimeoutException,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED><DED>response_error_types = {\n    \"invalid_request\": RequestValidationFailure,\n    \"TimeoutException\": TimeoutException,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        error_data = {\"message\": error_data}\n    return response_error_types.get(data[\"error_type\"], ResponseError)(error_data)\n",
        "source_code_len": 128,
        "target_code": "        error_data = {\"message\": error_data}\n    elif not isinstance(error_data, dict):\n        error_data = {\"message\": str(error_data)}\n    elif \"message\" not in error_data:\n        error_data[\"message\"] = \"<no message>\"\n    error_type = data[\"error_type\"]\n    try:\n        error_class = response_error_types[error_type]\n    except KeyError:\n        return ResponseError(data, error_type=error_type)\n    else:\n        return error_class(error_data)\n",
        "target_code_len": 451,
        "diff_format": "@@ -75,2 +76,12 @@\n         error_data = {\"message\": error_data}\n-    return response_error_types.get(data[\"error_type\"], ResponseError)(error_data)\n+    elif not isinstance(error_data, dict):\n+        error_data = {\"message\": str(error_data)}\n+    elif \"message\" not in error_data:\n+        error_data[\"message\"] = \"<no message>\"\n+    error_type = data[\"error_type\"]\n+    try:\n+        error_class = response_error_types[error_type]\n+    except KeyError:\n+        return ResponseError(data, error_type=error_type)\n+    else:\n+        return error_class(error_data)\n",
        "source_code_with_indent": "        <IND>error_data = {\"message\": error_data}\n    <DED>return response_error_types.get(data[\"error_type\"], ResponseError)(error_data)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        <IND>error_data = {\"message\": error_data}\n    <DED>elif not isinstance(error_data, dict):\n        <IND>error_data = {\"message\": str(error_data)}\n    <DED>elif \"message\" not in error_data:\n        <IND>error_data[\"message\"] = \"<no message>\"\n    <DED>error_type = data[\"error_type\"]\n    try:\n        <IND>error_class = response_error_types[error_type]\n    <DED>except KeyError:\n        <IND>return ResponseError(data, error_type=error_type)\n    <DED>else:\n        <IND>return error_class(error_data)\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]