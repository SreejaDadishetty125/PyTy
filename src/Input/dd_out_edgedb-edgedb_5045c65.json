[
  {
    "project": "edgedb/edgedb",
    "commit": "5045c65938e53ab6b770dfef062aa9d42314e648",
    "filename": "edb/edgeql/declarative.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/edgedb-edgedb/edb/edgeql/declarative.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "edb/edgeql/declarative.py:688:16 Incompatible parameter type [6]: Expected `qlast.Expr` for 1st parameter `expr` to call `FunctionDependency.__init__` but got `qlast.Base`.",
    "message": " Expected `qlast.Expr` for 1st parameter `expr` to call `FunctionDependency.__init__` but got `qlast.Base`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 688,
    "warning_line": "                expr=qlparser.parse(node.code.code),",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        # Need to parse the actual code string and use that as the dependency.\n        deps.append(\n            FunctionDependency(\n                expr=qlparser.parse(node.code.code),\n                params=params,\n            ),\n        )\n\n",
        "source_code_len": 242,
        "target_code": "        # Need to parse the actual code string and use that as the dependency.\n        fcode = qlparser.parse(node.code.code)\n        assert isinstance(fcode, qlast.Expr)\n        deps.append(FunctionDependency(expr=fcode, params=params))\n\n",
        "target_code_len": 239,
        "diff_format": "@@ -685,8 +685,5 @@\n         # Need to parse the actual code string and use that as the dependency.\n-        deps.append(\n-            FunctionDependency(\n-                expr=qlparser.parse(node.code.code),\n-                params=params,\n-            ),\n-        )\n+        fcode = qlparser.parse(node.code.code)\n+        assert isinstance(fcode, qlast.Expr)\n+        deps.append(FunctionDependency(expr=fcode, params=params))\n \n",
        "source_code_with_indent": "        # Need to parse the actual code string and use that as the dependency.\n        <IND>deps.append(\n            FunctionDependency(\n                expr=qlparser.parse(node.code.code),\n                params=params,\n            ),\n        )\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        # Need to parse the actual code string and use that as the dependency.\n        <IND>fcode = qlparser.parse(node.code.code)\n        assert isinstance(fcode, qlast.Expr)\n        deps.append(FunctionDependency(expr=fcode, params=params))\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]