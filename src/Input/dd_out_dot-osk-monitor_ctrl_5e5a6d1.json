[
  {
    "project": "dot-osk/monitor_ctrl",
    "commit": "5e5a6d151478e5dd5b0361ff401a96b609b98c84",
    "filename": "vcp.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/dot-osk-monitor_ctrl/vcp.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "vcp.py:301:59 Invalid type [31]: Expression `(int, int)` is not a valid type.",
    "message": " Expression `(int, int)` is not a valid type.",
    "rule_id": "Invalid type [31]",
    "warning_line_no": 301,
    "warning_line": "    def get_vcp_value_by_name(self, vcp_code_key: str) -> (int, int):",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    \n    def get_vcp_value_by_name(self, vcp_code_key: str) -> (int, int):\n        \"\"\"\n",
        "source_code_len": 87,
        "target_code": "    \n    def get_vcp_value_by_name(self, vcp_code_key: str) -> Tuple[int, int]:\n        \"\"\"\n",
        "target_code_len": 92,
        "diff_format": "@@ -300,3 +300,3 @@\n     \n-    def get_vcp_value_by_name(self, vcp_code_key: str) -> (int, int):\n+    def get_vcp_value_by_name(self, vcp_code_key: str) -> Tuple[int, int]:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    \n    <DED>def get_vcp_value_by_name(self, vcp_code_key: str) -> (int, int):\n        <IND>",
        "target_code_with_indent": "    \n    <DED>def get_vcp_value_by_name(self, vcp_code_key: str) -> Tuple[int, int]:\n        <IND>"
      }
    ]
  }
]