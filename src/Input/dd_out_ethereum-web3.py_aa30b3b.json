[
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "ens/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/ens/main.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "ens/main.py:295:67 Incompatible variable type [9]: parent_owned is declared to have type `str` but is used as type `None`.",
    "message": " parent_owned is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 295,
    "warning_line": "    def _assert_control(self, account: ChecksumAddress, name: str, parent_owned: str=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _assert_control(self, account: ChecksumAddress, name: str, parent_owned: str=None) -> None:\n        if not address_in(account, self.web3.eth.accounts):\n",
        "source_code_len": 161,
        "target_code": "\n    def _assert_control(self, account: ChecksumAddress, name: str,\n                        parent_owned: Optional[str] = None) -> None:\n        if not address_in(account, self.web3.eth.accounts):\n",
        "target_code_len": 197,
        "diff_format": "@@ -294,3 +294,4 @@\n \n-    def _assert_control(self, account: ChecksumAddress, name: str, parent_owned: str=None) -> None:\n+    def _assert_control(self, account: ChecksumAddress, name: str,\n+                        parent_owned: Optional[str] = None) -> None:\n         if not address_in(account, self.web3.eth.accounts):\n",
        "source_code_with_indent": "\n    <DED><DED>def _assert_control(self, account: ChecksumAddress, name: str, parent_owned: str=None) -> None:\n        <IND>if not address_in(account, self.web3.eth.accounts):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def _assert_control(self, account: ChecksumAddress, name: str,\n                        parent_owned: Optional[str] = None) -> None:\n        <IND>if not address_in(account, self.web3.eth.accounts):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/admin.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/admin.py:42:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/admin.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/admin.py:48:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/admin.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/admin.py:54:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/admin.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/admin.py:79:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/admin.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/admin.py:85:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:76:14 Incompatible variable type [9]: event_name is declared to have type `str` but is used as type `None`.",
    "message": " event_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 76,
    "warning_line": "    abi: ABI, event_name: str=None, argument_names: Sequence[str]=None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Any,\n    Sequence,\n",
        "source_code_len": 23,
        "target_code": "    Any,\n    Optional,\n    Sequence,\n",
        "target_code_len": 37,
        "diff_format": "@@ -4,2 +4,3 @@\n     Any,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    Any,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Any,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_matching_event_abi(\n    abi: ABI, event_name: str=None, argument_names: Sequence[str]=None\n) -> ABIEvent:\n",
        "source_code_len": 115,
        "target_code": "def find_matching_event_abi(\n    abi: ABI, event_name: Optional[str] = None,\n    argument_names: Optional[Sequence[str]] = None\n) -> ABIEvent:\n",
        "target_code_len": 143,
        "diff_format": "@@ -75,3 +76,4 @@\n def find_matching_event_abi(\n-    abi: ABI, event_name: str=None, argument_names: Sequence[str]=None\n+    abi: ABI, event_name: Optional[str] = None,\n+    argument_names: Optional[Sequence[str]] = None\n ) -> ABIEvent:\n",
        "source_code_with_indent": "<DED>def find_matching_event_abi(\n    abi: ABI, event_name: str=None, argument_names: Sequence[str]=None\n) -> ABIEvent:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def find_matching_event_abi(\n    abi: ABI, event_name: Optional[str] = None,\n    argument_names: Optional[Sequence[str]] = None\n) -> ABIEvent:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:76:36 Incompatible variable type [9]: argument_names is declared to have type `Sequence[str]` but is used as type `None`.",
    "message": " argument_names is declared to have type `Sequence[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 76,
    "warning_line": "    abi: ABI, event_name: str=None, argument_names: Sequence[str]=None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Any,\n    Sequence,\n",
        "source_code_len": 23,
        "target_code": "    Any,\n    Optional,\n    Sequence,\n",
        "target_code_len": 37,
        "diff_format": "@@ -4,2 +4,3 @@\n     Any,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    Any,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Any,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def find_matching_event_abi(\n    abi: ABI, event_name: str=None, argument_names: Sequence[str]=None\n) -> ABIEvent:\n",
        "source_code_len": 115,
        "target_code": "def find_matching_event_abi(\n    abi: ABI, event_name: Optional[str] = None,\n    argument_names: Optional[Sequence[str]] = None\n) -> ABIEvent:\n",
        "target_code_len": 143,
        "diff_format": "@@ -75,3 +76,4 @@\n def find_matching_event_abi(\n-    abi: ABI, event_name: str=None, argument_names: Sequence[str]=None\n+    abi: ABI, event_name: Optional[str] = None,\n+    argument_names: Optional[Sequence[str]] = None\n ) -> ABIEvent:\n",
        "source_code_with_indent": "<DED>def find_matching_event_abi(\n    abi: ABI, event_name: str=None, argument_names: Sequence[str]=None\n) -> ABIEvent:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def find_matching_event_abi(\n    abi: ABI, event_name: Optional[str] = None,\n    argument_names: Optional[Sequence[str]] = None\n) -> ABIEvent:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:104:4 Incompatible variable type [9]: fn_identifier is declared to have type `Union[Type[FallbackFn], Type[ReceiveFn], str]` but is used as type `None`.",
    "message": " fn_identifier is declared to have type `Union[Type[FallbackFn], Type[ReceiveFn], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 104,
    "warning_line": "    fn_identifier: Union[str, Type[FallbackFn], Type[ReceiveFn]]=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Any,\n    Sequence,\n",
        "source_code_len": 23,
        "target_code": "    Any,\n    Optional,\n    Sequence,\n",
        "target_code_len": 37,
        "diff_format": "@@ -4,2 +4,3 @@\n     Any,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    Any,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Any,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    abi_codec: ABICodec,\n    fn_identifier: Union[str, Type[FallbackFn], Type[ReceiveFn]]=None,\n    args: Sequence[Any]=None,\n    kwargs: Any=None,\n) -> ABIFunction:\n",
        "source_code_len": 166,
        "target_code": "    abi_codec: ABICodec,\n    fn_identifier: Optional[Union[str, Type[FallbackFn], Type[ReceiveFn]]] = None,\n    args: Optional[Sequence[Any]] = None,\n    kwargs: Optional[Any] = None,\n) -> ABIFunction:\n",
        "target_code_len": 202,
        "diff_format": "@@ -103,5 +105,5 @@\n     abi_codec: ABICodec,\n-    fn_identifier: Union[str, Type[FallbackFn], Type[ReceiveFn]]=None,\n-    args: Sequence[Any]=None,\n-    kwargs: Any=None,\n+    fn_identifier: Optional[Union[str, Type[FallbackFn], Type[ReceiveFn]]] = None,\n+    args: Optional[Sequence[Any]] = None,\n+    kwargs: Optional[Any] = None,\n ) -> ABIFunction:\n",
        "source_code_with_indent": "    abi_codec: ABICodec,\n    fn_identifier: Union[str, Type[FallbackFn], Type[ReceiveFn]]=None,\n    args: Sequence[Any]=None,\n    kwargs: Any=None,\n) -> ABIFunction:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    abi_codec: ABICodec,\n    fn_identifier: Optional[Union[str, Type[FallbackFn], Type[ReceiveFn]]] = None,\n    args: Optional[Sequence[Any]] = None,\n    kwargs: Optional[Any] = None,\n) -> ABIFunction:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:105:4 Incompatible variable type [9]: args is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "message": " args is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 105,
    "warning_line": "    args: Sequence[Any]=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Any,\n    Sequence,\n",
        "source_code_len": 23,
        "target_code": "    Any,\n    Optional,\n    Sequence,\n",
        "target_code_len": 37,
        "diff_format": "@@ -4,2 +4,3 @@\n     Any,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    Any,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Any,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    abi_codec: ABICodec,\n    fn_identifier: Union[str, Type[FallbackFn], Type[ReceiveFn]]=None,\n    args: Sequence[Any]=None,\n    kwargs: Any=None,\n) -> ABIFunction:\n",
        "source_code_len": 166,
        "target_code": "    abi_codec: ABICodec,\n    fn_identifier: Optional[Union[str, Type[FallbackFn], Type[ReceiveFn]]] = None,\n    args: Optional[Sequence[Any]] = None,\n    kwargs: Optional[Any] = None,\n) -> ABIFunction:\n",
        "target_code_len": 202,
        "diff_format": "@@ -103,5 +105,5 @@\n     abi_codec: ABICodec,\n-    fn_identifier: Union[str, Type[FallbackFn], Type[ReceiveFn]]=None,\n-    args: Sequence[Any]=None,\n-    kwargs: Any=None,\n+    fn_identifier: Optional[Union[str, Type[FallbackFn], Type[ReceiveFn]]] = None,\n+    args: Optional[Sequence[Any]] = None,\n+    kwargs: Optional[Any] = None,\n ) -> ABIFunction:\n",
        "source_code_with_indent": "    abi_codec: ABICodec,\n    fn_identifier: Union[str, Type[FallbackFn], Type[ReceiveFn]]=None,\n    args: Sequence[Any]=None,\n    kwargs: Any=None,\n) -> ABIFunction:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    abi_codec: ABICodec,\n    fn_identifier: Optional[Union[str, Type[FallbackFn], Type[ReceiveFn]]] = None,\n    args: Optional[Sequence[Any]] = None,\n    kwargs: Optional[Any] = None,\n) -> ABIFunction:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:203:4 Incompatible variable type [9]: contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "message": " contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 203,
    "warning_line": "    contract_abi: ABI=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:204:4 Incompatible variable type [9]: fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "message": " fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 204,
    "warning_line": "    fn_abi: ABIFunction=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:206:4 Incompatible variable type [9]: fn_args is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "message": " fn_args is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 206,
    "warning_line": "    fn_args: Sequence[Any]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:245:4 Incompatible variable type [9]: contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "message": " contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 245,
    "warning_line": "    contract_abi: ABI=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:246:4 Incompatible variable type [9]: fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "message": " fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 246,
    "warning_line": "    fn_abi: ABIFunction=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:247:4 Incompatible variable type [9]: args is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "message": " args is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 247,
    "warning_line": "    args: Sequence[Any]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:266:4 Incompatible variable type [9]: contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "message": " contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 266,
    "warning_line": "    contract_abi: ABI=None, fn_abi: ABIFunction=None"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:266:28 Incompatible variable type [9]: fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "message": " fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 266,
    "warning_line": "    contract_abi: ABI=None, fn_abi: ABIFunction=None"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:276:4 Incompatible variable type [9]: contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "message": " contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 276,
    "warning_line": "    contract_abi: ABI=None, fn_abi: ABIFunction=None"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:276:28 Incompatible variable type [9]: fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "message": " fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 276,
    "warning_line": "    contract_abi: ABI=None, fn_abi: ABIFunction=None"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:288:4 Incompatible variable type [9]: contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "message": " contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 288,
    "warning_line": "    contract_abi: ABI=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:289:4 Incompatible variable type [9]: fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "message": " fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 289,
    "warning_line": "    fn_abi: ABIFunction=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/contracts.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/contracts.py",
    "file_hunks_size": 9,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/contracts.py:290:4 Incompatible variable type [9]: args is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "message": " args is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 290,
    "warning_line": "    args: Sequence[Any]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/datatypes.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/datatypes.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/datatypes.py:44:8 Incompatible variable type [9]: normalizers is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " normalizers is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 44,
    "warning_line": "        normalizers: Dict[str, Any]=None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Dict,\n    Tuple,\n",
        "source_code_len": 21,
        "target_code": "    Dict,\n    Optional,\n    Tuple,\n",
        "target_code_len": 35,
        "diff_format": "@@ -4,2 +4,3 @@\n     Dict,\n+    Optional,\n     Tuple,\n",
        "source_code_with_indent": "    Dict,\n    Tuple,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Dict,\n    Optional,\n    Tuple,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        namespace: Dict[str, Any],\n        normalizers: Dict[str, Any]=None\n    ) -> Type['PropertyCheckingFactory']:\n",
        "source_code_len": 118,
        "target_code": "        namespace: Dict[str, Any],\n        normalizers: Optional[Dict[str, Any]] = None\n    ) -> Type['PropertyCheckingFactory']:\n",
        "target_code_len": 130,
        "diff_format": "@@ -43,3 +44,3 @@\n         namespace: Dict[str, Any],\n-        normalizers: Dict[str, Any]=None\n+        normalizers: Optional[Dict[str, Any]] = None\n     ) -> Type['PropertyCheckingFactory']:\n",
        "source_code_with_indent": "        namespace: Dict[str, Any],\n        normalizers: Dict[str, Any]=None\n    ) -> Type['PropertyCheckingFactory']:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        namespace: Dict[str, Any],\n        normalizers: Optional[Dict[str, Any]] = None\n    ) -> Type['PropertyCheckingFactory']:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/encoding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/encoding.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/encoding.py:59:55 Incompatible variable type [9]: force_size is declared to have type `int` but is used as type `None`.",
    "message": " force_size is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 59,
    "warning_line": "def hex_encode_abi_type(abi_type: TypeStr, value: Any, force_size: int=None) -> HexStr:"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/encoding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/encoding.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/encoding.py:201:57 Incompatible variable type [9]: cls is declared to have type `Type[json.encoder.JSONEncoder]` but is used as type `None`.",
    "message": " cls is declared to have type `Type[json.encoder.JSONEncoder]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 201,
    "warning_line": "    def _friendly_json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Iterable,\n    Sequence,\n",
        "source_code_len": 28,
        "target_code": "    Iterable,\n    Optional,\n    Sequence,\n",
        "target_code_len": 42,
        "diff_format": "@@ -8,2 +8,3 @@\n     Iterable,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    Iterable,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Iterable,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _friendly_json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:\n        try:\n",
        "source_code_len": 113,
        "target_code": "\n    def _friendly_json_encode(self, obj: Dict[Any, Any],\n                              cls: Optional[Type[json.JSONEncoder]] = None) -> str:\n        try:\n",
        "target_code_len": 155,
        "diff_format": "@@ -200,3 +202,4 @@\n \n-    def _friendly_json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:\n+    def _friendly_json_encode(self, obj: Dict[Any, Any],\n+                              cls: Optional[Type[json.JSONEncoder]] = None) -> str:\n         try:\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def _friendly_json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def _friendly_json_encode(self, obj: Dict[Any, Any],\n                              cls: Optional[Type[json.JSONEncoder]] = None) -> str:\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/encoding.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/encoding.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/encoding.py:225:47 Incompatible variable type [9]: cls is declared to have type `Type[json.encoder.JSONEncoder]` but is used as type `None`.",
    "message": " cls is declared to have type `Type[json.encoder.JSONEncoder]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 225,
    "warning_line": "    def json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Iterable,\n    Sequence,\n",
        "source_code_len": 28,
        "target_code": "    Iterable,\n    Optional,\n    Sequence,\n",
        "target_code_len": 42,
        "diff_format": "@@ -8,2 +8,3 @@\n     Iterable,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    Iterable,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Iterable,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _friendly_json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:\n        try:\n",
        "source_code_len": 113,
        "target_code": "\n    def _friendly_json_encode(self, obj: Dict[Any, Any],\n                              cls: Optional[Type[json.JSONEncoder]] = None) -> str:\n        try:\n",
        "target_code_len": 155,
        "diff_format": "@@ -200,3 +202,4 @@\n \n-    def _friendly_json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:\n+    def _friendly_json_encode(self, obj: Dict[Any, Any],\n+                              cls: Optional[Type[json.JSONEncoder]] = None) -> str:\n         try:\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def _friendly_json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def _friendly_json_encode(self, obj: Dict[Any, Any],\n                              cls: Optional[Type[json.JSONEncoder]] = None) -> str:\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:\n        try:\n",
        "source_code_len": 103,
        "target_code": "\n    def json_encode(self, obj: Dict[Any, Any],\n                    cls: Optional[Type[json.JSONEncoder]] = None) -> str:\n        try:\n",
        "target_code_len": 135,
        "diff_format": "@@ -224,3 +227,4 @@\n \n-    def json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:\n+    def json_encode(self, obj: Dict[Any, Any],\n+                    cls: Optional[Type[json.JSONEncoder]] = None) -> str:\n         try:\n",
        "source_code_with_indent": "\n    <DED><DED>def json_encode(self, obj: Dict[Any, Any], cls: Type[json.JSONEncoder]=None) -> str:\n        <IND>try:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED>def json_encode(self, obj: Dict[Any, Any],\n                    cls: Optional[Type[json.JSONEncoder]] = None) -> str:\n        <IND>try:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/events.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/events.py:93:46 Incompatible variable type [9]: arguments is declared to have type `Union[Dict[str, typing.Any], Sequence[typing.Any]]` but is used as type `None`.",
    "message": " arguments is declared to have type `Union[Dict[str, typing.Any], Sequence[typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 93,
    "warning_line": "    event_abi: ABIEvent, abi_codec: ABICodec, arguments: Union[Sequence[Any], Dict[str, Any]]=None"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/events.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/events.py:135:46 Incompatible variable type [9]: arguments is declared to have type `Union[Dict[str, typing.Any], Sequence[typing.Any]]` but is used as type `None`.",
    "message": " arguments is declared to have type `Union[Dict[str, typing.Any], Sequence[typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 135,
    "warning_line": "    event_abi: ABIEvent, abi_codec: ABICodec, arguments: Union[Sequence[Any], Dict[str, Any]]=None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def construct_event_data_set(\n    event_abi: ABIEvent, abi_codec: ABICodec, arguments: Union[Sequence[Any], Dict[str, Any]]=None\n) -> List[List[Optional[HexStr]]]:\n",
        "source_code_len": 164,
        "target_code": "def construct_event_data_set(\n    event_abi: ABIEvent, abi_codec: ABICodec,\n    arguments: Optional[Union[Sequence[Any], Dict[str, Any]]] = None\n) -> List[List[Optional[HexStr]]]:\n",
        "target_code_len": 180,
        "diff_format": "@@ -134,3 +135,4 @@\n def construct_event_data_set(\n-    event_abi: ABIEvent, abi_codec: ABICodec, arguments: Union[Sequence[Any], Dict[str, Any]]=None\n+    event_abi: ABIEvent, abi_codec: ABICodec,\n+    arguments: Optional[Union[Sequence[Any], Dict[str, Any]]] = None\n ) -> List[List[Optional[HexStr]]]:\n",
        "source_code_with_indent": "<DED>def construct_event_data_set(\n    event_abi: ABIEvent, abi_codec: ABICodec, arguments: Union[Sequence[Any], Dict[str, Any]]=None\n) -> List[List[Optional[HexStr]]]:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def construct_event_data_set(\n    event_abi: ABIEvent, abi_codec: ABICodec,\n    arguments: Optional[Union[Sequence[Any], Dict[str, Any]]] = None\n) -> List[List[Optional[HexStr]]]:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/events.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/events.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/events.py:311:56 Incompatible variable type [9]: formatter is declared to have type `EventData` but is used as type `None`.",
    "message": " formatter is declared to have type `EventData` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 311,
    "warning_line": "        self, event_abi: ABIEvent, abi_codec: ABICodec, formatter: EventData=None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, event_abi: ABIEvent, abi_codec: ABICodec, formatter: EventData=None\n    ) -> None:\n",
        "source_code_len": 115,
        "target_code": "    def __init__(\n        self, event_abi: ABIEvent, abi_codec: ABICodec,\n        formatter: Optional[EventData] = None\n    ) -> None:\n",
        "target_code_len": 135,
        "diff_format": "@@ -310,3 +313,4 @@\n     def __init__(\n-        self, event_abi: ABIEvent, abi_codec: ABICodec, formatter: EventData=None\n+        self, event_abi: ABIEvent, abi_codec: ABICodec,\n+        formatter: Optional[EventData] = None\n     ) -> None:\n",
        "source_code_with_indent": "    def __init__(\n        self, event_abi: ABIEvent, abi_codec: ABICodec, formatter: EventData=None\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self, event_abi: ABIEvent, abi_codec: ABICodec,\n        formatter: Optional[EventData] = None\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/filters.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/filters.py",
    "file_hunks_size": 2,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/filters.py:72:4 Incompatible variable type [9]: argument_filters is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " argument_filters is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 72,
    "warning_line": "    argument_filters: Dict[str, Any]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/filters.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/filters.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/filters.py:166:34 Incompatible variable type [9]: log_entries is declared to have type `Iterator[LogReceipt]` but is used as type `None`.",
    "message": " log_entries is declared to have type `Iterator[LogReceipt]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 166,
    "warning_line": "    def _format_log_entries(self, log_entries: Iterator[LogReceipt]=None) -> List[LogReceipt]:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def _format_log_entries(self, log_entries: Iterator[LogReceipt]=None) -> List[LogReceipt]:\n        if log_entries is None:\n",
        "source_code_len": 128,
        "target_code": "\n    def _format_log_entries(self,\n                            log_entries: Optional[Iterator[LogReceipt]] = None) -> List[LogReceipt]:\n        if log_entries is None:\n",
        "target_code_len": 168,
        "diff_format": "@@ -165,3 +165,4 @@\n \n-    def _format_log_entries(self, log_entries: Iterator[LogReceipt]=None) -> List[LogReceipt]:\n+    def _format_log_entries(self,\n+                            log_entries: Optional[Iterator[LogReceipt]] = None) -> List[LogReceipt]:\n         if log_entries is None:\n",
        "source_code_with_indent": "\n    <DED>def _format_log_entries(self, log_entries: Iterator[LogReceipt]=None) -> List[LogReceipt]:\n        <IND>if log_entries is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def _format_log_entries(self,\n                            log_entries: Optional[Iterator[LogReceipt]] = None) -> List[LogReceipt]:\n        <IND>if log_entries is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/miner.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/miner.py:54:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[web3.module.Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/miner.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/miner.py:60:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[web3.module.Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/miner.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/miner.py:66:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[web3.module.Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/personal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/personal.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/personal.py:47:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[web3.module.Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "message": " Expected `typing.Sequence[typing.Callable[[typing.Union[web3.module.Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 47,
    "warning_line": "    mungers=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/personal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/personal.py",
    "file_hunks_size": 1,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/personal.py:53:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[web3.module.Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "message": " Expected `typing.Sequence[typing.Callable[[typing.Union[web3.module.Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "rule_id": "Incompatible parameter type [6]",
    "warning_line_no": 53,
    "warning_line": "    mungers=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/personal.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/_utils/personal.py",
    "file_hunks_size": 1,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/_utils/personal.py:70:66 Incompatible variable type [9]: duration is declared to have type `int` but is used as type `None`.",
    "message": " duration is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 70,
    "warning_line": "    def __call__(self, account: ChecksumAddress, passphrase: str, duration: int=None) -> bool:",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "class UnlockAccountWrapper(Protocol):\n    def __call__(self, account: ChecksumAddress, passphrase: str, duration: int=None) -> bool:\n        pass\n",
        "source_code_len": 146,
        "target_code": "class UnlockAccountWrapper(Protocol):\n    def __call__(self, account: ChecksumAddress, passphrase: str,\n                 duration: Optional[int] = None) -> bool:\n        pass\n",
        "target_code_len": 175,
        "diff_format": "@@ -69,3 +69,4 @@\n class UnlockAccountWrapper(Protocol):\n-    def __call__(self, account: ChecksumAddress, passphrase: str, duration: int=None) -> bool:\n+    def __call__(self, account: ChecksumAddress, passphrase: str,\n+                 duration: Optional[int] = None) -> bool:\n         pass\n",
        "source_code_with_indent": "class UnlockAccountWrapper(Protocol):\n    <IND>def __call__(self, account: ChecksumAddress, passphrase: str, duration: int=None) -> bool:\n        <IND>pass\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "class UnlockAccountWrapper(Protocol):\n    <IND>def __call__(self, account: ChecksumAddress, passphrase: str,\n                 duration: Optional[int] = None) -> bool:\n        <IND>pass\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/shh.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/shh.py:37:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/shh.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/shh.py:43:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/shh.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/shh.py:67:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/shh.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/shh.py:109:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/txpool.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/txpool.py:19:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[web3.module.Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/txpool.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/txpool.py:25:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[web3.module.Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/_utils/txpool.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/_utils/txpool.py:31:4 Incompatible parameter type [6]: Expected `typing.Sequence[typing.Callable[[typing.Union[web3.module.Module, web3.module.ModuleV2], typing.Any], typing.Any]]` for 2nd parameter `mungers` to call `Method.__init__` but got `None`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/auto/infura/__init__.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/auto/infura/__init__.py:15:46 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Tuple[str, str]]` for 2nd positional only parameter to call `load_provider_from_uri` but got `typing.Optional[typing.Dict[str, typing.Tuple[str, str]]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/auto/infura/goerli.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/auto/infura/goerli.py:18:46 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Tuple[str, str]]` for 2nd positional only parameter to call `load_provider_from_uri` but got `typing.Optional[typing.Dict[str, typing.Tuple[str, str]]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/auto/infura/kovan.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/auto/infura/kovan.py:15:46 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Tuple[str, str]]` for 2nd positional only parameter to call `load_provider_from_uri` but got `typing.Optional[typing.Dict[str, typing.Tuple[str, str]]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/auto/infura/mainnet.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/auto/infura/mainnet.py:15:46 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Tuple[str, str]]` for 2nd positional only parameter to call `load_provider_from_uri` but got `typing.Optional[typing.Dict[str, typing.Tuple[str, str]]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/auto/infura/rinkeby.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/auto/infura/rinkeby.py:18:46 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Tuple[str, str]]` for 2nd positional only parameter to call `load_provider_from_uri` but got `typing.Optional[typing.Dict[str, typing.Tuple[str, str]]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/auto/infura/ropsten.py",
    "min_patch_found": false,
    "full_warning_msg": "web3/auto/infura/ropsten.py:15:46 Incompatible parameter type [6]: Expected `typing.Dict[str, typing.Tuple[str, str]]` for 2nd positional only parameter to call `load_provider_from_uri` but got `typing.Optional[typing.Dict[str, typing.Tuple[str, str]]]`.",
    "exception": "PatchSet should only have 1 Patch, but it has 0",
    "dd_fail": true
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:349:35 Incompatible variable type [9]: class_name is declared to have type `str` but is used as type `None`.",
    "message": " class_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 349,
    "warning_line": "    def factory(cls, web3: 'Web3', class_name: str=None, **kwargs: Any) -> 'Contract':",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def factory(cls, web3: 'Web3', class_name: str=None, **kwargs: Any) -> 'Contract':\n\n",
        "source_code_len": 105,
        "target_code": "    @classmethod\n    def factory(cls, web3: 'Web3', class_name: Optional[str] = None, **kwargs: Any) -> 'Contract':\n\n",
        "target_code_len": 117,
        "diff_format": "@@ -348,3 +348,3 @@\n     @classmethod\n-    def factory(cls, web3: 'Web3', class_name: str=None, **kwargs: Any) -> 'Contract':\n+    def factory(cls, web3: 'Web3', class_name: Optional[str] = None, **kwargs: Any) -> 'Contract':\n \n",
        "source_code_with_indent": "    <DED>@classmethod\n    def factory(cls, web3: 'Web3', class_name: str=None, **kwargs: Any) -> 'Contract':\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def factory(cls, web3: 'Web3', class_name: Optional[str] = None, **kwargs: Any) -> 'Contract':\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:512:13 Incompatible variable type [9]: fn_identifier is declared to have type `str` but is used as type `None`.",
    "message": " fn_identifier is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 512,
    "warning_line": "        cls, fn_identifier: str=None, args: Any=None, kwargs: Any=None"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:522:13 Incompatible variable type [9]: event_name is declared to have type `str` but is used as type `None`.",
    "message": " event_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 522,
    "warning_line": "        cls, event_name: str=None, argument_names: Sequence[str]=None"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:522:35 Incompatible variable type [9]: argument_names is declared to have type `Sequence[str]` but is used as type `None`.",
    "message": " argument_names is declared to have type `Sequence[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 522,
    "warning_line": "        cls, event_name: str=None, argument_names: Sequence[str]=None"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:683:31 Incompatible variable type [9]: forbidden_keys is declared to have type `Collection[str]` but is used as type `None`.",
    "message": " forbidden_keys is declared to have type `Collection[str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 683,
    "warning_line": "        transaction: TxParams, forbidden_keys: Collection[str]=None"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:694:44 Incompatible variable type [9]: Unable to unpack `None`, expected a tuple.",
    "message": " Unable to unpack `None`, expected a tuple.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 694,
    "warning_line": "        self, function: 'ContractFunction', normalizers: Tuple[Callable[..., Any], ...]=None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def __init__(\n        self, function: 'ContractFunction', normalizers: Tuple[Callable[..., Any], ...]=None\n    ) -> None:\n",
        "source_code_len": 126,
        "target_code": "    def __init__(\n        self, function: 'ContractFunction',\n        normalizers: Optional[Tuple[Callable[..., Any], ...]] = None\n    ) -> None:\n",
        "target_code_len": 146,
        "diff_format": "@@ -693,3 +697,4 @@\n     def __init__(\n-        self, function: 'ContractFunction', normalizers: Tuple[Callable[..., Any], ...]=None\n+        self, function: 'ContractFunction',\n+        normalizers: Optional[Tuple[Callable[..., Any], ...]] = None\n     ) -> None:\n",
        "source_code_with_indent": "    def __init__(\n        self, function: 'ContractFunction', normalizers: Tuple[Callable[..., Any], ...]=None\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    def __init__(\n        self, function: 'ContractFunction',\n        normalizers: Optional[Tuple[Callable[..., Any], ...]] = None\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:855:23 Incompatible variable type [9]: abi is declared to have type `ABIFunction` but is used as type `None`.",
    "message": " abi is declared to have type `ABIFunction` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 855,
    "warning_line": "    def __init__(self, abi: ABIFunction=None) -> None:"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1171:12 Incompatible variable type [9]: argument_filters is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " argument_filters is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1171,
    "warning_line": "            argument_filters: Dict[str, Any]=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, *,  # PEP 3102\n            argument_filters: Dict[str, Any]=None,\n            fromBlock: BlockIdentifier=None,\n            toBlock: BlockIdentifier=\"latest\",\n            address: ChecksumAddress=None,\n            topics: Sequence[Any]=None) -> LogFilter:\n        \"\"\"\n",
        "source_code_len": 285,
        "target_code": "            self, *,  # PEP 3102\n            argument_filters: Optional[Dict[str, Any]] = None,\n            fromBlock: Optional[BlockIdentifier] = None,\n            toBlock: BlockIdentifier=\"latest\",\n            address: Optional[ChecksumAddress] = None,\n            topics: Optional[Sequence[Any]] = None) -> LogFilter:\n        \"\"\"\n",
        "target_code_len": 333,
        "diff_format": "@@ -1170,7 +1176,7 @@\n             self, *,  # PEP 3102\n-            argument_filters: Dict[str, Any]=None,\n-            fromBlock: BlockIdentifier=None,\n+            argument_filters: Optional[Dict[str, Any]] = None,\n+            fromBlock: Optional[BlockIdentifier] = None,\n             toBlock: BlockIdentifier=\"latest\",\n-            address: ChecksumAddress=None,\n-            topics: Sequence[Any]=None) -> LogFilter:\n+            address: Optional[ChecksumAddress] = None,\n+            topics: Optional[Sequence[Any]] = None) -> LogFilter:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "            self, *,  # PEP 3102\n            argument_filters: Dict[str, Any]=None,\n            fromBlock: BlockIdentifier=None,\n            toBlock: BlockIdentifier=\"latest\",\n            address: ChecksumAddress=None,\n            topics: Sequence[Any]=None) -> LogFilter:\n        <IND>",
        "target_code_with_indent": "            self, *,  # PEP 3102\n            argument_filters: Optional[Dict[str, Any]] = None,\n            fromBlock: Optional[BlockIdentifier] = None,\n            toBlock: BlockIdentifier=\"latest\",\n            address: Optional[ChecksumAddress] = None,\n            topics: Optional[Sequence[Any]] = None) -> LogFilter:\n        <IND>"
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1175:12 Incompatible variable type [9]: topics is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "message": " topics is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1175,
    "warning_line": "            topics: Sequence[Any]=None) -> LogFilter:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "            self, *,  # PEP 3102\n            argument_filters: Dict[str, Any]=None,\n            fromBlock: BlockIdentifier=None,\n            toBlock: BlockIdentifier=\"latest\",\n            address: ChecksumAddress=None,\n            topics: Sequence[Any]=None) -> LogFilter:\n        \"\"\"\n",
        "source_code_len": 285,
        "target_code": "            self, *,  # PEP 3102\n            argument_filters: Optional[Dict[str, Any]] = None,\n            fromBlock: Optional[BlockIdentifier] = None,\n            toBlock: BlockIdentifier=\"latest\",\n            address: Optional[ChecksumAddress] = None,\n            topics: Optional[Sequence[Any]] = None) -> LogFilter:\n        \"\"\"\n",
        "target_code_len": 333,
        "diff_format": "@@ -1170,7 +1176,7 @@\n             self, *,  # PEP 3102\n-            argument_filters: Dict[str, Any]=None,\n-            fromBlock: BlockIdentifier=None,\n+            argument_filters: Optional[Dict[str, Any]] = None,\n+            fromBlock: Optional[BlockIdentifier] = None,\n             toBlock: BlockIdentifier=\"latest\",\n-            address: ChecksumAddress=None,\n-            topics: Sequence[Any]=None) -> LogFilter:\n+            address: Optional[ChecksumAddress] = None,\n+            topics: Optional[Sequence[Any]] = None) -> LogFilter:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "            self, *,  # PEP 3102\n            argument_filters: Dict[str, Any]=None,\n            fromBlock: BlockIdentifier=None,\n            toBlock: BlockIdentifier=\"latest\",\n            address: ChecksumAddress=None,\n            topics: Sequence[Any]=None) -> LogFilter:\n        <IND>",
        "target_code_with_indent": "            self, *,  # PEP 3102\n            argument_filters: Optional[Dict[str, Any]] = None,\n            fromBlock: Optional[BlockIdentifier] = None,\n            toBlock: BlockIdentifier=\"latest\",\n            address: Optional[ChecksumAddress] = None,\n            topics: Optional[Sequence[Any]] = None) -> LogFilter:\n        <IND>"
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1238:16 Incompatible variable type [9]: argument_filters is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "message": " argument_filters is declared to have type `Dict[str, typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1238,
    "warning_line": "                argument_filters: Dict[str, Any]=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    def getLogs(self,\n                argument_filters: Dict[str, Any]=None,\n                fromBlock: BlockIdentifier=None,\n                toBlock: BlockIdentifier=None,\n                blockHash: HexBytes=None) -> Iterable[EventData]:\n        \"\"\"Get events for this contract instance using eth_getLogs API.\n",
        "source_code_len": 311,
        "target_code": "    def getLogs(self,\n                argument_filters: Optional[Dict[str, Any]] = None,\n                fromBlock: Optional[BlockIdentifier] = None,\n                toBlock: Optional[BlockIdentifier] = None,\n                blockHash: Optional[HexBytes] = None) -> Iterable[EventData]:\n        \"\"\"Get events for this contract instance using eth_getLogs API.\n",
        "target_code_len": 359,
        "diff_format": "@@ -1237,6 +1243,6 @@\n     def getLogs(self,\n-                argument_filters: Dict[str, Any]=None,\n-                fromBlock: BlockIdentifier=None,\n-                toBlock: BlockIdentifier=None,\n-                blockHash: HexBytes=None) -> Iterable[EventData]:\n+                argument_filters: Optional[Dict[str, Any]] = None,\n+                fromBlock: Optional[BlockIdentifier] = None,\n+                toBlock: Optional[BlockIdentifier] = None,\n+                blockHash: Optional[HexBytes] = None) -> Iterable[EventData]:\n         \"\"\"Get events for this contract instance using eth_getLogs API.\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "    def getLogs(self,\n                argument_filters: Dict[str, Any]=None,\n                fromBlock: BlockIdentifier=None,\n                toBlock: BlockIdentifier=None,\n                blockHash: HexBytes=None) -> Iterable[EventData]:\n        <IND>",
        "target_code_with_indent": "    def getLogs(self,\n                argument_filters: Optional[Dict[str, Any]] = None,\n                fromBlock: Optional[BlockIdentifier] = None,\n                toBlock: Optional[BlockIdentifier] = None,\n                blockHash: Optional[HexBytes] = None) -> Iterable[EventData]:\n        <IND>"
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1471:8 Incompatible variable type [9]: contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "message": " contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1471,
    "warning_line": "        contract_abi: ABI=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1472:8 Incompatible variable type [9]: fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "message": " fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1472,
    "warning_line": "        fn_abi: ABIFunction=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1562:8 Incompatible variable type [9]: function_name is declared to have type `Union[Type[FallbackFn], Type[ReceiveFn], str]` but is used as type `None`.",
    "message": " function_name is declared to have type `Union[Type[FallbackFn], Type[ReceiveFn], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1562,
    "warning_line": "        function_name: FunctionIdentifier=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1564:8 Incompatible variable type [9]: contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "message": " contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1564,
    "warning_line": "        contract_abi: ABI=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1565:8 Incompatible variable type [9]: fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "message": " fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1565,
    "warning_line": "        fn_abi: ABIFunction=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1590:8 Incompatible variable type [9]: fn_identifier is declared to have type `Union[Type[FallbackFn], Type[ReceiveFn], str]` but is used as type `None`.",
    "message": " fn_identifier is declared to have type `Union[Type[FallbackFn], Type[ReceiveFn], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1590,
    "warning_line": "        fn_identifier: FunctionIdentifier=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1592:8 Incompatible variable type [9]: contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "message": " contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1592,
    "warning_line": "        contract_abi: ABI=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1593:8 Incompatible variable type [9]: fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "message": " fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1593,
    "warning_line": "        fn_abi: ABIFunction=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1619:8 Incompatible variable type [9]: function_name is declared to have type `Union[Type[FallbackFn], Type[ReceiveFn], str]` but is used as type `None`.",
    "message": " function_name is declared to have type `Union[Type[FallbackFn], Type[ReceiveFn], str]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1619,
    "warning_line": "        function_name: FunctionIdentifier=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1621:8 Incompatible variable type [9]: contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "message": " contract_abi is declared to have type `Sequence[Union[ABIEvent, ABIFunction]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1621,
    "warning_line": "        contract_abi: ABI=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/contract.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/contract.py",
    "file_hunks_size": 30,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/contract.py:1622:8 Incompatible variable type [9]: fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "message": " fn_abi is declared to have type `ABIFunction` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1622,
    "warning_line": "        fn_abi: ABIFunction=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/datastructures.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/datastructures.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/datastructures.py:147:55 Incompatible variable type [9]: layer is declared to have type `int` but is used as type `None`.",
    "message": " layer is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 147,
    "warning_line": "    def inject(self, element: TValue, name: TKey=None, layer: int=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    MutableMapping,\n    Sequence,\n",
        "source_code_len": 34,
        "target_code": "    MutableMapping,\n    Optional,\n    Sequence,\n",
        "target_code_len": 48,
        "diff_format": "@@ -14,2 +14,3 @@\n     MutableMapping,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    MutableMapping,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    MutableMapping,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def add(self, element: TValue, name: TKey=None) -> None:\n        if name is None:\n",
        "source_code_len": 87,
        "target_code": "\n    def add(self, element: TValue, name: Optional[TKey] = None) -> None:\n        if name is None:\n",
        "target_code_len": 99,
        "diff_format": "@@ -134,3 +135,3 @@\n \n-    def add(self, element: TValue, name: TKey=None) -> None:\n+    def add(self, element: TValue, name: Optional[TKey] = None) -> None:\n         if name is None:\n",
        "source_code_with_indent": "\n    <DED><DED><DED>def add(self, element: TValue, name: TKey=None) -> None:\n        <IND>if name is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED><DED><DED>def add(self, element: TValue, name: Optional[TKey] = None) -> None:\n        <IND>if name is None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def inject(self, element: TValue, name: TKey=None, layer: int=None) -> None:\n        \"\"\"\n",
        "source_code_len": 94,
        "target_code": "\n    def inject(self, element: TValue, name: Optional[TKey] = None,\n               layer: Optional[int] = None) -> None:\n        \"\"\"\n",
        "target_code_len": 133,
        "diff_format": "@@ -146,3 +147,4 @@\n \n-    def inject(self, element: TValue, name: TKey=None, layer: int=None) -> None:\n+    def inject(self, element: TValue, name: Optional[TKey] = None,\n+               layer: Optional[int] = None) -> None:\n         \"\"\"\n",
        "source_code_with_indent_exact_match": false,
        "target_code_with_indent_exact_match": false,
        "source_code_with_indent": "\n    <DED>def inject(self, element: TValue, name: TKey=None, layer: int=None) -> None:\n        <IND>",
        "target_code_with_indent": "\n    <DED>def inject(self, element: TValue, name: Optional[TKey] = None,\n               layer: Optional[int] = None) -> None:\n        <IND>"
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/main.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/main.py:167:8 Incompatible variable type [9]: provider is declared to have type `web3.providers.base.BaseProvider` but is used as type `None`.",
    "message": " provider is declared to have type `web3.providers.base.BaseProvider` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 167,
    "warning_line": "        provider: BaseProvider=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/main.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/main.py:168:8 Incompatible variable type [9]: middlewares is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "message": " middlewares is declared to have type `Sequence[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 168,
    "warning_line": "        middlewares: Sequence[Any]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/main.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/main.py:169:8 Incompatible variable type [9]: modules is declared to have type `Dict[str, Sequence[typing.Any]]` but is used as type `None`.",
    "message": " modules is declared to have type `Dict[str, Sequence[typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 169,
    "warning_line": "        modules: Dict[str, Sequence[Any]]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/main.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/main.py:207:41 Incompatible variable type [9]: text is declared to have type `str` but is used as type `None`.",
    "message": " text is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 207,
    "warning_line": "    def sha3(primitive: Primitives=None, text: str=None, hexstr: HexStr=None) -> bytes:"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/main.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/main.py:212:43 Incompatible variable type [9]: text is declared to have type `str` but is used as type `None`.",
    "message": " text is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 212,
    "warning_line": "    def keccak(primitive: Primitives=None, text: str=None, hexstr: HexStr=None) -> bytes:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": ")\nfrom typing import Any, cast, Dict, List, Sequence, TYPE_CHECKING\n\n",
        "source_code_len": 69,
        "target_code": ")\nfrom typing import Any, cast, Dict, List, Optional, Sequence, TYPE_CHECKING\n\n",
        "target_code_len": 79,
        "diff_format": "@@ -20,3 +20,3 @@\n )\n-from typing import Any, cast, Dict, List, Sequence, TYPE_CHECKING\n+from typing import Any, cast, Dict, List, Optional, Sequence, TYPE_CHECKING\n \n",
        "source_code_with_indent": ")\nfrom typing import Any, cast, Dict, List, Sequence, TYPE_CHECKING\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": ")\nfrom typing import Any, cast, Dict, List, Optional, Sequence, TYPE_CHECKING\n\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @apply_to_return_value(HexBytes)\n    def keccak(primitive: Primitives=None, text: str=None, hexstr: HexStr=None) -> bytes:\n        if isinstance(primitive, (bytes, int, type(None))):\n",
        "source_code_len": 187,
        "target_code": "    @apply_to_return_value(HexBytes)\n    def keccak(primitive: Optional[Primitives] = None, text: Optional[str] = None,\n               hexstr: Optional[HexStr] = None) -> bytes:\n        if isinstance(primitive, (bytes, int, type(None))):\n",
        "target_code_len": 238,
        "diff_format": "@@ -211,3 +212,4 @@\n     @apply_to_return_value(HexBytes)\n-    def keccak(primitive: Primitives=None, text: str=None, hexstr: HexStr=None) -> bytes:\n+    def keccak(primitive: Optional[Primitives] = None, text: Optional[str] = None,\n+               hexstr: Optional[HexStr] = None) -> bytes:\n         if isinstance(primitive, (bytes, int, type(None))):\n",
        "source_code_with_indent": "    @apply_to_return_value(HexBytes)\n    def keccak(primitive: Primitives=None, text: str=None, hexstr: HexStr=None) -> bytes:\n        <IND>if isinstance(primitive, (bytes, int, type(None))):\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    @apply_to_return_value(HexBytes)\n    def keccak(primitive: Optional[Primitives] = None, text: Optional[str] = None,\n               hexstr: Optional[HexStr] = None) -> bytes:\n        <IND>if isinstance(primitive, (bytes, int, type(None))):\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/manager.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/manager.py:72:8 Incompatible variable type [9]: provider is declared to have type `web3.providers.base.BaseProvider` but is used as type `None`.",
    "message": " provider is declared to have type `web3.providers.base.BaseProvider` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 72,
    "warning_line": "        provider: BaseProvider=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        web3: 'Web3',\n        provider: BaseProvider=None,\n        middlewares: Sequence[Tuple[Middleware, str]]=None\n    ) -> None:\n",
        "source_code_len": 133,
        "target_code": "        web3: 'Web3',\n        provider: Optional[BaseProvider] = None,\n        middlewares: Optional[Sequence[Tuple[Middleware, str]]] = None\n    ) -> None:\n",
        "target_code_len": 157,
        "diff_format": "@@ -71,4 +71,4 @@\n         web3: 'Web3',\n-        provider: BaseProvider=None,\n-        middlewares: Sequence[Tuple[Middleware, str]]=None\n+        provider: Optional[BaseProvider] = None,\n+        middlewares: Optional[Sequence[Tuple[Middleware, str]]] = None\n     ) -> None:\n",
        "source_code_with_indent": "        web3: 'Web3',\n        provider: BaseProvider=None,\n        middlewares: Sequence[Tuple[Middleware, str]]=None\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        web3: 'Web3',\n        provider: Optional[BaseProvider] = None,\n        middlewares: Optional[Sequence[Tuple[Middleware, str]]] = None\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/manager.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/manager.py:73:8 Incompatible variable type [9]: middlewares is declared to have type `Sequence[Tuple[typing.Callable[[typing.Callable[[RPCEndpoint, typing.Any], RPCResponse], web3.main.Web3], typing.Any], str]]` but is used as type `None`.",
    "message": " middlewares is declared to have type `Sequence[Tuple[typing.Callable[[typing.Callable[[RPCEndpoint, typing.Any], RPCResponse], web3.main.Web3], typing.Any], str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 73,
    "warning_line": "        middlewares: Sequence[Tuple[Middleware, str]]=None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        web3: 'Web3',\n        provider: BaseProvider=None,\n        middlewares: Sequence[Tuple[Middleware, str]]=None\n    ) -> None:\n",
        "source_code_len": 133,
        "target_code": "        web3: 'Web3',\n        provider: Optional[BaseProvider] = None,\n        middlewares: Optional[Sequence[Tuple[Middleware, str]]] = None\n    ) -> None:\n",
        "target_code_len": 157,
        "diff_format": "@@ -71,4 +71,4 @@\n         web3: 'Web3',\n-        provider: BaseProvider=None,\n-        middlewares: Sequence[Tuple[Middleware, str]]=None\n+        provider: Optional[BaseProvider] = None,\n+        middlewares: Optional[Sequence[Tuple[Middleware, str]]] = None\n     ) -> None:\n",
        "source_code_with_indent": "        web3: 'Web3',\n        provider: BaseProvider=None,\n        middlewares: Sequence[Tuple[Middleware, str]]=None\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        web3: 'Web3',\n        provider: Optional[BaseProvider] = None,\n        middlewares: Optional[Sequence[Tuple[Middleware, str]]] = None\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/manager.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/manager.py:144:8 Incompatible variable type [9]: error_formatters is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "message": " error_formatters is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 144,
    "warning_line": "        error_formatters: Callable[..., Any]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/manager.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/manager.py:161:8 Incompatible variable type [9]: error_formatters is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "message": " error_formatters is declared to have type `typing.Callable[..., typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 161,
    "warning_line": "        error_formatters: Callable[..., Any]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/manager.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/manager.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/manager.py:187:49 Incompatible variable type [9]: timeout is declared to have type `float` but is used as type `None`.",
    "message": " timeout is declared to have type `float` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 187,
    "warning_line": "    def receive_blocking(self, request_id: UUID, timeout: float=None) -> Any:"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/method.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/method.py:116:12 Incompatible variable type [9]: json_rpc_method is declared to have type `RPCEndpoint` but is used as type `None`.",
    "message": " json_rpc_method is declared to have type `RPCEndpoint` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 116,
    "warning_line": "            json_rpc_method: RPCEndpoint=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/method.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/method.py:117:12 Incompatible variable type [9]: mungers is declared to have type `Sequence[typing.Callable[[Union[Module, ModuleV2], typing.Any], typing.Any]]` but is used as type `None`.",
    "message": " mungers is declared to have type `Sequence[typing.Callable[[Union[Module, ModuleV2], typing.Any], typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 117,
    "warning_line": "            mungers: Sequence[Munger]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/method.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/method.py:118:12 Incompatible variable type [9]: request_formatters is declared to have type `typing.Callable[..., Variable[TReturn]]` but is used as type `None`.",
    "message": " request_formatters is declared to have type `typing.Callable[..., Variable[TReturn]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 118,
    "warning_line": "            request_formatters: Callable[..., TReturn]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/method.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/method.py:119:12 Incompatible variable type [9]: result_formatters is declared to have type `typing.Callable[..., Variable[TReturn]]` but is used as type `None`.",
    "message": " result_formatters is declared to have type `typing.Callable[..., Variable[TReturn]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 119,
    "warning_line": "            result_formatters: Callable[..., TReturn]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/method.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/method.py:120:12 Incompatible variable type [9]: error_formatters is declared to have type `typing.Callable[..., Variable[TReturn]]` but is used as type `None`.",
    "message": " error_formatters is declared to have type `typing.Callable[..., Variable[TReturn]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 120,
    "warning_line": "            error_formatters: Callable[..., TReturn]=None,"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/method.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/method.py:121:12 Incompatible variable type [9]: web3 is declared to have type `web3.main.Web3` but is used as type `None`.",
    "message": " web3 is declared to have type `web3.main.Web3` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 121,
    "warning_line": "            web3: \"Web3\"=None):"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/method.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/method.py:129:22 Incompatible variable type [9]: obj is declared to have type `ModuleV2` but is used as type `None`.",
    "message": " obj is declared to have type `ModuleV2` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 129,
    "warning_line": "    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    List,\n    Sequence,\n",
        "source_code_len": 24,
        "target_code": "    List,\n    Optional,\n    Sequence,\n",
        "target_code_len": 38,
        "diff_format": "@@ -8,2 +8,3 @@\n     List,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    List,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    List,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n        if obj is None:\n",
        "source_code_len": 112,
        "target_code": "\n    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n        if obj is None:\n",
        "target_code_len": 152,
        "diff_format": "@@ -128,3 +129,4 @@\n \n-    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n+    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n+                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n         if obj is None:\n",
        "source_code_with_indent": "\n    <DED>def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n        <IND>if obj is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n        <IND>if obj is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/method.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/method.py:129:44 Incompatible variable type [9]: obj_type is declared to have type `Type[ModuleV2]` but is used as type `None`.",
    "message": " obj_type is declared to have type `Type[ModuleV2]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 129,
    "warning_line": "    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    List,\n    Sequence,\n",
        "source_code_len": 24,
        "target_code": "    List,\n    Optional,\n    Sequence,\n",
        "target_code_len": 38,
        "diff_format": "@@ -8,2 +8,3 @@\n     List,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    List,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    List,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n        if obj is None:\n",
        "source_code_len": 112,
        "target_code": "\n    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n        if obj is None:\n",
        "target_code_len": 152,
        "diff_format": "@@ -128,3 +129,4 @@\n \n-    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n+    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n+                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n         if obj is None:\n",
        "source_code_with_indent": "\n    <DED>def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n        <IND>if obj is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n        <IND>if obj is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/method.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/method.py:184:22 Incompatible variable type [9]: obj is declared to have type `ModuleV2` but is used as type `None`.",
    "message": " obj is declared to have type `ModuleV2` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 184,
    "warning_line": "    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> Any:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    List,\n    Sequence,\n",
        "source_code_len": 24,
        "target_code": "    List,\n    Optional,\n    Sequence,\n",
        "target_code_len": 38,
        "diff_format": "@@ -8,2 +8,3 @@\n     List,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    List,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    List,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n        if obj is None:\n",
        "source_code_len": 112,
        "target_code": "\n    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n        if obj is None:\n",
        "target_code_len": 152,
        "diff_format": "@@ -128,3 +129,4 @@\n \n-    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n+    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n+                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n         if obj is None:\n",
        "source_code_with_indent": "\n    <DED>def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n        <IND>if obj is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n        <IND>if obj is None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> Any:\n        warnings.warn(\n",
        "source_code_len": 109,
        "target_code": "\n    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> Any:\n        warnings.warn(\n",
        "target_code_len": 149,
        "diff_format": "@@ -183,3 +185,4 @@\n \n-    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> Any:\n+    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n+                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> Any:\n         warnings.warn(\n",
        "source_code_with_indent": "\n    <DED>def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> Any:\n        <IND>warnings.warn(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> Any:\n        <IND>warnings.warn(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/method.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/method.py",
    "file_hunks_size": 4,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/method.py:184:44 Incompatible variable type [9]: obj_type is declared to have type `Type[ModuleV2]` but is used as type `None`.",
    "message": " obj_type is declared to have type `Type[ModuleV2]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 184,
    "warning_line": "    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> Any:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    List,\n    Sequence,\n",
        "source_code_len": 24,
        "target_code": "    List,\n    Optional,\n    Sequence,\n",
        "target_code_len": 38,
        "diff_format": "@@ -8,2 +8,3 @@\n     List,\n+    Optional,\n     Sequence,\n",
        "source_code_with_indent": "    List,\n    Sequence,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    List,\n    Optional,\n    Sequence,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n        if obj is None:\n",
        "source_code_len": 112,
        "target_code": "\n    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n        if obj is None:\n",
        "target_code_len": 152,
        "diff_format": "@@ -128,3 +129,4 @@\n \n-    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n+    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n+                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n         if obj is None:\n",
        "source_code_with_indent": "\n    <DED>def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> TFunc:\n        <IND>if obj is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> TFunc:\n        <IND>if obj is None:\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> Any:\n        warnings.warn(\n",
        "source_code_len": 109,
        "target_code": "\n    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> Any:\n        warnings.warn(\n",
        "target_code_len": 149,
        "diff_format": "@@ -183,3 +185,4 @@\n \n-    def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> Any:\n+    def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n+                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> Any:\n         warnings.warn(\n",
        "source_code_with_indent": "\n    <DED>def __get__(self, obj: \"ModuleV2\"=None, obj_type: Type[\"ModuleV2\"]=None) -> Any:\n        <IND>warnings.warn(\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def __get__(self, obj: Optional[\"ModuleV2\"] = None,\n                obj_type: Optional[Type[\"ModuleV2\"]] = None) -> Any:\n        <IND>warnings.warn(\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/middleware/formatting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/middleware/formatting.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/middleware/formatting.py:26:4 Incompatible variable type [9]: request_formatters is declared to have type `typing.Dict[RPCEndpoint, typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "message": " request_formatters is declared to have type `typing.Dict[RPCEndpoint, typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 26,
    "warning_line": "    request_formatters: Formatters=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Callable,\n)\n",
        "source_code_len": 16,
        "target_code": "    Callable,\n    Optional,\n)\n",
        "target_code_len": 30,
        "diff_format": "@@ -4,2 +4,3 @@\n     Callable,\n+    Optional,\n )\n",
        "source_code_with_indent": "    Callable,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Callable,\n    Optional,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def construct_formatting_middleware(\n    request_formatters: Formatters=None,\n    result_formatters: Formatters=None,\n    error_formatters: Formatters=None\n) -> Middleware:\n",
        "source_code_len": 173,
        "target_code": "def construct_formatting_middleware(\n    request_formatters: Optional[Formatters] = None,\n    result_formatters: Optional[Formatters] = None,\n    error_formatters: Optional[Formatters] = None\n) -> Middleware:\n",
        "target_code_len": 209,
        "diff_format": "@@ -25,5 +26,5 @@\n def construct_formatting_middleware(\n-    request_formatters: Formatters=None,\n-    result_formatters: Formatters=None,\n-    error_formatters: Formatters=None\n+    request_formatters: Optional[Formatters] = None,\n+    result_formatters: Optional[Formatters] = None,\n+    error_formatters: Optional[Formatters] = None\n ) -> Middleware:\n",
        "source_code_with_indent": "<DED>def construct_formatting_middleware(\n    request_formatters: Formatters=None,\n    result_formatters: Formatters=None,\n    error_formatters: Formatters=None\n) -> Middleware:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def construct_formatting_middleware(\n    request_formatters: Optional[Formatters] = None,\n    result_formatters: Optional[Formatters] = None,\n    error_formatters: Optional[Formatters] = None\n) -> Middleware:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/middleware/formatting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/middleware/formatting.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/middleware/formatting.py:27:4 Incompatible variable type [9]: result_formatters is declared to have type `typing.Dict[RPCEndpoint, typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "message": " result_formatters is declared to have type `typing.Dict[RPCEndpoint, typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 27,
    "warning_line": "    result_formatters: Formatters=None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Callable,\n)\n",
        "source_code_len": 16,
        "target_code": "    Callable,\n    Optional,\n)\n",
        "target_code_len": 30,
        "diff_format": "@@ -4,2 +4,3 @@\n     Callable,\n+    Optional,\n )\n",
        "source_code_with_indent": "    Callable,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Callable,\n    Optional,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def construct_formatting_middleware(\n    request_formatters: Formatters=None,\n    result_formatters: Formatters=None,\n    error_formatters: Formatters=None\n) -> Middleware:\n",
        "source_code_len": 173,
        "target_code": "def construct_formatting_middleware(\n    request_formatters: Optional[Formatters] = None,\n    result_formatters: Optional[Formatters] = None,\n    error_formatters: Optional[Formatters] = None\n) -> Middleware:\n",
        "target_code_len": 209,
        "diff_format": "@@ -25,5 +26,5 @@\n def construct_formatting_middleware(\n-    request_formatters: Formatters=None,\n-    result_formatters: Formatters=None,\n-    error_formatters: Formatters=None\n+    request_formatters: Optional[Formatters] = None,\n+    result_formatters: Optional[Formatters] = None,\n+    error_formatters: Optional[Formatters] = None\n ) -> Middleware:\n",
        "source_code_with_indent": "<DED>def construct_formatting_middleware(\n    request_formatters: Formatters=None,\n    result_formatters: Formatters=None,\n    error_formatters: Formatters=None\n) -> Middleware:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def construct_formatting_middleware(\n    request_formatters: Optional[Formatters] = None,\n    result_formatters: Optional[Formatters] = None,\n    error_formatters: Optional[Formatters] = None\n) -> Middleware:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/middleware/formatting.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/middleware/formatting.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/middleware/formatting.py:28:4 Incompatible variable type [9]: error_formatters is declared to have type `typing.Dict[RPCEndpoint, typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "message": " error_formatters is declared to have type `typing.Dict[RPCEndpoint, typing.Callable[..., typing.Any]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 28,
    "warning_line": "    error_formatters: Formatters=None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Callable,\n)\n",
        "source_code_len": 16,
        "target_code": "    Callable,\n    Optional,\n)\n",
        "target_code_len": 30,
        "diff_format": "@@ -4,2 +4,3 @@\n     Callable,\n+    Optional,\n )\n",
        "source_code_with_indent": "    Callable,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Callable,\n    Optional,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "def construct_formatting_middleware(\n    request_formatters: Formatters=None,\n    result_formatters: Formatters=None,\n    error_formatters: Formatters=None\n) -> Middleware:\n",
        "source_code_len": 173,
        "target_code": "def construct_formatting_middleware(\n    request_formatters: Optional[Formatters] = None,\n    result_formatters: Optional[Formatters] = None,\n    error_formatters: Optional[Formatters] = None\n) -> Middleware:\n",
        "target_code_len": 209,
        "diff_format": "@@ -25,5 +26,5 @@\n def construct_formatting_middleware(\n-    request_formatters: Formatters=None,\n-    result_formatters: Formatters=None,\n-    error_formatters: Formatters=None\n+    request_formatters: Optional[Formatters] = None,\n+    result_formatters: Optional[Formatters] = None,\n+    error_formatters: Optional[Formatters] = None\n ) -> Middleware:\n",
        "source_code_with_indent": "<DED>def construct_formatting_middleware(\n    request_formatters: Formatters=None,\n    result_formatters: Formatters=None,\n    error_formatters: Formatters=None\n) -> Middleware:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "<DED>def construct_formatting_middleware(\n    request_formatters: Optional[Formatters] = None,\n    result_formatters: Optional[Formatters] = None,\n    error_formatters: Optional[Formatters] = None\n) -> Middleware:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/module.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/module.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/module.py:68:36 Incompatible variable type [9]: module_name is declared to have type `str` but is used as type `None`.",
    "message": " module_name is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 68,
    "warning_line": "    def attach(cls, target: \"Web3\", module_name: str=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Coroutine,\n    Union,\n",
        "source_code_len": 26,
        "target_code": "    Coroutine,\n    Optional,\n    Union,\n",
        "target_code_len": 40,
        "diff_format": "@@ -5,2 +5,3 @@\n     Coroutine,\n+    Optional,\n     Union,\n",
        "source_code_with_indent": "    Coroutine,\n    Union,\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Coroutine,\n    Optional,\n    Union,\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    @classmethod\n    def attach(cls, target: \"Web3\", module_name: str=None) -> None:\n        if not module_name:\n",
        "source_code_len": 113,
        "target_code": "    @classmethod\n    def attach(cls, target: \"Web3\", module_name: Optional[str] = None) -> None:\n        if not module_name:\n",
        "target_code_len": 125,
        "diff_format": "@@ -67,3 +68,3 @@\n     @classmethod\n-    def attach(cls, target: \"Web3\", module_name: str=None) -> None:\n+    def attach(cls, target: \"Web3\", module_name: Optional[str] = None) -> None:\n         if not module_name:\n",
        "source_code_with_indent": "    <DED>@classmethod\n    def attach(cls, target: \"Web3\", module_name: str=None) -> None:\n        <IND>if not module_name:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    <DED>@classmethod\n    def attach(cls, target: \"Web3\", module_name: Optional[str] = None) -> None:\n        <IND>if not module_name:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/providers/auto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/providers/auto.py",
    "file_hunks_size": 3,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/providers/auto.py:47:21 Incompatible variable type [9]: headers is declared to have type `Dict[str, Tuple[str, str]]` but is used as type `None`.",
    "message": " headers is declared to have type `Dict[str, Tuple[str, str]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 47,
    "warning_line": "    uri_string: URI, headers: Dict[str, Tuple[str, str]]=None"
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/providers/auto.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/providers/auto.py",
    "file_hunks_size": 3,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": true,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/providers/auto.py:77:8 Incompatible variable type [9]: potential_providers is declared to have type `Sequence[Union[typing.Callable[..., web3.providers.base.BaseProvider], Type[web3.providers.base.BaseProvider]]]` but is used as type `None`.",
    "message": " potential_providers is declared to have type `Sequence[Union[typing.Callable[..., web3.providers.base.BaseProvider], Type[web3.providers.base.BaseProvider]]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 77,
    "warning_line": "        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None",
    "min_patch": [
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n    ) -> None:\n",
        "source_code_len": 128,
        "target_code": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n                                      Type[BaseProvider]]]] = None\n    ) -> None:\n",
        "target_code_len": 178,
        "diff_format": "@@ -76,3 +76,4 @@\n         self,\n-        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n+        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n+                                      Type[BaseProvider]]]] = None\n     ) -> None:\n",
        "source_code_with_indent": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n                                      Type[BaseProvider]]]] = None\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/providers/eth_tester/main.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/providers/eth_tester/main.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/providers/eth_tester/main.py:57:8 Incompatible variable type [9]: api_endpoints is declared to have type `Dict[str, Dict[str, typing.Callable[..., RPCResponse]]]` but is used as type `None`.",
    "message": " api_endpoints is declared to have type `Dict[str, Dict[str, typing.Callable[..., RPCResponse]]]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 57,
    "warning_line": "        api_endpoints: Dict[str, Dict[str, Callable[..., RPCResponse]]]=None",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "    Dict,\n)\n",
        "source_code_len": 12,
        "target_code": "    Dict,\n    Optional,\n)\n",
        "target_code_len": 26,
        "diff_format": "@@ -5,2 +5,3 @@\n     Dict,\n+    Optional,\n )\n",
        "source_code_with_indent": "    Dict,\n)\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    Dict,\n    Optional,\n)\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "        self,\n        ethereum_tester: \"EthereumTester\"=None,\n        api_endpoints: Dict[str, Dict[str, Callable[..., RPCResponse]]]=None\n    ) -> None:\n",
        "source_code_len": 154,
        "target_code": "        self,\n        ethereum_tester: Optional[\"EthereumTester\"] = None,\n        api_endpoints: Optional[Dict[str, Dict[str, Callable[..., RPCResponse]]]] = None\n    ) -> None:\n",
        "target_code_len": 178,
        "diff_format": "@@ -55,4 +56,4 @@\n         self,\n-        ethereum_tester: \"EthereumTester\"=None,\n-        api_endpoints: Dict[str, Dict[str, Callable[..., RPCResponse]]]=None\n+        ethereum_tester: Optional[\"EthereumTester\"] = None,\n+        api_endpoints: Optional[Dict[str, Dict[str, Callable[..., RPCResponse]]]] = None\n     ) -> None:\n",
        "source_code_with_indent": "        self,\n        ethereum_tester: \"EthereumTester\"=None,\n        api_endpoints: Dict[str, Dict[str, Callable[..., RPCResponse]]]=None\n    ) -> None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "        self,\n        ethereum_tester: Optional[\"EthereumTester\"] = None,\n        api_endpoints: Optional[Dict[str, Dict[str, Callable[..., RPCResponse]]]] = None\n    ) -> None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "ethereum/web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/testing.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/ethereum-web3.py/web3/testing.py",
    "file_hunks_size": 2,
    "min_patch_found": true,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "web3/testing.py:23:21 Incompatible variable type [9]: snapshot_idx is declared to have type `int` but is used as type `None`.",
    "message": " snapshot_idx is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 23,
    "warning_line": "    def revert(self, snapshot_idx: int=None) -> None:",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": false,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "from web3._utils.rpc_abi import (\n",
        "source_code_len": 34,
        "target_code": "from typing import (\n    Optional,\n)\n\nfrom web3._utils.rpc_abi import (\n",
        "target_code_len": 72,
        "diff_format": "@@ -1,1 +1,5 @@\n+from typing import (\n+    Optional,\n+)\n+\n from web3._utils.rpc_abi import (\n",
        "source_code_with_indent": "from web3._utils.rpc_abi import (\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "from typing import (\n    Optional,\n)\n\nfrom web3._utils.rpc_abi import (\n",
        "target_code_with_indent_exact_match": true
      },
      {
        "hunk_fit_TFix": true,
        "inside_window": true,
        "delete_only": false,
        "has_suppression": false,
        "source_code": "\n    def revert(self, snapshot_idx: int=None) -> None:\n        if snapshot_idx is None:\n",
        "source_code_len": 88,
        "target_code": "\n    def revert(self, snapshot_idx: Optional[int] = None) -> None:\n        if snapshot_idx is None:\n",
        "target_code_len": 100,
        "diff_format": "@@ -22,3 +26,3 @@\n \n-    def revert(self, snapshot_idx: int=None) -> None:\n+    def revert(self, snapshot_idx: Optional[int] = None) -> None:\n         if snapshot_idx is None:\n",
        "source_code_with_indent": "\n    <DED>def revert(self, snapshot_idx: int=None) -> None:\n        <IND>if snapshot_idx is None:\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "\n    <DED>def revert(self, snapshot_idx: Optional[int] = None) -> None:\n        <IND>if snapshot_idx is None:\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  }
]