[
  {
    "project": "microsoft/msticpy",
    "commit": "119b81ca8d0a9f8f2222353c4a26ec0593b65301",
    "filename": "msticpy/nbtools/nbdisplay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/nbdisplay.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/nbdisplay.py:276:4 Incompatible variable type [9]: title is declared to have type `str` but is used as type `None`.",
    "message": " title is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 276,
    "warning_line": "    title: str = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    )\n\n\n# Constants\n_WRAP = 50\n_WRAP_CMDL = \"WrapCmdl\"\n\n\n# Need to refactor this to allow multiple data sets.\n# pylint: disable=too-many-arguments, too-many-locals\n# pylint: disable=too-many-statements, too-many-branches\n@export  # noqa: C901, MC0001\ndef display_timeline(\n    data: pd.DataFrame,\n    alert: SecurityAlert = None,\n    overlay_data: pd.DataFrame = None,\n    title: str = None,\n    time_column: str = \"TimeGenerated\",\n    source_columns: list = None,\n    overlay_colums: list = None,\n    height: int = 300,\n):\n    \"\"\"\n    Display a timeline of events.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        Input DataFrame\n    alert : SecurityAlert, optional\n        Input alert (the default is None)\n    overlay_data : pd.DataFrame, optional\n        Second event stream to display as overlay\n        (the default is None)\n    title : str, optional\n        Title to display (the default is None)\n    time_column : str, optional\n        Name of the timestamp column\n        (the default is 'TimeGenerated')\n    source_columns : list, optional\n        List of source columns to use in tooltips\n        (the default is None)\n    overlay_colums : list, optional\n        List of source columns to use in overlay data tooltips.\n        (the default is None)\n    height : int, optional\n        the height of the plot figure (under 300 limits access\n        to Bokeh tools)(the default is 300)\n\n    \"\"\"\n    reset_output()\n    output_notebook()\n\n    y_max = 1\n\n    if not source_columns:\n        source_columns = [\"NewProcessName\", \"EventID\", \"CommandLine\"]\n    if time_column not in source_columns:\n        source_columns.append(time_column)\n\n    if \"CommandLine\" in source_columns:\n        graph_df = data[source_columns].copy()\n        graph_df[_WRAP_CMDL] = graph_df.apply(\n            lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n        )\n    else:\n        graph_df = data[source_columns].copy()\n\n    # if we have an overlay - add this data and shift the y co-ordinates to\n    # show on two separate lines\n    if overlay_data is not None:\n        overlay_colums = (\n            overlay_colums if overlay_colums is not None else source_columns\n        )\n        if time_column not in overlay_colums:\n            overlay_colums.append(time_column)\n        if \"CommandLine\" in overlay_colums:\n            overlay_df = overlay_data[overlay_colums].copy()\n            overlay_df[_WRAP_CMDL] = overlay_df.apply(\n                lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n            )\n        else:\n            overlay_df = overlay_data[overlay_colums].copy()\n        graph_df[\"y_index\"] = 2\n        overlay_df[\"y_index\"] = 1\n        y_max = 2\n    else:\n        graph_df[\"y_index\"] = 1\n\n    source = ColumnDataSource(graph_df)\n\n    # build the tool tips from columns (excluding these)\n    excl_cols = [time_column, \"CommandLine\"]\n    tool_tip_items = [\n        (f\"{col}\", f\"@{col}\") for col in source_columns if col not in excl_cols\n    ]\n    if _WRAP_CMDL in graph_df:\n        tool_tip_items.append((\"CommandLine\", f\"@{_WRAP_CMDL}\"))\n    hover = HoverTool(\n        tooltips=tool_tip_items,\n        formatters={\"Tooltip\": \"printf\"}\n        # display a tooltip whenever the cursor is vertically in line with a glyph\n        # ,mode='vline'\n    )\n\n    if not title:\n        title = \"Event Timeline\"\n    else:\n        title = \"Timeline {}\".format(title)\n\n    # tools = 'pan, box_zoom, wheel_zoom, reset, undo, redo, save, hover'\n    plot = figure(\n        min_border_left=50,\n        plot_height=height,\n        plot_width=900,\n        x_axis_label=\"Event Time\",\n        x_axis_type=\"datetime\",\n        x_minor_ticks=10,\n        tools=[hover, \"pan\", \"xwheel_zoom\", \"box_zoom\", \"reset\"],\n        title=title,\n    )\n    plot.yaxis.visible = False\n\n    # Tick formatting for different zoom levels\n    # '%H:%M:%S.%3Nms\n    tick_format = DatetimeTickFormatter()\n    tick_format.days = [\"%m-%d %H:%M\"]\n    tick_format.hours = [\"%H:%M:%S\"]\n    tick_format.minutes = [\"%H:%M:%S\"]\n    tick_format.seconds = [\"%H:%M:%S\"]\n    tick_format.milliseconds = [\"%H:%M:%S.%3N\"]\n\n    plot.xaxis[0].formatter = tick_format\n    plot.circle(\n        x=time_column, y=\"y_index\", color=\"navy\", alpha=0.5, size=10, source=source\n    )\n\n    if overlay_data is not None:\n        overlay_source = ColumnDataSource(overlay_df)\n        plot.circle(\n            x=time_column,\n            y=\"y_index\",\n            color=\"green\",\n            alpha=0.5,\n            size=10,\n            source=overlay_source,\n        )\n\n    # Adding data labels stops everything working!\n    # labels = LabelSet(x=time_column, y='y_index', y_offset=5,\n    #                   text='NewProcessName', source=source,\n    #                   angle='90deg', text_font_size='8pt')\n    # p.add_layout(labels)\n\n    # if we have an alert, plot the time as a line\n    if alert is not None:\n        x_alert_label = pd.Timestamp(alert[\"StartTimeUtc\"])\n        plot.line(x=[x_alert_label, x_alert_label], y=[0, y_max + 1])\n        alert_label = Label(\n            x=x_alert_label,\n            y=0,\n            y_offset=10,\n            x_units=\"data\",\n            y_units=\"data\",\n            text=\"< Alert time\",\n            render_mode=\"css\",\n            border_line_color=\"red\",\n            border_line_alpha=1.0,\n            background_fill_color=\"white\",\n            background_fill_alpha=1.0,\n        )\n\n        plot.add_layout(alert_label)\n\n        print(\"Alert start time = \", alert[\"StartTimeUtc\"])\n\n    show(plot)\n\n\ndef _wrap_text(source_string, wrap_len):\n    if len(source_string) <= wrap_len:\n        return source_string\n    out_string = \"\"\n    input_parts = source_string.split()\n    out_line = \"\"\n    for part in input_parts:\n        if len(part) > wrap_len:\n            if out_line:\n                out_string += out_line + \"\\n\"\n                out_line = \"\"\n            out_line = part[0:wrap_len] + \"...\"\n        else:\n            if out_line:\n                out_line += \" \" + part\n            else:\n                out_line = part\n            if len(out_line) > wrap_len:\n                out_string += out_line + \"\\n\"\n                out_line = \"\"\n\n    return out_string\n\n",
        "source_code_len": 6153,
        "target_code": "    )\n\n",
        "target_code_len": 7,
        "diff_format": "@@ -260,202 +288,2 @@\n     )\n-\n-\n-# Constants\n-_WRAP = 50\n-_WRAP_CMDL = \"WrapCmdl\"\n-\n-\n-# Need to refactor this to allow multiple data sets.\n-# pylint: disable=too-many-arguments, too-many-locals\n-# pylint: disable=too-many-statements, too-many-branches\n-@export  # noqa: C901, MC0001\n-def display_timeline(\n-    data: pd.DataFrame,\n-    alert: SecurityAlert = None,\n-    overlay_data: pd.DataFrame = None,\n-    title: str = None,\n-    time_column: str = \"TimeGenerated\",\n-    source_columns: list = None,\n-    overlay_colums: list = None,\n-    height: int = 300,\n-):\n-    \"\"\"\n-    Display a timeline of events.\n-\n-    Parameters\n-    ----------\n-    data : pd.DataFrame\n-        Input DataFrame\n-    alert : SecurityAlert, optional\n-        Input alert (the default is None)\n-    overlay_data : pd.DataFrame, optional\n-        Second event stream to display as overlay\n-        (the default is None)\n-    title : str, optional\n-        Title to display (the default is None)\n-    time_column : str, optional\n-        Name of the timestamp column\n-        (the default is 'TimeGenerated')\n-    source_columns : list, optional\n-        List of source columns to use in tooltips\n-        (the default is None)\n-    overlay_colums : list, optional\n-        List of source columns to use in overlay data tooltips.\n-        (the default is None)\n-    height : int, optional\n-        the height of the plot figure (under 300 limits access\n-        to Bokeh tools)(the default is 300)\n-\n-    \"\"\"\n-    reset_output()\n-    output_notebook()\n-\n-    y_max = 1\n-\n-    if not source_columns:\n-        source_columns = [\"NewProcessName\", \"EventID\", \"CommandLine\"]\n-    if time_column not in source_columns:\n-        source_columns.append(time_column)\n-\n-    if \"CommandLine\" in source_columns:\n-        graph_df = data[source_columns].copy()\n-        graph_df[_WRAP_CMDL] = graph_df.apply(\n-            lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n-        )\n-    else:\n-        graph_df = data[source_columns].copy()\n-\n-    # if we have an overlay - add this data and shift the y co-ordinates to\n-    # show on two separate lines\n-    if overlay_data is not None:\n-        overlay_colums = (\n-            overlay_colums if overlay_colums is not None else source_columns\n-        )\n-        if time_column not in overlay_colums:\n-            overlay_colums.append(time_column)\n-        if \"CommandLine\" in overlay_colums:\n-            overlay_df = overlay_data[overlay_colums].copy()\n-            overlay_df[_WRAP_CMDL] = overlay_df.apply(\n-                lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n-            )\n-        else:\n-            overlay_df = overlay_data[overlay_colums].copy()\n-        graph_df[\"y_index\"] = 2\n-        overlay_df[\"y_index\"] = 1\n-        y_max = 2\n-    else:\n-        graph_df[\"y_index\"] = 1\n-\n-    source = ColumnDataSource(graph_df)\n-\n-    # build the tool tips from columns (excluding these)\n-    excl_cols = [time_column, \"CommandLine\"]\n-    tool_tip_items = [\n-        (f\"{col}\", f\"@{col}\") for col in source_columns if col not in excl_cols\n-    ]\n-    if _WRAP_CMDL in graph_df:\n-        tool_tip_items.append((\"CommandLine\", f\"@{_WRAP_CMDL}\"))\n-    hover = HoverTool(\n-        tooltips=tool_tip_items,\n-        formatters={\"Tooltip\": \"printf\"}\n-        # display a tooltip whenever the cursor is vertically in line with a glyph\n-        # ,mode='vline'\n-    )\n-\n-    if not title:\n-        title = \"Event Timeline\"\n-    else:\n-        title = \"Timeline {}\".format(title)\n-\n-    # tools = 'pan, box_zoom, wheel_zoom, reset, undo, redo, save, hover'\n-    plot = figure(\n-        min_border_left=50,\n-        plot_height=height,\n-        plot_width=900,\n-        x_axis_label=\"Event Time\",\n-        x_axis_type=\"datetime\",\n-        x_minor_ticks=10,\n-        tools=[hover, \"pan\", \"xwheel_zoom\", \"box_zoom\", \"reset\"],\n-        title=title,\n-    )\n-    plot.yaxis.visible = False\n-\n-    # Tick formatting for different zoom levels\n-    # '%H:%M:%S.%3Nms\n-    tick_format = DatetimeTickFormatter()\n-    tick_format.days = [\"%m-%d %H:%M\"]\n-    tick_format.hours = [\"%H:%M:%S\"]\n-    tick_format.minutes = [\"%H:%M:%S\"]\n-    tick_format.seconds = [\"%H:%M:%S\"]\n-    tick_format.milliseconds = [\"%H:%M:%S.%3N\"]\n-\n-    plot.xaxis[0].formatter = tick_format\n-    plot.circle(\n-        x=time_column, y=\"y_index\", color=\"navy\", alpha=0.5, size=10, source=source\n-    )\n-\n-    if overlay_data is not None:\n-        overlay_source = ColumnDataSource(overlay_df)\n-        plot.circle(\n-            x=time_column,\n-            y=\"y_index\",\n-            color=\"green\",\n-            alpha=0.5,\n-            size=10,\n-            source=overlay_source,\n-        )\n-\n-    # Adding data labels stops everything working!\n-    # labels = LabelSet(x=time_column, y='y_index', y_offset=5,\n-    #                   text='NewProcessName', source=source,\n-    #                   angle='90deg', text_font_size='8pt')\n-    # p.add_layout(labels)\n-\n-    # if we have an alert, plot the time as a line\n-    if alert is not None:\n-        x_alert_label = pd.Timestamp(alert[\"StartTimeUtc\"])\n-        plot.line(x=[x_alert_label, x_alert_label], y=[0, y_max + 1])\n-        alert_label = Label(\n-            x=x_alert_label,\n-            y=0,\n-            y_offset=10,\n-            x_units=\"data\",\n-            y_units=\"data\",\n-            text=\"< Alert time\",\n-            render_mode=\"css\",\n-            border_line_color=\"red\",\n-            border_line_alpha=1.0,\n-            background_fill_color=\"white\",\n-            background_fill_alpha=1.0,\n-        )\n-\n-        plot.add_layout(alert_label)\n-\n-        print(\"Alert start time = \", alert[\"StartTimeUtc\"])\n-\n-    show(plot)\n-\n-\n-def _wrap_text(source_string, wrap_len):\n-    if len(source_string) <= wrap_len:\n-        return source_string\n-    out_string = \"\"\n-    input_parts = source_string.split()\n-    out_line = \"\"\n-    for part in input_parts:\n-        if len(part) > wrap_len:\n-            if out_line:\n-                out_string += out_line + \"\\n\"\n-                out_line = \"\"\n-            out_line = part[0:wrap_len] + \"...\"\n-        else:\n-            if out_line:\n-                out_line += \" \" + part\n-            else:\n-                out_line = part\n-            if len(out_line) > wrap_len:\n-                out_string += out_line + \"\\n\"\n-                out_line = \"\"\n-\n-    return out_string\n \n",
        "source_code_with_indent": "    )\n\n\n# Constants\n<DED>_WRAP = 50\n_WRAP_CMDL = \"WrapCmdl\"\n\n\n# Need to refactor this to allow multiple data sets.\n# pylint: disable=too-many-arguments, too-many-locals\n# pylint: disable=too-many-statements, too-many-branches\n@export  # noqa: C901, MC0001\ndef display_timeline(\n    data: pd.DataFrame,\n    alert: SecurityAlert = None,\n    overlay_data: pd.DataFrame = None,\n    title: str = None,\n    time_column: str = \"TimeGenerated\",\n    source_columns: list = None,\n    overlay_colums: list = None,\n    height: int = 300,\n):\n    <IND>\"\"\"\n    Display a timeline of events.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        Input DataFrame\n    alert : SecurityAlert, optional\n        Input alert (the default is None)\n    overlay_data : pd.DataFrame, optional\n        Second event stream to display as overlay\n        (the default is None)\n    title : str, optional\n        Title to display (the default is None)\n    time_column : str, optional\n        Name of the timestamp column\n        (the default is 'TimeGenerated')\n    source_columns : list, optional\n        List of source columns to use in tooltips\n        (the default is None)\n    overlay_colums : list, optional\n        List of source columns to use in overlay data tooltips.\n        (the default is None)\n    height : int, optional\n        the height of the plot figure (under 300 limits access\n        to Bokeh tools)(the default is 300)\n\n    \"\"\"\n    reset_output()\n    output_notebook()\n\n    y_max = 1\n\n    if not source_columns:\n        <IND>source_columns = [\"NewProcessName\", \"EventID\", \"CommandLine\"]\n    <DED>if time_column not in source_columns:\n        <IND>source_columns.append(time_column)\n\n    <DED>if \"CommandLine\" in source_columns:\n        <IND>graph_df = data[source_columns].copy()\n        graph_df[_WRAP_CMDL] = graph_df.apply(\n            lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n        )\n    <DED>else:\n        <IND>graph_df = data[source_columns].copy()\n\n    # if we have an overlay - add this data and shift the y co-ordinates to\n    # show on two separate lines\n    <DED>if overlay_data is not None:\n        <IND>overlay_colums = (\n            overlay_colums if overlay_colums is not None else source_columns\n        )\n        if time_column not in overlay_colums:\n            <IND>overlay_colums.append(time_column)\n        <DED>if \"CommandLine\" in overlay_colums:\n            <IND>overlay_df = overlay_data[overlay_colums].copy()\n            overlay_df[_WRAP_CMDL] = overlay_df.apply(\n                lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n            )\n        <DED>else:\n            <IND>overlay_df = overlay_data[overlay_colums].copy()\n        <DED>graph_df[\"y_index\"] = 2\n        overlay_df[\"y_index\"] = 1\n        y_max = 2\n    <DED>else:\n        <IND>graph_df[\"y_index\"] = 1\n\n    <DED>source = ColumnDataSource(graph_df)\n\n    # build the tool tips from columns (excluding these)\n    excl_cols = [time_column, \"CommandLine\"]\n    tool_tip_items = [\n        (f\"{col}\", f\"@{col}\") for col in source_columns if col not in excl_cols\n    ]\n    if _WRAP_CMDL in graph_df:\n        <IND>tool_tip_items.append((\"CommandLine\", f\"@{_WRAP_CMDL}\"))\n    <DED>hover = HoverTool(\n        tooltips=tool_tip_items,\n        formatters={\"Tooltip\": \"printf\"}\n        # display a tooltip whenever the cursor is vertically in line with a glyph\n        # ,mode='vline'\n    )\n\n    if not title:\n        <IND>title = \"Event Timeline\"\n    <DED>else:\n        <IND>title = \"Timeline {}\".format(title)\n\n    # tools = 'pan, box_zoom, wheel_zoom, reset, undo, redo, save, hover'\n    <DED>plot = figure(\n        min_border_left=50,\n        plot_height=height,\n        plot_width=900,\n        x_axis_label=\"Event Time\",\n        x_axis_type=\"datetime\",\n        x_minor_ticks=10,\n        tools=[hover, \"pan\", \"xwheel_zoom\", \"box_zoom\", \"reset\"],\n        title=title,\n    )\n    plot.yaxis.visible = False\n\n    # Tick formatting for different zoom levels\n    # '%H:%M:%S.%3Nms\n    tick_format = DatetimeTickFormatter()\n    tick_format.days = [\"%m-%d %H:%M\"]\n    tick_format.hours = [\"%H:%M:%S\"]\n    tick_format.minutes = [\"%H:%M:%S\"]\n    tick_format.seconds = [\"%H:%M:%S\"]\n    tick_format.milliseconds = [\"%H:%M:%S.%3N\"]\n\n    plot.xaxis[0].formatter = tick_format\n    plot.circle(\n        x=time_column, y=\"y_index\", color=\"navy\", alpha=0.5, size=10, source=source\n    )\n\n    if overlay_data is not None:\n        <IND>overlay_source = ColumnDataSource(overlay_df)\n        plot.circle(\n            x=time_column,\n            y=\"y_index\",\n            color=\"green\",\n            alpha=0.5,\n            size=10,\n            source=overlay_source,\n        )\n\n    # Adding data labels stops everything working!\n    # labels = LabelSet(x=time_column, y='y_index', y_offset=5,\n    #                   text='NewProcessName', source=source,\n    #                   angle='90deg', text_font_size='8pt')\n    # p.add_layout(labels)\n\n    # if we have an alert, plot the time as a line\n    <DED>if alert is not None:\n        <IND>x_alert_label = pd.Timestamp(alert[\"StartTimeUtc\"])\n        plot.line(x=[x_alert_label, x_alert_label], y=[0, y_max + 1])\n        alert_label = Label(\n            x=x_alert_label,\n            y=0,\n            y_offset=10,\n            x_units=\"data\",\n            y_units=\"data\",\n            text=\"< Alert time\",\n            render_mode=\"css\",\n            border_line_color=\"red\",\n            border_line_alpha=1.0,\n            background_fill_color=\"white\",\n            background_fill_alpha=1.0,\n        )\n\n        plot.add_layout(alert_label)\n\n        print(\"Alert start time = \", alert[\"StartTimeUtc\"])\n\n    <DED>show(plot)\n\n\n<DED>def _wrap_text(source_string, wrap_len):\n    <IND>if len(source_string) <= wrap_len:\n        <IND>return source_string\n    <DED>out_string = \"\"\n    input_parts = source_string.split()\n    out_line = \"\"\n    for part in input_parts:\n        <IND>if len(part) > wrap_len:\n            <IND>if out_line:\n                <IND>out_string += out_line + \"\\n\"\n                out_line = \"\"\n            <DED>out_line = part[0:wrap_len] + \"...\"\n        <DED>else:\n            <IND>if out_line:\n                <IND>out_line += \" \" + part\n            <DED>else:\n                <IND>out_line = part\n            <DED>if len(out_line) > wrap_len:\n                <IND>out_string += out_line + \"\\n\"\n                out_line = \"\"\n\n    <DED><DED><DED>return out_string\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "119b81ca8d0a9f8f2222353c4a26ec0593b65301",
    "filename": "msticpy/nbtools/nbdisplay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/nbdisplay.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/nbdisplay.py:278:4 Incompatible variable type [9]: source_columns is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "message": " source_columns is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 278,
    "warning_line": "    source_columns: list = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    )\n\n\n# Constants\n_WRAP = 50\n_WRAP_CMDL = \"WrapCmdl\"\n\n\n# Need to refactor this to allow multiple data sets.\n# pylint: disable=too-many-arguments, too-many-locals\n# pylint: disable=too-many-statements, too-many-branches\n@export  # noqa: C901, MC0001\ndef display_timeline(\n    data: pd.DataFrame,\n    alert: SecurityAlert = None,\n    overlay_data: pd.DataFrame = None,\n    title: str = None,\n    time_column: str = \"TimeGenerated\",\n    source_columns: list = None,\n    overlay_colums: list = None,\n    height: int = 300,\n):\n    \"\"\"\n    Display a timeline of events.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        Input DataFrame\n    alert : SecurityAlert, optional\n        Input alert (the default is None)\n    overlay_data : pd.DataFrame, optional\n        Second event stream to display as overlay\n        (the default is None)\n    title : str, optional\n        Title to display (the default is None)\n    time_column : str, optional\n        Name of the timestamp column\n        (the default is 'TimeGenerated')\n    source_columns : list, optional\n        List of source columns to use in tooltips\n        (the default is None)\n    overlay_colums : list, optional\n        List of source columns to use in overlay data tooltips.\n        (the default is None)\n    height : int, optional\n        the height of the plot figure (under 300 limits access\n        to Bokeh tools)(the default is 300)\n\n    \"\"\"\n    reset_output()\n    output_notebook()\n\n    y_max = 1\n\n    if not source_columns:\n        source_columns = [\"NewProcessName\", \"EventID\", \"CommandLine\"]\n    if time_column not in source_columns:\n        source_columns.append(time_column)\n\n    if \"CommandLine\" in source_columns:\n        graph_df = data[source_columns].copy()\n        graph_df[_WRAP_CMDL] = graph_df.apply(\n            lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n        )\n    else:\n        graph_df = data[source_columns].copy()\n\n    # if we have an overlay - add this data and shift the y co-ordinates to\n    # show on two separate lines\n    if overlay_data is not None:\n        overlay_colums = (\n            overlay_colums if overlay_colums is not None else source_columns\n        )\n        if time_column not in overlay_colums:\n            overlay_colums.append(time_column)\n        if \"CommandLine\" in overlay_colums:\n            overlay_df = overlay_data[overlay_colums].copy()\n            overlay_df[_WRAP_CMDL] = overlay_df.apply(\n                lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n            )\n        else:\n            overlay_df = overlay_data[overlay_colums].copy()\n        graph_df[\"y_index\"] = 2\n        overlay_df[\"y_index\"] = 1\n        y_max = 2\n    else:\n        graph_df[\"y_index\"] = 1\n\n    source = ColumnDataSource(graph_df)\n\n    # build the tool tips from columns (excluding these)\n    excl_cols = [time_column, \"CommandLine\"]\n    tool_tip_items = [\n        (f\"{col}\", f\"@{col}\") for col in source_columns if col not in excl_cols\n    ]\n    if _WRAP_CMDL in graph_df:\n        tool_tip_items.append((\"CommandLine\", f\"@{_WRAP_CMDL}\"))\n    hover = HoverTool(\n        tooltips=tool_tip_items,\n        formatters={\"Tooltip\": \"printf\"}\n        # display a tooltip whenever the cursor is vertically in line with a glyph\n        # ,mode='vline'\n    )\n\n    if not title:\n        title = \"Event Timeline\"\n    else:\n        title = \"Timeline {}\".format(title)\n\n    # tools = 'pan, box_zoom, wheel_zoom, reset, undo, redo, save, hover'\n    plot = figure(\n        min_border_left=50,\n        plot_height=height,\n        plot_width=900,\n        x_axis_label=\"Event Time\",\n        x_axis_type=\"datetime\",\n        x_minor_ticks=10,\n        tools=[hover, \"pan\", \"xwheel_zoom\", \"box_zoom\", \"reset\"],\n        title=title,\n    )\n    plot.yaxis.visible = False\n\n    # Tick formatting for different zoom levels\n    # '%H:%M:%S.%3Nms\n    tick_format = DatetimeTickFormatter()\n    tick_format.days = [\"%m-%d %H:%M\"]\n    tick_format.hours = [\"%H:%M:%S\"]\n    tick_format.minutes = [\"%H:%M:%S\"]\n    tick_format.seconds = [\"%H:%M:%S\"]\n    tick_format.milliseconds = [\"%H:%M:%S.%3N\"]\n\n    plot.xaxis[0].formatter = tick_format\n    plot.circle(\n        x=time_column, y=\"y_index\", color=\"navy\", alpha=0.5, size=10, source=source\n    )\n\n    if overlay_data is not None:\n        overlay_source = ColumnDataSource(overlay_df)\n        plot.circle(\n            x=time_column,\n            y=\"y_index\",\n            color=\"green\",\n            alpha=0.5,\n            size=10,\n            source=overlay_source,\n        )\n\n    # Adding data labels stops everything working!\n    # labels = LabelSet(x=time_column, y='y_index', y_offset=5,\n    #                   text='NewProcessName', source=source,\n    #                   angle='90deg', text_font_size='8pt')\n    # p.add_layout(labels)\n\n    # if we have an alert, plot the time as a line\n    if alert is not None:\n        x_alert_label = pd.Timestamp(alert[\"StartTimeUtc\"])\n        plot.line(x=[x_alert_label, x_alert_label], y=[0, y_max + 1])\n        alert_label = Label(\n            x=x_alert_label,\n            y=0,\n            y_offset=10,\n            x_units=\"data\",\n            y_units=\"data\",\n            text=\"< Alert time\",\n            render_mode=\"css\",\n            border_line_color=\"red\",\n            border_line_alpha=1.0,\n            background_fill_color=\"white\",\n            background_fill_alpha=1.0,\n        )\n\n        plot.add_layout(alert_label)\n\n        print(\"Alert start time = \", alert[\"StartTimeUtc\"])\n\n    show(plot)\n\n\ndef _wrap_text(source_string, wrap_len):\n    if len(source_string) <= wrap_len:\n        return source_string\n    out_string = \"\"\n    input_parts = source_string.split()\n    out_line = \"\"\n    for part in input_parts:\n        if len(part) > wrap_len:\n            if out_line:\n                out_string += out_line + \"\\n\"\n                out_line = \"\"\n            out_line = part[0:wrap_len] + \"...\"\n        else:\n            if out_line:\n                out_line += \" \" + part\n            else:\n                out_line = part\n            if len(out_line) > wrap_len:\n                out_string += out_line + \"\\n\"\n                out_line = \"\"\n\n    return out_string\n\n",
        "source_code_len": 6153,
        "target_code": "    )\n\n",
        "target_code_len": 7,
        "diff_format": "@@ -260,202 +288,2 @@\n     )\n-\n-\n-# Constants\n-_WRAP = 50\n-_WRAP_CMDL = \"WrapCmdl\"\n-\n-\n-# Need to refactor this to allow multiple data sets.\n-# pylint: disable=too-many-arguments, too-many-locals\n-# pylint: disable=too-many-statements, too-many-branches\n-@export  # noqa: C901, MC0001\n-def display_timeline(\n-    data: pd.DataFrame,\n-    alert: SecurityAlert = None,\n-    overlay_data: pd.DataFrame = None,\n-    title: str = None,\n-    time_column: str = \"TimeGenerated\",\n-    source_columns: list = None,\n-    overlay_colums: list = None,\n-    height: int = 300,\n-):\n-    \"\"\"\n-    Display a timeline of events.\n-\n-    Parameters\n-    ----------\n-    data : pd.DataFrame\n-        Input DataFrame\n-    alert : SecurityAlert, optional\n-        Input alert (the default is None)\n-    overlay_data : pd.DataFrame, optional\n-        Second event stream to display as overlay\n-        (the default is None)\n-    title : str, optional\n-        Title to display (the default is None)\n-    time_column : str, optional\n-        Name of the timestamp column\n-        (the default is 'TimeGenerated')\n-    source_columns : list, optional\n-        List of source columns to use in tooltips\n-        (the default is None)\n-    overlay_colums : list, optional\n-        List of source columns to use in overlay data tooltips.\n-        (the default is None)\n-    height : int, optional\n-        the height of the plot figure (under 300 limits access\n-        to Bokeh tools)(the default is 300)\n-\n-    \"\"\"\n-    reset_output()\n-    output_notebook()\n-\n-    y_max = 1\n-\n-    if not source_columns:\n-        source_columns = [\"NewProcessName\", \"EventID\", \"CommandLine\"]\n-    if time_column not in source_columns:\n-        source_columns.append(time_column)\n-\n-    if \"CommandLine\" in source_columns:\n-        graph_df = data[source_columns].copy()\n-        graph_df[_WRAP_CMDL] = graph_df.apply(\n-            lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n-        )\n-    else:\n-        graph_df = data[source_columns].copy()\n-\n-    # if we have an overlay - add this data and shift the y co-ordinates to\n-    # show on two separate lines\n-    if overlay_data is not None:\n-        overlay_colums = (\n-            overlay_colums if overlay_colums is not None else source_columns\n-        )\n-        if time_column not in overlay_colums:\n-            overlay_colums.append(time_column)\n-        if \"CommandLine\" in overlay_colums:\n-            overlay_df = overlay_data[overlay_colums].copy()\n-            overlay_df[_WRAP_CMDL] = overlay_df.apply(\n-                lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n-            )\n-        else:\n-            overlay_df = overlay_data[overlay_colums].copy()\n-        graph_df[\"y_index\"] = 2\n-        overlay_df[\"y_index\"] = 1\n-        y_max = 2\n-    else:\n-        graph_df[\"y_index\"] = 1\n-\n-    source = ColumnDataSource(graph_df)\n-\n-    # build the tool tips from columns (excluding these)\n-    excl_cols = [time_column, \"CommandLine\"]\n-    tool_tip_items = [\n-        (f\"{col}\", f\"@{col}\") for col in source_columns if col not in excl_cols\n-    ]\n-    if _WRAP_CMDL in graph_df:\n-        tool_tip_items.append((\"CommandLine\", f\"@{_WRAP_CMDL}\"))\n-    hover = HoverTool(\n-        tooltips=tool_tip_items,\n-        formatters={\"Tooltip\": \"printf\"}\n-        # display a tooltip whenever the cursor is vertically in line with a glyph\n-        # ,mode='vline'\n-    )\n-\n-    if not title:\n-        title = \"Event Timeline\"\n-    else:\n-        title = \"Timeline {}\".format(title)\n-\n-    # tools = 'pan, box_zoom, wheel_zoom, reset, undo, redo, save, hover'\n-    plot = figure(\n-        min_border_left=50,\n-        plot_height=height,\n-        plot_width=900,\n-        x_axis_label=\"Event Time\",\n-        x_axis_type=\"datetime\",\n-        x_minor_ticks=10,\n-        tools=[hover, \"pan\", \"xwheel_zoom\", \"box_zoom\", \"reset\"],\n-        title=title,\n-    )\n-    plot.yaxis.visible = False\n-\n-    # Tick formatting for different zoom levels\n-    # '%H:%M:%S.%3Nms\n-    tick_format = DatetimeTickFormatter()\n-    tick_format.days = [\"%m-%d %H:%M\"]\n-    tick_format.hours = [\"%H:%M:%S\"]\n-    tick_format.minutes = [\"%H:%M:%S\"]\n-    tick_format.seconds = [\"%H:%M:%S\"]\n-    tick_format.milliseconds = [\"%H:%M:%S.%3N\"]\n-\n-    plot.xaxis[0].formatter = tick_format\n-    plot.circle(\n-        x=time_column, y=\"y_index\", color=\"navy\", alpha=0.5, size=10, source=source\n-    )\n-\n-    if overlay_data is not None:\n-        overlay_source = ColumnDataSource(overlay_df)\n-        plot.circle(\n-            x=time_column,\n-            y=\"y_index\",\n-            color=\"green\",\n-            alpha=0.5,\n-            size=10,\n-            source=overlay_source,\n-        )\n-\n-    # Adding data labels stops everything working!\n-    # labels = LabelSet(x=time_column, y='y_index', y_offset=5,\n-    #                   text='NewProcessName', source=source,\n-    #                   angle='90deg', text_font_size='8pt')\n-    # p.add_layout(labels)\n-\n-    # if we have an alert, plot the time as a line\n-    if alert is not None:\n-        x_alert_label = pd.Timestamp(alert[\"StartTimeUtc\"])\n-        plot.line(x=[x_alert_label, x_alert_label], y=[0, y_max + 1])\n-        alert_label = Label(\n-            x=x_alert_label,\n-            y=0,\n-            y_offset=10,\n-            x_units=\"data\",\n-            y_units=\"data\",\n-            text=\"< Alert time\",\n-            render_mode=\"css\",\n-            border_line_color=\"red\",\n-            border_line_alpha=1.0,\n-            background_fill_color=\"white\",\n-            background_fill_alpha=1.0,\n-        )\n-\n-        plot.add_layout(alert_label)\n-\n-        print(\"Alert start time = \", alert[\"StartTimeUtc\"])\n-\n-    show(plot)\n-\n-\n-def _wrap_text(source_string, wrap_len):\n-    if len(source_string) <= wrap_len:\n-        return source_string\n-    out_string = \"\"\n-    input_parts = source_string.split()\n-    out_line = \"\"\n-    for part in input_parts:\n-        if len(part) > wrap_len:\n-            if out_line:\n-                out_string += out_line + \"\\n\"\n-                out_line = \"\"\n-            out_line = part[0:wrap_len] + \"...\"\n-        else:\n-            if out_line:\n-                out_line += \" \" + part\n-            else:\n-                out_line = part\n-            if len(out_line) > wrap_len:\n-                out_string += out_line + \"\\n\"\n-                out_line = \"\"\n-\n-    return out_string\n \n",
        "source_code_with_indent": "    )\n\n\n# Constants\n<DED>_WRAP = 50\n_WRAP_CMDL = \"WrapCmdl\"\n\n\n# Need to refactor this to allow multiple data sets.\n# pylint: disable=too-many-arguments, too-many-locals\n# pylint: disable=too-many-statements, too-many-branches\n@export  # noqa: C901, MC0001\ndef display_timeline(\n    data: pd.DataFrame,\n    alert: SecurityAlert = None,\n    overlay_data: pd.DataFrame = None,\n    title: str = None,\n    time_column: str = \"TimeGenerated\",\n    source_columns: list = None,\n    overlay_colums: list = None,\n    height: int = 300,\n):\n    <IND>\"\"\"\n    Display a timeline of events.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        Input DataFrame\n    alert : SecurityAlert, optional\n        Input alert (the default is None)\n    overlay_data : pd.DataFrame, optional\n        Second event stream to display as overlay\n        (the default is None)\n    title : str, optional\n        Title to display (the default is None)\n    time_column : str, optional\n        Name of the timestamp column\n        (the default is 'TimeGenerated')\n    source_columns : list, optional\n        List of source columns to use in tooltips\n        (the default is None)\n    overlay_colums : list, optional\n        List of source columns to use in overlay data tooltips.\n        (the default is None)\n    height : int, optional\n        the height of the plot figure (under 300 limits access\n        to Bokeh tools)(the default is 300)\n\n    \"\"\"\n    reset_output()\n    output_notebook()\n\n    y_max = 1\n\n    if not source_columns:\n        <IND>source_columns = [\"NewProcessName\", \"EventID\", \"CommandLine\"]\n    <DED>if time_column not in source_columns:\n        <IND>source_columns.append(time_column)\n\n    <DED>if \"CommandLine\" in source_columns:\n        <IND>graph_df = data[source_columns].copy()\n        graph_df[_WRAP_CMDL] = graph_df.apply(\n            lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n        )\n    <DED>else:\n        <IND>graph_df = data[source_columns].copy()\n\n    # if we have an overlay - add this data and shift the y co-ordinates to\n    # show on two separate lines\n    <DED>if overlay_data is not None:\n        <IND>overlay_colums = (\n            overlay_colums if overlay_colums is not None else source_columns\n        )\n        if time_column not in overlay_colums:\n            <IND>overlay_colums.append(time_column)\n        <DED>if \"CommandLine\" in overlay_colums:\n            <IND>overlay_df = overlay_data[overlay_colums].copy()\n            overlay_df[_WRAP_CMDL] = overlay_df.apply(\n                lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n            )\n        <DED>else:\n            <IND>overlay_df = overlay_data[overlay_colums].copy()\n        <DED>graph_df[\"y_index\"] = 2\n        overlay_df[\"y_index\"] = 1\n        y_max = 2\n    <DED>else:\n        <IND>graph_df[\"y_index\"] = 1\n\n    <DED>source = ColumnDataSource(graph_df)\n\n    # build the tool tips from columns (excluding these)\n    excl_cols = [time_column, \"CommandLine\"]\n    tool_tip_items = [\n        (f\"{col}\", f\"@{col}\") for col in source_columns if col not in excl_cols\n    ]\n    if _WRAP_CMDL in graph_df:\n        <IND>tool_tip_items.append((\"CommandLine\", f\"@{_WRAP_CMDL}\"))\n    <DED>hover = HoverTool(\n        tooltips=tool_tip_items,\n        formatters={\"Tooltip\": \"printf\"}\n        # display a tooltip whenever the cursor is vertically in line with a glyph\n        # ,mode='vline'\n    )\n\n    if not title:\n        <IND>title = \"Event Timeline\"\n    <DED>else:\n        <IND>title = \"Timeline {}\".format(title)\n\n    # tools = 'pan, box_zoom, wheel_zoom, reset, undo, redo, save, hover'\n    <DED>plot = figure(\n        min_border_left=50,\n        plot_height=height,\n        plot_width=900,\n        x_axis_label=\"Event Time\",\n        x_axis_type=\"datetime\",\n        x_minor_ticks=10,\n        tools=[hover, \"pan\", \"xwheel_zoom\", \"box_zoom\", \"reset\"],\n        title=title,\n    )\n    plot.yaxis.visible = False\n\n    # Tick formatting for different zoom levels\n    # '%H:%M:%S.%3Nms\n    tick_format = DatetimeTickFormatter()\n    tick_format.days = [\"%m-%d %H:%M\"]\n    tick_format.hours = [\"%H:%M:%S\"]\n    tick_format.minutes = [\"%H:%M:%S\"]\n    tick_format.seconds = [\"%H:%M:%S\"]\n    tick_format.milliseconds = [\"%H:%M:%S.%3N\"]\n\n    plot.xaxis[0].formatter = tick_format\n    plot.circle(\n        x=time_column, y=\"y_index\", color=\"navy\", alpha=0.5, size=10, source=source\n    )\n\n    if overlay_data is not None:\n        <IND>overlay_source = ColumnDataSource(overlay_df)\n        plot.circle(\n            x=time_column,\n            y=\"y_index\",\n            color=\"green\",\n            alpha=0.5,\n            size=10,\n            source=overlay_source,\n        )\n\n    # Adding data labels stops everything working!\n    # labels = LabelSet(x=time_column, y='y_index', y_offset=5,\n    #                   text='NewProcessName', source=source,\n    #                   angle='90deg', text_font_size='8pt')\n    # p.add_layout(labels)\n\n    # if we have an alert, plot the time as a line\n    <DED>if alert is not None:\n        <IND>x_alert_label = pd.Timestamp(alert[\"StartTimeUtc\"])\n        plot.line(x=[x_alert_label, x_alert_label], y=[0, y_max + 1])\n        alert_label = Label(\n            x=x_alert_label,\n            y=0,\n            y_offset=10,\n            x_units=\"data\",\n            y_units=\"data\",\n            text=\"< Alert time\",\n            render_mode=\"css\",\n            border_line_color=\"red\",\n            border_line_alpha=1.0,\n            background_fill_color=\"white\",\n            background_fill_alpha=1.0,\n        )\n\n        plot.add_layout(alert_label)\n\n        print(\"Alert start time = \", alert[\"StartTimeUtc\"])\n\n    <DED>show(plot)\n\n\n<DED>def _wrap_text(source_string, wrap_len):\n    <IND>if len(source_string) <= wrap_len:\n        <IND>return source_string\n    <DED>out_string = \"\"\n    input_parts = source_string.split()\n    out_line = \"\"\n    for part in input_parts:\n        <IND>if len(part) > wrap_len:\n            <IND>if out_line:\n                <IND>out_string += out_line + \"\\n\"\n                out_line = \"\"\n            <DED>out_line = part[0:wrap_len] + \"...\"\n        <DED>else:\n            <IND>if out_line:\n                <IND>out_line += \" \" + part\n            <DED>else:\n                <IND>out_line = part\n            <DED>if len(out_line) > wrap_len:\n                <IND>out_string += out_line + \"\\n\"\n                out_line = \"\"\n\n    <DED><DED><DED>return out_string\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "119b81ca8d0a9f8f2222353c4a26ec0593b65301",
    "filename": "msticpy/nbtools/nbdisplay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/nbdisplay.py",
    "file_hunks_size": 10,
    "min_patch_found": true,
    "single_hunk": true,
    "fit_TFix": false,
    "delete_only_patch": true,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/nbdisplay.py:279:4 Incompatible variable type [9]: overlay_colums is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "message": " overlay_colums is declared to have type `typing.List[typing.Any]` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 279,
    "warning_line": "    overlay_colums: list = None,",
    "min_patch": [
      {
        "hunk_fit_TFix": false,
        "inside_window": true,
        "delete_only": true,
        "has_suppression": false,
        "source_code": "    )\n\n\n# Constants\n_WRAP = 50\n_WRAP_CMDL = \"WrapCmdl\"\n\n\n# Need to refactor this to allow multiple data sets.\n# pylint: disable=too-many-arguments, too-many-locals\n# pylint: disable=too-many-statements, too-many-branches\n@export  # noqa: C901, MC0001\ndef display_timeline(\n    data: pd.DataFrame,\n    alert: SecurityAlert = None,\n    overlay_data: pd.DataFrame = None,\n    title: str = None,\n    time_column: str = \"TimeGenerated\",\n    source_columns: list = None,\n    overlay_colums: list = None,\n    height: int = 300,\n):\n    \"\"\"\n    Display a timeline of events.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        Input DataFrame\n    alert : SecurityAlert, optional\n        Input alert (the default is None)\n    overlay_data : pd.DataFrame, optional\n        Second event stream to display as overlay\n        (the default is None)\n    title : str, optional\n        Title to display (the default is None)\n    time_column : str, optional\n        Name of the timestamp column\n        (the default is 'TimeGenerated')\n    source_columns : list, optional\n        List of source columns to use in tooltips\n        (the default is None)\n    overlay_colums : list, optional\n        List of source columns to use in overlay data tooltips.\n        (the default is None)\n    height : int, optional\n        the height of the plot figure (under 300 limits access\n        to Bokeh tools)(the default is 300)\n\n    \"\"\"\n    reset_output()\n    output_notebook()\n\n    y_max = 1\n\n    if not source_columns:\n        source_columns = [\"NewProcessName\", \"EventID\", \"CommandLine\"]\n    if time_column not in source_columns:\n        source_columns.append(time_column)\n\n    if \"CommandLine\" in source_columns:\n        graph_df = data[source_columns].copy()\n        graph_df[_WRAP_CMDL] = graph_df.apply(\n            lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n        )\n    else:\n        graph_df = data[source_columns].copy()\n\n    # if we have an overlay - add this data and shift the y co-ordinates to\n    # show on two separate lines\n    if overlay_data is not None:\n        overlay_colums = (\n            overlay_colums if overlay_colums is not None else source_columns\n        )\n        if time_column not in overlay_colums:\n            overlay_colums.append(time_column)\n        if \"CommandLine\" in overlay_colums:\n            overlay_df = overlay_data[overlay_colums].copy()\n            overlay_df[_WRAP_CMDL] = overlay_df.apply(\n                lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n            )\n        else:\n            overlay_df = overlay_data[overlay_colums].copy()\n        graph_df[\"y_index\"] = 2\n        overlay_df[\"y_index\"] = 1\n        y_max = 2\n    else:\n        graph_df[\"y_index\"] = 1\n\n    source = ColumnDataSource(graph_df)\n\n    # build the tool tips from columns (excluding these)\n    excl_cols = [time_column, \"CommandLine\"]\n    tool_tip_items = [\n        (f\"{col}\", f\"@{col}\") for col in source_columns if col not in excl_cols\n    ]\n    if _WRAP_CMDL in graph_df:\n        tool_tip_items.append((\"CommandLine\", f\"@{_WRAP_CMDL}\"))\n    hover = HoverTool(\n        tooltips=tool_tip_items,\n        formatters={\"Tooltip\": \"printf\"}\n        # display a tooltip whenever the cursor is vertically in line with a glyph\n        # ,mode='vline'\n    )\n\n    if not title:\n        title = \"Event Timeline\"\n    else:\n        title = \"Timeline {}\".format(title)\n\n    # tools = 'pan, box_zoom, wheel_zoom, reset, undo, redo, save, hover'\n    plot = figure(\n        min_border_left=50,\n        plot_height=height,\n        plot_width=900,\n        x_axis_label=\"Event Time\",\n        x_axis_type=\"datetime\",\n        x_minor_ticks=10,\n        tools=[hover, \"pan\", \"xwheel_zoom\", \"box_zoom\", \"reset\"],\n        title=title,\n    )\n    plot.yaxis.visible = False\n\n    # Tick formatting for different zoom levels\n    # '%H:%M:%S.%3Nms\n    tick_format = DatetimeTickFormatter()\n    tick_format.days = [\"%m-%d %H:%M\"]\n    tick_format.hours = [\"%H:%M:%S\"]\n    tick_format.minutes = [\"%H:%M:%S\"]\n    tick_format.seconds = [\"%H:%M:%S\"]\n    tick_format.milliseconds = [\"%H:%M:%S.%3N\"]\n\n    plot.xaxis[0].formatter = tick_format\n    plot.circle(\n        x=time_column, y=\"y_index\", color=\"navy\", alpha=0.5, size=10, source=source\n    )\n\n    if overlay_data is not None:\n        overlay_source = ColumnDataSource(overlay_df)\n        plot.circle(\n            x=time_column,\n            y=\"y_index\",\n            color=\"green\",\n            alpha=0.5,\n            size=10,\n            source=overlay_source,\n        )\n\n    # Adding data labels stops everything working!\n    # labels = LabelSet(x=time_column, y='y_index', y_offset=5,\n    #                   text='NewProcessName', source=source,\n    #                   angle='90deg', text_font_size='8pt')\n    # p.add_layout(labels)\n\n    # if we have an alert, plot the time as a line\n    if alert is not None:\n        x_alert_label = pd.Timestamp(alert[\"StartTimeUtc\"])\n        plot.line(x=[x_alert_label, x_alert_label], y=[0, y_max + 1])\n        alert_label = Label(\n            x=x_alert_label,\n            y=0,\n            y_offset=10,\n            x_units=\"data\",\n            y_units=\"data\",\n            text=\"< Alert time\",\n            render_mode=\"css\",\n            border_line_color=\"red\",\n            border_line_alpha=1.0,\n            background_fill_color=\"white\",\n            background_fill_alpha=1.0,\n        )\n\n        plot.add_layout(alert_label)\n\n        print(\"Alert start time = \", alert[\"StartTimeUtc\"])\n\n    show(plot)\n\n\ndef _wrap_text(source_string, wrap_len):\n    if len(source_string) <= wrap_len:\n        return source_string\n    out_string = \"\"\n    input_parts = source_string.split()\n    out_line = \"\"\n    for part in input_parts:\n        if len(part) > wrap_len:\n            if out_line:\n                out_string += out_line + \"\\n\"\n                out_line = \"\"\n            out_line = part[0:wrap_len] + \"...\"\n        else:\n            if out_line:\n                out_line += \" \" + part\n            else:\n                out_line = part\n            if len(out_line) > wrap_len:\n                out_string += out_line + \"\\n\"\n                out_line = \"\"\n\n    return out_string\n\n",
        "source_code_len": 6153,
        "target_code": "    )\n\n",
        "target_code_len": 7,
        "diff_format": "@@ -260,202 +288,2 @@\n     )\n-\n-\n-# Constants\n-_WRAP = 50\n-_WRAP_CMDL = \"WrapCmdl\"\n-\n-\n-# Need to refactor this to allow multiple data sets.\n-# pylint: disable=too-many-arguments, too-many-locals\n-# pylint: disable=too-many-statements, too-many-branches\n-@export  # noqa: C901, MC0001\n-def display_timeline(\n-    data: pd.DataFrame,\n-    alert: SecurityAlert = None,\n-    overlay_data: pd.DataFrame = None,\n-    title: str = None,\n-    time_column: str = \"TimeGenerated\",\n-    source_columns: list = None,\n-    overlay_colums: list = None,\n-    height: int = 300,\n-):\n-    \"\"\"\n-    Display a timeline of events.\n-\n-    Parameters\n-    ----------\n-    data : pd.DataFrame\n-        Input DataFrame\n-    alert : SecurityAlert, optional\n-        Input alert (the default is None)\n-    overlay_data : pd.DataFrame, optional\n-        Second event stream to display as overlay\n-        (the default is None)\n-    title : str, optional\n-        Title to display (the default is None)\n-    time_column : str, optional\n-        Name of the timestamp column\n-        (the default is 'TimeGenerated')\n-    source_columns : list, optional\n-        List of source columns to use in tooltips\n-        (the default is None)\n-    overlay_colums : list, optional\n-        List of source columns to use in overlay data tooltips.\n-        (the default is None)\n-    height : int, optional\n-        the height of the plot figure (under 300 limits access\n-        to Bokeh tools)(the default is 300)\n-\n-    \"\"\"\n-    reset_output()\n-    output_notebook()\n-\n-    y_max = 1\n-\n-    if not source_columns:\n-        source_columns = [\"NewProcessName\", \"EventID\", \"CommandLine\"]\n-    if time_column not in source_columns:\n-        source_columns.append(time_column)\n-\n-    if \"CommandLine\" in source_columns:\n-        graph_df = data[source_columns].copy()\n-        graph_df[_WRAP_CMDL] = graph_df.apply(\n-            lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n-        )\n-    else:\n-        graph_df = data[source_columns].copy()\n-\n-    # if we have an overlay - add this data and shift the y co-ordinates to\n-    # show on two separate lines\n-    if overlay_data is not None:\n-        overlay_colums = (\n-            overlay_colums if overlay_colums is not None else source_columns\n-        )\n-        if time_column not in overlay_colums:\n-            overlay_colums.append(time_column)\n-        if \"CommandLine\" in overlay_colums:\n-            overlay_df = overlay_data[overlay_colums].copy()\n-            overlay_df[_WRAP_CMDL] = overlay_df.apply(\n-                lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n-            )\n-        else:\n-            overlay_df = overlay_data[overlay_colums].copy()\n-        graph_df[\"y_index\"] = 2\n-        overlay_df[\"y_index\"] = 1\n-        y_max = 2\n-    else:\n-        graph_df[\"y_index\"] = 1\n-\n-    source = ColumnDataSource(graph_df)\n-\n-    # build the tool tips from columns (excluding these)\n-    excl_cols = [time_column, \"CommandLine\"]\n-    tool_tip_items = [\n-        (f\"{col}\", f\"@{col}\") for col in source_columns if col not in excl_cols\n-    ]\n-    if _WRAP_CMDL in graph_df:\n-        tool_tip_items.append((\"CommandLine\", f\"@{_WRAP_CMDL}\"))\n-    hover = HoverTool(\n-        tooltips=tool_tip_items,\n-        formatters={\"Tooltip\": \"printf\"}\n-        # display a tooltip whenever the cursor is vertically in line with a glyph\n-        # ,mode='vline'\n-    )\n-\n-    if not title:\n-        title = \"Event Timeline\"\n-    else:\n-        title = \"Timeline {}\".format(title)\n-\n-    # tools = 'pan, box_zoom, wheel_zoom, reset, undo, redo, save, hover'\n-    plot = figure(\n-        min_border_left=50,\n-        plot_height=height,\n-        plot_width=900,\n-        x_axis_label=\"Event Time\",\n-        x_axis_type=\"datetime\",\n-        x_minor_ticks=10,\n-        tools=[hover, \"pan\", \"xwheel_zoom\", \"box_zoom\", \"reset\"],\n-        title=title,\n-    )\n-    plot.yaxis.visible = False\n-\n-    # Tick formatting for different zoom levels\n-    # '%H:%M:%S.%3Nms\n-    tick_format = DatetimeTickFormatter()\n-    tick_format.days = [\"%m-%d %H:%M\"]\n-    tick_format.hours = [\"%H:%M:%S\"]\n-    tick_format.minutes = [\"%H:%M:%S\"]\n-    tick_format.seconds = [\"%H:%M:%S\"]\n-    tick_format.milliseconds = [\"%H:%M:%S.%3N\"]\n-\n-    plot.xaxis[0].formatter = tick_format\n-    plot.circle(\n-        x=time_column, y=\"y_index\", color=\"navy\", alpha=0.5, size=10, source=source\n-    )\n-\n-    if overlay_data is not None:\n-        overlay_source = ColumnDataSource(overlay_df)\n-        plot.circle(\n-            x=time_column,\n-            y=\"y_index\",\n-            color=\"green\",\n-            alpha=0.5,\n-            size=10,\n-            source=overlay_source,\n-        )\n-\n-    # Adding data labels stops everything working!\n-    # labels = LabelSet(x=time_column, y='y_index', y_offset=5,\n-    #                   text='NewProcessName', source=source,\n-    #                   angle='90deg', text_font_size='8pt')\n-    # p.add_layout(labels)\n-\n-    # if we have an alert, plot the time as a line\n-    if alert is not None:\n-        x_alert_label = pd.Timestamp(alert[\"StartTimeUtc\"])\n-        plot.line(x=[x_alert_label, x_alert_label], y=[0, y_max + 1])\n-        alert_label = Label(\n-            x=x_alert_label,\n-            y=0,\n-            y_offset=10,\n-            x_units=\"data\",\n-            y_units=\"data\",\n-            text=\"< Alert time\",\n-            render_mode=\"css\",\n-            border_line_color=\"red\",\n-            border_line_alpha=1.0,\n-            background_fill_color=\"white\",\n-            background_fill_alpha=1.0,\n-        )\n-\n-        plot.add_layout(alert_label)\n-\n-        print(\"Alert start time = \", alert[\"StartTimeUtc\"])\n-\n-    show(plot)\n-\n-\n-def _wrap_text(source_string, wrap_len):\n-    if len(source_string) <= wrap_len:\n-        return source_string\n-    out_string = \"\"\n-    input_parts = source_string.split()\n-    out_line = \"\"\n-    for part in input_parts:\n-        if len(part) > wrap_len:\n-            if out_line:\n-                out_string += out_line + \"\\n\"\n-                out_line = \"\"\n-            out_line = part[0:wrap_len] + \"...\"\n-        else:\n-            if out_line:\n-                out_line += \" \" + part\n-            else:\n-                out_line = part\n-            if len(out_line) > wrap_len:\n-                out_string += out_line + \"\\n\"\n-                out_line = \"\"\n-\n-    return out_string\n \n",
        "source_code_with_indent": "    )\n\n\n# Constants\n<DED>_WRAP = 50\n_WRAP_CMDL = \"WrapCmdl\"\n\n\n# Need to refactor this to allow multiple data sets.\n# pylint: disable=too-many-arguments, too-many-locals\n# pylint: disable=too-many-statements, too-many-branches\n@export  # noqa: C901, MC0001\ndef display_timeline(\n    data: pd.DataFrame,\n    alert: SecurityAlert = None,\n    overlay_data: pd.DataFrame = None,\n    title: str = None,\n    time_column: str = \"TimeGenerated\",\n    source_columns: list = None,\n    overlay_colums: list = None,\n    height: int = 300,\n):\n    <IND>\"\"\"\n    Display a timeline of events.\n\n    Parameters\n    ----------\n    data : pd.DataFrame\n        Input DataFrame\n    alert : SecurityAlert, optional\n        Input alert (the default is None)\n    overlay_data : pd.DataFrame, optional\n        Second event stream to display as overlay\n        (the default is None)\n    title : str, optional\n        Title to display (the default is None)\n    time_column : str, optional\n        Name of the timestamp column\n        (the default is 'TimeGenerated')\n    source_columns : list, optional\n        List of source columns to use in tooltips\n        (the default is None)\n    overlay_colums : list, optional\n        List of source columns to use in overlay data tooltips.\n        (the default is None)\n    height : int, optional\n        the height of the plot figure (under 300 limits access\n        to Bokeh tools)(the default is 300)\n\n    \"\"\"\n    reset_output()\n    output_notebook()\n\n    y_max = 1\n\n    if not source_columns:\n        <IND>source_columns = [\"NewProcessName\", \"EventID\", \"CommandLine\"]\n    <DED>if time_column not in source_columns:\n        <IND>source_columns.append(time_column)\n\n    <DED>if \"CommandLine\" in source_columns:\n        <IND>graph_df = data[source_columns].copy()\n        graph_df[_WRAP_CMDL] = graph_df.apply(\n            lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n        )\n    <DED>else:\n        <IND>graph_df = data[source_columns].copy()\n\n    # if we have an overlay - add this data and shift the y co-ordinates to\n    # show on two separate lines\n    <DED>if overlay_data is not None:\n        <IND>overlay_colums = (\n            overlay_colums if overlay_colums is not None else source_columns\n        )\n        if time_column not in overlay_colums:\n            <IND>overlay_colums.append(time_column)\n        <DED>if \"CommandLine\" in overlay_colums:\n            <IND>overlay_df = overlay_data[overlay_colums].copy()\n            overlay_df[_WRAP_CMDL] = overlay_df.apply(\n                lambda x: _wrap_text(x.CommandLine, _WRAP), axis=1\n            )\n        <DED>else:\n            <IND>overlay_df = overlay_data[overlay_colums].copy()\n        <DED>graph_df[\"y_index\"] = 2\n        overlay_df[\"y_index\"] = 1\n        y_max = 2\n    <DED>else:\n        <IND>graph_df[\"y_index\"] = 1\n\n    <DED>source = ColumnDataSource(graph_df)\n\n    # build the tool tips from columns (excluding these)\n    excl_cols = [time_column, \"CommandLine\"]\n    tool_tip_items = [\n        (f\"{col}\", f\"@{col}\") for col in source_columns if col not in excl_cols\n    ]\n    if _WRAP_CMDL in graph_df:\n        <IND>tool_tip_items.append((\"CommandLine\", f\"@{_WRAP_CMDL}\"))\n    <DED>hover = HoverTool(\n        tooltips=tool_tip_items,\n        formatters={\"Tooltip\": \"printf\"}\n        # display a tooltip whenever the cursor is vertically in line with a glyph\n        # ,mode='vline'\n    )\n\n    if not title:\n        <IND>title = \"Event Timeline\"\n    <DED>else:\n        <IND>title = \"Timeline {}\".format(title)\n\n    # tools = 'pan, box_zoom, wheel_zoom, reset, undo, redo, save, hover'\n    <DED>plot = figure(\n        min_border_left=50,\n        plot_height=height,\n        plot_width=900,\n        x_axis_label=\"Event Time\",\n        x_axis_type=\"datetime\",\n        x_minor_ticks=10,\n        tools=[hover, \"pan\", \"xwheel_zoom\", \"box_zoom\", \"reset\"],\n        title=title,\n    )\n    plot.yaxis.visible = False\n\n    # Tick formatting for different zoom levels\n    # '%H:%M:%S.%3Nms\n    tick_format = DatetimeTickFormatter()\n    tick_format.days = [\"%m-%d %H:%M\"]\n    tick_format.hours = [\"%H:%M:%S\"]\n    tick_format.minutes = [\"%H:%M:%S\"]\n    tick_format.seconds = [\"%H:%M:%S\"]\n    tick_format.milliseconds = [\"%H:%M:%S.%3N\"]\n\n    plot.xaxis[0].formatter = tick_format\n    plot.circle(\n        x=time_column, y=\"y_index\", color=\"navy\", alpha=0.5, size=10, source=source\n    )\n\n    if overlay_data is not None:\n        <IND>overlay_source = ColumnDataSource(overlay_df)\n        plot.circle(\n            x=time_column,\n            y=\"y_index\",\n            color=\"green\",\n            alpha=0.5,\n            size=10,\n            source=overlay_source,\n        )\n\n    # Adding data labels stops everything working!\n    # labels = LabelSet(x=time_column, y='y_index', y_offset=5,\n    #                   text='NewProcessName', source=source,\n    #                   angle='90deg', text_font_size='8pt')\n    # p.add_layout(labels)\n\n    # if we have an alert, plot the time as a line\n    <DED>if alert is not None:\n        <IND>x_alert_label = pd.Timestamp(alert[\"StartTimeUtc\"])\n        plot.line(x=[x_alert_label, x_alert_label], y=[0, y_max + 1])\n        alert_label = Label(\n            x=x_alert_label,\n            y=0,\n            y_offset=10,\n            x_units=\"data\",\n            y_units=\"data\",\n            text=\"< Alert time\",\n            render_mode=\"css\",\n            border_line_color=\"red\",\n            border_line_alpha=1.0,\n            background_fill_color=\"white\",\n            background_fill_alpha=1.0,\n        )\n\n        plot.add_layout(alert_label)\n\n        print(\"Alert start time = \", alert[\"StartTimeUtc\"])\n\n    <DED>show(plot)\n\n\n<DED>def _wrap_text(source_string, wrap_len):\n    <IND>if len(source_string) <= wrap_len:\n        <IND>return source_string\n    <DED>out_string = \"\"\n    input_parts = source_string.split()\n    out_line = \"\"\n    for part in input_parts:\n        <IND>if len(part) > wrap_len:\n            <IND>if out_line:\n                <IND>out_string += out_line + \"\\n\"\n                out_line = \"\"\n            <DED>out_line = part[0:wrap_len] + \"...\"\n        <DED>else:\n            <IND>if out_line:\n                <IND>out_line += \" \" + part\n            <DED>else:\n                <IND>out_line = part\n            <DED>if len(out_line) > wrap_len:\n                <IND>out_string += out_line + \"\\n\"\n                out_line = \"\"\n\n    <DED><DED><DED>return out_string\n\n",
        "source_code_with_indent_exact_match": true,
        "target_code_with_indent": "    )\n\n",
        "target_code_with_indent_exact_match": true
      }
    ]
  },
  {
    "project": "microsoft/msticpy",
    "commit": "119b81ca8d0a9f8f2222353c4a26ec0593b65301",
    "filename": "msticpy/nbtools/nbdisplay.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/nbdisplay.py",
    "file_hunks_size": 10,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/nbdisplay.py:489:31 Incompatible variable type [9]: alert is declared to have type `SecurityAlert` but is used as type `None`.",
    "message": " alert is declared to have type `SecurityAlert` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 489,
    "warning_line": "    logon_event: pd.DataFrame, alert: SecurityAlert = None, os_family: str = None"
  },
  {
    "project": "microsoft/msticpy",
    "commit": "119b81ca8d0a9f8f2222353c4a26ec0593b65301",
    "filename": "msticpy/nbtools/security_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/security_base.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/security_base.py:312:36 Incompatible variable type [9]: entity_type is declared to have type `str` but is used as type `None`.",
    "message": " entity_type is declared to have type `str` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 312,
    "warning_line": "        self, entity_property: str, entity_type: str = None, entity: Entity = None"
  },
  {
    "project": "microsoft/msticpy",
    "commit": "119b81ca8d0a9f8f2222353c4a26ec0593b65301",
    "filename": "msticpy/nbtools/security_base.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/microsoft-msticpy/msticpy/nbtools/security_base.py",
    "file_hunks_size": 5,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "msticpy/nbtools/security_base.py:312:61 Incompatible variable type [9]: entity is declared to have type `Entity` but is used as type `None`.",
    "message": " entity is declared to have type `Entity` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 312,
    "warning_line": "        self, entity_property: str, entity_type: str = None, entity: Entity = None"
  }
]