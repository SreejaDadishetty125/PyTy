[
  {
    "project": "hyperledger/indy-plenum",
    "commit": "716d61875455ebfbdc6d6c9c9ced4c6ee1ad83c8",
    "filename": "plenum/server/node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/server/node.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/server/node.py:1114:35 Incompatible variable type [9]: limit is declared to have type `int` but is used as type `None`.",
    "message": " limit is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1114,
    "warning_line": "    def serviceElectorOutBox(self, limit: int=None) -> int:"
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "716d61875455ebfbdc6d6c9c9ced4c6ee1ad83c8",
    "filename": "plenum/server/node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/server/node.py",
    "file_hunks_size": 17,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/server/node.py:1135:40 Incompatible variable type [9]: limit is declared to have type `int` but is used as type `None`.",
    "message": " limit is declared to have type `int` but is used as type `None`.",
    "rule_id": "Incompatible variable type [9]",
    "warning_line_no": 1135,
    "warning_line": "    async def serviceElectorInbox(self, limit: int=None) -> int:"
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "716d61875455ebfbdc6d6c9c9ced4c6ee1ad83c8",
    "filename": "plenum/test/test_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/test/test_node.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/test/test_node.py:833:8 Incompatible return type [7]: Expected `TestReplica` but got `replica.Replica`.",
    "message": " Expected `TestReplica` but got `replica.Replica`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 833,
    "warning_line": "        return preplicas[0]"
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "716d61875455ebfbdc6d6c9c9ced4c6ee1ad83c8",
    "filename": "plenum/test/test_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/test/test_node.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/test/test_node.py:838:4 Incompatible return type [7]: Expected `Sequence[TestReplica]` but got `List[replica.Replica]`.",
    "message": " Expected `Sequence[TestReplica]` but got `List[replica.Replica]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 838,
    "warning_line": "    return [node.replicas[instId] for node in nodes if"
  },
  {
    "project": "hyperledger/indy-plenum",
    "commit": "716d61875455ebfbdc6d6c9c9ced4c6ee1ad83c8",
    "filename": "plenum/test/test_node.py",
    "filename_after_commit": "/home/chowyi/TypeAnnotation_Study/GitHub/hyperledger-indy-plenum/plenum/test/test_node.py",
    "file_hunks_size": 4,
    "min_patch_found": false,
    "single_hunk": false,
    "fit_TFix": false,
    "delete_only_patch": false,
    "has_suppression_all_hunks": false,
    "full_warning_msg": "plenum/test/test_node.py:844:4 Incompatible return type [7]: Expected `Sequence[TestReplica]` but got `List[replica.Replica]`.",
    "message": " Expected `Sequence[TestReplica]` but got `List[replica.Replica]`.",
    "rule_id": "Incompatible return type [7]",
    "warning_line_no": 844,
    "warning_line": "    return [node.replicas[instId] for node in nodes]"
  }
]