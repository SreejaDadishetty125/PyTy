[
  {
    "repo": "DragonMinded/bemaniutils",
    "repo_dir": "./GitHub/GitHub/DragonMinded-bemaniutils",
    "commit": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da",
    "filename": "bemani/format/afp.py",
    "source_code": "                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n            elif opcode == AP2Action.ADD_NUM_REGISTER:",
    "target_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constraint == 0 else 'check stack')}\")\n            <DED>elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `constrained` is used but not defined in the current scope.",
    "warning_line": 3041,
    "pred_top-1": {
      "pred": "elif opcode == AP2Action.ADD_NUM_REGISTER:\n    action_name = 'Add Num Register'\n    register_name = get_register_name(action.register)\n    value = action.value\n    vprint(f\"{prefix}      {lineno}: {action_name} {register_name} = {value}\")\n    constraint = action.constraint\n    constrained = action.constrained\n    vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")",
      "pred_parsed": "                elif opcode == AP2Action.ADD_NUM_REGISTER:\n                action_name = 'Add Num Register'\n                register_name = get_register_name(action.register)\n                value = action.value\n                vprint(f\"{prefix}      {lineno}: {action_name} {register_name} = {value}\")\n                constraint = action.constraint\n                constrained = action.constrained\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n                constrained = 0",
      "pred_parsed": "                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n                constrained = 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "elif opcode == AP2Action.ADD_NUM_REGISTER:\n                    constraint = action.constraint\n                    constrained = action.constrained\n                    vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")",
      "pred_parsed": "                elif opcode == AP2Action.ADD_NUM_REGISTER:\n                constraint = action.constraint\n                constrained = action.constrained\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n                constrained = 0",
      "pred_parsed": "                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n                constrained = 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n                constrained = 0",
      "pred_parsed": "                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n                constrained = 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "operatorai/modelstore",
    "repo_dir": "./GitHub/GitHub/operatorai-modelstore",
    "commit": "844f81b8e61e526f245bc146b37d65966f0433a2",
    "filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "source_code": "    # Run some test predictions\n    results = mean_squared_error(y_test, model.predict(X_test))",
    "target_code": "    # Run some test predictions\n    _, X_test, _, y_test = load_diabetes_dataset()\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `y_test` is used but not defined in the current scope.",
    "warning_line": 42,
    "pred_top-1": {
      "pred": "# Run some test predictions\ny_test = ... # Define y_test\nresults = mean_squared_error(y_test, model.predict(X_test))",
      "pred_parsed": "    # Run some test predictions\n    y_test = ... # Define y_test\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# Run some test predictions\ny_test = [1, 2, 3, 4, 5]\nresults = mean_squared_error(y_test, model.predict(X_test))",
      "pred_parsed": "    # Run some test predictions\n    y_test = [1, 2, 3, 4, 5]\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# Run some test predictions\ny_test = [1, 2, 3, 4, 5]\nresults = mean_squared_error(y_test, model.predict(X_test))",
      "pred_parsed": "    # Run some test predictions\n    y_test = [1, 2, 3, 4, 5]\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "# Run some test predictions\ny_test = [1, 2, 3]\nresults = mean_squared_error(y_test, model.predict(X_test))",
      "pred_parsed": "    # Run some test predictions\n    y_test = [1, 2, 3]\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# Run some test predictions\ny_test = ... # Add the appropriate value for y_test\nresults = mean_squared_error(y_test, model.predict(X_test))",
      "pred_parsed": "    # Run some test predictions\n    y_test = ... # Add the appropriate value for y_test\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "openstack/swift",
    "repo_dir": "./GitHub/GitHub/openstack-swift",
    "commit": "2a38a040924b621bce4e999b3c7dab692f497a21",
    "filename": "swift/proxy/controllers/obj.py",
    "source_code": "    \"\"\"WSGI controller for object requests.\"\"\"\n    server_type = _('Object')",
    "target_code": "    <IND>\"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `_` is used but not defined in the current scope.",
    "warning_line": 235,
    "pred_top-1": {
      "pred": "\"\"\"WSGI controller for object requests.\"\"\"\nimport gettext\n_ = gettext.gettext\nserver_type = _('Object')",
      "pred_parsed": "    \"\"\"WSGI controller for object requests.\"\"\"\n    import gettext\n    _ = gettext.gettext\n    server_type = _('Object')\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "pred_top-2": {
      "pred": "\"\"\"WSGI controller for object requests.\"\"\"\ndef _(string):\n    return string\n\nserver_type = _('Object')",
      "pred_parsed": "    \"\"\"WSGI controller for object requests.\"\"\"\n    def _(string):\n    return string\n    \n    server_type = _('Object')\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "pred_top-3": {
      "pred": "\"\"\"WSGI controller for object requests.\"\"\"\nimport gettext\n_ = gettext.gettext\nserver_type = _('Object')",
      "pred_parsed": "    \"\"\"WSGI controller for object requests.\"\"\"\n    import gettext\n    _ = gettext.gettext\n    server_type = _('Object')\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "pred_top-4": {
      "pred": "\"\"\"WSGI controller for object requests.\"\"\"\nimport gettext\n\n_ = gettext.gettext\nserver_type = _('Object')",
      "pred_parsed": "    \"\"\"WSGI controller for object requests.\"\"\"\n    import gettext\n    \n    _ = gettext.gettext\n    server_type = _('Object')\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "pred_top-5": {
      "pred": "\"\"\"WSGI controller for object requests.\"\"\"\ndef _(string):\n    return string\n\nserver_type = _('Object')",
      "pred_parsed": "    \"\"\"WSGI controller for object requests.\"\"\"\n    def _(string):\n    return string\n    \n    server_type = _('Object')\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "inasafe/inasafe",
    "repo_dir": "./GitHub/GitHub/inasafe-inasafe",
    "commit": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "filename": "safe/gui/tools/peta_bencana_dialog.py",
    "source_code": "    @pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):",
    "target_code": "\n    <DED>@pyqtSlot(bool)  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `pyqtSignature` is used but not defined in the current scope.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "@pyqtSlot()\n@pyqtSignature('bool')  # prevents actions being handled twice\ndef help_toggled(self, flag):",
      "pred_parsed": "    @pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "@pyqtSlot()\n@pyqtSignature('bool')  # prevents actions being handled twice\ndef help_toggled(self, flag):",
      "pred_parsed": "    @pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "@pyqtSlot()\n@pyqtSignature('bool')  # prevents actions being handled twice\ndef help_toggled(self, flag):",
      "pred_parsed": "    @pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "@pyqtSlot()\n@pyqtSignature('bool')  # prevents actions being handled twice\ndef help_toggled(self, flag):",
      "pred_parsed": "    @pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "@pyqtSlot()\n@pyqtSignature('bool')  # prevents actions being handled twice\ndef help_toggled(self, flag):",
      "pred_parsed": "    @pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "fbchat-dev/fbchat",
    "repo_dir": "./GitHub/GitHub/fbchat-dev-fbchat",
    "commit": "deda3b433d5759311fb8232f1d9b6db23a9d4372",
    "filename": "fbchat/_group.py",
    "source_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n\n    def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": admin, \"thread_fbid\": self.id}",
    "target_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self.session._payload_post(\"/chat/remove_participants/\", data)\n\n    <DED>def _admin_status(self, user_ids: Iterable[str], status: bool):\n        <IND>data = {\"add\": status, \"thread_fbid\": self.id}\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `admin` is used but not defined in the current scope.",
    "warning_line": 75,
    "pred_top-1": {
      "pred": "def _admin_status(self, user_ids: Iterable[str], status: bool):\n    data = {\"add\": [str(user_id) for user_id in user_ids], \"thread_fbid\": self.id}\n    j = self._payload_post(\"/chat/add_admin/\", data)",
      "pred_parsed": "        def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": [str(user_id) for user_id in user_ids], \"thread_fbid\": self.id}\n        j = self._payload_post(\"/chat/add_admin/\", data)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def _admin_status(self, user_ids: Iterable[str], status: bool):\n    data = {\"add\": status, \"thread_fbid\": self.id}\n    for user_id in user_ids:\n        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self._payload_post(\"/chat/remove_participants/\", data)",
      "pred_parsed": "        def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": status, \"thread_fbid\": self.id}\n        for user_id in user_ids:\n        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def _admin_status(self, user_ids: Iterable[str], status: bool):\n    data = {\"add\": [str(user_id) for user_id in user_ids], \"thread_fbid\": self.id}\n    j = self._payload_post(\"/chat/add_admin/\", data)",
      "pred_parsed": "        def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": [str(user_id) for user_id in user_ids], \"thread_fbid\": self.id}\n        j = self._payload_post(\"/chat/add_admin/\", data)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": [user_id for user_id in user_ids], \"thread_fbid\": self.id}\n        j = self._payload_post(\"/chat/add_admins/\", data)",
      "pred_parsed": "        def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": [user_id for user_id in user_ids], \"thread_fbid\": self.id}\n        j = self._payload_post(\"/chat/add_admins/\", data)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def _admin_status(self, user_ids: Iterable[str], status: bool):\n    data = {\"add\": [user_id for user_id in user_ids], \"thread_fbid\": self.id}\n    j = self._payload_post(\"/chat/add_admin/\", data)",
      "pred_parsed": "        def _admin_status(self, user_ids: Iterable[str], status: bool):\n        data = {\"add\": [user_id for user_id in user_ids], \"thread_fbid\": self.id}\n        j = self._payload_post(\"/chat/add_admin/\", data)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "pandas-dev/pandas",
    "repo_dir": "./GitHub/GitHub/pandas-dev-pandas",
    "commit": "6c304c78d6a0559525abe16f03465d275c516455",
    "filename": "scripts/bench_join_multi.py",
    "source_code": "key1 = [rands(10) for _ in xrange(N)]\nkey2 = [rands(10) for _ in xrange(N)]\n\nzipped = izip(key1, key2)",
    "target_code": "\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = list(zip(key1, key2))\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `xrange` is used but not defined in the current scope.",
    "warning_line": 10,
    "pred_top-1": {
      "pred": "N = 10\n\ndef rands(n):\n    return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(n))\n\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)",
      "pred_parsed": "N = 10\n\ndef rands(n):\nreturn ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(n))\n\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "import itertools\n\ndef rands(n):\n    return [random.randint(0, n) for _ in range(n)]\n\nN = 10\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = itertools.izip(key1, key2)",
      "pred_parsed": "import itertools\n\ndef rands(n):\nreturn [random.randint(0, n) for _ in range(n)]\n\nN = 10\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = itertools.izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "N = 10\n\ndef rands(n):\n    return [random.randint(0, n) for _ in range(n)]\n\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)",
      "pred_parsed": "N = 10\n\ndef rands(n):\nreturn [random.randint(0, n) for _ in range(n)]\n\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "N = 10\n\ndef rands(n):\n    return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(n))\n\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)",
      "pred_parsed": "N = 10\n\ndef rands(n):\nreturn ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(n))\n\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "N = 10\n\ndef rands(n):\n    return [random.randint(0, n) for _ in range(n)]\n\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)",
      "pred_parsed": "N = 10\n\ndef rands(n):\nreturn [random.randint(0, n) for _ in range(n)]\n\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = izip(key1, key2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "openstack/ironic",
    "repo_dir": "./GitHub/GitHub/openstack-ironic",
    "commit": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18",
    "filename": "ironic/api/controllers/v1/node.py",
    "source_code": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, unicode)\n    def get(self, node_id):",
    "target_code": "    # GET nodes/<uuid>/state/power\n    <IND>@wsme_pecan.wsexpose(NodePowerState, wtypes.text)\n    def get(self, node_id):\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `unicode` is used but not defined in the current scope.",
    "warning_line": 73,
    "pred_top-1": {
      "pred": "# GET nodes/<uuid>/state/power\n@wsme_pecan.wsexpose(NodePowerState)\ndef get(self, node_id):",
      "pred_parsed": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# GET nodes/<uuid>/state/power\n@wsme_pecan.wsexpose(NodePowerState, str)\ndef get(self, node_id):",
      "pred_parsed": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, str)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# GET nodes/<uuid>/state/power\n@wsme_pecan.wsexpose(NodePowerState)\ndef get(self, node_id):",
      "pred_parsed": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# GET nodes/<uuid>/state/power\n@wsme_pecan.wsexpose(NodePowerState, str)\ndef get(self, node_id):",
      "pred_parsed": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, str)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# GET nodes/<uuid>/state/power\n@wsme_pecan.wsexpose(NodePowerState, str)\ndef get(self, node_id):",
      "pred_parsed": "    # GET nodes/<uuid>/state/power\n    @wsme_pecan.wsexpose(NodePowerState, str)\n    def get(self, node_id):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "inasafe/inasafe",
    "repo_dir": "./GitHub/GitHub/inasafe-inasafe",
    "commit": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "filename": "safe/gui/tools/batch/batch_dialog.py",
    "source_code": "    @pyqtSignature('')\n    def run_selected_clicked(self):",
    "target_code": "\n    <DED>@pyqtSlot()\n    def run_selected_clicked(self):\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `pyqtSignature` is used but not defined in the current scope.",
    "warning_line": 570,
    "pred_top-1": {
      "pred": "from PyQt5.QtCore import pyqtSignature\n\n@pyqtSignature('')\ndef run_selected_clicked(self):",
      "pred_parsed": "    from PyQt5.QtCore import pyqtSignature\n    \n    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "from PyQt5.QtCore import pyqtSignature\n\n@pyqtSignature('')\ndef run_selected_clicked(self):",
      "pred_parsed": "    from PyQt5.QtCore import pyqtSignature\n    \n    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "from PyQt5.QtCore import pyqtSignature\n    \n    @pyqtSignature('')\n    def run_selected_clicked(self):",
      "pred_parsed": "    from PyQt5.QtCore import pyqtSignature\n    \n    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "from PyQt5.QtCore import pyqtSignature\n\n@pyqtSignature('')\ndef run_selected_clicked(self):",
      "pred_parsed": "    from PyQt5.QtCore import pyqtSignature\n    \n    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "from PyQt5.QtCore import pyqtSignature\n\n@pyqtSignature('')\ndef run_selected_clicked(self):",
      "pred_parsed": "    from PyQt5.QtCore import pyqtSignature\n    \n    @pyqtSignature('')\n    def run_selected_clicked(self):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "usnistgov/fipy",
    "repo_dir": "./GitHub/GitHub/usnistgov-fipy",
    "commit": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "filename": "examples/convection/exponential2D/mesh2D.py",
    "source_code": "    raw_input('finished')",
    "target_code": "\n    input('finished')\n\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `raw_input` is used but not defined in the current scope.",
    "warning_line": 54,
    "pred_top-1": {
      "pred": "input('finished')",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "input('finished')",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "input('finished')",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "input('finished')",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "input('finished')",
      "pred_parsed": "    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "usnistgov/fipy",
    "repo_dir": "./GitHub/GitHub/usnistgov-fipy",
    "commit": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "filename": "examples/levelSet/distanceFunction/square.py",
    "source_code": "    viewer.plot()\n    raw_input('finished')",
    "target_code": "    viewer.plot()\n    input('finished')\n\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `raw_input` is used but not defined in the current scope.",
    "warning_line": 70,
    "pred_top-1": {
      "pred": "viewer.plot()\ninput('finished')",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "viewer.plot()\ninput('finished')",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "viewer.plot()\ninput('finished')",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "viewer.plot()\ninput('finished')",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "viewer.plot()\ninput('finished')",
      "pred_parsed": "    viewer.plot()\n    input('finished')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "lnbits/lnbits-legend",
    "repo_dir": "./GitHub/GitHub/lnbits-lnbits-legend",
    "commit": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "filename": "lnbits/wallets/clightning.py",
    "source_code": "        if not r.ok:\n            return PaymentStatus(r, None)\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None",
    "target_code": "        if not r.ok:\n            <IND>return PaymentStatus(None)\n        <DED>payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n        payment = payments[0] if payments else None\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `payment_hash` is used but not defined in the current scope.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "if not r.ok:\n    return PaymentStatus(r, None)\n\npayment_hash = r.json()[\"payment_hash\"]\npayments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\npayment = payments[0] if payments else None",
      "pred_parsed": "        if not r.ok:\n        return PaymentStatus(r, None)\n        \n        payment_hash = r.json()[\"payment_hash\"]\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if not r.ok:\n    return PaymentStatus(r, None)\n\npayment_hash = r.json()[\"payment_hash\"]\npayments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\npayment = payments[0] if payments else None",
      "pred_parsed": "        if not r.ok:\n        return PaymentStatus(r, None)\n        \n        payment_hash = r.json()[\"payment_hash\"]\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if not r.ok:\n    return PaymentStatus(r, None)\n\npayment_hash = r.json()[\"payment_hash\"]\npayments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\npayment = payments[0] if payments else None",
      "pred_parsed": "        if not r.ok:\n        return PaymentStatus(r, None)\n        \n        payment_hash = r.json()[\"payment_hash\"]\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if not r.ok:\n    return PaymentStatus(r, None)\n\npayment_hash = r.json()[\"payment_hash\"]\npayments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\npayment = payments[0] if payments else None",
      "pred_parsed": "        if not r.ok:\n        return PaymentStatus(r, None)\n        \n        payment_hash = r.json()[\"payment_hash\"]\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if not r.ok:\n    return PaymentStatus(r, None)\n\npayment_hash = r.json()[\"payment_hash\"]\npayments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\npayment = payments[0] if payments else None",
      "pred_parsed": "        if not r.ok:\n        return PaymentStatus(r, None)\n        \n        payment_hash = r.json()[\"payment_hash\"]\n        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "cyverse/atmosphere",
    "repo_dir": "./GitHub/GitHub/cyverse-atmosphere",
    "commit": "d8f8caa69f3b76619119aa5a8336834cea381470",
    "filename": "api/v2/views/platform_type.py",
    "source_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):",
    "target_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.views.base import AuthReadOnlyViewSet\n\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    <IND>",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `viewsets` is used but not defined in the current scope.",
    "warning_line": 7,
    "pred_top-1": {
      "pred": "import rest_framework.viewsets as viewsets\n\nfrom api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):",
      "pred_parsed": "import rest_framework.viewsets as viewsets\n\nfrom api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "import rest_framework.viewsets as viewsets\n\nfrom api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\n    serializer_class = PlatformTypeSerializer",
      "pred_parsed": "import rest_framework.viewsets as viewsets\n\nfrom api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\nserializer_class = PlatformTypeSerializer\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "import rest_framework.viewsets as viewsets\n\nfrom api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\n    serializer_class = PlatformTypeSerializer\n    queryset = PlatformType.objects.all()",
      "pred_parsed": "import rest_framework.viewsets as viewsets\n\nfrom api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\nserializer_class = PlatformTypeSerializer\nqueryset = PlatformType.objects.all()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "import rest_framework.viewsets as viewsets\n\nfrom api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):",
      "pred_parsed": "import rest_framework.viewsets as viewsets\n\nfrom api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "import rest_framework.viewsets as viewsets\n\nfrom api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\n    serializer_class = PlatformTypeSerializer\n    queryset = PlatformType.objects.all()",
      "pred_parsed": "import rest_framework.viewsets as viewsets\n\nfrom api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\nserializer_class = PlatformTypeSerializer\nqueryset = PlatformType.objects.all()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "tartiflette/tartiflette",
    "repo_dir": "./GitHub/GitHub/tartiflette-tartiflette",
    "commit": "3687c351642880d71c17be9eb508ef4f80bc6dcc",
    "filename": "tartiflette/types/scalar.py",
    "source_code": "        return self is other or (\n            isintance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives",
    "target_code": "        return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `isintance` is used but not defined in the current scope.",
    "warning_line": 166,
    "pred_top-1": {
      "pred": "return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives",
      "pred_parsed": "        return self is other or (\n        isinstance(other, GraphQLScalarTypeExtension)\n        and other.directives == self.directives\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives",
      "pred_parsed": "        return self is other or (\n        isinstance(other, GraphQLScalarTypeExtension)\n        and other.directives == self.directives\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives",
      "pred_parsed": "        return self is other or (\n        isinstance(other, GraphQLScalarTypeExtension)\n        and other.directives == self.directives\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives",
      "pred_parsed": "        return self is other or (\n        isinstance(other, GraphQLScalarTypeExtension)\n        and other.directives == self.directives\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n)",
      "pred_parsed": "        return self is other or (\n        isinstance(other, GraphQLScalarTypeExtension)\n        and other.directives == self.directives\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "wrye-bash/wrye-bash",
    "repo_dir": "./GitHub/GitHub/wrye-bash-wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "source_code": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))",
    "target_code": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `xrange` is used but not defined in the current scope.",
    "warning_line": 384,
    "pred_top-1": {
      "pred": "_example_code = 'F'\n_valid_ingestibles = set(range(10, 14))",
      "pred_parsed": "    _example_code = 'F'\n    _valid_ingestibles = set(range(10, 14))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "_example_code = 'F'\n_valid_ingestibles = set(range(10, 14))",
      "pred_parsed": "    _example_code = 'F'\n    _valid_ingestibles = set(range(10, 14))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "_example_code = u'F'\n_valid_ingestibles = set(range(10, 14))",
      "pred_parsed": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "_example_code = 'F'\n_valid_ingestibles = set(range(10, 14))",
      "pred_parsed": "    _example_code = 'F'\n    _valid_ingestibles = set(range(10, 14))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "_example_code = 'F'\n_valid_ingestibles = set(range(10, 14))",
      "pred_parsed": "    _example_code = 'F'\n    _valid_ingestibles = set(range(10, 14))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "hail-is/hail",
    "repo_dir": "./GitHub/GitHub/hail-is-hail",
    "commit": "a4f829b77eae7fb17752eb6185ad8a5313aea629",
    "filename": "hail/python/hail/table.py",
    "source_code": "                else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                        left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),",
    "target_code": "                <DED><DED>else:\n                    <IND>def joiner(left: MatrixTable):\n                        <IND>return MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid, all_matches))\n                <DED><DED>ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `MatrixAnnotateRowsTable` is used but not defined in the current scope.",
    "warning_line": 1637,
    "pred_top-1": {
      "pred": "else:\n    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n        left._mir, right._tir, uid))\nast = Join(GetField(TopLevelReference('va'), uid),\n           GetField(TopLevelReference('vb'), uid),\n           joiner)",
      "pred_parsed": "                else:\n                joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n                GetField(TopLevelReference('vb'), uid),\n                joiner)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "else:\n    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n        left._mir, right._tir, uid))\nast = Join(GetField(TopLevelReference('va'), uid),\n           GetField(TopLevelReference('sa'), uid),\n           joiner)",
      "pred_parsed": "                else:\n                joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n                GetField(TopLevelReference('sa'), uid),\n                joiner)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "else:\n    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n        left._mir, right._tir, uid))\nast = Join(GetField(TopLevelReference('va'), uid),\n           GetField(TopLevelReference('vb'), uid),\n           joiner)",
      "pred_parsed": "                else:\n                joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n                GetField(TopLevelReference('vb'), uid),\n                joiner)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "else:\n    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n        left._mir, right._tir, uid))\nast = Join(GetField(TopLevelReference('va'), uid),\n           GetField(TopLevelReference('vb'), uid),\n           joiner)",
      "pred_parsed": "                else:\n                joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n                GetField(TopLevelReference('vb'), uid),\n                joiner)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "else:\n                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                        left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),",
      "pred_parsed": "                else:\n                joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                left._mir, right._tir, uid))\n                ast = Join(GetField(TopLevelReference('va'), uid),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "streamlit/streamlit",
    "repo_dir": "./GitHub/GitHub/streamlit-streamlit",
    "commit": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15",
    "filename": "examples/run_on_save.py",
    "source_code": "elif platform_system == \"Windows\":\n    raise Error(\"Windows not supported\")\n\nelse:\n    raise Error(\"Unknown platform\")",
    "target_code": "<DED>elif platform_system == \"Windows\":\n    <IND>raise NotImplementedError(\"Windows not supported\")\n\n<DED>else:\n    <IND>raise Exception(\"Unknown platform\")\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `Error` is used but not defined in the current scope.",
    "warning_line": 68,
    "pred_top-1": {
      "pred": "elif platform_system == \"Windows\":\n    raise Exception(\"Windows not supported\")\n\nelse:\n    raise Exception(\"Unknown platform\")",
      "pred_parsed": "elif platform_system == \"Windows\":\nraise Exception(\"Windows not supported\")\n\nelse:\nraise Exception(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "elif platform_system == \"Windows\":\n    raise Exception(\"Windows not supported\")\n\nelse:\n    raise Exception(\"Unknown platform\")",
      "pred_parsed": "elif platform_system == \"Windows\":\nraise Exception(\"Windows not supported\")\n\nelse:\nraise Exception(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "elif platform_system == \"Windows\":\n    raise Exception(\"Windows not supported\")\n\nelse:\n    raise Exception(\"Unknown platform\")",
      "pred_parsed": "elif platform_system == \"Windows\":\nraise Exception(\"Windows not supported\")\n\nelse:\nraise Exception(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "elif platform_system == \"Windows\":\n    raise Exception(\"Windows not supported\")\n\nelse:\n    raise Exception(\"Unknown platform\")",
      "pred_parsed": "elif platform_system == \"Windows\":\nraise Exception(\"Windows not supported\")\n\nelse:\nraise Exception(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "elif platform_system == \"Windows\":\n    raise Exception(\"Windows not supported\")\n\nelse:\n    raise Exception(\"Unknown platform\")",
      "pred_parsed": "elif platform_system == \"Windows\":\nraise Exception(\"Windows not supported\")\n\nelse:\nraise Exception(\"Unknown platform\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "hail-is/hail",
    "repo_dir": "./GitHub/GitHub/hail-is-hail",
    "commit": "03529d3cea41debbdb3cfd3dbc390337f438fbb5",
    "filename": "python/hail/expr/functions.py",
    "source_code": "@typecheck(structs=oneof(expr_array, listof(Struct)),\n           identifier=str)",
    "target_code": "\n<DED>@typecheck(structs=oneof(expr_array),\n           identifier=str)\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `listof` is used but not defined in the current scope.",
    "warning_line": 649,
    "pred_top-1": {
      "pred": "@typecheck(structs=oneof(expr_array, listof(Struct)), identifier=str)",
      "pred_parsed": "@typecheck(structs=oneof(expr_array, listof(Struct)), identifier=str)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "@typecheck(structs=oneof(expr_array, listof(Struct)),\n           identifier=str)\nfrom typing import List, Union\nStruct = Union[str, int]",
      "pred_parsed": "@typecheck(structs=oneof(expr_array, listof(Struct)),\nidentifier=str)\nfrom typing import List, Union\nStruct = Union[str, int]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "@typecheck(structs=oneof(expr_array, listof(Struct)), identifier=str)",
      "pred_parsed": "@typecheck(structs=oneof(expr_array, listof(Struct)), identifier=str)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "@typecheck(structs=oneof(expr_array, list(Struct)),\n           identifier=str)",
      "pred_parsed": "@typecheck(structs=oneof(expr_array, list(Struct)),\nidentifier=str)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "@typecheck(structs=oneof(expr_array, listof(Struct)), identifier=str)",
      "pred_parsed": "@typecheck(structs=oneof(expr_array, listof(Struct)), identifier=str)\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "usnistgov/fipy",
    "repo_dir": "./GitHub/GitHub/usnistgov-fipy",
    "commit": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "filename": "examples/levelSet/surfactant/square.py",
    "source_code": "    surfactantViewer.plot()\n    print surfactantVariable\n    raw_input('finished')",
    "target_code": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `raw_input` is used but not defined in the current scope.",
    "warning_line": 88,
    "pred_top-1": {
      "pred": "surfactantViewer.plot()\nprint(surfactantVariable)\ninput('finished')",
      "pred_parsed": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "pred_top-2": {
      "pred": "surfactantViewer.plot()\nprint(surfactantVariable)\ninput('finished')",
      "pred_parsed": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "pred_top-3": {
      "pred": "surfactantViewer.plot()\nprint(surfactantVariable)\ninput('finished')",
      "pred_parsed": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "pred_top-4": {
      "pred": "surfactantViewer.plot()\nprint(surfactantVariable)\ninput('finished')",
      "pred_parsed": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "pred_top-5": {
      "pred": "surfactantViewer.plot()\nprint(surfactantVariable)\ninput('finished')",
      "pred_parsed": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "wrye-bash/wrye-bash",
    "repo_dir": "./GitHub/GitHub/wrye-bash-wrye-bash",
    "commit": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "filename": "Mopy/bash/basher/frames.py",
    "source_code": "_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8)",
    "target_code": "<DED><DED>_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8)\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `xrange` is used but not defined in the current scope.",
    "warning_line": 296,
    "exception": "'pred_top-1'"
  },
  {
    "repo": "algoo/preview-generator",
    "repo_dir": "./GitHub/GitHub/algoo-preview-generator",
    "commit": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2",
    "filename": "preview_generator/preview/generic_preview.py",
    "source_code": "    def get_label(cls) -> str:\n        return self.__name__  #\u00a0default label is the class name",
    "target_code": "    def get_label(cls) -> str:\n        <IND>return cls.__name__  # default label is the class name\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `self` is used but not defined in the current scope.",
    "warning_line": 39,
    "pred_top-1": {
      "pred": "def get_label(cls) -> str:\n    return cls.__name__  #\u00a0default label is the class name",
      "pred_parsed": "    def get_label(cls) -> str:\n    return cls.__name__  #\u00a0default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def get_label(cls) -> str:\n    return cls.__name__  #\u00a0default label is the class name",
      "pred_parsed": "    def get_label(cls) -> str:\n    return cls.__name__  #\u00a0default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def get_label(cls) -> str:\n    return cls.__name__  #\u00a0default label is the class name",
      "pred_parsed": "    def get_label(cls) -> str:\n    return cls.__name__  #\u00a0default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def get_label(cls) -> str:\n    return cls.__name__  #\u00a0default label is the class name",
      "pred_parsed": "    def get_label(cls) -> str:\n    return cls.__name__  #\u00a0default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def get_label(cls) -> str:\n    return cls.__name__  #\u00a0default label is the class name",
      "pred_parsed": "    def get_label(cls) -> str:\n    return cls.__name__  #\u00a0default label is the class name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "usnistgov/fipy",
    "repo_dir": "./GitHub/GitHub/usnistgov-fipy",
    "commit": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "source_code": "    raw_input(\"finished\")",
    "target_code": "\n    input(\"finished\")\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `raw_input` is used but not defined in the current scope.",
    "warning_line": 136,
    "pred_top-1": {
      "pred": "input(\"finished\")",
      "pred_parsed": "    input(\"finished\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "input(\"finished\")",
      "pred_parsed": "    input(\"finished\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "input(\"finished\")",
      "pred_parsed": "    input(\"finished\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "input(\"finished\")",
      "pred_parsed": "    input(\"finished\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "input(\"finished\")",
      "pred_parsed": "    input(\"finished\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "naparuba/shinken",
    "repo_dir": "./GitHub/GitHub/naparuba-shinken",
    "commit": "c06286af38d1d2593644ad708ee18f4fd7842d54",
    "filename": "shinken/scheduler.py",
    "source_code": "        \n self.conf = Config()",
    "target_code": "        \n        self.conf = Config()\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `self` is used but not defined in the current scope.",
    "warning_line": 134,
    "exception": "'pred_top-1'"
  },
  {
    "repo": "strongio/torch-kalman",
    "repo_dir": "./GitHub/GitHub/strongio-torch-kalman",
    "commit": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca",
    "filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "source_code": "    def _log_prob_with_subsetting(self,\n                                  obs: Union[Tensor, Cens],\n                                  group_idx: Selector,",
    "target_code": "    <DED>def _log_prob_with_subsetting(self,\n                                  obs: Tensor,\n                                  group_idx: Selector,\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `Cens` is used but not defined in the current scope.",
    "warning_line": 172,
    "pred_top-1": {
      "pred": "def _log_prob_with_subsetting(self,\n                              obs: Union[Tensor, torch.Tensor],\n                              group_idx: Selector,",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor, torch.Tensor],\n    group_idx: Selector,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def _log_prob_with_subsetting(self,\n                              obs: Union[Tensor, CensoredTensor],\n                              group_idx: Selector,",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor, CensoredTensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def _log_prob_with_subsetting(self,\n                                  obs: Union[Tensor, CensoredTensor],\n                                  group_idx: Selector,",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor, CensoredTensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def _log_prob_with_subsetting(self,\n                                  obs: Union[Tensor, CensoredTensor],\n                                  group_idx: Selector,",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor, CensoredTensor],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def _log_prob_with_subsetting(self,\n                              obs: Union[Tensor, CensoredData],\n                              group_idx: Selector,",
      "pred_parsed": "    def _log_prob_with_subsetting(self,\n    obs: Union[Tensor, CensoredData],\n    group_idx: Selector,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "mozilla-services/socorro",
    "repo_dir": "./GitHub/GitHub/mozilla-services-socorro",
    "commit": "ef180e818afd44ef793d9ffd2570883dedcc5084",
    "filename": "webapp-django/crashstats/crashstats/models.py",
    "source_code": "    required_params = (\n        ('product', unicode),\n        ('version', unicode),\n    )",
    "target_code": "    required_params = (\n        'product',\n        'version',\n    )\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `unicode` is used but not defined in the current scope.",
    "warning_line": 1460,
    "pred_top-1": {
      "pred": "required_params = (\n        ('product', str),\n        ('version', str),\n    )",
      "pred_parsed": "    required_params = (\n    ('product', str),\n    ('version', str),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "required_params = (\n        ('product', str),\n        ('version', str),\n)",
      "pred_parsed": "    required_params = (\n    ('product', str),\n    ('version', str),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "required_params = (\n        ('product', str),\n        ('version', str),\n    )",
      "pred_parsed": "    required_params = (\n    ('product', str),\n    ('version', str),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "required_params = (\n        ('product', str),\n        ('version', str),\n    )",
      "pred_parsed": "    required_params = (\n    ('product', str),\n    ('version', str),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "required_params = (\n        ('product', str),\n        ('version', str),\n    )",
      "pred_parsed": "    required_params = (\n    ('product', str),\n    ('version', str),\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "python/mypy",
    "repo_dir": "./GitHub/GitHub/python-mypy",
    "commit": "5938c9212918aadbf26300ab52c6fe7173a35da7",
    "filename": "mypy/parsetype.py",
    "source_code": "        type = self.parse_type()\n        return StarType(type, line)",
    "target_code": "        type = self.parse_type()\n        return StarType(type, star.line)\n\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `line` is used but not defined in the current scope.",
    "warning_line": 153,
    "pred_top-1": {
      "pred": "type = self.parse_type()\n        line = self.parse_line()\n        return StarType(type, line)",
      "pred_parsed": "        type = self.parse_type()\n        line = self.parse_line()\n        return StarType(type, line)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "type = self.parse_type()\nline = self.parse_line()\nreturn StarType(type, line)",
      "pred_parsed": "        type = self.parse_type()\n        line = self.parse_line()\n        return StarType(type, line)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "type = self.parse_type()\nline = self.parse_line()\nreturn StarType(type, line)",
      "pred_parsed": "        type = self.parse_type()\n        line = self.parse_line()\n        return StarType(type, line)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "type = self.parse_type()\nline = self.parse_line()\nreturn StarType(type, line)",
      "pred_parsed": "        type = self.parse_type()\n        line = self.parse_line()\n        return StarType(type, line)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "type = self.parse_type()\nline = self.parse_line()\nreturn StarType(type, line)",
      "pred_parsed": "        type = self.parse_type()\n        line = self.parse_line()\n        return StarType(type, line)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "networktocode/pyntc",
    "repo_dir": "./GitHub/GitHub/networktocode-pyntc",
    "commit": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9",
    "filename": "pyntc/devices/__init__.py",
    "source_code": "    },\n    F5_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,",
    "target_code": "    },\n    F5_API_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "warning_type": "Unbound name [10]",
    "warning_message": " Name `F5_DEVICE_TYPE` is used but not defined in the current scope.",
    "warning_line": 32,
    "pred_top-1": {
      "pred": "F5_DEVICE_TYPE = {\n    DEVICE_CLASS_KEY: F5Device,\n}",
      "pred_parsed": "    F5_DEVICE_TYPE = {\n    DEVICE_CLASS_KEY: F5Device,\n    }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "F5_DEVICE_TYPE = {\n    DEVICE_CLASS_KEY: F5Device,\n}",
      "pred_parsed": "    F5_DEVICE_TYPE = {\n    DEVICE_CLASS_KEY: F5Device,\n    }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "F5_DEVICE_TYPE = {\n                    DEVICE_CLASS_KEY: F5Device,\n                }",
      "pred_parsed": "    F5_DEVICE_TYPE = {\n    DEVICE_CLASS_KEY: F5Device,\n    }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "F5_DEVICE_TYPE = {\n    DEVICE_CLASS_KEY: F5Device,\n}",
      "pred_parsed": "    F5_DEVICE_TYPE = {\n    DEVICE_CLASS_KEY: F5Device,\n    }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "F5_DEVICE_TYPE = {\n                    DEVICE_CLASS_KEY: F5Device,\n                }",
      "pred_parsed": "    F5_DEVICE_TYPE = {\n    DEVICE_CLASS_KEY: F5Device,\n    }\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "DisnakeDev/disnake",
    "repo_dir": "./GitHub/GitHub/DisnakeDev-disnake",
    "commit": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "filename": "discord/user.py",
    "source_code": "    __slots__ = ('__weakref__',)",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
    "warning_line": 653,
    "pred_top-1": {
      "pred": "class BaseUser:\n    __slots__ = ('__weakref__', 'name', 'age', 'gender', 'location', 'occupation', 'hobbies')\n\nclass User(BaseUser):\n    __slots__ = ('__weakref__',)",
      "pred_parsed": "    class BaseUser:\n    __slots__ = ('__weakref__', 'name', 'age', 'gender', 'location', 'occupation', 'hobbies')\n    \n    class User(BaseUser):\n    __slots__ = ('__weakref__',)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "__slots__ = ('__weakref__', 'name', 'email', 'password', 'phone', 'address')",
      "pred_parsed": "    __slots__ = ('__weakref__', 'name', 'email', 'password', 'phone', 'address')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "__slots__ = ('__weakref__', 'name', 'email', 'password', 'role', 'is_active')",
      "pred_parsed": "    __slots__ = ('__weakref__', 'name', 'email', 'password', 'role', 'is_active')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "__slots__ = ('__weakref__', 'name', 'email', 'password', 'age', 'gender')",
      "pred_parsed": "    __slots__ = ('__weakref__', 'name', 'email', 'password', 'age', 'gender')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "__slots__ = ('__weakref__', 'name', 'email', 'password', 'is_active', 'is_superuser')",
      "pred_parsed": "    __slots__ = ('__weakref__', 'name', 'email', 'password', 'is_active', 'is_superuser')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "grapl-security/grapl",
    "repo_dir": "./GitHub/GitHub/grapl-security-grapl",
    "commit": "0e2a0983c414948cdaca9bd496bf111188b9b551",
    "filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "source_code": "    def get_node_type(self) -> Optional[str]:\n        return 'IpAddress'",
    "target_code": "\n    <DED>def get_node_type(self) -> str:\n        <IND>return 'IpAddress'\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `grapl_analyzerlib.nodes.ip_address_node.IpAddressView.get_node_type` overrides method defined in `DynamicNodeView` inconsistently. Returned type `typing.Optional[str]` is not a subtype of the overridden return `str`.",
    "warning_line": 125,
    "pred_top-1": {
      "pred": "def get_node_type(self) -> str:\n    return 'IpAddress'",
      "pred_parsed": "    def get_node_type(self) -> str:\n    return 'IpAddress'\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def get_node_type(self) -> str:\n    return 'IpAddress'",
      "pred_parsed": "    def get_node_type(self) -> str:\n    return 'IpAddress'\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def get_node_type(self) -> str:\n    return 'IpAddress'",
      "pred_parsed": "    def get_node_type(self) -> str:\n    return 'IpAddress'\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def get_node_type(self) -> str:\n        return 'IpAddress'",
      "pred_parsed": "    def get_node_type(self) -> str:\n    return 'IpAddress'\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def get_node_type(self) -> str:\n    return 'IpAddress'",
      "pred_parsed": "    def get_node_type(self) -> str:\n    return 'IpAddress'\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Ciphey/Ciphey",
    "repo_dir": "./GitHub/GitHub/Ciphey-Ciphey",
    "commit": "5544e945c591d063a2541fd40991c1f81b729575",
    "filename": "ciphey/basemods/Crackers/hash.py",
    "source_code": "    @staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        pass",
    "target_code": "    <DED>@staticmethod\n    def getParams() -> Optional[Dict[str, ParamSpec]]:\n        <IND>return None\n\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `ciphey.basemods.Crackers.hash.HashBuster.getParams` overrides method defined in `ciphey.iface._modules.ConfigurableModule` inconsistently. Returned type `Optional[Dict[str, Dict[str, typing.Any]]]` is not a subtype of the overridden return `Optional[Dict[str, ciphey.iface._modules.ParamSpec]]`.",
    "warning_line": 105,
    "pred_top-1": {
      "pred": "@staticmethod\ndef getParams() -> Optional[Dict[str, ciphey.iface._modules.ParamSpec]]:\n    pass",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, ciphey.iface._modules.ParamSpec]]:\n    pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "@staticmethod\ndef getParams() -> Optional[Dict[str, ciphey.iface._modules.ParamSpec]]:\n    pass",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, ciphey.iface._modules.ParamSpec]]:\n    pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "@staticmethod\ndef getParams() -> Optional[Dict[str, ciphey.iface._modules.ParamSpec]]:\n    pass",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, ciphey.iface._modules.ParamSpec]]:\n    pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "@staticmethod\ndef getParams() -> Optional[Dict[str, ciphey.iface._modules.ParamSpec]]:\n    pass",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, ciphey.iface._modules.ParamSpec]]:\n    pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "@staticmethod\ndef getParams() -> Optional[Dict[str, ciphey.iface._modules.ParamSpec]]:\n    pass",
      "pred_parsed": "    @staticmethod\n    def getParams() -> Optional[Dict[str, ciphey.iface._modules.ParamSpec]]:\n    pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "nextcord/nextcord",
    "repo_dir": "./GitHub/GitHub/nextcord-nextcord",
    "commit": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "filename": "discord/user.py",
    "source_code": "    __slots__ = ('__weakref__',)",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
    "warning_line": 653,
    "pred_top-1": {
      "pred": "class BaseUser:\n    __slots__ = ('__weakref__', 'name', 'age', 'gender', 'location', 'occupation', 'hobbies')\n\nclass User(BaseUser):\n    __slots__ = ('__weakref__',)",
      "pred_parsed": "    class BaseUser:\n    __slots__ = ('__weakref__', 'name', 'age', 'gender', 'location', 'occupation', 'hobbies')\n    \n    class User(BaseUser):\n    __slots__ = ('__weakref__',)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "__slots__ = ('__weakref__', 'name', 'email', 'password', 'phone', 'address')",
      "pred_parsed": "    __slots__ = ('__weakref__', 'name', 'email', 'password', 'phone', 'address')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "__slots__ = ('__weakref__', 'name', 'email', 'password', 'role', 'is_active')",
      "pred_parsed": "    __slots__ = ('__weakref__', 'name', 'email', 'password', 'role', 'is_active')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "__slots__ = ('__weakref__', 'name', 'email', 'password', 'age', 'gender')",
      "pred_parsed": "    __slots__ = ('__weakref__', 'name', 'email', 'password', 'age', 'gender')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "__slots__ = ('__weakref__', 'name', 'email', 'password', 'is_active', 'is_superuser')",
      "pred_parsed": "    __slots__ = ('__weakref__', 'name', 'email', 'password', 'is_active', 'is_superuser')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "ethereum/trinity",
    "repo_dir": "./GitHub/GitHub/ethereum-trinity",
    "commit": "ad61361109f7df88eb807a543191d491e76eed0c",
    "filename": "trinity/protocol/eth/monitors.py",
    "source_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock}",
    "target_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    <IND>subscription_msg_types = frozenset({commands.NewBlock})\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `subscription_msg_types` overrides attribute defined in `p2p.peer.PeerSubscriber` inconsistently. Type `typing.Set[typing.Type[commands.NewBlock]]` is not a subtype of the overridden attribute `typing.Set[typing.Type[p2p.protocol.Command]]`.",
    "warning_line": 6,
    "pred_top-1": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock, p2p.protocol.Command}",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\nsubscription_msg_types = {commands.NewBlock, p2p.protocol.Command}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock, p2p.protocol.Command}",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\nsubscription_msg_types = {commands.NewBlock, p2p.protocol.Command}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock, p2p.protocol.Command}",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\nsubscription_msg_types = {commands.NewBlock, p2p.protocol.Command}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock, p2p.protocol.Command}",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\nsubscription_msg_types = {commands.NewBlock, p2p.protocol.Command}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    subscription_msg_types = {commands.NewBlock, p2p.protocol.Command}",
      "pred_parsed": "class ETHChainTipMonitor(BaseChainTipMonitor):\nsubscription_msg_types = {commands.NewBlock, p2p.protocol.Command}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "allenai/allenact",
    "repo_dir": "./GitHub/GitHub/allenai-allenact",
    "commit": "6b723350aab127ea8e1a702d88f253aae29bdc3c",
    "filename": "rl_habitat/habitat_preprocessors.py",
    "source_code": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        if not self.parallel:",
    "target_code": "\n    <DED>def to(self, device: torch.device) -> \"ResnetPreProcessorHabitat\":\n        <IND>if not self.parallel:\n",
    "warning_type": "Inconsistent override [15]",
    "warning_message": " `rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to` overrides method defined in `Preprocessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Preprocessor`.",
    "warning_line": 100,
    "pred_top-1": {
      "pred": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n        return super().to(device)\n    else:\n        return self",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n    return super().to(device)\n    else:\n    return self\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n        return self.to_device(device)\n    else:\n        return self.parallel_to_device(device)",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n    return self.to_device(device)\n    else:\n    return self.parallel_to_device(device)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n        return self.to_device(device)\n    else:\n        return self.parallel_to_device(device)",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n    return self.to_device(device)\n    else:\n    return self.parallel_to_device(device)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n        return self.to(device)\n    else:\n        return ResnetPreProcessorThor(self.parallel, device=device)",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n    return self.to(device)\n    else:\n    return ResnetPreProcessorThor(self.parallel, device=device)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n        return self.to_device(device)\n    else:\n        return ResnetPreProcessorThor(\n            self.model,\n            self.parallel,\n            self.device,\n            self.input_size,\n            self.output_size,\n            self.normalize_transform,\n            self.to_tensor_transform,\n        ).to(device)",
      "pred_parsed": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n    if not self.parallel:\n    return self.to_device(device)\n    else:\n    return ResnetPreProcessorThor(\n    self.model,\n    self.parallel,\n    self.device,\n    self.input_size,\n    self.output_size,\n    self.normalize_transform,\n    self.to_tensor_transform,\n    ).to(device)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "awslabs/aws-lambda-powertools-python",
    "repo_dir": "./GitHub/GitHub/awslabs-aws-lambda-powertools-python",
    "commit": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: str = None,\n    ):",
    "target_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n    ):\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " method_name is declared to have type `str` but is used as type `None`.",
    "warning_line": 605,
    "pred_top-1": {
      "pred": "capture_error: Optional[Union[bool, str]] = None,\nmethod_name: Optional[str] = None,",
      "pred_parsed": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "capture_error: Optional[Union[bool, str]] = None,\n                method_name: Optional[str] = None,",
      "pred_parsed": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n    ):",
      "pred_parsed": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n        ):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "capture_error: Optional[Union[bool, str]] = None,\nmethod_name: Optional[str] = None,",
      "pred_parsed": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "capture_error: Optional[Union[bool, str]] = None,\nmethod_name: Optional[str] = None,",
      "pred_parsed": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "adw0rd/instagrapi",
    "repo_dir": "./GitHub/GitHub/adw0rd-instagrapi",
    "commit": "0344324a593097604ea701186dc17afb977245f0",
    "filename": "instagrapi/igtv.py",
    "source_code": "        usertags: list = [],\n        configure_timeout: str = 10,\n    ) -> dict:",
    "target_code": "        usertags: list = [],\n        configure_timeout: int = 10,\n    ) -> dict:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " configure_timeout is declared to have type `str` but is used as type `int`.",
    "warning_line": 37,
    "pred_top-1": {
      "pred": "usertags: list = [],\nconfigure_timeout: int = 10,\n) -> dict:",
      "pred_parsed": "        usertags: list = [],\n        configure_timeout: int = 10,\n        ) -> dict:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def get_user_info(\n        usertags: list = [],\n        configure_timeout: int = 10,\n    ) -> dict:",
      "pred_parsed": "        def get_user_info(\n        usertags: list = [],\n        configure_timeout: int = 10,\n        ) -> dict:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "usertags: list = [],\nconfigure_timeout: int = 10,\n) -> dict:",
      "pred_parsed": "        usertags: list = [],\n        configure_timeout: int = 10,\n        ) -> dict:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "def some_function(\n        usertags: list = [],\n        configure_timeout: int = 10,\n    ) -> dict:",
      "pred_parsed": "        def some_function(\n        usertags: list = [],\n        configure_timeout: int = 10,\n        ) -> dict:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "usertags: list = [],\nconfigure_timeout: int = 10,\n) -> dict:",
      "pred_parsed": "        usertags: list = [],\n        configure_timeout: int = 10,\n        ) -> dict:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "PUNCH-Cyber/stoq",
    "repo_dir": "./GitHub/GitHub/PUNCH-Cyber-stoq",
    "commit": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c",
    "filename": "stoq/data_classes.py",
    "source_code": "        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = None,\n    ) -> None:",
    "target_code": "        should_archive: bool = True,\n        extra_data: Optional[Dict] = None,\n        dispatch_to: Optional[List[str]] = None,\n    ) -> None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " dispatch_to is declared to have type `List[str]` but is used as type `None`.",
    "warning_line": 30,
    "pred_top-1": {
      "pred": "def some_function(\n        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = []\n    ) -> None:",
      "pred_parsed": "        def some_function(\n        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = []\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def some_function(\n        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = []\n    ) -> None:",
      "pred_parsed": "        def some_function(\n        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = []\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def archive_data(\n        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = []\n    ) -> None:",
      "pred_parsed": "        def archive_data(\n        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = []\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def archive_data(\n        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = []\n    ) -> None:",
      "pred_parsed": "        def archive_data(\n        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = []\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def archive_data(\n        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = []\n    ) -> None:",
      "pred_parsed": "        def archive_data(\n        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = []\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "deepmipt/DeepPavlov",
    "repo_dir": "./GitHub/GitHub/deepmipt-DeepPavlov",
    "commit": "0f32759c67ea961737a6538fd37426f564bae925",
    "filename": "deeppavlov/utils/alexa/server.py",
    "source_code": "                     https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None) -> None:",
    "target_code": "                     https: bool = False,\n                     ssl_key: Optional[str] = None,\n                     ssl_cert: Optional[str] = None) -> None:\n    <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " ssl_cert is declared to have type `str` but is used as type `None`.",
    "warning_line": 89,
    "pred_top-1": {
      "pred": "def configure_server(\n    host: str,\n    port: int,\n    https: bool = False,\n    ssl_key: str = None,\n    ssl_cert: str = None\n) -> None:",
      "pred_parsed": "                     def configure_server(\n                     host: str,\n                     port: int,\n                     https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None\n                     ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def connect(\n                    https: bool = False,\n                    ssl_key: str = None,\n                    ssl_cert: str = None) -> None:",
      "pred_parsed": "                     def connect(\n                     https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def configure_ssl(https: bool = False,\n                  ssl_key: str = None,\n                  ssl_cert: str = None) -> None:",
      "pred_parsed": "                     def configure_ssl(https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def connect(host: str,\n            port: int,\n            https: bool = False,\n            ssl_key: str = None,\n            ssl_cert: str = None) -> None:",
      "pred_parsed": "                     def connect(host: str,\n                     port: int,\n                     https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def connect(host: str,\n            port: int,\n            https: bool = False,\n            ssl_key: str = None,\n            ssl_cert: str = None) -> None:",
      "pred_parsed": "                     def connect(host: str,\n                     port: int,\n                     https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jesopo/bitbot",
    "repo_dir": "./GitHub/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/__init__.py",
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))",
    "target_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 332,
    "pred_top-1": {
      "pred": "def message(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.message(target, message, tags))\ndef notice(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "pred_parsed": "        def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def message(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.message(target, message, tags))\ndef notice(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "pred_parsed": "        def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def message(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.message(target, message, tags))\ndef notice(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "pred_parsed": "        def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def message(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.message(target, message, tags))\ndef notice(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "pred_parsed": "        def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def message(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.message(target, message, tags))\ndef notice(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "pred_parsed": "        def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "marshmallow-code/marshmallow",
    "repo_dir": "./GitHub/GitHub/marshmallow-code-marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "source_code": "        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):",
    "target_code": "        choices: typing.Iterable,\n        labels: typing.Optional[typing.Iterable[str]] = None,\n        *,\n        error: typing.Optional[str] = None\n    ):\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " labels is declared to have type `typing.Iterable[str]` but is used as type `None`.",
    "warning_line": 476,
    "pred_top-1": {
      "pred": "def some_function(\n        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n    if labels is None:\n        labels = []",
      "pred_parsed": "        def some_function(\n        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n        ):\n        if labels is None:\n        labels = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def some_function(\n        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n    if labels is None:\n        labels = []",
      "pred_parsed": "        def some_function(\n        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n        ):\n        if labels is None:\n        labels = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def some_function(\n        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n    if labels is None:\n        labels = []",
      "pred_parsed": "        def some_function(\n        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n        ):\n        if labels is None:\n        labels = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def function_name(\n        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = \"Invalid choice\"\n    ):",
      "pred_parsed": "        def function_name(\n        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = \"Invalid choice\"\n        ):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def some_function(\n        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ) -> None:\n    pass",
      "pred_parsed": "        def some_function(\n        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n        ) -> None:\n        pass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jesopo/bitbot",
    "repo_dir": "./GitHub/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/protocol.py",
    "source_code": "def message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':",
    "target_code": "\n<DED>def message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 39,
    "pred_top-1": {
      "pred": "def message(target: str, message: str, tags: dict=None) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n\ndef notice(target: str, message: str, tags: dict={}) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"NOTICE\", [target, message], tags=tags)",
      "pred_parsed": "def message(target: str, message: str, tags: dict=None) -> 'utils.irc.IRCParsedLine':\nreturn utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n\ndef notice(target: str, message: str, tags: dict={}) -> 'utils.irc.IRCParsedLine':\nreturn utils.irc.IRCParsedLine(\"NOTICE\", [target, message], tags=tags)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def message(target: str, message: str, tags: dict={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict={}\n        ) -> 'utils.irc.IRCParsedLine':",
      "pred_parsed": "def message(target: str, message: str, tags: dict={}\n) -> 'utils.irc.IRCParsedLine':\nreturn utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict={}\n) -> 'utils.irc.IRCParsedLine':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def message(target: str, message: str, tags: dict=None) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n\ndef notice(target: str, message: str, tags: dict={}) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"NOTICE\", [target, message], tags=tags)",
      "pred_parsed": "def message(target: str, message: str, tags: dict=None) -> 'utils.irc.IRCParsedLine':\nreturn utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n\ndef notice(target: str, message: str, tags: dict={}) -> 'utils.irc.IRCParsedLine':\nreturn utils.irc.IRCParsedLine(\"NOTICE\", [target, message], tags=tags)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def message(target: str, message: str, tags: dict=None) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n\ndef notice(target: str, message: str, tags: dict={}) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"NOTICE\", [target, message], tags=tags)",
      "pred_parsed": "def message(target: str, message: str, tags: dict=None) -> 'utils.irc.IRCParsedLine':\nreturn utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n\ndef notice(target: str, message: str, tags: dict={}) -> 'utils.irc.IRCParsedLine':\nreturn utils.irc.IRCParsedLine(\"NOTICE\", [target, message], tags=tags)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def message(target: str, message: str, tags: dict={}\n        ) -> 'utils.irc.IRCParsedLine':\n    return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict={}\n        ) -> 'utils.irc.IRCParsedLine':",
      "pred_parsed": "def message(target: str, message: str, tags: dict={}\n) -> 'utils.irc.IRCParsedLine':\nreturn utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\ndef notice(target: str, message: str, tags: dict={}\n) -> 'utils.irc.IRCParsedLine':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "SeldonIO/alibi",
    "repo_dir": "./GitHub/GitHub/SeldonIO-alibi",
    "commit": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "filename": "alibi/explainers/backends/cfrl_tabular.py",
    "source_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = None,\n                                       diverse=False) -> List[np.ndarray]:",
    "target_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: Optional[List[str]] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " immutable_features is declared to have type `List[str]` but is used as type `None`.",
    "warning_line": 677,
    "pred_top-1": {
      "pred": "def get_features(category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       diverse=False) -> List[np.ndarray]:",
      "pred_parsed": "                                       def get_features(category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       diverse=False) -> List[np.ndarray]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def get_data_by_category(category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       diverse=False) -> List[np.ndarray]:",
      "pred_parsed": "                                       def get_data_by_category(category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       diverse=False) -> List[np.ndarray]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def get_data_for_category_map(\n                    category_map: Dict[int, List[str]],\n                    immutable_features: List[str] = [],\n                    diverse=False) -> List[np.ndarray]:",
      "pred_parsed": "                                       def get_data_for_category_map(\n                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       diverse=False) -> List[np.ndarray]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def get_categorical_data(data: np.ndarray,\n                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       diverse=False) -> List[np.ndarray]:",
      "pred_parsed": "                                       def get_categorical_data(data: np.ndarray,\n                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       diverse=False) -> List[np.ndarray]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def get_data_from_category_map(\n                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       diverse=False) -> List[np.ndarray]:",
      "pred_parsed": "                                       def get_data_from_category_map(\n                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = [],\n                                       diverse=False) -> List[np.ndarray]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "googleapis/python-bigquery",
    "repo_dir": "./GitHub/GitHub/googleapis-python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/job/query.py",
    "source_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        if value is not None:\n            value = str(value)\n        self._properties[\"statementByteBudget\"] = value",
    "target_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        <IND>new_value = None if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = new_value\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " value is declared to have type `Optional[int]` but is used as type `str`.",
    "warning_line": 211,
    "pred_top-1": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]):\n    if value is not None:\n        value = int(value)\n    self._properties[\"statementByteBudget\"] = value",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n    if value is not None:\n    value = int(value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]):\n    if value is not None:\n        value = int(value)\n    self._properties[\"statementByteBudget\"] = value",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n    if value is not None:\n    value = int(value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]):\n    if value is not None:\n        value = int(value)\n    self._properties[\"statementByteBudget\"] = value",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n    if value is not None:\n    value = int(value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]):\n    if value is not None:\n        value = int(value)\n    self._properties[\"statementByteBudget\"] = value",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n    if value is not None:\n    value = int(value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def statement_byte_budget(self, value: Union[int, None]):\n    if value is not None:\n        value = int(value)\n    self._properties[\"statementByteBudget\"] = value",
      "pred_parsed": "    def statement_byte_budget(self, value: Union[int, None]):\n    if value is not None:\n    value = int(value)\n    self._properties[\"statementByteBudget\"] = value\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "pcah/python-clean-architecture",
    "repo_dir": "./GitHub/GitHub/pcah-python-clean-architecture",
    "commit": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e",
    "filename": "dharma/domain/repos/in_memory.py",
    "source_code": "    def filter(self, predicate: Predicate = None) -> t.List[T]:",
    "target_code": "\n    <DED>def filter(self, predicate: Predicate) -> t.List[T]:\n        <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " predicate is declared to have type `dharma.data.formulae.predicate.Predicate` but is used as type `None`.",
    "warning_line": 81,
    "pred_top-1": {
      "pred": "def filter(self, predicate: Predicate = lambda x: True) -> t.List[T]:",
      "pred_parsed": "    def filter(self, predicate: Predicate = lambda x: True) -> t.List[T]:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def filter(self, predicate: Predicate = None) -> t.List[T]:\n    if predicate is None:\n        return self.items\n    else:\n        return [item for item in self.items if predicate(item)]",
      "pred_parsed": "    def filter(self, predicate: Predicate = None) -> t.List[T]:\n    if predicate is None:\n    return self.items\n    else:\n    return [item for item in self.items if predicate(item)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def filter(self, predicate: Predicate = lambda x: True) -> t.List[T]:",
      "pred_parsed": "    def filter(self, predicate: Predicate = lambda x: True) -> t.List[T]:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "def filter(self, predicate: Predicate = None) -> t.List[T]:\n    if predicate is None:\n        return self.data\n    else:\n        return [item for item in self.data if predicate(item)]",
      "pred_parsed": "    def filter(self, predicate: Predicate = None) -> t.List[T]:\n    if predicate is None:\n    return self.data\n    else:\n    return [item for item in self.data if predicate(item)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def filter(self, predicate: Predicate = None) -> t.List[T]:\n        if predicate is None:\n            return self._data\n        else:\n            return [item for item in self._data if predicate(item)]",
      "pred_parsed": "    def filter(self, predicate: Predicate = None) -> t.List[T]:\n    if predicate is None:\n    return self._data\n    else:\n    return [item for item in self._data if predicate(item)]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "apache/airflow",
    "repo_dir": "./GitHub/GitHub/apache-airflow",
    "commit": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
    "warning_line": 2315,
    "pred_top-1": {
      "pred": "timeout: Optional[float] = None,\nmetadata: Optional[Sequence[Tuple[str, str]]] = None,\ngcp_conn_id: str = \"google_cloud_default\",",
      "pred_parsed": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "timeout: Optional[float] = None,\nmetadata: Optional[Sequence[Tuple[str, str]]] = None,\ngcp_conn_id: str = \"google_cloud_default\",",
      "pred_parsed": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "timeout: Optional[float] = None,\nmetadata: Optional[Sequence[Tuple[str, str]]] = None,\ngcp_conn_id: str = \"google_cloud_default\",",
      "pred_parsed": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",",
      "pred_parsed": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",",
      "pred_parsed": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "common-workflow-language/cwltool",
    "repo_dir": "./GitHub/GitHub/common-workflow-language-cwltool",
    "commit": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "filename": "cwltool/command_line_tool.py",
    "source_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: threading.Lock\n               ):  # type: (...) -> None",
    "target_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: Optional[threading.Lock]\n               ):  # type: (...) -> None\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
    "warning_line": 104,
    "pred_top-1": {
      "pred": "runtimeContext, tmpdir_lock=threading.Lock()  # type: threading.Lock\n               ):  # type: (...) -> None",
      "pred_parsed": "                runtimeContext, tmpdir_lock=threading.Lock()  # type: threading.Lock\n                ):  # type: (...) -> None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "runtimeContext,   # type: RuntimeContext\ntmpdir_lock: threading.Lock = None  # type: threading.Lock\n):  # type: (...) -> None",
      "pred_parsed": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock: threading.Lock = None  # type: threading.Lock\n                ):  # type: (...) -> None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "def some_function(runtimeContext,   # type: RuntimeContext\n                tmpdir_lock: threading.Lock = None  # type: threading.Lock\n               ):  # type: (...) -> None",
      "pred_parsed": "                def some_function(runtimeContext,   # type: RuntimeContext\n                tmpdir_lock: threading.Lock = None  # type: threading.Lock\n                ):  # type: (...) -> None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "runtimeContext,   # type: RuntimeContext\ntmpdir_lock: threading.Lock = None\n):  # type: (...) -> None",
      "pred_parsed": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock: threading.Lock = None\n                ):  # type: (...) -> None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "runtimeContext,   # type: RuntimeContext\ntmpdir_lock: threading.Lock = None\n):  # type: (...) -> None",
      "pred_parsed": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock: threading.Lock = None\n                ):  # type: (...) -> None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "libtcod/python-tcod",
    "repo_dir": "./GitHub/GitHub/libtcod-python-tcod",
    "commit": "60066f30f07303a0cb7092b760a8e661330a63b9",
    "filename": "tcod/console.py",
    "source_code": "        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )",
    "target_code": "\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, _fmt(string)\n        )\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " string is declared to have type `str` but is used as type `bytes`.",
    "warning_line": 312,
    "pred_top-1": {
      "pred": "if isinstance(string, str):\n            string = string.encode()\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )",
      "pred_parsed": "        if isinstance(string, str):\n        string = string.encode()\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, string\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if isinstance(string, str):\n    string = string.encode('utf-8')\nstring = _fmt(string)\nreturn lib.TCOD_console_get_height_rect_fmt(\n    self.console_c, x, y, width, height, string\n)",
      "pred_parsed": "        if isinstance(string, str):\n        string = string.encode('utf-8')\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, string\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if isinstance(string, str):\n            string = string.encode()\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )",
      "pred_parsed": "        if isinstance(string, str):\n        string = string.encode()\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, string\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if isinstance(string, str):\n            string = string.encode('utf-8')\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )",
      "pred_parsed": "        if isinstance(string, str):\n        string = string.encode('utf-8')\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, string\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if isinstance(string, str):\n            string = string.encode('utf-8')\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )",
      "pred_parsed": "        if isinstance(string, str):\n        string = string.encode('utf-8')\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n        self.console_c, x, y, width, height, string\n        )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "googleapis/python-bigquery",
    "repo_dir": "./GitHub/GitHub/googleapis-python-bigquery",
    "commit": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "source_code": "    if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:",
    "target_code": "    if type_type == SCALAR:\n        <IND>result_type = sub_type\n    <DED>elif type_type == ARRAY:\n        <IND>result_type = query.ArrayQueryParameterType(sub_type, name=name)\n    <DED>elif type_type == STRUCT:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " type_ is declared to have type `str` but is used as type `query.ArrayQueryParameterType`.",
    "warning_line": 231,
    "pred_top-1": {
      "pred": "if type_type == SCALAR:\n    type_ = sub_type\nelif type_type == ARRAY:\n    type_ = query.ArrayQueryParameterType(sub_type, name=name)\nelif type_type == STRUCT:\n    type_ = query.StructQueryParameterType(sub_type, name=name)",
      "pred_parsed": "    if type_type == SCALAR:\n    type_ = sub_type\n    elif type_type == ARRAY:\n    type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n    type_ = query.StructQueryParameterType(sub_type, name=name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if type_type == SCALAR:\n    type_ = sub_type\nelif type_type == ARRAY:\n    type_ = query.ArrayQueryParameterType(sub_type, name=name)\nelif type_type == STRUCT:\n    type_ = query.StructQueryParameterType(sub_type, name=name)",
      "pred_parsed": "    if type_type == SCALAR:\n    type_ = sub_type\n    elif type_type == ARRAY:\n    type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n    type_ = query.StructQueryParameterType(sub_type, name=name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if type_type == SCALAR:\n    type_ = sub_type\nelif type_type == ARRAY:\n    type_ = query.ArrayQueryParameterType(sub_type, name=name)\nelif type_type == STRUCT:\n    type_ = query.StructQueryParameterType(name=name)",
      "pred_parsed": "    if type_type == SCALAR:\n    type_ = sub_type\n    elif type_type == ARRAY:\n    type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n    type_ = query.StructQueryParameterType(name=name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if type_type == SCALAR:\n        type_ = sub_type\n    elif type_type == ARRAY:\n        type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n        type_ = query.StructQueryParameterType(sub_type, name=name)",
      "pred_parsed": "    if type_type == SCALAR:\n    type_ = sub_type\n    elif type_type == ARRAY:\n    type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n    type_ = query.StructQueryParameterType(sub_type, name=name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if type_type == SCALAR:\n    type_ = sub_type\nelif type_type == ARRAY:\n    type_ = query.ArrayQueryParameterType(sub_type, name=name)\nelif type_type == STRUCT:\n    type_ = query.StructQueryParameterType(sub_type, name=name)",
      "pred_parsed": "    if type_type == SCALAR:\n    type_ = sub_type\n    elif type_type == ARRAY:\n    type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    elif type_type == STRUCT:\n    type_ = query.StructQueryParameterType(sub_type, name=name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "gitpython-developers/GitPython",
    "repo_dir": "./GitHub/GitHub/gitpython-developers-GitPython",
    "commit": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "filename": "git/objects/submodule/base.py",
    "source_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':",
    "target_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
    "warning_line": 342,
    "pred_top-1": {
      "pred": "def Submodule(\n            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = {}, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':",
      "pred_parsed": "            def Submodule(\n            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = {}, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def Submodule(\n    branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n    env: Mapping[str, str] = {} , clone_multi_options: Union[Sequence[TBD], None] = None\n) -> 'Submodule':",
      "pred_parsed": "            def Submodule(\n            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = {} , clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def Submodule(\n            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = {} , clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':",
      "pred_parsed": "            def Submodule(\n            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = {} , clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def Submodule(\n            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = {}, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':",
      "pred_parsed": "            def Submodule(\n            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = {}, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n                env: Mapping[str, str] = {} , clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':",
      "pred_parsed": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = {} , clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "jpadilla/pyjwt",
    "repo_dir": "./GitHub/GitHub/jpadilla-pyjwt",
    "commit": "31a8701d11709ce0807b60f7a5fa604d14175235",
    "filename": "jwt/api_jws.py",
    "source_code": "        key: str = \"\",\n        algorithms: List[str] = None,\n        options: Dict = None,\n        **kwargs,",
    "target_code": "        key: str = \"\",\n        algorithms: Optional[List[str]] = None,\n        options: Optional[Dict] = None,\n        **kwargs,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " algorithms is declared to have type `List[str]` but is used as type `None`.",
    "warning_line": 135,
    "pred_top-1": {
      "pred": "key: str = \"\",\n                algorithms: List[str] = [],\n                options: Dict = None,\n                **kwargs,",
      "pred_parsed": "        key: str = \"\",\n        algorithms: List[str] = [],\n        options: Dict = None,\n        **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "key: str = \"\",\nalgorithms: List[str] = [],\noptions: Dict = None,\n**kwargs,",
      "pred_parsed": "        key: str = \"\",\n        algorithms: List[str] = [],\n        options: Dict = None,\n        **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "key: str = \"\",\nalgorithms: List[str] = [],\noptions: Dict = None,\n**kwargs,",
      "pred_parsed": "        key: str = \"\",\n        algorithms: List[str] = [],\n        options: Dict = None,\n        **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "key: str = \"\",\nalgorithms: List[str] = [],\noptions: Dict = None,\n**kwargs,",
      "pred_parsed": "        key: str = \"\",\n        algorithms: List[str] = [],\n        options: Dict = None,\n        **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "key: str = \"\",\nalgorithms: List[str] = [],\noptions: Dict = None,\n**kwargs,",
      "pred_parsed": "        key: str = \"\",\n        algorithms: List[str] = [],\n        options: Dict = None,\n        **kwargs,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "marshmallow-code/marshmallow",
    "repo_dir": "./GitHub/GitHub/marshmallow-code-marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/validate.py",
    "source_code": "    def __init__(self, comparable, *, error: str = None):\n        self.comparable = comparable",
    "target_code": "\n    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n        <IND>self.comparable = comparable\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " error is declared to have type `str` but is used as type `None`.",
    "warning_line": 339,
    "pred_top-1": {
      "pred": "def __init__(self, comparable, *, error: str = \"\"):\n        self.comparable = comparable",
      "pred_parsed": "    def __init__(self, comparable, *, error: str = \"\"):\n    self.comparable = comparable\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self, comparable, *, error: str = \"\"):\n        self.comparable = comparable",
      "pred_parsed": "    def __init__(self, comparable, *, error: str = \"\"):\n    self.comparable = comparable\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(self, comparable, *, error: str = \"\"):\n    self.comparable = comparable",
      "pred_parsed": "    def __init__(self, comparable, *, error: str = \"\"):\n    self.comparable = comparable\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self, comparable, *, error: str = \"\"):\n        self.comparable = comparable",
      "pred_parsed": "    def __init__(self, comparable, *, error: str = \"\"):\n    self.comparable = comparable\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self, comparable, *, error: str = \"\"):\n    self.comparable = comparable",
      "pred_parsed": "    def __init__(self, comparable, *, error: str = \"\"):\n    self.comparable = comparable\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "tribe29/checkmk",
    "repo_dir": "./GitHub/GitHub/tribe29-checkmk",
    "commit": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1",
    "filename": "agents/plugins/mk_postgres.py",
    "source_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Dict) -> None\n        self.db_user = db_user",
    "target_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Optional[Dict]) -> None\n        <IND>self.db_user = db_user\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " instance is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 77,
    "pred_top-1": {
      "pred": "def __init__(self, db_user, instance=None):\n    # type: (str, Dict) -> None\n    if instance is None:\n        instance = {}\n    self.db_user = db_user\n    self.instance = instance",
      "pred_parsed": "    def __init__(self, db_user, instance=None):\n    # type: (str, Dict) -> None\n    if instance is None:\n    instance = {}\n    self.db_user = db_user\n    self.instance = instance\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self, db_user, instance: Dict[Any, Any] = None):\n    # type: (str, Dict) -> None\n    self.db_user = db_user\n    self.instance = instance",
      "pred_parsed": "    def __init__(self, db_user, instance: Dict[Any, Any] = None):\n    # type: (str, Dict) -> None\n    self.db_user = db_user\n    self.instance = instance\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(self, db_user, instance: Dict[typing.Any, typing.Any] = None):\n    # type: (str, Dict) -> None\n    self.db_user = db_user",
      "pred_parsed": "    def __init__(self, db_user, instance: Dict[typing.Any, typing.Any] = None):\n    # type: (str, Dict) -> None\n    self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self, db_user, instance: Dict[typing.Any, typing.Any] = None):\n    # type: (str, Dict) -> None\n    self.db_user = db_user",
      "pred_parsed": "    def __init__(self, db_user, instance: Dict[typing.Any, typing.Any] = None):\n    # type: (str, Dict) -> None\n    self.db_user = db_user\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self, db_user, instance: Dict[Any, Any] = None):\n    # type: (str, Dict) -> None\n    self.db_user = db_user\n    self.instance = instance",
      "pred_parsed": "    def __init__(self, db_user, instance: Dict[Any, Any] = None):\n    # type: (str, Dict) -> None\n    self.db_user = db_user\n    self.instance = instance\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "fscdev/vkwave",
    "repo_dir": "./GitHub/GitHub/fscdev-vkwave",
    "commit": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc",
    "filename": "vkwave/bots/easy/easy_bot.py",
    "source_code": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n        loop = loop or asyncio.get_event_loop()",
    "target_code": "\n    <DED>def run_forever(self, loop: typing.Optional[asyncio.AbstractEventLoop] = None):\n        <IND>loop = loop or asyncio.get_event_loop()\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " loop is declared to have type `asyncio.events.AbstractEventLoop` but is used as type `None`.",
    "warning_line": 137,
    "pred_top-1": {
      "pred": "def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n    if loop is None:\n        loop = asyncio.get_event_loop()",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n    if loop is None:\n    loop = asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n    loop = loop if loop is not None else asyncio.get_event_loop()",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n    loop = loop if loop is not None else asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n    loop = loop if loop is not None else asyncio.get_event_loop()",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n    loop = loop if loop is not None else asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n    if loop is None:\n        loop = asyncio.get_event_loop()",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n    if loop is None:\n    loop = asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n    if loop is None:\n        loop = asyncio.get_event_loop()",
      "pred_parsed": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n    if loop is None:\n    loop = asyncio.get_event_loop()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "open-telemetry/opentelemetry-python",
    "repo_dir": "./GitHub/GitHub/open-telemetry-opentelemetry-python",
    "commit": "cfecca122c202f1dcc9361f6ab2b286c0ec17226",
    "filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "source_code": "        attributes: types.Attributes = None,\n        timestamp: int = None,\n    ) -> None:",
    "target_code": "        attributes: types.Attributes = None,\n        timestamp: Optional[int] = None,\n    ) -> None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " timestamp is declared to have type `int` but is used as type `None`.",
    "warning_line": 207,
    "pred_top-1": {
      "pred": "def function(\n        attributes: types.Attributes = None,\n        timestamp: int = 0,\n    ) -> None:",
      "pred_parsed": "        def function(\n        attributes: types.Attributes = None,\n        timestamp: int = 0,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def some_function(\n        attributes: types.Attributes = None,\n        timestamp: int = 0,\n    ) -> None:",
      "pred_parsed": "        def some_function(\n        attributes: types.Attributes = None,\n        timestamp: int = 0,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def function(\n        attributes: types.Attributes = None,\n        timestamp: int = 0,\n    ) -> None:",
      "pred_parsed": "        def function(\n        attributes: types.Attributes = None,\n        timestamp: int = 0,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def function_name(\n        attributes: types.Attributes = None,\n        timestamp: int = 0,\n    ) -> None:",
      "pred_parsed": "        def function_name(\n        attributes: types.Attributes = None,\n        timestamp: int = 0,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def function(\n        attributes: types.Attributes = None,\n        timestamp: int = 0,\n    ) -> None:",
      "pred_parsed": "        def function(\n        attributes: types.Attributes = None,\n        timestamp: int = 0,\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "deepchem/deepchem",
    "repo_dir": "./GitHub/GitHub/deepchem-deepchem",
    "commit": "ab558d41ffbe25b314314222924ddd5ca89e9e6b",
    "filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "source_code": "  # First type of supported featurizers\n  supported_featurizers = ['ElementPropertyFingerprint'\n                          ]  # type: List[Featurizer]",
    "target_code": "  # First type of supported featurizers\n  <DED><DED>supported_featurizers = ['ElementPropertyFingerprint']  # type: List[str]\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " supported_featurizers is declared to have type `List[deepchem.feat.base_classes.Featurizer]` but is used as type `List[str]`.",
    "warning_line": 161,
    "pred_top-1": {
      "pred": "# First type of supported featurizers\nfrom deepchem.feat.base_classes import Featurizer\nsupported_featurizers = [Featurizer('ElementPropertyFingerprint')]  # type: List[Featurizer]",
      "pred_parsed": "  # First type of supported featurizers\n  from deepchem.feat.base_classes import Featurizer\n  supported_featurizers = [Featurizer('ElementPropertyFingerprint')]  # type: List[Featurizer]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# First type of supported featurizers\nfrom deepchem.feat import base_classes\nsupported_featurizers = [base_classes.ElementPropertyFingerprint()]  # type: List[Featurizer]",
      "pred_parsed": "  # First type of supported featurizers\n  from deepchem.feat import base_classes\n  supported_featurizers = [base_classes.ElementPropertyFingerprint()]  # type: List[Featurizer]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# First type of supported featurizers\nfrom deepchem.feat.base_classes import Featurizer\nsupported_featurizers = [Featurizer('ElementPropertyFingerprint')]  # type: List[Featurizer]",
      "pred_parsed": "  # First type of supported featurizers\n  from deepchem.feat.base_classes import Featurizer\n  supported_featurizers = [Featurizer('ElementPropertyFingerprint')]  # type: List[Featurizer]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# First type of supported featurizers\nfrom deepchem.feat.base_classes import Featurizer\nsupported_featurizers = [Featurizer('ElementPropertyFingerprint')]  # type: List[Featurizer]",
      "pred_parsed": "  # First type of supported featurizers\n  from deepchem.feat.base_classes import Featurizer\n  supported_featurizers = [Featurizer('ElementPropertyFingerprint')]  # type: List[Featurizer]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# First type of supported featurizers\nfrom deepchem.feat.base_classes import Featurizer\nsupported_featurizers = [Featurizer('ElementPropertyFingerprint')]  # type: List[Featurizer]",
      "pred_parsed": "  # First type of supported featurizers\n  from deepchem.feat.base_classes import Featurizer\n  supported_featurizers = [Featurizer('ElementPropertyFingerprint')]  # type: List[Featurizer]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "lykoss/lykos",
    "repo_dir": "./GitHub/GitHub/lykoss-lykos",
    "commit": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "filename": "src/users.py",
    "source_code": "            if self is Bot:\n                Bot = new",
    "target_code": "            <DED>if self is Bot:\n                <IND>assert isinstance(new, BotUser)\n                Bot = new\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " Bot is declared to have type `BotUser` but is used as type `User`.",
    "warning_line": 460,
    "pred_top-1": {
      "pred": "if isinstance(self, BotUser):\n    Bot = new",
      "pred_parsed": "            if isinstance(self, BotUser):\n            Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if isinstance(self, BotUser):\n    Bot = new",
      "pred_parsed": "            if isinstance(self, BotUser):\n            Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if isinstance(self, BotUser):\n    Bot = new",
      "pred_parsed": "            if isinstance(self, BotUser):\n            Bot = new\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if self is Bot:\n    new_bot = BotUser()\n    Bot = new_bot",
      "pred_parsed": "            if self is Bot:\n            new_bot = BotUser()\n            Bot = new_bot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if self is Bot:\n    newBot = BotUser()\n    Bot = newBot",
      "pred_parsed": "            if self is Bot:\n            newBot = BotUser()\n            Bot = newBot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "awslabs/aws-lambda-powertools-python",
    "repo_dir": "./GitHub/GitHub/awslabs-aws-lambda-powertools-python",
    "commit": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86",
    "filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_code": "        self,\n        method_name: str = None,\n        error: Exception = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,",
    "target_code": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " error is declared to have type `Exception` but is used as type `None`.",
    "warning_line": 658,
    "pred_top-1": {
      "pred": "self,\nmethod_name: str = None,\nerror: Optional[Exception] = None,\nsubsegment: BaseSegment = None,\ncapture_error: Optional[bool] = None,",
      "pred_parsed": "        self,\n        method_name: str = None,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "self,\nmethod_name: str = None,\nerror: Optional[Exception] = None,\nsubsegment: BaseSegment = None,\ncapture_error: Optional[bool] = None,",
      "pred_parsed": "        self,\n        method_name: str = None,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self,\nmethod_name: str = None,\nerror: Optional[Exception] = None,\nsubsegment: BaseSegment = None,\ncapture_error: Optional[bool] = None,",
      "pred_parsed": "        self,\n        method_name: str = None,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self,\nmethod_name: str = None,\nerror: Optional[Exception] = None,\nsubsegment: BaseSegment = None,\ncapture_error: Optional[bool] = None,",
      "pred_parsed": "        self,\n        method_name: str = None,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self,\nmethod_name: str = None,\nerror: Optional[Exception] = None,\nsubsegment: BaseSegment = None,\ncapture_error: Optional[bool] = None,",
      "pred_parsed": "        self,\n        method_name: str = None,\n        error: Optional[Exception] = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "hsahovic/poke-env",
    "repo_dir": "./GitHub/GitHub/hsahovic-poke-env",
    "commit": "83a394d661947a52838ecc11f4750fa14f08b4d7",
    "filename": "src/poke_env/environment/pokemon.py",
    "source_code": "        details = details.split(\", \")",
    "target_code": "\n        <DED>split_details = details.split(\", \")\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " details is declared to have type `str` but is used as type `List[str]`.",
    "warning_line": 229,
    "pred_top-1": {
      "pred": "details_list = details.split(\", \")\ndetails = details_list",
      "pred_parsed": "        details_list = details.split(\", \")\n        details = details_list\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "details_list = details.split(\", \")\ndetails = details_list",
      "pred_parsed": "        details_list = details.split(\", \")\n        details = details_list\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "details = details.split(\", \")\nif isinstance(details, str):\n    details = details.split(\", \")",
      "pred_parsed": "        details = details.split(\", \")\n        if isinstance(details, str):\n        details = details.split(\", \")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "details_list = details.split(\", \")\ndetails = details_list",
      "pred_parsed": "        details_list = details.split(\", \")\n        details = details_list\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "details_list = details.split(\", \")\ndetails = details_list",
      "pred_parsed": "        details_list = details.split(\", \")\n        details = details_list\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "HypothesisWorks/hypothesis",
    "repo_dir": "./GitHub/GitHub/HypothesisWorks-hypothesis",
    "commit": "928e57554754bc780ee307835688cc752a386743",
    "filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_code": "    min_size=0,   # type: int\n    average_size=None,  # type: int\n    max_size=None,  # type: int",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,  # type: None\n    max_size=None,  # type: int\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " average_size is declared to have type `int` but is used as type `None`.",
    "warning_line": 705,
    "pred_top-1": {
      "pred": "min_size=0,   # type: int\naverage_size=0,  # type: int\nmax_size=None,  # type: int",
      "pred_parsed": "    min_size=0,   # type: int\n    average_size=0,  # type: int\n    max_size=None,  # type: int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "min_size=0,   # type: int\naverage_size=0,  # type: int\nmax_size=None,  # type: int",
      "pred_parsed": "    min_size=0,   # type: int\n    average_size=0,  # type: int\n    max_size=None,  # type: int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "min_size=0,   # type: int\n    average_size=0,  # type: int\n    max_size=None,  # type: int",
      "pred_parsed": "    min_size=0,   # type: int\n    average_size=0,  # type: int\n    max_size=None,  # type: int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "min_size=0,   # type: int\naverage_size=0,  # type: int\nmax_size=None,  # type: int",
      "pred_parsed": "    min_size=0,   # type: int\n    average_size=0,  # type: int\n    max_size=None,  # type: int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "min_size=0,   # type: int\naverage_size=0,  # type: int\nmax_size=None,  # type: int",
      "pred_parsed": "    min_size=0,   # type: int\n    average_size=0,  # type: int\n    max_size=None,  # type: int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "awslabs/aws-lambda-powertools-python",
    "repo_dir": "./GitHub/GitHub/awslabs-aws-lambda-powertools-python",
    "commit": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "filename": "aws_lambda_powertools/logging/formatter.py",
    "source_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: str = None,\n        log_record_order: List[str] = None,\n        utc: bool = False,",
    "target_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: Optional[List[str]] = None,\n        utc: bool = False,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " datefmt is declared to have type `str` but is used as type `None`.",
    "warning_line": 63,
    "pred_top-1": {
      "pred": "json_default: Optional[Callable[[Any], Any]] = None,\ndatefmt: Optional[str] = None,\nlog_record_order: List[str] = None,\nutc: bool = False,",
      "pred_parsed": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: List[str] = None,\n        utc: bool = False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "json_default: Optional[Callable[[Any], Any]] = None,\n                datefmt: Optional[str] = None,\n                log_record_order: Optional[List[str]] = None,\n                utc: bool = False,",
      "pred_parsed": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: Optional[List[str]] = None,\n        utc: bool = False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "json_default: Optional[Callable[[Any], Any]] = None,\ndatefmt: Optional[str] = None,\nlog_record_order: List[str] = None,\nutc: bool = False,",
      "pred_parsed": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: List[str] = None,\n        utc: bool = False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "json_default: Optional[Callable[[Any], Any]] = None,\ndatefmt: Optional[str] = None,\nlog_record_order: List[str] = None,\nutc: bool = False,",
      "pred_parsed": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: List[str] = None,\n        utc: bool = False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "json_default: Optional[Callable[[Any], Any]] = None,\ndatefmt: Optional[str] = None,\nlog_record_order: List[str] = None,\nutc: bool = False,",
      "pred_parsed": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: List[str] = None,\n        utc: bool = False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "repo_dir": "./GitHub/GitHub/Trusted-AI-adversarial-robustness-toolbox",
    "commit": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "filename": "art/estimators/classification/keras.py",
    "source_code": "        use_logits: bool = False,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,",
    "target_code": "        use_logits: bool = False,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
    "warning_line": 72,
    "pred_top-1": {
      "pred": "use_logits: bool = False,\nchannel_index: type = art.utils._Deprecated,\nchannels_first: bool = False,",
      "pred_parsed": "        use_logits: bool = False,\n        channel_index: type = art.utils._Deprecated,\n        channels_first: bool = False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "use_logits: bool = False,\nchannel_index: type = art.utils._Deprecated,\nchannels_first: bool = False,",
      "pred_parsed": "        use_logits: bool = False,\n        channel_index: type = art.utils._Deprecated,\n        channels_first: bool = False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "use_logits: bool = False,\nchannel_index: type = art.utils._Deprecated,\nchannels_first: bool = False,",
      "pred_parsed": "        use_logits: bool = False,\n        channel_index: type = art.utils._Deprecated,\n        channels_first: bool = False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "use_logits: bool = False,\nchannel_index: type = art.utils._Deprecated,\nchannels_first: bool = False,",
      "pred_parsed": "        use_logits: bool = False,\n        channel_index: type = art.utils._Deprecated,\n        channels_first: bool = False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "use_logits: bool = False,\nchannel_index: type = art.utils._Deprecated,\nchannels_first: bool = False,",
      "pred_parsed": "        use_logits: bool = False,\n        channel_index: type = art.utils._Deprecated,\n        channels_first: bool = False,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "bpython/curtsies",
    "repo_dir": "./GitHub/GitHub/bpython-curtsies",
    "commit": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413",
    "filename": "curtsies/formatstring.py",
    "source_code": "    def rjust(self, width, fillchar=None):\n        # type: (int, Text) -> FmtStr",
    "target_code": "\n    <DED><DED>def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr:\n        <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " fillchar is declared to have type `str` but is used as type `None`.",
    "warning_line": 513,
    "pred_top-1": {
      "pred": "def rjust(self, width, fillchar: str =None):\n        # type: (int, Text) -> FmtStr",
      "pred_parsed": "    def rjust(self, width, fillchar: str =None):\n    # type: (int, Text) -> FmtStr\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def rjust(self, width, fillchar=\" \"):\n    # type: (int, Text) -> FmtStr",
      "pred_parsed": "    def rjust(self, width, fillchar=\" \"):\n    # type: (int, Text) -> FmtStr\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "def rjust(self, width, fillchar=\" \"):\n    # type: (int, Text) -> FmtStr",
      "pred_parsed": "    def rjust(self, width, fillchar=\" \"):\n    # type: (int, Text) -> FmtStr\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "def rjust(self, width, fillchar=\" \"):\n    # type: (int, Text) -> FmtStr",
      "pred_parsed": "    def rjust(self, width, fillchar=\" \"):\n    # type: (int, Text) -> FmtStr\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "def rjust(self, width, fillchar=\" \"):\n    # type: (int, Text) -> FmtStr",
      "pred_parsed": "    def rjust(self, width, fillchar=\" \"):\n    # type: (int, Text) -> FmtStr\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "explosion/spaCy",
    "repo_dir": "./GitHub/GitHub/explosion-spaCy",
    "commit": "0f2de39efbd4158b19e831c45b60960b33d3e979",
    "filename": "spacy/cli/info.py",
    "source_code": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None\n) -> str:",
    "target_code": "<DED>def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " exclude is declared to have type `List[str]` but is used as type `None`.",
    "warning_line": 108,
    "pred_top-1": {
      "pred": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:",
      "pred_parsed": "def get_markdown(\ndata: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = []\n) -> str:",
      "pred_parsed": "def get_markdown(\ndata: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = []\n) -> str:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:",
      "pred_parsed": "def get_markdown(\ndata: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = []\n) -> str:",
      "pred_parsed": "def get_markdown(\ndata: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = []\n) -> str:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:",
      "pred_parsed": "def get_markdown(\ndata: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "jesopo/bitbot",
    "repo_dir": "./GitHub/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/protocol.py",
    "source_code": "def batch_start(identifier: str, batch_type: str, tags: dict=None):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],",
    "target_code": "\n<DED>def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 84,
    "pred_top-1": {
      "pred": "def batch_start(identifier: str, batch_type: str, tags: dict={}):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: dict={}):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def batch_start(identifier: str, batch_type: str, tags: dict={}):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: dict={}):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def batch_start(identifier: str, batch_type: str, tags: dict={}):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: dict={}):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def batch_start(identifier: str, batch_type: str, tags: dict={}):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: dict={}):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def batch_start(identifier: str, batch_type: str, tags: dict = {}):\n    return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)",
      "pred_parsed": "def batch_start(identifier: str, batch_type: str, tags: dict = {}):\nreturn utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], tags)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "irmen/Tale",
    "repo_dir": "./GitHub/GitHub/irmen-Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/driver.py",
    "source_code": "    def __init__(self) -> None:\n        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        self.validatefunc(func)",
    "target_code": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        <IND>self.validatefunc(func)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " privilege is declared to have type `str` but is used as type `None`.",
    "warning_line": 47,
    "pred_top-1": {
      "pred": "def __init__(self) -> None:\n    self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n    self.no_soul_parsing = set()   # type: Set[str]\n\ndef add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n    self.validatefunc(func)",
      "pred_parsed": "    def __init__(self) -> None:\n    self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n    self.no_soul_parsing = set()   # type: Set[str]\n    \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n    self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self) -> None:\n        self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\ndef add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n        self.validatefunc(func)",
      "pred_parsed": "    def __init__(self) -> None:\n    self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n    self.no_soul_parsing = set()   # type: Set[str]\n    \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n    self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(self) -> None:\n    self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n    self.no_soul_parsing = set()   # type: Set[str]\n\ndef add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n    self.validatefunc(func)",
      "pred_parsed": "    def __init__(self) -> None:\n    self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n    self.no_soul_parsing = set()   # type: Set[str]\n    \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n    self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self) -> None:\n    self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n    self.no_soul_parsing = set()   # type: Set[str]\n\ndef add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n    self.validatefunc(func)",
      "pred_parsed": "    def __init__(self) -> None:\n    self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n    self.no_soul_parsing = set()   # type: Set[str]\n    \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n    self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self) -> None:\n    self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n    self.no_soul_parsing = set()   # type: Set[str]\n\ndef add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n    self.validatefunc(func)",
      "pred_parsed": "    def __init__(self) -> None:\n    self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n    self.no_soul_parsing = set()   # type: Set[str]\n    \n    def add(self, verb: str, func: Callable, privilege: Optional[str]=None) -> None:\n    self.validatefunc(func)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "RasaHQ/rasa",
    "repo_dir": "./GitHub/GitHub/RasaHQ-rasa",
    "commit": "3490222f361f8346944939f5c5d6d7e77bbe6df7",
    "filename": "rasa/model.py",
    "source_code": "def unpack_model(model_file: Text, working_directory: Text = None,\n                 subdirectories: bool = False",
    "target_code": "\n<DED>def unpack_model(model_file: Text, working_directory: Optional[Text] = None,\n                 subdirectories: bool = False\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " working_directory is declared to have type `str` but is used as type `None`.",
    "warning_line": 70,
    "pred_top-1": {
      "pred": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False):",
      "pred_parsed": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False):",
      "pred_parsed": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False):",
      "pred_parsed": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False):",
      "pred_parsed": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False):",
      "pred_parsed": "def unpack_model(model_file: Text, working_directory: Text = None, subdirectories: bool = False):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "RDFLib/rdflib",
    "repo_dir": "./GitHub/GitHub/RDFLib-rdflib",
    "commit": "90f6fe5611f4c7411e5eac347cafb9d009829b6c",
    "filename": "rdflib/plugins/sparql/algebra.py",
    "source_code": "def translateAlgebra(query_algebra: Query = None):",
    "target_code": "\n<DED>def translateAlgebra(query_algebra: Query):\n    <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " query_algebra is declared to have type `Query` but is used as type `None`.",
    "warning_line": 804,
    "pred_top-1": {
      "pred": "def translateAlgebra(query_algebra: Query = None):\n    if query_algebra is None:\n        query_algebra = Query()",
      "pred_parsed": "def translateAlgebra(query_algebra: Query = None):\nif query_algebra is None:\nquery_algebra = Query()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def translateAlgebra(query_algebra: Query = Query()):",
      "pred_parsed": "def translateAlgebra(query_algebra: Query = Query()):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def translateAlgebra(query_algebra: Query = None):\n    if query_algebra is None:\n        return None",
      "pred_parsed": "def translateAlgebra(query_algebra: Query = None):\nif query_algebra is None:\nreturn None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def translateAlgebra(query_algebra: Query = None):\n    if query_algebra is None:\n        query_algebra = Query()",
      "pred_parsed": "def translateAlgebra(query_algebra: Query = None):\nif query_algebra is None:\nquery_algebra = Query()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def translateAlgebra(query_algebra: Query = None):\n    if query_algebra is None:\n        query_algebra = Query()",
      "pred_parsed": "def translateAlgebra(query_algebra: Query = None):\nif query_algebra is None:\nquery_algebra = Query()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "allenai/allennlp",
    "repo_dir": "./GitHub/GitHub/allenai-allennlp",
    "commit": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "filename": "allennlp/training/trainer.py",
    "source_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,",
    "target_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = Lazy(Optimizer.default),\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = Lazy(TensorboardWriter),\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy(Checkpointer),\n        batch_callbacks: List[BatchCallback] = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " checkpointer is declared to have type `allennlp.common.lazy.Lazy[Checkpointer]` but is used as type `None`.",
    "warning_line": 1235,
    "pred_top-1": {
      "pred": "no_grad: List[str] = None,\noptimizer: Lazy[Optimizer] = None,\nlearning_rate_scheduler: Lazy[LearningRateScheduler] = None,\nmomentum_scheduler: Lazy[MomentumScheduler] = None,\ntensorboard_writer: Lazy[TensorboardWriter] = None,\nmoving_average: Lazy[MovingAverage] = None,\ncheckpointer: Lazy[Checkpointer] = Lazy[Checkpointer](),\nbatch_callbacks: List[BatchCallback] = None,",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy[Checkpointer](),\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "no_grad: List[str] = None,\noptimizer: Lazy[Optimizer] = None,\nlearning_rate_scheduler: Lazy[LearningRateScheduler] = None,\nmomentum_scheduler: Lazy[MomentumScheduler] = None,\ntensorboard_writer: Lazy[TensorboardWriter] = None,\nmoving_average: Lazy[MovingAverage] = None,\ncheckpointer: Lazy[Checkpointer] = Lazy[Checkpointer](),\nbatch_callbacks: List[BatchCallback] = None,",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy[Checkpointer](),\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Optional[Lazy[Checkpointer]] = None,\n        batch_callbacks: List[BatchCallback] = None,",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Optional[Lazy[Checkpointer]] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Optional[Lazy[Checkpointer]] = None,\n        batch_callbacks: List[BatchCallback] = None,",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Optional[Lazy[Checkpointer]] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "no_grad: List[str] = None,\noptimizer: Lazy[Optimizer] = None,\nlearning_rate_scheduler: Lazy[LearningRateScheduler] = None,\nmomentum_scheduler: Lazy[MomentumScheduler] = None,\ntensorboard_writer: Lazy[TensorboardWriter] = None,\nmoving_average: Lazy[MovingAverage] = None,\ncheckpointer: Lazy[Checkpointer] = Lazy[Checkpointer](),\nbatch_callbacks: List[BatchCallback] = None,",
      "pred_parsed": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy[Checkpointer](),\n        batch_callbacks: List[BatchCallback] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "trailofbits/pip-audit",
    "repo_dir": "./GitHub/GitHub/trailofbits-pip-audit",
    "commit": "844c85f0b9a65e76577a4f2b232537af02542d6c",
    "filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "source_code": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = None,\n        is_wheel: bool = True,",
    "target_code": "        version: Version,\n        url: str,\n        extras: Set[str],\n        is_wheel: bool = True,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " extras is declared to have type `bool` but is used as type `None`.",
    "warning_line": 46,
    "pred_top-1": {
      "pred": "version: Version,\n                url: Optional[str] = None,\n                extras: Optional[bool] = None,\n                is_wheel: bool = True,",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "version: Version,\nurl: Optional[str] = None,\nextras: Optional[bool] = None,\nis_wheel: bool = True,",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "version: Version,\nurl: Optional[str] = None,\nextras: Optional[bool] = None,\nis_wheel: bool = True,",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "version: Version,\nurl: Optional[str] = None,\nextras: Optional[bool] = None,\nis_wheel: bool = True,",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "version: Version,\nurl: Optional[str] = None,\nextras: Optional[bool] = None,\nis_wheel: bool = True,",
      "pred_parsed": "        version: Version,\n        url: Optional[str] = None,\n        extras: Optional[bool] = None,\n        is_wheel: bool = True,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "torproject/stem",
    "repo_dir": "./GitHub/GitHub/torproject-stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "source_code": "    count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count",
    "target_code": "    <IND>count = int(seconds / amount)\n    seconds %= int(amount)\n    time_comp[label.strip()] = count\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " seconds is declared to have type `int` but is used as type `float`.",
    "warning_line": 416,
    "pred_top-1": {
      "pred": "count = int(seconds / amount)\nseconds = float(seconds)\nseconds %= amount\ntime_comp[label.strip()] = count",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds = float(seconds)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "count = int(seconds / amount)\nseconds = float(seconds)\nseconds %= amount\ntime_comp[label.strip()] = count",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds = float(seconds)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "count = int(float(seconds) / amount)\nseconds %= amount\ntime_comp[label.strip()] = count",
      "pred_parsed": "    count = int(float(seconds) / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "count = int(seconds / amount)\nseconds = float(seconds)\nseconds %= amount\ntime_comp[label.strip()] = count",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds = float(seconds)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "count = int(seconds / amount)\nseconds = float(seconds)\nseconds %= amount\ntime_comp[label.strip()] = count",
      "pred_parsed": "    count = int(seconds / amount)\n    seconds = float(seconds)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "poljar/matrix-nio",
    "repo_dir": "./GitHub/GitHub/poljar-matrix-nio",
    "commit": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "filename": "nio/api.py",
    "source_code": "        homeserver = urlparse(homeserver) if homeserver else None",
    "target_code": "\n        <DED>parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
    "warning_line": 104,
    "pred_top-1": {
      "pred": "import urllib.parse\n\nhomeserver = urlparse(homeserver) if (homeserver and isinstance(homeserver, str)) else None",
      "pred_parsed": "        import urllib.parse\n        \n        homeserver = urlparse(homeserver) if (homeserver and isinstance(homeserver, str)) else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "import urllib.parse\n\nhomeserver = urlparse(homeserver) if isinstance(homeserver, str) else None",
      "pred_parsed": "        import urllib.parse\n        \n        homeserver = urlparse(homeserver) if isinstance(homeserver, str) else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "import urllib.parse\n\nhomeserver = urlparse(homeserver) if isinstance(homeserver, str) else None",
      "pred_parsed": "        import urllib.parse\n        \n        homeserver = urlparse(homeserver) if isinstance(homeserver, str) else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "import urllib.parse\n\nhomeserver = urlparse(homeserver) if isinstance(homeserver, str) else None",
      "pred_parsed": "        import urllib.parse\n        \n        homeserver = urlparse(homeserver) if isinstance(homeserver, str) else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "import urllib.parse\n\nhomeserver = urlparse(homeserver) if isinstance(homeserver, str) else None",
      "pred_parsed": "        import urllib.parse\n        \n        homeserver = urlparse(homeserver) if isinstance(homeserver, str) else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ReactiveX/RxPY",
    "repo_dir": "./GitHub/GitHub/ReactiveX-RxPY",
    "commit": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "source_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
    "target_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
    "warning_line": 93,
    "pred_top-1": {
      "pred": "duetime = self.to_datetime(duetime)\nstate_type = type(state)\nsi: ScheduledItem[state_type] = ScheduledItem(self, state, action, duetime)",
      "pred_parsed": "        duetime = self.to_datetime(duetime)\n        state_type = type(state)\n        si: ScheduledItem[state_type] = ScheduledItem(self, state, action, duetime)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "duetime = self.to_datetime(duetime)\nif isinstance(state, typing.TState):\n    si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\nelse:\n    si: ScheduledItem[object] = ScheduledItem(self, state, action, duetime)",
      "pred_parsed": "        duetime = self.to_datetime(duetime)\n        if isinstance(state, typing.TState):\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n        else:\n        si: ScheduledItem[object] = ScheduledItem(self, state, action, duetime)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "duetime = self.to_datetime(duetime)\nstate: typing.TState = state\nsi: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
      "pred_parsed": "        duetime = self.to_datetime(duetime)\n        state: typing.TState = state\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "duetime = self.to_datetime(duetime)\nstate_type = typing.TypeVar('TState')\nsi: ScheduledItem[state_type] = ScheduledItem(self, state, action, duetime)",
      "pred_parsed": "        duetime = self.to_datetime(duetime)\n        state_type = typing.TypeVar('TState')\n        si: ScheduledItem[state_type] = ScheduledItem(self, state, action, duetime)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "duetime = self.to_datetime(duetime)\nif isinstance(state, typing.TState):\n    si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\nelse:\n    si: ScheduledItem[object] = ScheduledItem(self, state, action, duetime)",
      "pred_parsed": "        duetime = self.to_datetime(duetime)\n        if isinstance(state, typing.TState):\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n        else:\n        si: ScheduledItem[object] = ScheduledItem(self, state, action, duetime)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "Project-MONAI/MONAI",
    "repo_dir": "./GitHub/GitHub/Project-MONAI-MONAI",
    "commit": "718d11abb2310ab74321256032a264488a7883b4",
    "filename": "monai/visualize/img2tensorboard.py",
    "source_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = None,\n    scale_factor: float = 1,",
    "target_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices=None,\n    scale_factor: float = 1,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " other_indices is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 54,
    "pred_top-1": {
      "pred": "image_axes: Sequence[int] = (1, 2),\nother_indices: dict = {} ,\nscale_factor: float = 1,",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = {} ,\n    scale_factor: float = 1,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "image_axes: Sequence[int] = (1, 2),\nother_indices: dict = {} ,\nscale_factor: float = 1,",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = {} ,\n    scale_factor: float = 1,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "image_axes: Sequence[int] = (1, 2),\nother_indices: Dict[Any, Any] = {}\nscale_factor: float = 1,",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: Dict[Any, Any] = {}\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "image_axes: Sequence[int] = (1, 2),\nother_indices: dict = {}\nscale_factor: float = 1,",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = {}\n    scale_factor: float = 1,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "image_axes: Sequence[int] = (1, 2),\nother_indices: dict = {} ,\nscale_factor: float = 1,",
      "pred_parsed": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = {} ,\n    scale_factor: float = 1,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "apache/airflow",
    "repo_dir": "./GitHub/GitHub/apache-airflow",
    "commit": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
    "warning_line": 2221,
    "pred_top-1": {
      "pred": "timeout: Optional[float] = None,\nmetadata: Optional[Sequence[Tuple[str, str]]] = None,\ngcp_conn_id: str = \"google_cloud_default\",",
      "pred_parsed": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "timeout: Optional[float] = None,\nmetadata: Optional[Sequence[Tuple[str, str]]] = None,\ngcp_conn_id: str = \"google_cloud_default\",",
      "pred_parsed": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "timeout: Optional[float] = None,\nmetadata: Optional[Sequence[Tuple[str, str]]] = None,\ngcp_conn_id: str = \"google_cloud_default\",",
      "pred_parsed": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",",
      "pred_parsed": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",",
      "pred_parsed": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = None,\n        gcp_conn_id: str = \"google_cloud_default\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "osmocom/pysim",
    "repo_dir": "./GitHub/GitHub/osmocom-pysim",
    "commit": "1e45657e0f177388379f37e8557ac1cfdbac32a5",
    "filename": "pySim/filesystem.py",
    "source_code": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):",
    "target_code": "\n    def __init__(self, fid:str, rec_len:int, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, size={1,None}):\n        <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " rec_len is declared to have type `int` but is used as type `None`.",
    "warning_line": 687,
    "pred_top-1": {
      "pred": "def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=0, size={1,None}):",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:Optional[CardDF]=None, rec_len:int=0, size={1,None}):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=0, size={1,None}):",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:Optional[CardDF]=None, rec_len:int=0, size={1,None}):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=0, size={1,None}):",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:Optional[CardDF]=None, rec_len:int=0, size={1,None}):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=0, size={1,None}):",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:Optional[CardDF]=None, rec_len:int=0, size={1,None}):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=0, size={1,None}):",
      "pred_parsed": "    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n    parent:Optional[CardDF]=None, rec_len:int=0, size={1,None}):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "mosquito/aiormq",
    "repo_dir": "./GitHub/GitHub/mosquito-aiormq",
    "commit": "91909de532777c494df33a4843410b1981ca8794",
    "filename": "aiormq/channel.py",
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " destination is declared to have type `str` but is used as type `None`.",
    "warning_line": 659,
    "pred_top-1": {
      "pred": "destination: str = \"\",\n                source: str = None,\n                routing_key: str = \"\",\n                *,",
      "pred_parsed": "        destination: str = \"\",\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self,\ndestination: str = \"\",\nsource: str = None,\nrouting_key: str = \"\",\n*",
      "pred_parsed": "        self,\n        destination: str = \"\",\n        source: str = None,\n        routing_key: str = \"\",\n        *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self,\ndestination: str = \"\",\nsource: str = None,\nrouting_key: str = \"\",\n*",
      "pred_parsed": "        self,\n        destination: str = \"\",\n        source: str = None,\n        routing_key: str = \"\",\n        *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self,\ndestination: str = \"\",\nsource: str = None,\nrouting_key: str = \"\",\n*",
      "pred_parsed": "        self,\n        destination: str = \"\",\n        source: str = None,\n        routing_key: str = \"\",\n        *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self,\n             destination: str = \"\",\n             source: str = \"\",\n             routing_key: str = \"\"):",
      "pred_parsed": "        def __init__(self,\n        destination: str = \"\",\n        source: str = \"\",\n        routing_key: str = \"\"):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "facebook/TestSlide",
    "repo_dir": "./GitHub/GitHub/facebook-TestSlide",
    "commit": "97c39d89c2a047a3396be659645bd89dab01d859",
    "filename": "tests/mock_callable_testslide.py",
    "source_code": "    async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None\n    ):",
    "target_code": "    <DED>async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " kwarg2 is declared to have type `str` but is used as type `None`.",
    "warning_line": 47,
    "pred_top-1": {
      "pred": "async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = \"\"\n    ):",
      "pred_parsed": "    async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = \"\"\n    ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = \"\"\n):",
      "pred_parsed": "    async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = \"\"\n    ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = \"\"\n):",
      "pred_parsed": "    async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = \"\"\n    ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = \"\"\n):",
      "pred_parsed": "    async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = \"\"\n    ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = \"\"\n    ):",
      "pred_parsed": "    async def async_instance_method(\n    self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = \"\"\n    ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "volatilityfoundation/volatility3",
    "repo_dir": "./GitHub/GitHub/volatilityfoundation-volatility3",
    "commit": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "filename": "volatility/framework/contexts/__init__.py",
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,",
    "target_code": "    <IND>def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " symbol_name is declared to have type `str` but is used as type `None`.",
    "warning_line": 120,
    "pred_top-1": {
      "pred": "def object(self,\n           symbol_name: str = \"\",\n           type_name: str = None,\n           offset: int = None,",
      "pred_parsed": "    def object(self,\n    symbol_name: str = \"\",\n    type_name: str = None,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def object(self,\n           symbol_name: str = '',\n           type_name: str = None,\n           offset: int = None,",
      "pred_parsed": "    def object(self,\n    symbol_name: str = '',\n    type_name: str = None,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "def object(self,\n           symbol_name: str = \"\",\n           type_name: str = None,\n           offset: int = None,",
      "pred_parsed": "    def object(self,\n    symbol_name: str = \"\",\n    type_name: str = None,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "def object(self,\n               symbol_name: str = '',\n               type_name: str = None,\n               offset: int = None",
      "pred_parsed": "    def object(self,\n    symbol_name: str = '',\n    type_name: str = None,\n    offset: int = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "def object(self,\n           symbol_name: str = '',\n           type_name: str = None,\n           offset: int = None,",
      "pred_parsed": "    def object(self,\n    symbol_name: str = '',\n    type_name: str = None,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "joerick/pyinstrument",
    "repo_dir": "./GitHub/GitHub/joerick-pyinstrument",
    "commit": "12b65ffb01e65c5fbcfb08abee26da56c745c919",
    "filename": "pyinstrument/profiler.py",
    "source_code": "    def start(self, caller_frame: types.FrameType = None):",
    "target_code": "\n    <DED>def start(self, caller_frame: types.FrameType | None = None):\n        <IND>",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " caller_frame is declared to have type `types.FrameType` but is used as type `None`.",
    "warning_line": 101,
    "pred_top-1": {
      "pred": "def start(self, caller_frame: types.FrameType = types.FrameType()):",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = types.FrameType()):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def start(self, caller_frame: types.FrameType = types.FrameType()):",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = types.FrameType()):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "def start(self, caller_frame: types.FrameType = types.FrameType()):",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = types.FrameType()):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "def start(self, caller_frame: types.FrameType = types.FrameType()):",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = types.FrameType()):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "def start(self, caller_frame: types.FrameType = types.FrameType()):",
      "pred_parsed": "    def start(self, caller_frame: types.FrameType = types.FrameType()):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "scrapy/scrapy",
    "repo_dir": "./GitHub/GitHub/scrapy-scrapy",
    "commit": "38d361792c02ae2b25323258d070c04d8906495a",
    "filename": "scrapy/core/downloader/handlers/http2.py",
    "source_code": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None",
    "target_code": "        self, context_factory,\n        pool: H2ConnectionPool,\n        connect_timeout=10, bind_address: Optional[bytes] = None,\n        crawler=None\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " pool is declared to have type `H2ConnectionPool` but is used as type `None`.",
    "warning_line": 75,
    "pred_top-1": {
      "pred": "self, context_factory,\nconnect_timeout=10,\nbind_address: Optional[bytes] = None, pool: H2ConnectionPool = H2ConnectionPool(),\ncrawler=None",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = H2ConnectionPool(),\n        crawler=None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "self, context_factory,\nconnect_timeout=10,\nbind_address: Optional[bytes] = None, pool: H2ConnectionPool = H2ConnectionPool(),\ncrawler=None",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = H2ConnectionPool(),\n        crawler=None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self, context_factory,\nconnect_timeout=10,\nbind_address: Optional[bytes] = None, pool: H2ConnectionPool = H2ConnectionPool(),\ncrawler=None",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = H2ConnectionPool(),\n        crawler=None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self, context_factory,\nconnect_timeout=10,\nbind_address: Optional[bytes] = None, pool: H2ConnectionPool = H2ConnectionPool(),\ncrawler=None",
      "pred_parsed": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = H2ConnectionPool(),\n        crawler=None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ConnectionPool = H2ConnectionPool(), crawler=None",
      "pred_parsed": "        self, context_factory, connect_timeout=10, bind_address: Optional[bytes] = None, pool: H2ConnectionPool = H2ConnectionPool(), crawler=None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "jMetal/jMetalPy",
    "repo_dir": "./GitHub/GitHub/jMetal-jMetalPy",
    "commit": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_code": "    def __init__(self, rf_path: str=None):\n        super(Fonseca, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 3",
    "target_code": "\n    <IND>def __init__(self):\n        <IND>super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " rf_path is declared to have type `str` but is used as type `None`.",
    "warning_line": 53,
    "pred_top-1": {
      "pred": "def __init__(self, rf_path: str = \"\"):\n    super(Fonseca, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 3",
      "pred_parsed": "    def __init__(self, rf_path: str = \"\"):\n    super(Fonseca, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 3\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self, rf_path: str = \"\"):\n    super(Fonseca, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 3",
      "pred_parsed": "    def __init__(self, rf_path: str = \"\"):\n    super(Fonseca, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 3\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(self, rf_path: str = \"\"):\n    super(Fonseca, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 3",
      "pred_parsed": "    def __init__(self, rf_path: str = \"\"):\n    super(Fonseca, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 3\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self, rf_path: str = \"\"):\n    super(Fonseca, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 3",
      "pred_parsed": "    def __init__(self, rf_path: str = \"\"):\n    super(Fonseca, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 3\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self, rf_path: str = \"\"):\n    super(Fonseca, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 3",
      "pred_parsed": "    def __init__(self, rf_path: str = \"\"):\n    super(Fonseca, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 3\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "pythonarcade/arcade",
    "repo_dir": "./GitHub/GitHub/pythonarcade-arcade",
    "commit": "85b6424dc45469c45617e4c72aed8705ff54846b",
    "filename": "arcade/gui/ui_style.py",
    "source_code": "        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            style_data = self.data.get(style_class, {})",
    "target_code": "\n        for style_class in reversed(style_classes):\n            <IND>style_data = self.data.get(style_class, {})\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " style_classes is declared to have type `List[str]` but is used as type `reversed[str]`.",
    "warning_line": 78,
    "pred_top-1": {
      "pred": "style_classes = list(reversed(style_classes))\nfor style_class in style_classes:\n    style_data = self.data.get(style_class, {})",
      "pred_parsed": "        style_classes = list(reversed(style_classes))\n        for style_class in style_classes:\n        style_data = self.data.get(style_class, {})\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "style_classes = list(reversed(style_classes))\n                for style_class in style_classes:\n                    style_data = self.data.get(style_class, {})",
      "pred_parsed": "        style_classes = list(reversed(style_classes))\n        for style_class in style_classes:\n        style_data = self.data.get(style_class, {})\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "style_classes = list(reversed(style_classes))\nfor style_class in style_classes:\n    style_data = self.data.get(style_class, {})",
      "pred_parsed": "        style_classes = list(reversed(style_classes))\n        for style_class in style_classes:\n        style_data = self.data.get(style_class, {})\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "style_classes = list(reversed(style_classes))\nfor style_class in style_classes:\n    style_data = self.data.get(style_class, {})",
      "pred_parsed": "        style_classes = list(reversed(style_classes))\n        for style_class in style_classes:\n        style_data = self.data.get(style_class, {})\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "style_classes = list(reversed(style_classes))\nfor style_class in style_classes:\n    style_data = self.data.get(style_class, {})",
      "pred_parsed": "        style_classes = list(reversed(style_classes))\n        for style_class in style_classes:\n        style_data = self.data.get(style_class, {})\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Chia-Network/chia-blockchain",
    "repo_dir": "./GitHub/GitHub/Chia-Network-chia-blockchain",
    "commit": "05f67167fe26bc0fb539363976344e2fbc115f13",
    "filename": "chia/wallet/wallet.py",
    "source_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = None,\n    ) -> TransactionRecord:",
    "target_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[bytes32] = None,\n    ) -> TransactionRecord:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " announcements_to_consume is declared to have type `Set[Announcement]` but is used as type `None`.",
    "warning_line": 387,
    "pred_top-1": {
      "pred": "def process_transaction(\n        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = set(),\n    ) -> TransactionRecord:",
      "pred_parsed": "        def process_transaction(\n        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = set(),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def process_transaction(\n        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = set(),\n    ) -> TransactionRecord:",
      "pred_parsed": "        def process_transaction(\n        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = set(),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def process_transaction(\n        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = set(),\n    ) -> TransactionRecord:",
      "pred_parsed": "        def process_transaction(\n        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = set(),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "ignore_max_send_amount: bool = False,\nannouncements_to_consume: Set[Announcement] = set(),",
      "pred_parsed": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = set(),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def send_transaction(\n        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = set(),\n    ) -> TransactionRecord:",
      "pred_parsed": "        def send_transaction(\n        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = set(),\n        ) -> TransactionRecord:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jesopo/bitbot",
    "repo_dir": "./GitHub/GitHub/jesopo-bitbot",
    "commit": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "filename": "src/utils/irc/__init__.py",
    "source_code": "        self.lines.append(line)\n    def message(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n    def notice(self, target: str, message: str, tags: dict=None):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))",
    "target_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 334,
    "pred_top-1": {
      "pred": "def message(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.message(target, message, tags))\ndef notice(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "pred_parsed": "        def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def message(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.message(target, message, tags))\ndef notice(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "pred_parsed": "        def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def message(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.message(target, message, tags))\ndef notice(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "pred_parsed": "        def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def message(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.message(target, message, tags))\ndef notice(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "pred_parsed": "        def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def message(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.message(target, message, tags))\ndef notice(self, target: str, message: str, tags: dict={}):\n    self._add_line(utils.irc.protocol.notice(target, message, tags))",
      "pred_parsed": "        def message(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.message(target, message, tags))\n        def notice(self, target: str, message: str, tags: dict={}):\n        self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "hikari-py/hikari",
    "repo_dir": "./GitHub/GitHub/hikari-py-hikari",
    "commit": "cf143052e1228280ed895c06da9177611d8ea088",
    "filename": "hikari/orm/http/base_http_adapter.py",
    "source_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
    "target_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NullableNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " parent_category is declared to have type `typing.Union[_channels.GuildCategory, int, str, unspecified.Unspecified]` but is used as type `typing.Type[unspecified.Unspecified]`.",
    "warning_line": 1140,
    "pred_top-1": {
      "pred": "name: type_hints.NotRequired[str] = unspecified.UNSPECIFIED,\n        position: type_hints.NotRequired[int] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[typing.Union[_channels.GuildCategory, int, str, unspecified.Unspecified]] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "pred_parsed": "        name: type_hints.NotRequired[str] = unspecified.UNSPECIFIED,\n        position: type_hints.NotRequired[int] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[typing.Union[_channels.GuildCategory, int, str, unspecified.Unspecified]] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "name: type_hints.NotRequired[str] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "pred_parsed": "        name: type_hints.NotRequired[str] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,",
      "pred_parsed": "        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "name: type_hints.NotRequired[str] = unspecified.UNSPECIFIED,\n        position: type_hints.NotRequired[int] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED",
      "pred_parsed": "        name: type_hints.NotRequired[str] = unspecified.UNSPECIFIED,\n        position: type_hints.NotRequired[int] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "name: type_hints.NotRequired[str] = unspecified.UNSPECIFIED,\n        position: type_hints.NotRequired[int] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[Union[_channels.GuildCategory, int, str]] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,",
      "pred_parsed": "        name: type_hints.NotRequired[str] = unspecified.UNSPECIFIED,\n        position: type_hints.NotRequired[int] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[Union[_channels.GuildCategory, int, str]] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "mosquito/aiormq",
    "repo_dir": "./GitHub/GitHub/mosquito-aiormq",
    "commit": "91909de532777c494df33a4843410b1981ca8794",
    "filename": "aiormq/abc.py",
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " destination is declared to have type `str` but is used as type `None`.",
    "warning_line": 208,
    "pred_top-1": {
      "pred": "destination: str = \"\",\n                source: str = None,\n                routing_key: str = \"\",\n                *,",
      "pred_parsed": "        destination: str = \"\",\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "self,\ndestination: str = \"\",\nsource: str = None,\nrouting_key: str = \"\",\n*",
      "pred_parsed": "        self,\n        destination: str = \"\",\n        source: str = None,\n        routing_key: str = \"\",\n        *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self,\ndestination: str = \"\",\nsource: str = None,\nrouting_key: str = \"\",\n*",
      "pred_parsed": "        self,\n        destination: str = \"\",\n        source: str = None,\n        routing_key: str = \"\",\n        *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self,\ndestination: str = \"\",\nsource: str = None,\nrouting_key: str = \"\",\n*",
      "pred_parsed": "        self,\n        destination: str = \"\",\n        source: str = None,\n        routing_key: str = \"\",\n        *\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self,\n             destination: str = \"\",\n             source: str = \"\",\n             routing_key: str = \"\"):",
      "pred_parsed": "        def __init__(self,\n        destination: str = \"\",\n        source: str = \"\",\n        routing_key: str = \"\"):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "matrix-org/synapse",
    "repo_dir": "./GitHub/GitHub/matrix-org-synapse",
    "commit": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945",
    "filename": "tests/rest/client/v1/utils.py",
    "source_code": "        self,\n        room_creator: str = None,\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,",
    "target_code": "        self,\n        room_creator: Optional[str] = None,\n        is_public: bool = True,\n        room_version: Optional[str] = None,\n        tok: Optional[str] = None,\n        expect_code: int = 200,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " room_creator is declared to have type `str` but is used as type `None`.",
    "warning_line": 50,
    "pred_top-1": {
      "pred": "self,\nroom_creator: str = \"None\",\nis_public: bool = True,\nroom_version: str = None,\ntok: str = None,\nexpect_code: int = 200,",
      "pred_parsed": "        self,\n        room_creator: str = \"None\",\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "self,\n                room_creator: str = \"\",\n                is_public: bool = True,\n                room_version: str = None,\n                tok: str = None,\n                expect_code: int = 200,",
      "pred_parsed": "        self,\n        room_creator: str = \"\",\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self,\nroom_creator: str = \"\",\nis_public: bool = True,\nroom_version: str = None,\ntok: str = None,\nexpect_code: int = 200,",
      "pred_parsed": "        self,\n        room_creator: str = \"\",\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self,\nroom_creator: str = \"\",\nis_public: bool = True,\nroom_version: str = None,\ntok: str = None,\nexpect_code: int = 200,",
      "pred_parsed": "        self,\n        room_creator: str = \"\",\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self,\nroom_creator: str = \"None\",\nis_public: bool = True,\nroom_version: str = None,\ntok: str = None,\nexpect_code: int = 200,",
      "pred_parsed": "        self,\n        room_creator: str = \"None\",\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "theislab/squidpy",
    "repo_dir": "./GitHub/GitHub/theislab-squidpy",
    "commit": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed",
    "filename": "squidpy/im/crop.py",
    "source_code": "    y: int,\n    channel_id: str = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?",
    "target_code": "    y: int,\n    channel_id: Optional[str] = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " channel_id is declared to have type `str` but is used as type `None`.",
    "warning_line": 80,
    "pred_top-1": {
      "pred": "y: int,\nchannel_id: str = None,\nxs: int = 100  # TODO: are these defaults reasonable or should no defaults be specified?",
      "pred_parsed": "    y: int,\n    channel_id: str = None,\n    xs: int = 100  # TODO: are these defaults reasonable or should no defaults be specified?\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "y: int,\nchannel_id: str = \"None\",\nxs: int = 100  # TODO: are these defaults reasonable or should no defaults be specified?",
      "pred_parsed": "    y: int,\n    channel_id: str = \"None\",\n    xs: int = 100  # TODO: are these defaults reasonable or should no defaults be specified?\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "y: int,\nchannel_id: str = None if channel_id is None else channel_id,\nxs: int = 100  # TODO: are these defaults reasonable or should no defaults be specified?",
      "pred_parsed": "    y: int,\n    channel_id: str = None if channel_id is None else channel_id,\n    xs: int = 100  # TODO: are these defaults reasonable or should no defaults be specified?\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "y: int,\nchannel_id: str = None if channel_id is None else channel_id,\nxs: int = 100  # TODO: are these defaults reasonable or should no defaults be specified?",
      "pred_parsed": "    y: int,\n    channel_id: str = None if channel_id is None else channel_id,\n    xs: int = 100  # TODO: are these defaults reasonable or should no defaults be specified?\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "y: int,\nchannel_id: str = '',\nxs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?",
      "pred_parsed": "    y: int,\n    channel_id: str = '',\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "poljar/matrix-nio",
    "repo_dir": "./GitHub/GitHub/poljar-matrix-nio",
    "commit": "54370462a3691387e011912c8450ee062168198a",
    "filename": "nio/rooms.py",
    "source_code": "        user_id:      str,\n        display_name: str  = None,\n        avatar_url:   str  = None,\n        power_level:  int  = 0,",
    "target_code": "        user_id:      str,\n        display_name: Optional[str] = None,\n        avatar_url:   Optional[str] = None,\n        power_level:  int  = 0,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " display_name is declared to have type `str` but is used as type `None`.",
    "warning_line": 501,
    "pred_top-1": {
      "pred": "user_id: str,\ndisplay_name: str = \"\",\navatar_url: str = \"\",\npower_level: int = 0,",
      "pred_parsed": "        user_id: str,\n        display_name: str = \"\",\n        avatar_url: str = \"\",\n        power_level: int = 0,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "user_id:      str,\ndisplay_name: str  = \"\",\navatar_url:   str  = \"\",\npower_level:  int  = 0,",
      "pred_parsed": "        user_id:      str,\n        display_name: str  = \"\",\n        avatar_url:   str  = \"\",\n        power_level:  int  = 0,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "user_id:      str,\ndisplay_name: str  = \"\",\navatar_url:   str  = \"\",\npower_level:  int  = 0,",
      "pred_parsed": "        user_id:      str,\n        display_name: str  = \"\",\n        avatar_url:   str  = \"\",\n        power_level:  int  = 0,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "user_id: str,\n        display_name: str = \"\",\n        avatar_url: str = None,\n        power_level: int = 0",
      "pred_parsed": "        user_id: str,\n        display_name: str = \"\",\n        avatar_url: str = None,\n        power_level: int = 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "user_id: str,\ndisplay_name: str = \"\",\navatar_url: str = \"\",\npower_level: int = 0,",
      "pred_parsed": "        user_id: str,\n        display_name: str = \"\",\n        avatar_url: str = \"\",\n        power_level: int = 0,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "ehForwarderBot/ehForwarderBot",
    "repo_dir": "./GitHub/GitHub/ehForwarderBot-ehForwarderBot",
    "commit": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b",
    "filename": "ehforwarderbot/chat.py",
    "source_code": "    def __init__(self, chat: 'Chat' = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
    "target_code": "\n    def __init__(self, chat: 'Chat', *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " chat is declared to have type `Chat` but is used as type `None`.",
    "warning_line": 243,
    "pred_top-1": {
      "pred": "def __init__(self, chat: Optional['Chat'] = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "pred_parsed": "    def __init__(self, chat: Optional['Chat'] = None, *,\n    name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self, chat: 'Chat' = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\")):\n    if chat is None:\n        chat = Chat()",
      "pred_parsed": "    def __init__(self, chat: 'Chat' = None, *,\n    name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\")):\n    if chat is None:\n    chat = Chat()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(self, chat: Chat = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "pred_parsed": "    def __init__(self, chat: Chat = None, *,\n    name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self, chat: Chat = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "pred_parsed": "    def __init__(self, chat: Chat = None, *,\n    name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self, chat: 'Chat' = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\")):",
      "pred_parsed": "    def __init__(self, chat: 'Chat' = None, *,\n    name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\")):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "robinhood/faust",
    "repo_dir": "./GitHub/GitHub/robinhood-faust",
    "commit": "08e3003188557cc18bfd085315892beb1d99584c",
    "filename": "faust/topics.py",
    "source_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: int = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
    "target_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " timestamp is declared to have type `int` but is used as type `float`.",
    "warning_line": 345,
    "pred_top-1": {
      "pred": "value: bytes = cast(bytes, message.value)\ntimestamp: float = cast(float, message.timestamp)\nlogger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "pred_parsed": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "value: bytes = cast(bytes, message.value)\ntimestamp: float = cast(float, message.timestamp)\nlogger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "pred_parsed": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "value: bytes = cast(bytes, message.value)\ntimestamp: float = cast(float, message.timestamp)\nlogger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "pred_parsed": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "value: bytes = cast(bytes, message.value)\ntimestamp: float = cast(float, message.timestamp)\nlogger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "pred_parsed": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "value: bytes = cast(bytes, message.value)\ntimestamp: float = cast(float, message.timestamp)\nlogger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "pred_parsed": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "ducdetronquito/scalpl",
    "repo_dir": "./GitHub/GitHub/ducdetronquito-scalpl",
    "commit": "95ffc100f9d3d214cb259e772b4f99d4ca30d216",
    "filename": "scalpl/scalpl.py",
    "source_code": "    def get(self, key: str, default: Optional = None) -> Any:\n        try:",
    "target_code": "\n    <DED>def get(self, key: str, default: Optional[Any] = None) -> Any:\n        <IND>try:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " default is declared to have type `Optional[typing.Any]` but is used as type `None`.",
    "warning_line": 119,
    "pred_top-1": {
      "pred": "def get(self, key: str, default: Optional[typing.Any] = None) -> Any:\n    try:",
      "pred_parsed": "    def get(self, key: str, default: Optional[typing.Any] = None) -> Any:\n    try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def get(self, key: str, default: Optional[typing.Any] = None) -> typing.Any:\n    try:",
      "pred_parsed": "    def get(self, key: str, default: Optional[typing.Any] = None) -> typing.Any:\n    try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def get(self, key: str, default: Optional[typing.Any] = None) -> typing.Any:\n    try:",
      "pred_parsed": "    def get(self, key: str, default: Optional[typing.Any] = None) -> typing.Any:\n    try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def get(self, key: str, default: Optional[typing.Any] = None) -> typing.Any:\n    try:",
      "pred_parsed": "    def get(self, key: str, default: Optional[typing.Any] = None) -> typing.Any:\n    try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def get(self, key: str, default: Optional[typing.Any] = None) -> typing.Any:\n    try:",
      "pred_parsed": "    def get(self, key: str, default: Optional[typing.Any] = None) -> typing.Any:\n    try:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "apache/airflow",
    "repo_dir": "./GitHub/GitHub/apache-airflow",
    "commit": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "source_code": "        project_id: str,\n        region: str = None,\n        location: Optional[str] = None,",
    "target_code": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " region is declared to have type `str` but is used as type `None`.",
    "warning_line": 931,
    "pred_top-1": {
      "pred": "project_id: str,\nregion: Optional[str] = None,\nlocation: Optional[str] = None,",
      "pred_parsed": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "project_id: str,\nregion: Optional[str] = None,\nlocation: Optional[str] = None,",
      "pred_parsed": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "project_id: str,\nregion: Optional[str] = None,\nlocation: Optional[str] = None,",
      "pred_parsed": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "project_id: str,\nregion: Optional[str] = None,\nlocation: Optional[str] = None,",
      "pred_parsed": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "project_id: str,\nregion: Optional[str] = None,\nlocation: Optional[str] = None,",
      "pred_parsed": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "awslabs/aws-lambda-powertools-python",
    "repo_dir": "./GitHub/GitHub/awslabs-aws-lambda-powertools-python",
    "commit": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "source_code": "    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = None,\n) -> Any:",
    "target_code": "    persistence_store: BasePersistenceLayer,\n    config: Optional[IdempotencyConfig] = None,\n) -> Any:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " config is declared to have type `IdempotencyConfig` but is used as type `None`.",
    "warning_line": 34,
    "pred_top-1": {
      "pred": "def some_function(\n    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = IdempotencyConfig(),\n) -> Any:",
      "pred_parsed": "    def some_function(\n    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = IdempotencyConfig(),\n    ) -> Any:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def some_function(\n    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = None\n) -> Any:",
      "pred_parsed": "    def some_function(\n    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = None\n    ) -> Any:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def execute_idempotent_operation(\n    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = None\n) -> Any:",
      "pred_parsed": "    def execute_idempotent_operation(\n    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = None\n    ) -> Any:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def some_function(\n    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = IdempotencyConfig(),\n) -> Any:",
      "pred_parsed": "    def some_function(\n    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = IdempotencyConfig(),\n    ) -> Any:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def execute_idempotent_function(\n    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = IdempotencyConfig(),\n) -> Any:",
      "pred_parsed": "    def execute_idempotent_function(\n    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = IdempotencyConfig(),\n    ) -> Any:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "alibaba/TinyNeuralNetwork",
    "repo_dir": "./GitHub/GitHub/alibaba-TinyNeuralNetwork",
    "commit": "39f33e696c7d558fcac214ffdf58f436c10c1cd1",
    "filename": "tinynn/converter/operators/tflite/transformable.py",
    "source_code": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
    "target_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " quantization is declared to have type `QuantizationParameters` but is used as type `None`.",
    "warning_line": 78,
    "pred_top-1": {
      "pred": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = QuantizationParameters(),\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = QuantizationParameters(),\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = QuantizationParameters(),\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = QuantizationParameters(),\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = QuantizationParameters(),\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = QuantizationParameters(),\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = QuantizationParameters(),\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = QuantizationParameters(),\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = QuantizationParameters(),\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):",
      "pred_parsed": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = QuantizationParameters(),\n    fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "mosquito/aiormq",
    "repo_dir": "./GitHub/GitHub/mosquito-aiormq",
    "commit": "91909de532777c494df33a4843410b1981ca8794",
    "filename": "aiormq/abc.py",
    "source_code": "        self,\n        exchange: str = None,\n        *,",
    "target_code": "        self,\n        exchange: str = '',\n        *,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " exchange is declared to have type `str` but is used as type `None`.",
    "warning_line": 184,
    "pred_top-1": {
      "pred": "self,\nexchange: str = \"None\",\n*,",
      "pred_parsed": "        self,\n        exchange: str = \"None\",\n        *,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self,\nexchange: str = \"None\",\n*,",
      "pred_parsed": "        self,\n        exchange: str = \"None\",\n        *,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self,\nexchange: str = None",
      "pred_parsed": "        self,\n        exchange: str = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self,\nexchange: str = \"None\",\n*,",
      "pred_parsed": "        self,\n        exchange: str = \"None\",\n        *,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self,\n        exchange: str = None,\n        *args,\n        **kwargs",
      "pred_parsed": "        self,\n        exchange: str = None,\n        *args,\n        **kwargs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "GPflow/GPflow",
    "repo_dir": "./GitHub/GitHub/GPflow-GPflow",
    "commit": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb",
    "filename": "gpflow/models/sgpr.py",
    "source_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: int = 1.0,\n                 ):",
    "target_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n                 ):\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " noise_variance is declared to have type `int` but is used as type `float`.",
    "warning_line": 120,
    "pred_top-1": {
      "pred": "num_latent: Optional[int] = None,\n                noise_variance: float = 1.0,",
      "pred_parsed": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "num_latent: Optional[int] = None,\nnoise_variance: float = 1.0,\n):",
      "pred_parsed": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n                 ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "num_latent: Optional[int] = None,\nnoise_variance: float = 1.0,\n):",
      "pred_parsed": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n                 ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "num_latent: Optional[int] = None,\nnoise_variance: float = 1.0,\n):",
      "pred_parsed": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n                 ):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "num_latent: Optional[int] = None,\n                noise_variance: float = 1.0,",
      "pred_parsed": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "mapillary/mapillary_tools",
    "repo_dir": "./GitHub/GitHub/mapillary-mapillary_tools",
    "commit": "79159001d365c75215f0c05ba3b7937180563026",
    "filename": "mapillary_tools/upload_api_v4.py",
    "source_code": "        entity_size: int,\n        organization_id: int = None,\n        file_type: FileType = \"zip\",",
    "target_code": "        entity_size: int,\n        organization_id: T.Optional[T.Union[str, int]] = None,\n        file_type: FileType = \"zip\",\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " organization_id is declared to have type `int` but is used as type `None`.",
    "warning_line": 49,
    "pred_top-1": {
      "pred": "entity_size: int,\norganization_id: Optional[int] = None,\nfile_type: FileType = \"zip\",",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "entity_size: int,\norganization_id: Optional[int] = None,\nfile_type: FileType = \"zip\",",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "entity_size: int,\n                organization_id: Optional[int] = None,\n                file_type: FileType = \"zip\",",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "entity_size: int,\norganization_id: Optional[int] = None,\nfile_type: FileType = \"zip\",",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "entity_size: int,\norganization_id: Optional[int] = None,\nfile_type: FileType = \"zip\",",
      "pred_parsed": "        entity_size: int,\n        organization_id: Optional[int] = None,\n        file_type: FileType = \"zip\",\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "stac-utils/pystac",
    "repo_dir": "./GitHub/GitHub/stac-utils-pystac",
    "commit": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "filename": "pystac/extensions/base.py",
    "source_code": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:",
    "target_code": "\n    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n        <IND>result = self.properties.get(prop_name)\n        if result is not None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " typ is declared to have type `Type[Variable[P]]` but is used as type `object`.",
    "warning_line": 31,
    "pred_top-1": {
      "pred": "def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n    result: Optional[P] = self.properties.get(prop_name)\n    if result is not None:\n        return result\n    else:\n        return None",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n    result: Optional[P] = self.properties.get(prop_name)\n    if result is not None:\n    return result\n    else:\n    return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n    result: Optional[P] = self.properties.get(prop_name)\n    if result is not None:\n        return result\n    else:\n        return None",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n    result: Optional[P] = self.properties.get(prop_name)\n    if result is not None:\n    return result\n    else:\n    return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        result: Optional[P] = self.properties.get(prop_name)\n        if result is not None:",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n    result: Optional[P] = self.properties.get(prop_name)\n    if result is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        result: Optional[P] = self.properties.get(prop_name)\n        if result is not None:\n            return result",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n    result: Optional[P] = self.properties.get(prop_name)\n    if result is not None:\n    return result\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n    result: Optional[P] = self.properties.get(prop_name)\n    if result is not None:\n        result = typ(result)\n    return result",
      "pred_parsed": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n    result: Optional[P] = self.properties.get(prop_name)\n    if result is not None:\n    result = typ(result)\n    return result\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "nabla-c0d3/sslyze",
    "repo_dir": "./GitHub/GitHub/nabla-c0d3-sslyze",
    "commit": "761c458b2207abc530b430e56d26bced6e4b9714",
    "filename": "sslyze/utils/ssl_connection.py",
    "source_code": "    def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout",
    "target_code": "    <DED>def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        <IND>final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " network_max_retries is declared to have type `int` but is used as type `None`.",
    "warning_line": 206,
    "pred_top-1": {
      "pred": "def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (int, int) -> None\n    final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n    final_max_retries = self.NETWORK_MAX_RETRIES if network_max_retries is None else network_max_retries",
      "pred_parsed": "    def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (int, int) -> None\n    final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n    final_max_retries = self.NETWORK_MAX_RETRIES if network_max_retries is None else network_max_retries\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (int, int) -> None\n    final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n    final_max_retries = self.NETWORK_MAX_RETRIES if network_max_retries is None else network_max_retries",
      "pred_parsed": "    def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (int, int) -> None\n    final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n    final_max_retries = self.NETWORK_MAX_RETRIES if network_max_retries is None else network_max_retries\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (int, int) -> None\n    final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n    final_max_retries = self.NETWORK_MAX_RETRIES if network_max_retries is None else network_max_retries",
      "pred_parsed": "    def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (int, int) -> None\n    final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n    final_max_retries = self.NETWORK_MAX_RETRIES if network_max_retries is None else network_max_retries\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (int, int) -> None\n    final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n    final_max_retries = self.NETWORK_MAX_RETRIES if network_max_retries is None else network_max_retries",
      "pred_parsed": "    def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (int, int) -> None\n    final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n    final_max_retries = self.NETWORK_MAX_RETRIES if network_max_retries is None else network_max_retries\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n        final_max_retries = self.NETWORK_MAX_RETRIES if network_max_retries is None else network_max_retries",
      "pred_parsed": "    def connect(self, network_timeout=None, network_max_retries=None):\n    # type: (int, int) -> None\n    final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n    final_max_retries = self.NETWORK_MAX_RETRIES if network_max_retries is None else network_max_retries\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "tensorflow/federated",
    "repo_dir": "./GitHub/GitHub/tensorflow-federated",
    "commit": "83e2310074df01d2a3b446a8e1c508d79a549119",
    "filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "source_code": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))",
    "target_code": "<DED><DED>_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: {}))\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " _intern_pool is declared to have type `Dict[TypingType[typing.Any], Dict[typing.Any, typing.Any]]` but is used as type `typing.DefaultDict[Variable[collections._KT], weakref.WeakValueDictionary[Variable[weakref._KT], Variable[weakref._VT]]]`.",
    "warning_line": 309,
    "pred_top-1": {
      "pred": "_intern_pool: Dict[typing.Type[Any], Dict[typing.Any, typing.Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[typing.Any, typing.Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary({})))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "_intern_pool: Dict[typing.Type[Any], Dict[typing.Any, typing.Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[typing.Any, typing.Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary({})))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "_intern_pool: Dict[typing.Type[Any], Dict[typing.Any, typing.Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[typing.Any, typing.Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary({})))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "_intern_pool: Dict[typing.Type[Any], Dict[typing.Any, typing.Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[typing.Any, typing.Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary({})))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "_intern_pool: Dict[typing.Type[Any], Dict[typing.Any, typing.Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))",
      "pred_parsed": "_intern_pool: Dict[typing.Type[Any], Dict[typing.Any, typing.Any]] = (\ncollections.defaultdict(lambda: weakref.WeakValueDictionary({})))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "unitaryfund/mitiq",
    "repo_dir": "./GitHub/GitHub/unitaryfund-mitiq",
    "commit": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "filename": "mitiq/zne/scaling.py",
    "source_code": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,",
    "target_code": "    scale_factor: float,\n    fold_method: Callable[..., Circuit],\n    fold_method_args: Optional[Tuple[Any]] = None,\n    **kwargs,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " fold_method_args is declared to have type `Tuple[typing.Any]` but is used as type `Tuple[]`.",
    "warning_line": 789,
    "pred_top-1": {
      "pred": "scale_factor: float,\nfold_method: Callable[[Circuit, float, Tuple[Any, ...]], Circuit],\nfold_method_args: Tuple[Any, ...] = (),\n**kwargs,",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any, ...]], Circuit],\n    fold_method_args: Tuple[Any, ...] = (),\n    **kwargs,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "scale_factor: float,\nfold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\nfold_method_args: Tuple[Any] = tuple(),\n**kwargs",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = tuple(),\n    **kwargs\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "scale_factor: float,\nfold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\nfold_method_args: Tuple[Any] = tuple(),\n**kwargs",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = tuple(),\n    **kwargs\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "scale_factor: float,\nfold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\nfold_method_args: Tuple[Any] = tuple(),\n**kwargs",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = tuple(),\n    **kwargs\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "scale_factor: float,\nfold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\nfold_method_args: Tuple[Any] = tuple(),\n**kwargs",
      "pred_parsed": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = tuple(),\n    **kwargs\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "rytilahti/python-miio",
    "repo_dir": "./GitHub/GitHub/rytilahti-python-miio",
    "commit": "6453bfee512150e3f062670e890533fcd67067ea",
    "filename": "miio/gateway/devices/subdevice.py",
    "source_code": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,",
    "target_code": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " gw is declared to have type `Gateway` but is used as type `None`.",
    "warning_line": 34,
    "pred_top-1": {
      "pred": "self,\ngw: Gateway = None,\ndev_info: SubDeviceInfo = None,\nmodel_info: Optional[Dict] = None,",
      "pred_parsed": "        self,\n        gw: Gateway = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "self,\ngw: \"Gateway\" = Gateway(),\ndev_info: SubDeviceInfo = None,\nmodel_info: Optional[Dict] = None,",
      "pred_parsed": "        self,\n        gw: \"Gateway\" = Gateway(),\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self,\ngw: \"Gateway\" = Gateway(),\ndev_info: SubDeviceInfo = None,\nmodel_info: Optional[Dict] = None,",
      "pred_parsed": "        self,\n        gw: \"Gateway\" = Gateway(),\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self,\ngw: \"Gateway\" = Gateway(),\ndev_info: SubDeviceInfo = None,\nmodel_info: Optional[Dict] = None,",
      "pred_parsed": "        self,\n        gw: \"Gateway\" = Gateway(),\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self,\ngw: Gateway = None,\ndev_info: SubDeviceInfo = None,\nmodel_info: Optional[Dict] = None,",
      "pred_parsed": "        self,\n        gw: Gateway = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "flairNLP/flair",
    "repo_dir": "./GitHub/GitHub/flairNLP-flair",
    "commit": "700f11ccd1f1c429daeab8512f42dad30a01401f",
    "filename": "flair/datasets/text_text.py",
    "source_code": "        dev: FlairDataset = DataPairDataset(\n            dev_file,",
    "target_code": "\n        dev = DataPairDataset(\n            dev_file,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " dev is declared to have type `FlairDataset` but is used as type `typing.Optional[DataPairDataset]`.",
    "warning_line": 282,
    "pred_top-1": {
      "pred": "if dev_file is not None:\n            dev: FlairDataset = DataPairDataset(dev_file)\n        else:\n            dev = None",
      "pred_parsed": "        if dev_file is not None:\n        dev: FlairDataset = DataPairDataset(dev_file)\n        else:\n        dev = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "dev: Optional[FlairDataset] = DataPairDataset(\n            dev_file,",
      "pred_parsed": "        dev: Optional[FlairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "if dev_file is not None:\n            dev: FlairDataset = DataPairDataset(dev_file)\n        else:\n            dev = None",
      "pred_parsed": "        if dev_file is not None:\n        dev: FlairDataset = DataPairDataset(dev_file)\n        else:\n        dev = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "dev: DataPairDataset = DataPairDataset(\n                    dev_file,",
      "pred_parsed": "        dev: DataPairDataset = DataPairDataset(\n        dev_file,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "dev: Optional[DataPairDataset] = DataPairDataset(\n            dev_file,",
      "pred_parsed": "        dev: Optional[DataPairDataset] = DataPairDataset(\n        dev_file,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "ethereum/web3.py",
    "repo_dir": "./GitHub/GitHub/ethereum-web3.py",
    "commit": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "filename": "web3/providers/auto.py",
    "source_code": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n    ) -> None:",
    "target_code": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n                                      Type[BaseProvider]]]] = None\n    ) -> None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " potential_providers is declared to have type `Sequence[Union[typing.Callable[..., web3.providers.base.BaseProvider], Type[web3.providers.base.BaseProvider]]]` but is used as type `None`.",
    "warning_line": 77,
    "pred_top-1": {
      "pred": "def __init__(\n        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n    ) -> None:",
      "pred_parsed": "        def __init__(\n        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(\n        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n    ) -> None:",
      "pred_parsed": "        def __init__(\n        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(\n        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n    ) -> None:",
      "pred_parsed": "        def __init__(\n        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(\n                    self,\n                    potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n                ) -> None:",
      "pred_parsed": "        def __init__(\n        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(\n        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n    ) -> None:",
      "pred_parsed": "        def __init__(\n        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[]\n        ) -> None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "pgjones/quart",
    "repo_dir": "./GitHub/GitHub/pgjones-quart",
    "commit": "c6905c0abe702031e79520c1474f2996657bd245",
    "filename": "src/quart/config.py",
    "source_code": "    def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config[self.key]  # type: ignore\n        if self.converter is not None:",
    "target_code": "\n    <DED>def __get__(self, instance: Any, owner: Any = None) -> Any:\n        <IND>if instance is None:\n            <IND>return self\n        <DED>result = instance.config[self.key]\n        if self.converter is not None:\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " owner is declared to have type `typing.Type[typing.Any]` but is used as type `None`.",
    "warning_line": 66,
    "pred_top-1": {
      "pred": "def __get__(self, instance: object, owner: type = None) -> Any:\n    if instance is None:\n        return self\n    result = instance.config[self.key]  # type: ignore\n    if self.converter is not None:\n        result = self.converter(result)\n    return result",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n    if instance is None:\n    return self\n    result = instance.config[self.key]  # type: ignore\n    if self.converter is not None:\n    result = self.converter(result)\n    return result\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __get__(self, instance: object, owner: type = None) -> Any:\n    if instance is None:\n        return self\n    result = instance.config[self.key]  # type: ignore\n    if self.converter is not None:\n        result = self.converter(result)\n    return result",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n    if instance is None:\n    return self\n    result = instance.config[self.key]  # type: ignore\n    if self.converter is not None:\n    result = self.converter(result)\n    return result\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __get__(self, instance: object, owner: type = None) -> Any:\n    if instance is None:\n        if owner is None:\n            return self\n        else:\n            return owner\n    result = instance.config[self.key]  # type: ignore\n    if self.converter is not None:",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n    if instance is None:\n    if owner is None:\n    return self\n    else:\n    return owner\n    result = instance.config[self.key]  # type: ignore\n    if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __get__(self, instance: object, owner: type = None) -> Any:\n    if instance is None:\n        return self\n    result = instance.config[self.key]  # type: ignore\n    if self.converter is not None:\n        result = self.converter(result)\n    return result",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n    if instance is None:\n    return self\n    result = instance.config[self.key]  # type: ignore\n    if self.converter is not None:\n    result = self.converter(result)\n    return result\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __get__(self, instance: object, owner: type = None) -> Any:\n        if instance is None:\n            return self\n        result = instance.config.get(self.key)  # type: ignore\n        if self.converter is not None:",
      "pred_parsed": "    def __get__(self, instance: object, owner: type = None) -> Any:\n    if instance is None:\n    return self\n    result = instance.config.get(self.key)  # type: ignore\n    if self.converter is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "BEEmod/BEE2.4",
    "repo_dir": "./GitHub/GitHub/BEEmod-BEE2.4",
    "commit": "9c954a1e1cff2055f39654d8495cca466e41c8a6",
    "filename": "src/texturing.py",
    "source_code": "# These can just be looked up directly.\nSPECIAL = None  # type: Generator\nOVERLAYS = None  # type: Generator",
    "target_code": "# These can just be looked up directly.\nSPECIAL: 'Generator'\nOVERLAYS: 'Generator'\n\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " OVERLAYS is declared to have type `Generator` but is used as type `None`.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "# These can just be looked up directly.\nSPECIAL = (x for x in range(10))  # type: Generator\nOVERLAYS = (x for x in range(10))  # type: Generator",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL = (x for x in range(10))  # type: Generator\nOVERLAYS = (x for x in range(10))  # type: Generator\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# These can just be looked up directly.\nSPECIAL = (x for x in range(10))  # type: Generator\nOVERLAYS = (x for x in range(10))  # type: Generator",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL = (x for x in range(10))  # type: Generator\nOVERLAYS = (x for x in range(10))  # type: Generator\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# These can just be looked up directly.\nSPECIAL = (x for x in range(10))  # type: Generator\nOVERLAYS = (x for x in range(10))  # type: Generator",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL = (x for x in range(10))  # type: Generator\nOVERLAYS = (x for x in range(10))  # type: Generator\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# These can just be looked up directly.\nSPECIAL = (x for x in range(10))  # type: Generator\nOVERLAYS = (x for x in range(10))  # type: Generator",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL = (x for x in range(10))  # type: Generator\nOVERLAYS = (x for x in range(10))  # type: Generator\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# These can just be looked up directly.\nSPECIAL = (x for x in range(10))  # type: Generator\nOVERLAYS = (x for x in range(10))  # type: Generator",
      "pred_parsed": "# These can just be looked up directly.\nSPECIAL = (x for x in range(10))  # type: Generator\nOVERLAYS = (x for x in range(10))  # type: Generator\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "volatilityfoundation/volatility3",
    "repo_dir": "./GitHub/GitHub/volatilityfoundation-volatility3",
    "commit": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "filename": "volatility/framework/contexts/__init__.py",
    "source_code": "    def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,",
    "target_code": "    <IND>def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " type_name is declared to have type `str` but is used as type `None`.",
    "warning_line": 121,
    "pred_top-1": {
      "pred": "def object(self,\n           symbol_name: str = \"\",\n           type_name: str = None,\n           offset: int = None,",
      "pred_parsed": "    def object(self,\n    symbol_name: str = \"\",\n    type_name: str = None,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "def object(self,\n           symbol_name: str = '',\n           type_name: str = None,\n           offset: int = None,",
      "pred_parsed": "    def object(self,\n    symbol_name: str = '',\n    type_name: str = None,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "def object(self,\n           symbol_name: str = \"\",\n           type_name: str = None,\n           offset: int = None,",
      "pred_parsed": "    def object(self,\n    symbol_name: str = \"\",\n    type_name: str = None,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "def object(self,\n               symbol_name: str = '',\n               type_name: str = None,\n               offset: int = None",
      "pred_parsed": "    def object(self,\n    symbol_name: str = '',\n    type_name: str = None,\n    offset: int = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "def object(self,\n           symbol_name: str = '',\n           type_name: str = None,\n           offset: int = None,",
      "pred_parsed": "    def object(self,\n    symbol_name: str = '',\n    type_name: str = None,\n    offset: int = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "HypothesisWorks/hypothesis",
    "repo_dir": "./GitHub/GitHub/HypothesisWorks-hypothesis",
    "commit": "928e57554754bc780ee307835688cc752a386743",
    "filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_code": "    min_size=0,   # type: int\n    average_size=None,   # type: int\n    max_size=None  # type: int",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,   # type: None\n    max_size=None  # type: int\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " average_size is declared to have type `int` but is used as type `None`.",
    "warning_line": 940,
    "pred_top-1": {
      "pred": "min_size=0   # type: int\naverage_size=0   # type: int\nmax_size=None  # type: int",
      "pred_parsed": "    min_size=0   # type: int\n    average_size=0   # type: int\n    max_size=None  # type: int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "min_size=0   # type: int\naverage_size=0   # type: int\nmax_size=None  # type: int",
      "pred_parsed": "    min_size=0   # type: int\n    average_size=0   # type: int\n    max_size=None  # type: int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "min_size=0   # type: int\naverage_size=0   # type: int\nmax_size=None  # type: int",
      "pred_parsed": "    min_size=0   # type: int\n    average_size=0   # type: int\n    max_size=None  # type: int\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "min_size=0,   # type: int\naverage_size=0,   # type: int\nmax_size=None  # type: int",
      "pred_parsed": "    min_size=0,   # type: int\n    average_size=0,   # type: int\n    max_size=None  # type: int\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "min_size=0,   # type: int\naverage_size=0,   # type: int\nmax_size=None  # type: int",
      "pred_parsed": "    min_size=0,   # type: int\n    average_size=0,   # type: int\n    max_size=None  # type: int\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "flairNLP/flair",
    "repo_dir": "./GitHub/GitHub/flairNLP-flair",
    "commit": "0b834f5167d11f06037398fcbe1554f244167e18",
    "filename": "flair/embeddings/token.py",
    "source_code": "            )\n            embeddings = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir",
    "target_code": "            )\n            embeddings_path = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " embeddings is declared to have type `str` but is used as type `Path`.",
    "warning_line": 2082,
    "pred_top-1": {
      "pred": "embeddings = cached_path(f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir).as_posix()",
      "pred_parsed": "            embeddings = cached_path(f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir).as_posix()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "embeddings = cached_path(\n                    f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n                )",
      "pred_parsed": "            embeddings = cached_path(\n            f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "embeddings = cached_path(\n                    f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n                )",
      "pred_parsed": "            embeddings = cached_path(\n            f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "embeddings = cached_path(f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir).as_posix()",
      "pred_parsed": "            embeddings = cached_path(f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir).as_posix()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "embeddings = cached_path(\n                    f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n                )",
      "pred_parsed": "            embeddings = cached_path(\n            f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n            )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "hummingbot/hummingbot",
    "repo_dir": "./GitHub/GitHub/hummingbot-hummingbot",
    "commit": "c161d968c3dc1ebebef317a5a426906318adf3a1",
    "filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "source_code": "            usd_volume: float = [\n                (",
    "target_code": "\n            usd_volume: List[float] = [\n                (\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " usd_volume is declared to have type `float` but is used as type `List[typing.Any]`.",
    "warning_line": 97,
    "pred_top-1": {
      "pred": "usd_volume: float = 0.0",
      "pred_parsed": "            usd_volume: float = 0.0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "usd_volume: float = 0.0",
      "pred_parsed": "            usd_volume: float = 0.0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "usd_volume: float = 0.0",
      "pred_parsed": "            usd_volume: float = 0.0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "usd_volume: float = 0.0",
      "pred_parsed": "            usd_volume: float = 0.0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "usd_volume: List[float] = [",
      "pred_parsed": "            usd_volume: List[float] = [\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "theacodes/nox",
    "repo_dir": "./GitHub/GitHub/theacodes-nox",
    "commit": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "filename": "nox/command.py",
    "source_code": "    def __init__(self, reason: str = None) -> None:\n        super(CommandFailed, self).__init__(reason)",
    "target_code": "\n    def __init__(self, reason: Optional[str] = None) -> None:\n        <IND>super(CommandFailed, self).__init__(reason)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " reason is declared to have type `str` but is used as type `None`.",
    "warning_line": 28,
    "pred_top-1": {
      "pred": "def __init__(self, reason: str = '') -> None:\n        super(CommandFailed, self).__init__(reason)",
      "pred_parsed": "    def __init__(self, reason: str = '') -> None:\n    super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self, reason: str = '') -> None:\n    super(CommandFailed, self).__init__(reason)",
      "pred_parsed": "    def __init__(self, reason: str = '') -> None:\n    super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(self, reason: str = '') -> None:\n    super(CommandFailed, self).__init__(reason)",
      "pred_parsed": "    def __init__(self, reason: str = '') -> None:\n    super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self, reason: str = '') -> None:\n        super(CommandFailed, self).__init__(reason)",
      "pred_parsed": "    def __init__(self, reason: str = '') -> None:\n    super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self, reason: str = '') -> None:\n        super(CommandFailed, self).__init__(reason)",
      "pred_parsed": "    def __init__(self, reason: str = '') -> None:\n    super(CommandFailed, self).__init__(reason)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "edgedb/edgedb",
    "repo_dir": "./GitHub/GitHub/edgedb-edgedb",
    "commit": "b7b32545b78bacbf957e49615efbffa0667aa5fa",
    "filename": "edb/edgeql/compiler/pathctx.py",
    "source_code": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode=None,\n        optional: bool=False,",
    "target_code": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " path_scope is declared to have type `edb.ir.scopetree.ScopeTreeNode` but is used as type `None`.",
    "warning_line": 85,
    "pred_top-1": {
      "pred": "ir_set: irast.Set, *,\npath_scope: irast.ScopeTreeNode = None,\noptional: bool = False",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode = None,\n        optional: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "ir_set: irast.Set, *,\npath_scope: irast.ScopeTreeNode=irast.ScopeTreeNode(),\noptional: bool=False,",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode=irast.ScopeTreeNode(),\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode = irast.ScopeTreeNode(),\n        optional: bool = False,",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode = irast.ScopeTreeNode(),\n        optional: bool = False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "ir_set: irast.Set, *,\npath_scope: irast.ScopeTreeNode = irast.ScopeTreeNode(),\noptional: bool=False,",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode = irast.ScopeTreeNode(),\n        optional: bool=False,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "ir_set: irast.Set, *,\npath_scope: irast.ScopeTreeNode = None,\noptional: bool = False",
      "pred_parsed": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode = None,\n        optional: bool = False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "StellarCN/py-stellar-base",
    "repo_dir": "./GitHub/GitHub/StellarCN-py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/transaction_builder.py",
    "source_code": "        signer_key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)",
    "target_code": "\n        key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " signer_key is declared to have type `str` but is used as type `SignerKey`.",
    "warning_line": 912,
    "pred_top-1": {
      "pred": "signer_key_bytes = bytes.fromhex(signer_key)\nsigner_key = SignerKey.ed25519_public_key(signer_key_bytes)\nop = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\nreturn self.append_operation(op)",
      "pred_parsed": "        signer_key_bytes = bytes.fromhex(signer_key)\n        signer_key = SignerKey.ed25519_public_key(signer_key_bytes)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "signer_key_bytes = signer_key.encode('utf-8')\nsigner_key = SignerKey.ed25519_public_key(signer_key_bytes)\nop = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\nreturn self.append_operation(op)",
      "pred_parsed": "        signer_key_bytes = signer_key.encode('utf-8')\n        signer_key = SignerKey.ed25519_public_key(signer_key_bytes)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "signer_key_bytes = signer_key.encode('utf-8')\nsigner_key_object = SignerKey.ed25519_public_key(signer_key_bytes)\nop = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_object, source)\nreturn self.append_operation(op)",
      "pred_parsed": "        signer_key_bytes = signer_key.encode('utf-8')\n        signer_key_object = SignerKey.ed25519_public_key(signer_key_bytes)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key_object, source)\n        return self.append_operation(op)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "signer_key = SignerKey.ed25519_public_key(signer_key.encode())\nop = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\nreturn self.append_operation(op)",
      "pred_parsed": "        signer_key = SignerKey.ed25519_public_key(signer_key.encode())\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "signer_key_bytes = bytes.fromhex(signer_key)\nsigner_key = SignerKey.ed25519_public_key(signer_key_bytes)\nop = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\nreturn self.append_operation(op)",
      "pred_parsed": "        signer_key_bytes = bytes.fromhex(signer_key)\n        signer_key = SignerKey.ed25519_public_key(signer_key_bytes)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "marshmallow-code/marshmallow",
    "repo_dir": "./GitHub/GitHub/marshmallow-code-marshmallow",
    "commit": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "filename": "src/marshmallow/fields.py",
    "source_code": "    def __init__(self, format: str = None, **kwargs):\n        super().__init__(**kwargs)",
    "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " format is declared to have type `str` but is used as type `None`.",
    "warning_line": 1184,
    "pred_top-1": {
      "pred": "def __init__(self, format: str = '', **kwargs):\n        super().__init__(**kwargs)",
      "pred_parsed": "    def __init__(self, format: str = '', **kwargs):\n    super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self, format: str = \"\", **kwargs):\n        super().__init__(**kwargs)",
      "pred_parsed": "    def __init__(self, format: str = \"\", **kwargs):\n    super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(self, format: str = \"\", **kwargs):\n    super().__init__(**kwargs)",
      "pred_parsed": "    def __init__(self, format: str = \"\", **kwargs):\n    super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self, format: str = \"\", **kwargs):\n        super().__init__(**kwargs)",
      "pred_parsed": "    def __init__(self, format: str = \"\", **kwargs):\n    super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self, format: str = \"\", **kwargs):\n    super().__init__(**kwargs)",
      "pred_parsed": "    def __init__(self, format: str = \"\", **kwargs):\n    super().__init__(**kwargs)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jMetal/jMetalPy",
    "repo_dir": "./GitHub/GitHub/jMetal-jMetalPy",
    "commit": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_code": "    def __init__(self, rf_path: str=None):\n        super(Schaffer, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 1",
    "target_code": "\n    <IND>def __init__(self):\n        <IND>super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " rf_path is declared to have type `str` but is used as type `None`.",
    "warning_line": 81,
    "pred_top-1": {
      "pred": "def __init__(self, rf_path: str = None):\n    super(Schaffer, self).__init__(rf_path=rf_path if rf_path is not None else \"\")\n    self.number_of_variables = 1",
      "pred_parsed": "    def __init__(self, rf_path: str = None):\n    super(Schaffer, self).__init__(rf_path=rf_path if rf_path is not None else \"\")\n    self.number_of_variables = 1\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self, rf_path: str = \"\"):\n        super(Schaffer, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 1",
      "pred_parsed": "    def __init__(self, rf_path: str = \"\"):\n    super(Schaffer, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 1\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(self, rf_path: str = \"\"):\n    super(Schaffer, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 1",
      "pred_parsed": "    def __init__(self, rf_path: str = \"\"):\n    super(Schaffer, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 1\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self, rf_path: str = None):\n    super(Schaffer, self).__init__(rf_path=rf_path if rf_path is not None else '')\n    self.number_of_variables = 1",
      "pred_parsed": "    def __init__(self, rf_path: str = None):\n    super(Schaffer, self).__init__(rf_path=rf_path if rf_path is not None else '')\n    self.number_of_variables = 1\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self, rf_path: str = \"\"):\n    super(Schaffer, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 1",
      "pred_parsed": "    def __init__(self, rf_path: str = \"\"):\n    super(Schaffer, self).__init__(rf_path=rf_path)\n    self.number_of_variables = 1\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "nonebot/nonebot",
    "repo_dir": "./GitHub/GitHub/nonebot-nonebot",
    "commit": "0046ebacacb8205987a579d4c9c8681d89f081cd",
    "filename": "none/__init__.py",
    "source_code": "    def run(self, host: str = None, port: int = None, *args, **kwargs):\n        host = host or self.config.HOST",
    "target_code": "\n    <DED><DED>def run(self, host: Optional[str] = None, port: Optional[int] = None,\n            *args, **kwargs) -> None:\n        <IND>host = host or self.config.HOST\n",
    "warning_type": "Incompatible variable type [9]",
    "warning_message": " host is declared to have type `str` but is used as type `None`.",
    "warning_line": 49,
    "pred_top-1": {
      "pred": "def run(self, host: str = None, port: int = None, *args, **kwargs):\n    host = host or self.config.get('HOST', None)\n    port = port or self.config.get('PORT', None)",
      "pred_parsed": "    def run(self, host: str = None, port: int = None, *args, **kwargs):\n    host = host or self.config.get('HOST', None)\n    port = port or self.config.get('PORT', None)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def run(self, host: str = None, port: int = None, *args, **kwargs):\n    host = host or self.config.HOST if self.config.HOST else None",
      "pred_parsed": "    def run(self, host: str = None, port: int = None, *args, **kwargs):\n    host = host or self.config.HOST if self.config.HOST else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def run(self, host: str = None, port: int = None, *args, **kwargs):\n        host = host or self.config.get('HOST', None)",
      "pred_parsed": "    def run(self, host: str = None, port: int = None, *args, **kwargs):\n    host = host or self.config.get('HOST', None)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def run(self, host: str = None, port: int = None, *args, **kwargs):\n    host = host or self.config.HOST if self.config.HOST else None",
      "pred_parsed": "    def run(self, host: str = None, port: int = None, *args, **kwargs):\n    host = host or self.config.HOST if self.config.HOST else None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def run(self, host: str = None, port: int = None, *args, **kwargs):\n    host = host or self.config.get('HOST', '')",
      "pred_parsed": "    def run(self, host: str = None, port: int = None, *args, **kwargs):\n    host = host or self.config.get('HOST', '')\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jesopo/bitbot",
    "repo_dir": "./GitHub/GitHub/jesopo-bitbot",
    "commit": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd",
    "filename": "src/IRCServer.py",
    "source_code": "        return capability in self.agreed_capabilities\n    def available_capability(self, capability: utils.irc.Capability) -> bool:\n        return capability.available(self.agreed_capabilities)",
    "target_code": "        <IND>return capability in self.agreed_capabilities\n    <DED>def available_capability(self, capability: utils.irc.Capability) -> str:\n        <IND>return capability.available(self.agreed_capabilities)\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `str`.",
    "warning_line": 292,
    "pred_top-1": {
      "pred": "def available_capability(self, capability: utils.irc.Capability) -> bool:\n    if isinstance(self.agreed_capabilities, str):\n        self.agreed_capabilities = [self.agreed_capabilities]\n    return capability.available(self.agreed_capabilities)",
      "pred_parsed": "        def available_capability(self, capability: utils.irc.Capability) -> bool:\n        if isinstance(self.agreed_capabilities, str):\n        self.agreed_capabilities = [self.agreed_capabilities]\n        return capability.available(self.agreed_capabilities)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def available_capability(self, capability: utils.irc.Capability) -> bool:\n    if isinstance(self.agreed_capabilities, str):\n        self.agreed_capabilities = [self.agreed_capabilities]\n    return capability.available(self.agreed_capabilities)",
      "pred_parsed": "        def available_capability(self, capability: utils.irc.Capability) -> bool:\n        if isinstance(self.agreed_capabilities, str):\n        self.agreed_capabilities = [self.agreed_capabilities]\n        return capability.available(self.agreed_capabilities)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def available_capability(self, capability: utils.irc.Capability) -> bool:\n    return bool(capability.available(self.agreed_capabilities))",
      "pred_parsed": "        def available_capability(self, capability: utils.irc.Capability) -> bool:\n        return bool(capability.available(self.agreed_capabilities))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def available_capability(self, capability: utils.irc.Capability) -> bool:\n    if isinstance(self.agreed_capabilities, str):\n        self.agreed_capabilities = [self.agreed_capabilities]\n    return capability.available(self.agreed_capabilities)",
      "pred_parsed": "        def available_capability(self, capability: utils.irc.Capability) -> bool:\n        if isinstance(self.agreed_capabilities, str):\n        self.agreed_capabilities = [self.agreed_capabilities]\n        return capability.available(self.agreed_capabilities)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def available_capability(self, capability: utils.irc.Capability) -> bool:\n    if isinstance(self.agreed_capabilities, str):\n        self.agreed_capabilities = [self.agreed_capabilities]\n    return capability.available(self.agreed_capabilities)",
      "pred_parsed": "        def available_capability(self, capability: utils.irc.Capability) -> bool:\n        if isinstance(self.agreed_capabilities, str):\n        self.agreed_capabilities = [self.agreed_capabilities]\n        return capability.available(self.agreed_capabilities)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "synek/git-plan",
    "repo_dir": "./GitHub/GitHub/synek-git-plan",
    "commit": "1861635f8013b5d622f253bb6d950a2b0a79eebc",
    "filename": "git_plan/service/plan.py",
    "source_code": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n\n        return plans and len(plans) > 0",
    "target_code": "        <IND>\"\"\"Check if a plan already exists in the given directory\"\"\"\n        return any(project.plan_dir.iterdir())  # False if it cannot iterate at least once\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `typing.Union[List[str], bool]`.",
    "warning_line": 62,
    "pred_top-1": {
      "pred": "\"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n\n        return bool(plans) and len(plans) > 0",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n        \n        return bool(plans) and len(plans) > 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\"\"\"Check if a plan already exists in the given directory\"\"\"\nplans = os.listdir(project.plan_dir)\n\nif plans and len(plans) > 0:\n    return True\nelse:\n    return False",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n        \n        if plans and len(plans) > 0:\n        return True\n        else:\n        return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "\"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n\n        return bool(plans) and len(plans) > 0",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n        \n        return bool(plans) and len(plans) > 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n        if plans and len(plans) > 0:\n            return True\n        else:\n            return False",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n        if plans and len(plans) > 0:\n        return True\n        else:\n        return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "\"\"\"Check if a plan already exists in the given directory\"\"\"\nplans = os.listdir(project.plan_dir)\n\nif plans and len(plans) > 0:\n    return True\nelse:\n    return False",
      "pred_parsed": "        \"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n        \n        if plans and len(plans) > 0:\n        return True\n        else:\n        return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "SectorLabs/django-postgres-extra",
    "repo_dir": "./GitHub/GitHub/SectorLabs-django-postgres-extra",
    "commit": "9a1ed82f7c65b5056795c21001fa69faf17d9813",
    "filename": "psqlextra/types.py",
    "source_code": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        return [choice for choice in cls]",
    "target_code": "    <IND>@classmethod\n    def all(cls) -> List[\"StrEnum\"]:\n        <IND>return [choice for choice in cls]\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `List[PostgresPartitioningMethod]` but got `List[StrEnum]`.",
    "warning_line": 11,
    "pred_top-1": {
      "pred": "@classmethod\ndef all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    return [cls[choice] for choice in cls]",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    return [cls[choice] for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "@classmethod\ndef all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    return [cls[choice] for choice in cls]",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    return [cls[choice] for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "@classmethod\ndef all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    return [cls[choice] for choice in cls]",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    return [cls[choice] for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "@classmethod\ndef all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    return [cls[choice] for choice in cls]",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    return [cls[choice] for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "@classmethod\ndef all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    return [cls[choice] for choice in cls]",
      "pred_parsed": "    @classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n    return [cls[choice] for choice in cls]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "./GitHub/GitHub/TheAlgorithms-Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "electronics/ohms_law.py",
    "source_code": "        return {\"resistance\": voltage / current}",
    "target_code": "        <IND>return {\"resistance\": voltage / current}\n    <DED>else:\n        <IND>raise ValueError(\"Exactly one argument must be 0\")\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Dict[str, float]` but got implicit return value of `None`.",
    "warning_line": 34,
    "pred_top-1": {
      "pred": "def calculate_resistance(voltage, current):\n    return {\"resistance\": voltage / current}",
      "pred_parsed": "        def calculate_resistance(voltage, current):\n        return {\"resistance\": voltage / current}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def calculate_resistance(voltage, current):\n    return {\"resistance\": voltage / current}",
      "pred_parsed": "        def calculate_resistance(voltage, current):\n        return {\"resistance\": voltage / current}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def calculate_resistance(voltage, current):\n    return {\"resistance\": voltage / current}",
      "pred_parsed": "        def calculate_resistance(voltage, current):\n        return {\"resistance\": voltage / current}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def calculate_resistance(voltage, current):\n    return {\"resistance\": voltage / current}",
      "pred_parsed": "        def calculate_resistance(voltage, current):\n        return {\"resistance\": voltage / current}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def calculate_resistance(voltage, current):\n    return {\"resistance\": voltage / current}",
      "pred_parsed": "        def calculate_resistance(voltage, current):\n        return {\"resistance\": voltage / current}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "konradhalas/dacite",
    "repo_dir": "./GitHub/GitHub/konradhalas-dacite",
    "commit": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "filename": "dacite/types.py",
    "source_code": "    origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)",
    "target_code": "    <DED>origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `Union[Type[typing.Any], bool]`.",
    "warning_line": 71,
    "pred_top-1": {
      "pred": "if isinstance(origin, type):\n    return issubclass(origin, Collection)\nelse:\n    return origin and issubclass(origin, Collection)",
      "pred_parsed": "    if isinstance(origin, type):\n    return issubclass(origin, Collection)\n    else:\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if isinstance(origin, type):\n    return issubclass(origin, Collection)\nelse:\n    return origin and issubclass(origin, Collection)",
      "pred_parsed": "    if isinstance(origin, type):\n    return issubclass(origin, Collection)\n    else:\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "origin = extract_origin_collection(t)\nif origin and issubclass(origin, Collection):\n    return True\nelse:\n    return False",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    if origin and issubclass(origin, Collection):\n    return True\n    else:\n    return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if isinstance(origin, type):\n    return issubclass(origin, Collection)\nelse:\n    return origin and issubclass(origin, Collection)",
      "pred_parsed": "    if isinstance(origin, type):\n    return issubclass(origin, Collection)\n    else:\n    return origin and issubclass(origin, Collection)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "origin = extract_origin_collection(t)\nif origin and issubclass(origin, Collection):\n    return origin",
      "pred_parsed": "    origin = extract_origin_collection(t)\n    if origin and issubclass(origin, Collection):\n    return origin\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "sensepost/objection",
    "repo_dir": "./GitHub/GitHub/sensepost-objection",
    "commit": "7f1d70f4333c378e920f732f7b02fb4694bf68cf",
    "filename": "objection/commands/ios/hooking.py",
    "source_code": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return None",
    "target_code": "        <IND>click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.List[typing.Any]` but got `None`.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\nreturn []",
      "pred_parsed": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\nreturn []",
      "pred_parsed": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\nreturn []",
      "pred_parsed": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\nreturn []",
      "pred_parsed": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\nreturn []",
      "pred_parsed": "        click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "irmen/Tale",
    "repo_dir": "./GitHub/GitHub/irmen-Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/player.py",
    "source_code": "                            return desc\n        return None",
    "target_code": "                            <IND>return desc\n        <DED><DED><DED><DED><DED>return \"\"\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got `None`.",
    "warning_line": 245,
    "pred_top-1": {
      "pred": "def get_description(product):\n    desc = product.get('description')\n    if desc:\n        return desc\n    else:\n        return None",
      "pred_parsed": "                            def get_description(product):\n                            desc = product.get('description')\n                            if desc:\n                            return desc\n                            else:\n                            return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def get_description(item):\n    desc = item.get('description', None)\n    if desc is None:\n        return None\n    else:\n        return desc",
      "pred_parsed": "                            def get_description(item):\n                            desc = item.get('description', None)\n                            if desc is None:\n                            return None\n                            else:\n                            return desc\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def fix_type_error(desc):\n    if desc is not None:\n        return desc\n    else:\n        return None",
      "pred_parsed": "                            def fix_type_error(desc):\n                            if desc is not None:\n                            return desc\n                            else:\n                            return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if desc is not None:\n    return desc\nelse:\n    return None",
      "pred_parsed": "                            if desc is not None:\n                            return desc\n                            else:\n                            return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if desc:\n                return desc\n            else:\n                return None",
      "pred_parsed": "                            if desc:\n                            return desc\n                            else:\n                            return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "lnbits/lnbits-legend",
    "repo_dir": "./GitHub/GitHub/lnbits-lnbits-legend",
    "commit": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2",
    "filename": "lnbits/bolt11.py",
    "source_code": "    if unit in units:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:",
    "target_code": "    <DED>if unit in units:\n        <IND>return int(int(amount[:-1]) * 100_000_000_000 / units[unit])\n    <DED>else:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `int` but got `float`.",
    "warning_line": 144,
    "pred_top-1": {
      "pred": "if unit in units:\n    try:\n        return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    except TypeError:\n        return float(amount[:-1]) * 100_000_000_000 / units[unit]\nelse:",
      "pred_parsed": "    if unit in units:\n    try:\n    return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    except TypeError:\n    return float(amount[:-1]) * 100_000_000_000 / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if unit in units:\n    return int(float(amount[:-1]) * 100_000_000_000 / units[unit])\nelse:",
      "pred_parsed": "    if unit in units:\n    return int(float(amount[:-1]) * 100_000_000_000 / units[unit])\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if unit in units:\n    return float(int(amount[:-1]) * 100_000_000_000) / units[unit]\nelse:",
      "pred_parsed": "    if unit in units:\n    return float(int(amount[:-1]) * 100_000_000_000) / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if unit in units:\n    return float(int(amount[:-1]) * 100_000_000_000) / units[unit]\nelse:",
      "pred_parsed": "    if unit in units:\n    return float(int(amount[:-1]) * 100_000_000_000) / units[unit]\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if unit in units:\n    return int(float(amount[:-1]) * 100_000_000_000 / units[unit])\nelse:",
      "pred_parsed": "    if unit in units:\n    return int(float(amount[:-1]) * 100_000_000_000 / units[unit])\n    else:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "lnbits/lnbits-legend",
    "repo_dir": "./GitHub/GitHub/lnbits-lnbits-legend",
    "commit": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "filename": "lnbits/extensions/subdomains/crud.py",
    "source_code": "    subdomain = await get_subdomain(payment_hash)\n    return subdomain",
    "target_code": "\n    <DED>new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Subdomains` but got `Optional[Subdomains]`.",
    "warning_line": 74,
    "pred_top-1": {
      "pred": "subdomain = await get_subdomain(payment_hash)\nif subdomain is not None:\n    return subdomain",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    if subdomain is not None:\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "subdomain = await get_subdomain(payment_hash)\nif subdomain is not None:\n    return subdomain",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    if subdomain is not None:\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "subdomain = await get_subdomain(payment_hash)\nif subdomain is not None:\n    return subdomain",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    if subdomain is not None:\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "subdomain = await get_subdomain(payment_hash)\nif subdomain is not None:\n    return subdomain",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    if subdomain is not None:\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "subdomain = await get_subdomain(payment_hash)\nif subdomain is not None:\n    return subdomain",
      "pred_parsed": "    subdomain = await get_subdomain(payment_hash)\n    if subdomain is not None:\n    return subdomain\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "meraki-analytics/cassiopeia",
    "repo_dir": "./GitHub/GitHub/meraki-analytics-cassiopeia",
    "commit": "a26127b190f398137c4cf92469c5de573ce2a018",
    "filename": "cassiopeia/core/staticdata/realms.py",
    "source_code": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])",
    "target_code": "        <IND>\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return self._dto[\"profileiconmax\"]\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `int` but got `ImageData`.",
    "warning_line": 49,
    "pred_top-1": {
      "pred": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\nreturn int(self._dto[\"profileiconmax\"])",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return int(self._dto[\"profileiconmax\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\nreturn int(self._dto[\"profileiconmax\"])",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return int(self._dto[\"profileiconmax\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\nreturn int(self._dto[\"profileiconmax\"])",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return int(self._dto[\"profileiconmax\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\nreturn int(self._dto[\"profileiconmax\"])",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return int(self._dto[\"profileiconmax\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\nreturn int(self._dto[\"profileiconmax\"])",
      "pred_parsed": "        \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return int(self._dto[\"profileiconmax\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "./GitHub/GitHub/TheAlgorithms-Python",
    "commit": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "filename": "data_structures/binary_tree/red_black_tree.py",
    "source_code": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self",
    "target_code": "        <IND>\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        if self.parent is None:\n            <IND>return False\n        <DED>return self.parent.left is self.parent.left is self\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `typing.Optional[bool]`.",
    "warning_line": 435,
    "pred_top-1": {
      "pred": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\nreturn bool(self.parent and self.parent.left is self)",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent and self.parent.left is self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\nreturn bool(self.parent and self.parent.left is self)",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent and self.parent.left is self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\nreturn bool(self.parent) and self.parent.left is self",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent) and self.parent.left is self\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\nreturn bool(self.parent and self.parent.left is self)",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent and self.parent.left is self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent and self.parent.left is self)",
      "pred_parsed": "        \"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return bool(self.parent and self.parent.left is self)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "./GitHub/GitHub/TheAlgorithms-Python",
    "commit": "2595cf059d677c39513a9d75f1736bc5b84d6298",
    "filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "source_code": "    def __str__(self) -> None:\n        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
    "target_code": "\n    <DED>def __str__(self) -> str:\n        <IND>return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `None` but got `typing.List[int]`.",
    "warning_line": 122,
    "pred_top-1": {
      "pred": "def __str__(self) -> str:\n    return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])",
      "pred_parsed": "    def __str__(self) -> str:\n    return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __str__(self) -> str:\n    return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])",
      "pred_parsed": "    def __str__(self) -> str:\n    return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __str__(self) -> str:\n    return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])",
      "pred_parsed": "    def __str__(self) -> str:\n    return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __str__(self) -> str:\n    return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])",
      "pred_parsed": "    def __str__(self) -> str:\n    return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __str__(self) -> str:\n    return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])",
      "pred_parsed": "    def __str__(self) -> str:\n    return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Ultimaker/Uranium",
    "repo_dir": "./GitHub/GitHub/Ultimaker-Uranium",
    "commit": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41",
    "filename": "UM/Trust.py",
    "source_code": "        if file_hash == \"\":\n            return False\n        try:",
    "target_code": "        if file_hash == \"\":\n            <IND>return \"\"\n        <DED>try:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got `bool`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": "if file_hash == \"\":\n    try:\n        return False\n    except TypeError:\n        return \"\"",
      "pred_parsed": "        if file_hash == \"\":\n        try:\n        return False\n        except TypeError:\n        return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if file_hash == \"\":\n    try:\n        return False\n    except TypeError:\n        return \"\"",
      "pred_parsed": "        if file_hash == \"\":\n        try:\n        return False\n        except TypeError:\n        return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if file_hash == \"\":\n    try:\n        return False\n    except TypeError:\n        return \"\"",
      "pred_parsed": "        if file_hash == \"\":\n        try:\n        return False\n        except TypeError:\n        return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if file_hash == \"\":\n    try:\n        return False\n    except TypeError:\n        return str(False)",
      "pred_parsed": "        if file_hash == \"\":\n        try:\n        return False\n        except TypeError:\n        return str(False)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if file_hash == \"\":\n    try:\n        return False\n    except TypeError:\n        return \"Error: Expected `str` but got `bool`.\"",
      "pred_parsed": "        if file_hash == \"\":\n        try:\n        return False\n        except TypeError:\n        return \"Error: Expected `str` but got `bool`.\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "dcs-liberation/dcs_liberation",
    "repo_dir": "./GitHub/GitHub/dcs-liberation-dcs_liberation",
    "commit": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3",
    "filename": "game/commander/theaterstate.py",
    "source_code": "            if target.is_ammo_depot:\n                yield target",
    "target_code": "            <DED>if target.is_ammo_depot:\n                <IND>assert isinstance(target, BuildingGroundObject)\n                yield target\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.Iterator[BuildingGroundObject]` but got `typing.Generator[TheaterGroundObject[], None, None]`.",
    "warning_line": 100,
    "pred_top-1": {
      "pred": "if target.is_ammo_depot:\n    yield from target",
      "pred_parsed": "            if target.is_ammo_depot:\n            yield from target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if target.is_ammo_depot:\n    yield from target",
      "pred_parsed": "            if target.is_ammo_depot:\n            yield from target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if target.is_ammo_depot:\n    yield from target",
      "pred_parsed": "            if target.is_ammo_depot:\n            yield from target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if target.is_ammo_depot:\n    yield from target",
      "pred_parsed": "            if target.is_ammo_depot:\n            yield from target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if target.is_ammo_depot:\n    yield from target",
      "pred_parsed": "            if target.is_ammo_depot:\n            yield from target\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "dagster-io/dagster",
    "repo_dir": "./GitHub/GitHub/dagster-io-dagster",
    "commit": "b57b91ea7666da41a3dbc610116aed500c647d84",
    "filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "source_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n        else:\n            check.failed(f\"Unexpected error setting: {self.error_source}\")",
    "target_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        <DED>else:\n            <IND>return self.error.to_string()\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got implicit return value of `None`.",
    "warning_line": 107,
    "pred_top-1": {
      "pred": "elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n    return self.error.to_string()\nelse:\n    return check.failed(f\"Unexpected error setting: {self.error_source}\")",
      "pred_parsed": "            elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n            else:\n            return check.failed(f\"Unexpected error setting: {self.error_source}\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n    return self.error.to_string()\nelse:\n    check.failed(f\"Unexpected error setting: {self.error_source}\")\n    return None",
      "pred_parsed": "            elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n            else:\n            check.failed(f\"Unexpected error setting: {self.error_source}\")\n            return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n    return self.error.to_string()\nelse:\n    check.failed(f\"Unexpected error setting: {self.error_source}\")\n    return None",
      "pred_parsed": "            elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n            else:\n            check.failed(f\"Unexpected error setting: {self.error_source}\")\n            return None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n    return self.error.to_string()\nelse:\n    raise ValueError(f\"Unexpected error setting: {self.error_source}\")",
      "pred_parsed": "            elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n            else:\n            raise ValueError(f\"Unexpected error setting: {self.error_source}\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n    return self.error.to_string()\nelse:\n    raise ValueError(f\"Unexpected error setting: {self.error_source}\")",
      "pred_parsed": "            elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            return self.error.to_string()\n            else:\n            raise ValueError(f\"Unexpected error setting: {self.error_source}\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "plasma-umass/scalene",
    "repo_dir": "./GitHub/GitHub/plasma-umass-scalene",
    "commit": "be32bf042a868c3731dab570b0014b9dc8879e58",
    "filename": "scalene/scalene_profiler.py",
    "source_code": "            # threading library\n            return None\n        frames: List[Tuple[FrameType, int]] = [",
    "target_code": "            # threading library\n            <IND>return []\n        <DED>frames: List[Tuple[FrameType, int]] = [\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `List[Tuple[FrameType, int, FrameType]]` but got `None`.",
    "warning_line": 796,
    "pred_top-1": {
      "pred": "# threading library\nframes: List[Tuple[FrameType, int, FrameType]] = []",
      "pred_parsed": "            # threading library\n            frames: List[Tuple[FrameType, int, FrameType]] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# threading library\nframes: List[Tuple[FrameType, int, FrameType]] = []",
      "pred_parsed": "            # threading library\n            frames: List[Tuple[FrameType, int, FrameType]] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# threading library\nframes: List[Tuple[FrameType, int, FrameType]] = []",
      "pred_parsed": "            # threading library\n            frames: List[Tuple[FrameType, int, FrameType]] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# threading library\nframes: List[Tuple[FrameType, int, FrameType]] = []",
      "pred_parsed": "            # threading library\n            frames: List[Tuple[FrameType, int, FrameType]] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# threading library\nframes: List[Tuple[FrameType, int, FrameType]] = []",
      "pred_parsed": "            # threading library\n            frames: List[Tuple[FrameType, int, FrameType]] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Qiskit/qiskit-terra",
    "repo_dir": "./GitHub/GitHub/Qiskit-qiskit-terra",
    "commit": "1687c30fd63344f1ea50cb7b1774e26928678b23",
    "filename": "qiskit/pulse/instructions/acquire.py",
    "source_code": "        \"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot",
    "target_code": "        <IND>\"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.operands[2]\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `MemorySlot` but got `Optional[MemorySlot]`.",
    "warning_line": 112,
    "pred_top-1": {
      "pred": "if self._mem_slot is not None:\n    return self._mem_slot",
      "pred_parsed": "        if self._mem_slot is not None:\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if self._mem_slot is not None:\n    return self._mem_slot",
      "pred_parsed": "        if self._mem_slot is not None:\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if self._mem_slot is not None:\n            return self._mem_slot",
      "pred_parsed": "        if self._mem_slot is not None:\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if self._mem_slot is not None:\n    return self._mem_slot",
      "pred_parsed": "        if self._mem_slot is not None:\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if self._mem_slot is not None:\n    return self._mem_slot",
      "pred_parsed": "        if self._mem_slot is not None:\n        return self._mem_slot\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "unit8co/darts",
    "repo_dir": "./GitHub/GitHub/unit8co-darts",
    "commit": "2139a0f40d032b936c76158b01f6f48656567a0c",
    "filename": "u8timeseries/timeseries.py",
    "source_code": "                self._confidence_hi.update(conf_hi)\n            return None\n        else:",
    "target_code": "                <IND>self._confidence_hi.update(conf_hi)\n            <DED>return self\n        <DED>else:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `TimeSeries` but got `None`.",
    "warning_line": 548,
    "pred_top-1": {
      "pred": "else:\n    self._confidence_hi.update(conf_hi)\n    return self._confidence_hi",
      "pred_parsed": "                else:\n                self._confidence_hi.update(conf_hi)\n                return self._confidence_hi\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "else:\n    self._confidence_hi.update(conf_hi)\n    return self._confidence_hi",
      "pred_parsed": "                else:\n                self._confidence_hi.update(conf_hi)\n                return self._confidence_hi\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "else:\n    self._confidence_hi.update(conf_hi)\n    return self._confidence_hi",
      "pred_parsed": "                else:\n                self._confidence_hi.update(conf_hi)\n                return self._confidence_hi\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "else:\n    self._confidence_hi.update(conf_hi)\n    return self._confidence_hi",
      "pred_parsed": "                else:\n                self._confidence_hi.update(conf_hi)\n                return self._confidence_hi\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "else:\n    self._confidence_hi.update(conf_hi)\n    return self._confidence_hi",
      "pred_parsed": "                else:\n                self._confidence_hi.update(conf_hi)\n                return self._confidence_hi\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "operatorai/modelstore",
    "repo_dir": "./GitHub/GitHub/operatorai-modelstore",
    "commit": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb",
    "filename": "tests/models/test_modelmanager.py",
    "source_code": "    def _get_params(self, **kwargs) -> dict:\n        return None",
    "target_code": "    <DED>def _get_params(self, **kwargs) -> dict:\n        <IND>return {}\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
    "warning_line": 62,
    "pred_top-1": {
      "pred": "def _get_params(self, **kwargs) -> dict:\n    return kwargs",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n    return kwargs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def _get_params(self, **kwargs) -> dict:\n    return kwargs",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n    return kwargs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def _get_params(self, **kwargs) -> dict:\n    return {}",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n    return {}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def _get_params(self, **kwargs) -> dict:\n    return {}",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n    return {}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def _get_params(self, **kwargs) -> dict:\n    return {}",
      "pred_parsed": "    def _get_params(self, **kwargs) -> dict:\n    return {}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "willmcgugan/rich",
    "repo_dir": "./GitHub/GitHub/willmcgugan-rich",
    "commit": "a168ed4129dc1b122477146cbd3d2f93b82adc06",
    "filename": "rich/text.py",
    "source_code": "        text = render(text, style, emoji=emoji)\n        text.justify = justify\n        return text",
    "target_code": "\n        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        return rendered_text\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Text` but got `str`.",
    "warning_line": 169,
    "pred_top-1": {
      "pred": "text = render(text, style, emoji=emoji)\n                text = Text(text)\n                text.justify = justify\n                return text",
      "pred_parsed": "        text = render(text, style, emoji=emoji)\n        text = Text(text)\n        text.justify = justify\n        return text\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "text = render(text, style, emoji=emoji)\n                text = Text(text)\n                text.justify = justify\n                return text",
      "pred_parsed": "        text = render(text, style, emoji=emoji)\n        text = Text(text)\n        text.justify = justify\n        return text\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "text = render(text, style, emoji=emoji)\ntext.justify = justify\nreturn str(text)",
      "pred_parsed": "        text = render(text, style, emoji=emoji)\n        text.justify = justify\n        return str(text)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "text = render(text, style, emoji=emoji)\n        text = Text(text)\n        text.justify = justify\n        return text",
      "pred_parsed": "        text = render(text, style, emoji=emoji)\n        text = Text(text)\n        text.justify = justify\n        return text\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "text = render(text, style, emoji=emoji)\ntext.justify = justify\nreturn str(text)",
      "pred_parsed": "        text = render(text, style, emoji=emoji)\n        text.justify = justify\n        return str(text)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "./GitHub/GitHub/TheAlgorithms-Python",
    "commit": "959507901ac8f10cd605c51c305d13b27d105536",
    "filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "source_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        return matrix1, matrix2",
    "target_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        <IND>return [matrix1, matrix2]\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `typing.List[typing.Any]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
    "warning_line": 124,
    "pred_top-1": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    return (matrix1, matrix2)",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    return (matrix1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    return (matrix1, matrix2)",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    return (matrix1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    return (matrix1, matrix2)",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    return (matrix1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    return (matrix1, matrix2)",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    return (matrix1, matrix2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    return [matrix1, matrix2]",
      "pred_parsed": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n    return [matrix1, matrix2]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "torproject/stem",
    "repo_dir": "./GitHub/GitHub/torproject-stem",
    "commit": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "filename": "stem/util/str_tools.py",
    "source_code": "        return count_label + short_label",
    "target_code": "        <IND>return count_label + short_label\n\n  <DED><DED><DED>raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got implicit return value of `None`.",
    "warning_line": 582,
    "pred_top-1": {
      "pred": "count_label = str(count_label)\nshort_label = str(short_label)\nreturn count_label + short_label",
      "pred_parsed": "        count_label = str(count_label)\n        short_label = str(short_label)\n        return count_label + short_label\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "count_label = str(count_label)\nshort_label = str(short_label)\nreturn count_label + short_label",
      "pred_parsed": "        count_label = str(count_label)\n        short_label = str(short_label)\n        return count_label + short_label\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "count_label = str(count_label)\nshort_label = str(short_label)\nreturn count_label + short_label",
      "pred_parsed": "        count_label = str(count_label)\n        short_label = str(short_label)\n        return count_label + short_label\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "count_label = str(count_label)\nshort_label = str(short_label)\nreturn count_label + short_label",
      "pred_parsed": "        count_label = str(count_label)\n        short_label = str(short_label)\n        return count_label + short_label\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "count_label = str(count_label)\nshort_label = str(short_label)\nreturn count_label + short_label",
      "pred_parsed": "        count_label = str(count_label)\n        short_label = str(short_label)\n        return count_label + short_label\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "trezor/trezor-firmware",
    "repo_dir": "./GitHub/GitHub/trezor-trezor-firmware",
    "commit": "0f6f05e4b7e2881dc681db5fbead2723411c9058",
    "filename": "core/mocks/generated/trezorconfig.pyi",
    "source_code": "# extmod/modtrezorconfig/modtrezorconfig.c\ndef get(app: int, key: int, public: bool = False) -> bytes:",
    "target_code": "# extmod/modtrezorconfig/modtrezorconfig.c\n<DED>def get(app: int, key: int, public: bool = False) -> Optional[bytes]:\n    <IND>",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bytes` but got implicit return value of `None`.",
    "warning_line": 59,
    "exception": "'pred_top-1'"
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "./GitHub/GitHub/TheAlgorithms-Python",
    "commit": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "filename": "backtracking/n_queens.py",
    "source_code": "        print()\n        return\n    for i in range(len(board)):",
    "target_code": "        print()\n        return True\n    <DED>for i in range(len(board)):\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `bool` but got `None`.",
    "warning_line": 56,
    "pred_top-1": {
      "pred": "for i in range(len(board)):\n    print()",
      "pred_parsed": "        for i in range(len(board)):\n        print()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "for i in range(len(board)):\n    print()",
      "pred_parsed": "        for i in range(len(board)):\n        print()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "for i in range(len(board)):\n    print()",
      "pred_parsed": "        for i in range(len(board)):\n        print()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for i in range(len(board)):\n            print(board[i])",
      "pred_parsed": "        for i in range(len(board)):\n        print(board[i])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "for i in range(len(board)):\n    print()",
      "pred_parsed": "        for i in range(len(board)):\n        print()\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "oppia/oppia",
    "repo_dir": "./GitHub/GitHub/oppia-oppia",
    "commit": "72937725a323b0cc1ccec150c81b041abeacb575",
    "filename": "utils.py",
    "source_code": "    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')",
    "target_code": "\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got `bytes`.",
    "warning_line": 213,
    "pred_top-1": {
      "pred": "return unicodedata.normalize(\n        'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore')",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "return unicodedata.normalize('NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore')",
      "pred_parsed": "    return unicodedata.normalize('NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "return unicodedata.normalize(\n        'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore')",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "return unicodedata.normalize(\n        'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore')",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "return unicodedata.normalize(\n        'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore')",
      "pred_parsed": "    return unicodedata.normalize(\n    'NFKD', str(python_utils.UNICODE(input_string))).encode('ascii', 'ignore')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "althonos/pronto",
    "repo_dir": "./GitHub/GitHub/althonos-pronto",
    "commit": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327",
    "filename": "pronto/logic/lineage.py",
    "source_code": "    def __iter__(self) -> \"SuperclassesIterator\":\n        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
    "target_code": "\n    <IND>def __iter__(self) -> \"SuperpropertiesIterator\":\n        <IND>return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `SuperclassesIterator` but got `SuperpropertiesIterator`.",
    "warning_line": 197,
    "pred_top-1": {
      "pred": "def __iter__(self) -> \"SuperclassesIterator\":\n    return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n    return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __iter__(self) -> \"SuperclassesIterator\":\n    return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n    return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __iter__(self) -> \"SuperclassesIterator\":\n    return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n    return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __iter__(self) -> \"SuperclassesIterator\":\n    return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n    return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __iter__(self) -> \"SuperclassesIterator\":\n    return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
      "pred_parsed": "    def __iter__(self) -> \"SuperclassesIterator\":\n    return SuperclassesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "IBM/lale",
    "repo_dir": "./GitHub/GitHub/IBM-lale",
    "commit": "b38267abe490e869338f212179b03521e89013ee",
    "filename": "lale/schema_simplifier.py",
    "source_code": ") -> JsonSchema:\n    if schema is False:\n        return False\n    if \"anyOf\" in schema:",
    "target_code": ") -> JsonSchema:\n    <IND>if is_true_schema(schema) or is_false_schema(schema):\n        <IND>return schema\n    <DED>if \"anyOf\" in schema:\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `Dict[str, typing.Any]` but got `bool`.",
    "warning_line": 988,
    "pred_top-1": {
      "pred": "if schema is False:\n    return None\nif \"anyOf\" in schema:",
      "pred_parsed": "if schema is False:\nreturn None\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if schema is False:\n    return {}\nif \"anyOf\" in schema:",
      "pred_parsed": "if schema is False:\nreturn {}\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if schema is False:\n    return {}\nif \"anyOf\" in schema:",
      "pred_parsed": "if schema is False:\nreturn {}\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if schema is False:\n    return None\nif \"anyOf\" in schema:",
      "pred_parsed": "if schema is False:\nreturn None\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if schema is False:\n    return None\nif \"anyOf\" in schema:",
      "pred_parsed": "if schema is False:\nreturn None\nif \"anyOf\" in schema:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "standardebooks/tools",
    "repo_dir": "./GitHub/GitHub/standardebooks-tools",
    "commit": "ecc8a99c92471116de414b814c29c1fac31b2dc0",
    "filename": "se/executables.py",
    "source_code": "\t\t\tse.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n   return se.InvalidSeEbookException",
    "target_code": "\t\t\t<IND>se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n   return se.InvalidSeEbookException.code\n\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `int` but got `typing.Type[se.InvalidSeEbookException]`.",
    "warning_line": 738,
    "exception": "'pred_top-1'"
  },
  {
    "repo": "volatilityfoundation/volatility3",
    "repo_dir": "./GitHub/GitHub/volatilityfoundation-volatility3",
    "commit": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "filename": "volatility/framework/interfaces/layers.py",
    "source_code": "    @property\n    def layer_name(self) -> str:\n        return self._layer_name",
    "target_code": "    <DED>@property\n    def layer_name(self) -> typing.Optional[str]:\n        <IND>return self._layer_name\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `str` but got `typing.Optional[str]`.",
    "warning_line": 74,
    "pred_top-1": {
      "pred": "@property\ndef layer_name(self) -> str:\n    if self._layer_name is not None:\n        return self._layer_name\n    else:\n        return \"\"",
      "pred_parsed": "    @property\n    def layer_name(self) -> str:\n    if self._layer_name is not None:\n    return self._layer_name\n    else:\n    return \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "@property\ndef layer_name(self) -> str:\n    return str(self._layer_name)",
      "pred_parsed": "    @property\n    def layer_name(self) -> str:\n    return str(self._layer_name)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "@property\ndef layer_name(self) -> str:\n    if self._layer_name is None:\n        return \"\"\n    else:\n        return self._layer_name",
      "pred_parsed": "    @property\n    def layer_name(self) -> str:\n    if self._layer_name is None:\n    return \"\"\n    else:\n    return self._layer_name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "@property\ndef layer_name(self) -> str:\n    if self._layer_name is None:\n        return \"\"\n    else:\n        return self._layer_name",
      "pred_parsed": "    @property\n    def layer_name(self) -> str:\n    if self._layer_name is None:\n    return \"\"\n    else:\n    return self._layer_name\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "@property\n    def layer_name(self) -> str:\n        return self._layer_name if self._layer_name is not None else \"\"",
      "pred_parsed": "    @property\n    def layer_name(self) -> str:\n    return self._layer_name if self._layer_name is not None else \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Shougo/deoplete.nvim",
    "repo_dir": "./GitHub/GitHub/Shougo-deoplete.nvim",
    "commit": "48fa59ab938c7d76c4697e90c05edd3472ba13b7",
    "filename": "rplugin/python3/deoplete/util.py",
    "source_code": "def escape(expr: str) -> None:\n    return expr.replace(\"'\", \"''\")",
    "target_code": "\n<DED>def escape(expr: str) -> str:\n    <IND>return expr.replace(\"'\", \"''\")\n",
    "warning_type": "Incompatible return type [7]",
    "warning_message": " Expected `None` but got `str`.",
    "warning_line": 118,
    "pred_top-1": {
      "pred": "def escape(expr: str) -> str:\n    return expr.replace(\"'\", \"''\")",
      "pred_parsed": "def escape(expr: str) -> str:\nreturn expr.replace(\"'\", \"''\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def escape(expr: str) -> str:\n    return expr.replace(\"'\", \"''\")",
      "pred_parsed": "def escape(expr: str) -> str:\nreturn expr.replace(\"'\", \"''\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def escape(expr: str) -> str:\n    return expr.replace(\"'\", \"''\")",
      "pred_parsed": "def escape(expr: str) -> str:\nreturn expr.replace(\"'\", \"''\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def escape(expr: str) -> str:\n    return expr.replace(\"'\", \"''\")",
      "pred_parsed": "def escape(expr: str) -> str:\nreturn expr.replace(\"'\", \"''\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def escape(expr: str) -> str:\n    return expr.replace(\"'\", \"''\")",
      "pred_parsed": "def escape(expr: str) -> str:\nreturn expr.replace(\"'\", \"''\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "chanzuckerberg/miniwdl",
    "repo_dir": "./GitHub/GitHub/chanzuckerberg-miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/Expr.py",
    "source_code": "                k.typecheck(kty)\n            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                vty = v.type",
    "target_code": "                <IND>k.typecheck(kty)\n            <DED>if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                <IND>vty = v.type\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "warning_line": 445,
    "pred_top-1": {
      "pred": "if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any(), T.Any()):\n    vty = v.type",
      "pred_parsed": "                if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any(), T.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any(), T.Any()):\n    vty = v.type",
      "pred_parsed": "                if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any(), T.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any(), T.Any()):\n    vty = v.type",
      "pred_parsed": "                if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any(), T.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any(), T.Any()):\n    vty = v.type",
      "pred_parsed": "                if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any(), T.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any(), T.Any()):\n    vty = v.type",
      "pred_parsed": "                if vty is None or vty == T.Array(T.Any()) or vty == T.Map(T.Any(), T.Any()):\n                vty = v.type\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "libp2p/py-libp2p",
    "repo_dir": "./GitHub/GitHub/libp2p-py-libp2p",
    "commit": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397",
    "filename": "libp2p/pubsub/gossipsub.py",
    "source_code": "                selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )",
    "target_code": "                <IND>selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, list(self.mesh[topic]), []\n                )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Sequence[typing.Any]` for 2nd positional only parameter to call `GossipSub.select_from_minus` but got `Set[ID]`.",
    "warning_line": 433,
    "pred_top-1": {
      "pred": "selected_peers = GossipSub.select_from_minus(\n                    list(num_mesh_peers_in_topic - self.degree), list(self.mesh[topic]), []\n                )",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                list(num_mesh_peers_in_topic - self.degree), list(self.mesh[topic]), []\n                )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "selected_peers = GossipSub.select_from_minus(\n    list(num_mesh_peers_in_topic - self.degree), list(self.mesh[topic]), []\n)",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                list(num_mesh_peers_in_topic - self.degree), list(self.mesh[topic]), []\n                )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "selected_peers = GossipSub.select_from_minus(\n    list(num_mesh_peers_in_topic - self.degree), list(self.mesh[topic]), []\n)",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                list(num_mesh_peers_in_topic - self.degree), list(self.mesh[topic]), []\n                )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "selected_peers = GossipSub.select_from_minus(\n    list(num_mesh_peers_in_topic - self.degree), list(self.mesh[topic]), []\n)",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                list(num_mesh_peers_in_topic - self.degree), list(self.mesh[topic]), []\n                )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "selected_peers = GossipSub.select_from_minus(\n                    list(num_mesh_peers_in_topic - self.degree), list(self.mesh[topic]), []\n                )",
      "pred_parsed": "                selected_peers = GossipSub.select_from_minus(\n                list(num_mesh_peers_in_topic - self.degree), list(self.mesh[topic]), []\n                )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "raiden-network/raiden",
    "repo_dir": "./GitHub/GitHub/raiden-network-raiden",
    "commit": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "filename": "raiden/transfer/events.py",
    "source_code": "        restored = cls(\n            expiration=int(data['expiration']),\n            balance_proof=data['balance_proof'],",
    "target_code": "        <IND>restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `BlockExpiration` for 1st parameter `expiration` to call `ContractSendChannelUpdateTransfer.__init__` but got `int`.",
    "warning_line": 231,
    "pred_top-1": {
      "pred": "restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],",
      "pred_parsed": "        restored = cls(\n        expiration=BlockExpiration(int(data['expiration'])),\n        balance_proof=data['balance_proof'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],",
      "pred_parsed": "        restored = cls(\n        expiration=BlockExpiration(int(data['expiration'])),\n        balance_proof=data['balance_proof'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],",
      "pred_parsed": "        restored = cls(\n        expiration=BlockExpiration(int(data['expiration'])),\n        balance_proof=data['balance_proof'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],",
      "pred_parsed": "        restored = cls(\n        expiration=BlockExpiration(int(data['expiration'])),\n        balance_proof=data['balance_proof'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],",
      "pred_parsed": "        restored = cls(\n        expiration=BlockExpiration(int(data['expiration'])),\n        balance_proof=data['balance_proof'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "facebookresearch/Mephisto",
    "repo_dir": "./GitHub/GitHub/facebookresearch-Mephisto",
    "commit": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "source_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data={}, shared=annotation[\"inputs\"])\n    )",
    "target_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data=[{}], shared=annotation[\"inputs\"])\n    )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.List[typing.Dict[str, typing.Any]]` for 1st parameter `unit_data` to call `InitializationData.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
    "warning_line": 128,
    "pred_top-1": {
      "pred": "assignment.write_assignment_data(\n    InitializationData(unit_data=[], shared=annotation[\"inputs\"])\n)",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data=[], shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "assignment.write_assignment_data(\n    InitializationData(unit_data=[], shared=annotation[\"inputs\"])\n)",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data=[], shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "assignment.write_assignment_data(\n        InitializationData(unit_data=[], shared=annotation[\"inputs\"])\n    )",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data=[], shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "unit_data = list(annotation[\"inputs\"].values())\n    assignment.write_assignment_data(\n        InitializationData(unit_data=unit_data, shared=annotation[\"inputs\"])\n    )",
      "pred_parsed": "    unit_data = list(annotation[\"inputs\"].values())\n    assignment.write_assignment_data(\n    InitializationData(unit_data=unit_data, shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "assignment.write_assignment_data(\n        InitializationData(unit_data=list(annotation[\"inputs\"].values()), shared=annotation[\"inputs\"])\n    )",
      "pred_parsed": "    assignment.write_assignment_data(\n    InitializationData(unit_data=list(annotation[\"inputs\"].values()), shared=annotation[\"inputs\"])\n    )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "volatilityfoundation/volatility3",
    "repo_dir": "./GitHub/GitHub/volatilityfoundation-volatility3",
    "commit": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "filename": "volatility/framework/automagic/windows.py",
    "source_code": "                    physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
    "target_code": "                    <IND>physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if not isinstance(physical_layer, str):\n                        <IND>raise TypeError(\"Physical layer name is not a string: {}\".format(sub_config_path))\n                    <DED>hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `interfaces.layers.Memory.__getitem__` but got `typing.Union[typing.List[typing.Union[bool, bytes, int, str]], bool, bytes, int, str]`.",
    "warning_line": 267,
    "pred_top-1": {
      "pred": "physical_layer = str(requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path))\nhits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "pred_parsed": "                    physical_layer = str(requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path))\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "physical_layer = str(requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path))\nhits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "pred_parsed": "                    physical_layer = str(requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path))\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "physical_layer = str(requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path))\nhits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "pred_parsed": "                    physical_layer = str(requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path))\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "physical_layer = str(requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path))\nhits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "pred_parsed": "                    physical_layer = str(requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path))\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "physical_layer = str(requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path))\n                hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
      "pred_parsed": "                    physical_layer = str(requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path))\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "wemake-services/wemake-python-styleguide",
    "repo_dir": "./GitHub/GitHub/wemake-services-wemake-python-styleguide",
    "commit": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9",
    "filename": "wemake_python_styleguide/helpers/variables.py",
    "source_code": "    return bool(name) and name != '_' and len(name) < min_length",
    "target_code": "\n    return name is not None and name != '_' and len(name) < min_length\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[str]`.",
    "warning_line": 38,
    "pred_top-1": {
      "pred": "if name and name != '_' and isinstance(name, str) and len(name) < min_length:\n    return True\nelse:\n    return False",
      "pred_parsed": "    if name and name != '_' and isinstance(name, str) and len(name) < min_length:\n    return True\n    else:\n    return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if name and name != '_' and len(name) < min_length:\n    return True\nelse:\n    return False",
      "pred_parsed": "    if name and name != '_' and len(name) < min_length:\n    return True\n    else:\n    return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if isinstance(name, str) and bool(name) and name != '_' and len(name) < min_length:\n    return True\nelse:\n    return False",
      "pred_parsed": "    if isinstance(name, str) and bool(name) and name != '_' and len(name) < min_length:\n    return True\n    else:\n    return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if name and name != '_' and isinstance(name, str) and len(name) < min_length:\n    return True",
      "pred_parsed": "    if name and name != '_' and isinstance(name, str) and len(name) < min_length:\n    return True\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if name and name != '_' and len(name) < min_length:\n    return True\nelse:\n    return False",
      "pred_parsed": "    if name and name != '_' and len(name) < min_length:\n    return True\n    else:\n    return False\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "PyTorchLightning/pytorch-lightning",
    "repo_dir": "./GitHub/GitHub/PyTorchLightning-pytorch-lightning",
    "commit": "0456b4598f5f7eaebf626bca45d563562a15887b",
    "filename": "pytorch_lightning/trainer/trainer.py",
    "source_code": "        results = self.fit(model)\n        self._set_running_stage(None, model)",
    "target_code": "        results = self.fit(model)\n        self._running_stage = None\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `LightningEnum` for 1st positional only parameter to call `Trainer._set_running_stage` but got `None`.",
    "warning_line": 1036,
    "pred_top-1": {
      "pred": "results = self.fit(model)\nself._set_running_stage(LightningEnum.TRAINING, model)",
      "pred_parsed": "        results = self.fit(model)\n        self._set_running_stage(LightningEnum.TRAINING, model)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "results = self.fit(model)\nfrom pytorch_lightning.utilities.distributed import LightningEnum\nself._set_running_stage(LightningEnum.TRAINING, model)",
      "pred_parsed": "        results = self.fit(model)\n        from pytorch_lightning.utilities.distributed import LightningEnum\n        self._set_running_stage(LightningEnum.TRAINING, model)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "results = self.fit(model)\nfrom pytorch_lightning.utilities.cloud_io import LightningEnum\nself._set_running_stage(LightningEnum.TRAINING, model)",
      "pred_parsed": "        results = self.fit(model)\n        from pytorch_lightning.utilities.cloud_io import LightningEnum\n        self._set_running_stage(LightningEnum.TRAINING, model)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "results = self.fit(model)\nfrom pytorch_lightning.utilities.cloud_io import LightningEnum\nself._set_running_stage(LightningEnum.TRAINING, model)",
      "pred_parsed": "        results = self.fit(model)\n        from pytorch_lightning.utilities.cloud_io import LightningEnum\n        self._set_running_stage(LightningEnum.TRAINING, model)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "results = self.fit(model)\n                from pytorch_lightning.utilities.distributed import LightningEnum\n                self._set_running_stage(LightningEnum.TRAINING, model)",
      "pred_parsed": "        results = self.fit(model)\n        from pytorch_lightning.utilities.distributed import LightningEnum\n        self._set_running_stage(LightningEnum.TRAINING, model)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "rotki/rotki",
    "repo_dir": "./GitHub/GitHub/rotki-rotki",
    "commit": "b763072c34b7f9d444fc042c460c93b458c8c282",
    "filename": "rotkehlchen/blockchain.py",
    "source_code": "        self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return {'per_account': self.balances, 'totals': self.totals}",
    "target_code": "        <DED>self.owned_eth_tokens.extend(tokens)\n        eth_balances = cast(EthBalances, self.balances[S_ETH])\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `Blockchain.query_ethereum_tokens` but got `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]`.",
    "warning_line": 131,
    "pred_top-1": {
      "pred": "self.owned_eth_tokens.extend(tokens)\neth_balances = {k: v for k, v in self.balances[S_ETH].items() if isinstance(k, typing.EthAddress)}\nself.query_ethereum_tokens(tokens, eth_balances)\nreturn {'per_account': self.balances, 'totals': self.totals}",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        eth_balances = {k: v for k, v in self.balances[S_ETH].items() if isinstance(k, typing.EthAddress)}\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self.owned_eth_tokens.extend(tokens)\neth_balances = self.balances[S_ETH]\nself.query_ethereum_tokens(tokens, eth_balances)\nreturn {'per_account': self.balances, 'totals': self.totals}",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        eth_balances = self.balances[S_ETH]\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self.owned_eth_tokens.extend(tokens)\neth_balances = {k: v for k, v in self.balances[S_ETH].items() if k in tokens}\nself.query_ethereum_tokens(tokens, eth_balances)\nreturn {'per_account': self.balances, 'totals': self.totals}",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        eth_balances = {k: v for k, v in self.balances[S_ETH].items() if k in tokens}\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "eth_balances = self.balances[S_ETH]\nself.query_ethereum_tokens(tokens, eth_balances)\nreturn {'per_account': self.balances, 'totals': self.totals}",
      "pred_parsed": "        eth_balances = self.balances[S_ETH]\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self.owned_eth_tokens.extend(tokens)\neth_balances = {k: v for k, v in self.balances[S_ETH].items() if isinstance(k, typing.EthAddress)}\nself.query_ethereum_tokens(tokens, eth_balances)\nreturn {'per_account': self.balances, 'totals': self.totals}",
      "pred_parsed": "        self.owned_eth_tokens.extend(tokens)\n        eth_balances = {k: v for k, v in self.balances[S_ETH].items() if isinstance(k, typing.EthAddress)}\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "freqtrade/freqtrade",
    "repo_dir": "./GitHub/GitHub/freqtrade-freqtrade",
    "commit": "83644ce5d8502ddc99c5d24a46a33750cf7745bf",
    "filename": "tests/data/test_history.py",
    "source_code": "    assert {} == load_data(\n        datadir='',\n        pairs=[],",
    "target_code": "    <IND>assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Path` for 1st parameter `datadir` to call `load_data` but got `str`.",
    "warning_line": 373,
    "pred_top-1": {
      "pred": "assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],",
      "pred_parsed": "    assert {} == load_data(\n    datadir=Path(''),\n    pairs=[],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],",
      "pred_parsed": "    assert {} == load_data(\n    datadir=Path(''),\n    pairs=[],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "assert {} == load_data(\n    datadir=Path(''),\n    pairs=[],",
      "pred_parsed": "    assert {} == load_data(\n    datadir=Path(''),\n    pairs=[],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],",
      "pred_parsed": "    assert {} == load_data(\n    datadir=Path(''),\n    pairs=[],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],",
      "pred_parsed": "    assert {} == load_data(\n    datadir=Path(''),\n    pairs=[],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "apache/airflow",
    "repo_dir": "./GitHub/GitHub/apache-airflow",
    "commit": "f7a9fd757454e4e6e9686b765cb088caccaba8c3",
    "filename": "airflow/cli/simple_table.py",
    "source_code": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)",
    "target_code": "        <DED>rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\n        print(output)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Union[Dict[str, str], typing.Sequence[str], str]` for 3rd parameter `headers` to call `tabulate` but got `typing.KeysView[typing.Any]`.",
    "warning_line": 73,
    "pred_top-1": {
      "pred": "rows = [list(d.values()) for d in data]\noutput = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\nprint(output)",
      "pred_parsed": "        rows = [list(d.values()) for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\n        print(output)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "rows = [d.values() for d in data]\nheaders = list(data[0].keys())\noutput = tabulate(rows, tablefmt=\"plain\", headers=headers)\nprint(output)",
      "pred_parsed": "        rows = [d.values() for d in data]\n        headers = list(data[0].keys())\n        output = tabulate(rows, tablefmt=\"plain\", headers=headers)\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "rows = [d.values() for d in data]\nheaders = list(data[0].keys())\noutput = tabulate(rows, tablefmt=\"plain\", headers=headers)\nprint(output)",
      "pred_parsed": "        rows = [d.values() for d in data]\n        headers = list(data[0].keys())\n        output = tabulate(rows, tablefmt=\"plain\", headers=headers)\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "rows = [d.values() for d in data]\nheaders = list(data[0].keys())\noutput = tabulate(rows, tablefmt=\"plain\", headers=headers)\nprint(output)",
      "pred_parsed": "        rows = [d.values() for d in data]\n        headers = list(data[0].keys())\n        output = tabulate(rows, tablefmt=\"plain\", headers=headers)\n        print(output)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "rows = [d.values() for d in data]\noutput = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\nprint(output)",
      "pred_parsed": "        rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\n        print(output)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "althonos/pronto",
    "repo_dir": "./GitHub/GitHub/althonos-pronto",
    "commit": "f23c3362ed3a16e70c4238675d7543835aac1cc8",
    "filename": "pronto/term.py",
    "source_code": "                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)",
    "target_code": "                <IND>r, t = item\n                intersection_of.append((ont.get_relationship(r), ont.get_term(t)))\n            <DED>except TypeError:\n                <IND>intersection_of.append(ont.get_term(typing.cast(str, item)))\n        <DED><DED>return frozenset(intersection_of)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `Ontology.get_term` but got `Union[Tuple[str, str], str]`.",
    "warning_line": 441,
    "pred_top-1": {
      "pred": "try:\n    r, t = item\n    intersection_of.append(ont.get_relationship(r), ont.get_term(t))\nexcept TypeError:\n    try:\n        intersection_of.append(ont.get_term(item))\n    except TypeError:\n        pass\nreturn frozenset(intersection_of)",
      "pred_parsed": "                try:\n                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                except TypeError:\n                try:\n                intersection_of.append(ont.get_term(item))\n                except TypeError:\n                pass\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "try:\n    r, t = item\n    intersection_of.append(ont.get_relationship(r), ont.get_term(t))\nexcept TypeError:\n    try:\n        intersection_of.append(ont.get_term(item))\n    except TypeError:\n        pass\nreturn frozenset(intersection_of)",
      "pred_parsed": "                try:\n                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                except TypeError:\n                try:\n                intersection_of.append(ont.get_term(item))\n                except TypeError:\n                pass\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "try:\n    r, t = item\n    intersection_of.append(ont.get_relationship(r), ont.get_term(t))\nexcept TypeError:\n    intersection_of.append(ont.get_term(item))\nreturn frozenset(intersection_of)",
      "pred_parsed": "                try:\n                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                except TypeError:\n                intersection_of.append(ont.get_term(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "try:\n    r, t = item\n    intersection_of.append(ont.get_relationship(r), ont.get_term(t))\nexcept TypeError:\n    intersection_of.append(ont.get_term(item))\nexcept ValueError:\n    intersection_of.append(ont.get_relationship(item))\nreturn frozenset(intersection_of)",
      "pred_parsed": "                try:\n                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                except TypeError:\n                intersection_of.append(ont.get_term(item))\n                except ValueError:\n                intersection_of.append(ont.get_relationship(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "try:\n                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            except TypeError:\n                intersection_of.append(ont.get_term(item))\n        return frozenset(intersection_of)",
      "pred_parsed": "                try:\n                r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n                except TypeError:\n                intersection_of.append(ont.get_term(item))\n                return frozenset(intersection_of)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "lykoss/lykos",
    "repo_dir": "./GitHub/GitHub/lykoss-lykos",
    "commit": "3b3870c9f365944134225c5b7364430c5bce0158",
    "filename": "src/roles/madscientist.py",
    "source_code": "    target1, target2 = _get_targets(var, get_players(var), player)",
    "target_code": "\n    <DED>target1, target2 = _get_targets(var, get_all_players(var), player)\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Set[User]` for 2nd positional only parameter to call `_get_targets` but got `typing.List[User]`.",
    "warning_line": 53,
    "pred_top-1": {
      "pred": "# Convert the list of players to a set\nplayer_set = set(get_players(var))\n\n# Call the _get_targets function with the set of players\ntarget1, target2 = _get_targets(var, player_set, player)",
      "pred_parsed": "    # Convert the list of players to a set\n    player_set = set(get_players(var))\n    \n    # Call the _get_targets function with the set of players\n    target1, target2 = _get_targets(var, player_set, player)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "player_list = get_players(var)\nplayer_set = set(player_list)\ntarget1, target2 = _get_targets(var, player_set, player)",
      "pred_parsed": "    player_list = get_players(var)\n    player_set = set(player_list)\n    target1, target2 = _get_targets(var, player_set, player)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "player_set = set(get_players(var))\ntarget1, target2 = _get_targets(var, player_set, player)",
      "pred_parsed": "    player_set = set(get_players(var))\n    target1, target2 = _get_targets(var, player_set, player)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "player_set = set(get_players(var))\ntarget1, target2 = _get_targets(var, player_set, player)",
      "pred_parsed": "    player_set = set(get_players(var))\n    target1, target2 = _get_targets(var, player_set, player)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "players = get_players(var)\ntarget1, target2 = _get_targets(var, set(players), player)",
      "pred_parsed": "    players = get_players(var)\n    target1, target2 = _get_targets(var, set(players), player)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "datatheorem/strongarm",
    "repo_dir": "./GitHub/GitHub/datatheorem-strongarm",
    "commit": "72ab23d73cbfe454b802f4a5371502dec2f1fb36",
    "filename": "tests/utils.py",
    "source_code": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    analyzer = MachoAnalyzer.get_analyzer(binary)",
    "target_code": "    <DED><DED>binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    assert binary is not None\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `strongarm.macho.macho_binary.MachoBinary` for 1st positional only parameter to call `strongarm.macho.macho_analyzer.MachoAnalyzer.get_analyzer` but got `typing.Optional[strongarm.macho.macho_binary.MachoBinary]`.",
    "warning_line": 115,
    "pred_top-1": {
      "pred": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\nif binary is not None:\n    analyzer = MachoAnalyzer.get_analyzer(binary)",
      "pred_parsed": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    if binary is not None:\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\nif binary is not None:\n    analyzer = MachoAnalyzer.get_analyzer(binary)",
      "pred_parsed": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    if binary is not None:\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\nif binary is not None:\n    analyzer = MachoAnalyzer.get_analyzer(binary)",
      "pred_parsed": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    if binary is not None:\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\nif binary is not None:\n    analyzer = MachoAnalyzer.get_analyzer(binary)",
      "pred_parsed": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    if binary is not None:\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\nif binary is not None:\n    analyzer = MachoAnalyzer.get_analyzer(binary)",
      "pred_parsed": "    binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    if binary is not None:\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "StellarCN/py-stellar-base",
    "repo_dir": "./GitHub/GitHub/StellarCN-py-stellar-base",
    "commit": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "filename": "stellar_sdk/server.py",
    "source_code": "                continue\n            self.__check_destination_memo(account_resp, index, destination)",
    "target_code": "                <IND>continue\n            <DED>assert isinstance(account_resp, dict)\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__check_destination_memo` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
    "warning_line": 410,
    "pred_top-1": {
      "pred": "if isinstance(account_resp, Coroutine):\n    account_resp = await account_resp\nself.__check_destination_memo(account_resp, index, destination)",
      "pred_parsed": "                if isinstance(account_resp, Coroutine):\n                account_resp = await account_resp\n                self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if isinstance(account_resp, Coroutine):\n    account_resp = await account_resp\nself.__check_destination_memo(account_resp, index, destination)",
      "pred_parsed": "                if isinstance(account_resp, Coroutine):\n                account_resp = await account_resp\n                self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if isinstance(account_resp, dict):\n    self.__check_destination_memo(account_resp, index, destination)\nelse:\n    await account_resp\n    self.__check_destination_memo(account_resp.result(), index, destination)",
      "pred_parsed": "                if isinstance(account_resp, dict):\n                self.__check_destination_memo(account_resp, index, destination)\n                else:\n                await account_resp\n                self.__check_destination_memo(account_resp.result(), index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if isinstance(account_resp, Coroutine):\n    account_resp = await account_resp\nself.__check_destination_memo(account_resp, index, destination)",
      "pred_parsed": "                if isinstance(account_resp, Coroutine):\n                account_resp = await account_resp\n                self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if isinstance(account_resp, Coroutine):\n    account_resp = await account_resp\nself.__check_destination_memo(account_resp, index, destination)",
      "pred_parsed": "                if isinstance(account_resp, Coroutine):\n                account_resp = await account_resp\n                self.__check_destination_memo(account_resp, index, destination)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ConsenSys/mythril",
    "repo_dir": "./GitHub/GitHub/ConsenSys-mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/instructions.py",
    "source_code": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                )",
    "target_code": "                    if type(condition) == bool\n                    else is_true(simplify(cast(Bool, condition)))\n                )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `mythril.laser.smt.expression.Expression` for 1st positional only parameter to call `mythril.laser.smt.expression.simplify` but got `bool`.",
    "warning_line": 1357,
    "pred_top-1": {
      "pred": "if type(condition) == bool:\n    is_true(condition)\nelse:\n    is_true(simplify(condition))",
      "pred_parsed": "                    if type(condition) == bool:\n                    is_true(condition)\n                    else:\n                    is_true(simplify(condition))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if type(condition) == bool:\n    is_true(condition)\nelse:\n    is_true(simplify(condition))",
      "pred_parsed": "                    if type(condition) == bool:\n                    is_true(condition)\n                    else:\n                    is_true(simplify(condition))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if type(condition) == bool:\n    is_true(condition)\nelse:\n    is_true(simplify(condition))",
      "pred_parsed": "                    if type(condition) == bool:\n                    is_true(condition)\n                    else:\n                    is_true(simplify(condition))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if type(condition) == bool:\n    is_true(condition)\nelse:\n    is_true(simplify(condition))",
      "pred_parsed": "                    if type(condition) == bool:\n                    is_true(condition)\n                    else:\n                    is_true(simplify(condition))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if type(condition) == bool:\n    is_true(condition)\nelse:\n    is_true(simplify(condition))",
      "pred_parsed": "                    if type(condition) == bool:\n                    is_true(condition)\n                    else:\n                    is_true(simplify(condition))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "common-workflow-language/cwltool",
    "repo_dir": "./GitHub/GitHub/common-workflow-language-cwltool",
    "commit": "1923638b59caf3ff4080e1faaaa64c68119c5c61",
    "filename": "cwltool/singularity.py",
    "source_code": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    cmd [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]",
    "target_code": "                        <IND>name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    <DED>cmd = [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Tuple[str, str, str, str]`.",
    "warning_line": 182,
    "pred_top-1": {
      "pred": "name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\ncmd = [\"singularity\", \"build\", name,\n       \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]",
      "pred_parsed": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        cmd = [\"singularity\", \"build\", name,\n                        \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\ncmd = [\"singularity\", \"build\", name,\n       \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]",
      "pred_parsed": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        cmd = [\"singularity\", \"build\", name,\n                        \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                cmd = [\"singularity\", \"build\", name,\n                       \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]",
      "pred_parsed": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        cmd = [\"singularity\", \"build\", name,\n                        \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                cmd = [\"singularity\", \"build\", name,\n                       \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]",
      "pred_parsed": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        cmd = [\"singularity\", \"build\", name,\n                        \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\ncmd = [\"singularity\", \"build\", name,\n       \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]",
      "pred_parsed": "                        name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                        cmd = [\"singularity\", \"build\", name,\n                        \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "psychopy/psychopy",
    "repo_dir": "./GitHub/GitHub/psychopy-psychopy",
    "commit": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3",
    "filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "source_code": "    if '--out' in sys.argv:\n        outfile.write(order.encode('utf8')+'\\n')\n    elif not order+'\\n' in target:",
    "target_code": "    if '--out' in sys.argv:\n        <IND>outfile.write(order+'\\n')\n    <DED>elif not order+'\\n' in target:\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `bytes`.",
    "warning_line": 82,
    "pred_top-1": {
      "pred": "if '--out' in sys.argv:\n    outfile.write(order+'\\n')\nelif not order+'\\n' in target:",
      "pred_parsed": "    if '--out' in sys.argv:\n    outfile.write(order+'\\n')\n    elif not order+'\\n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if '--out' in sys.argv:\n    outfile.write(order.encode('utf8')+b'\\n')\nelif not order+'\\n' in target:",
      "pred_parsed": "    if '--out' in sys.argv:\n    outfile.write(order.encode('utf8')+b'\\n')\n    elif not order+'\\n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if '--out' in sys.argv:\n    outfile.write(order.encode('utf8')+b'\\n')\nelif not order+'\\n' in target:",
      "pred_parsed": "    if '--out' in sys.argv:\n    outfile.write(order.encode('utf8')+b'\\n')\n    elif not order+'\\n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if '--out' in sys.argv:\n    outfile.write(order+'\\n')\nelif not order+'\\n' in target:",
      "pred_parsed": "    if '--out' in sys.argv:\n    outfile.write(order+'\\n')\n    elif not order+'\\n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if '--out' in sys.argv:\n    outfile.write(order+'\\n')\nelif not order+'\\n' in target:",
      "pred_parsed": "    if '--out' in sys.argv:\n    outfile.write(order+'\\n')\n    elif not order+'\\n' in target:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "obsei/obsei",
    "repo_dir": "./GitHub/GitHub/obsei-obsei",
    "commit": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c",
    "filename": "obsei/source/reddit_scrapper.py",
    "source_code": "        last_index = since_id\n        state[config.url_id] = scrapper_stat",
    "target_code": "        last_index = since_id\n        if config.url_id:\n            <IND>state[config.url_id] = scrapper_stat\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
    "warning_line": 69,
    "pred_top-1": {
      "pred": "last_index = str(since_id)\nstate[config.url_id] = str(scrapper_stat)",
      "pred_parsed": "        last_index = str(since_id)\n        state[config.url_id] = str(scrapper_stat)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "if since_id is not None:\n                    last_index = since_id\n                state[config.url_id] = scrapper_stat",
      "pred_parsed": "        if since_id is not None:\n        last_index = since_id\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "last_index = str(since_id)\nstate[str(config.url_id)] = scrapper_stat",
      "pred_parsed": "        last_index = str(since_id)\n        state[str(config.url_id)] = scrapper_stat\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "if since_id is not None:\n    last_index = since_id\n    state[config.url_id] = scrapper_stat",
      "pred_parsed": "        if since_id is not None:\n        last_index = since_id\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if since_id is not None:\n    last_index = since_id\nif config.url_id is not None:\n    state[config.url_id] = scrapper_stat",
      "pred_parsed": "        if since_id is not None:\n        last_index = since_id\n        if config.url_id is not None:\n        state[config.url_id] = scrapper_stat\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "DragonMinded/bemaniutils",
    "repo_dir": "./GitHub/GitHub/DragonMinded-bemaniutils",
    "commit": "fa0b2bd6cde5361dce438fba1f47d384b91040e7",
    "filename": "bemani/tests/test_JubeatProp.py",
    "source_code": "            data,\n            1337,\n            'promote',",
    "target_code": "            data,\n            UserID(1337),\n            'promote',\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `UserID` for 2nd positional only parameter to call `JubeatProp._modify_profile` but got `int`.",
    "warning_line": 345,
    "pred_top-1": {
      "pred": "data,\nUserID(1337),\n'promote',",
      "pred_parsed": "            data,\n            UserID(1337),\n            'promote',\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "data,\nUserID(1337),\n'promote',",
      "pred_parsed": "            data,\n            UserID(1337),\n            'promote',\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "data,\nUserID(1337),\n'promote',",
      "pred_parsed": "            data,\n            UserID(1337),\n            'promote',\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "data,\nUserID(1337),\n'promote',",
      "pred_parsed": "            data,\n            UserID(1337),\n            'promote',\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "data,\nUserID(1337),\n'promote',",
      "pred_parsed": "            data,\n            UserID(1337),\n            'promote',\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "electrumsv/electrumsv",
    "repo_dir": "./GitHub/GitHub/electrumsv-electrumsv",
    "commit": "2132e0922ed952c7eb61f639b57182657532a757",
    "filename": "examples/applications/restapi/handler_utils.py",
    "source_code": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    derivation_path = unpack_derivation_path(key.derivation_data2)",
    "target_code": "                <IND>for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    <IND>assert key.derivation_data2 is not None\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
    "warning_line": 547,
    "pred_top-1": {
      "pred": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n    if key.derivation_data2 is not None:\n        derivation_path = unpack_derivation_path(key.derivation_data2)",
      "pred_parsed": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                if key.derivation_data2 is not None:\n                derivation_path = unpack_derivation_path(key.derivation_data2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n    if key.derivation_data2 is not None:\n        derivation_path = unpack_derivation_path(key.derivation_data2)",
      "pred_parsed": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                if key.derivation_data2 is not None:\n                derivation_path = unpack_derivation_path(key.derivation_data2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n    if key.derivation_data2 is not None:\n        derivation_path = unpack_derivation_path(key.derivation_data2)",
      "pred_parsed": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                if key.derivation_data2 is not None:\n                derivation_path = unpack_derivation_path(key.derivation_data2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n    if key.derivation_data2 is not None:\n        derivation_path = unpack_derivation_path(key.derivation_data2)",
      "pred_parsed": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                if key.derivation_data2 is not None:\n                derivation_path = unpack_derivation_path(key.derivation_data2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n    if key.derivation_data2 is not None:\n        derivation_path = unpack_derivation_path(key.derivation_data2)",
      "pred_parsed": "                for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                if key.derivation_data2 is not None:\n                derivation_path = unpack_derivation_path(key.derivation_data2)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "crownpku/Rasa_NLU_Chi",
    "repo_dir": "./GitHub/GitHub/crownpku-Rasa_NLU_Chi",
    "commit": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "filename": "rasa_nlu/model.py",
    "source_code": "        return Interpreter(self.pipeline, context=init_context, config=self.config)",
    "target_code": "\n        <DED><DED>return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[str, typing.Any]` for 3rd parameter `config` to call `Interpreter.__init__` but got `RasaNLUConfig`.",
    "warning_line": 190,
    "pred_top-1": {
      "pred": "return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())",
      "pred_parsed": "        return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "pythonarcade/arcade",
    "repo_dir": "./GitHub/GitHub/pythonarcade-arcade",
    "commit": "29972977db9e56010cd8b2e533eaa001f77114cd",
    "filename": "arcade/draw_commands.py",
    "source_code": "    draw_texture_rectangle(center_x, center_y,\n                           scale,\n                           texture,\n                           angle=angle, alpha=alpha)",
    "target_code": "    draw_texture_rectangle(center_x, center_y,\n                           texture,\n                           scale,\n                           angle=angle, alpha=alpha)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `arcade.drawing_support.Texture` for 3rd positional only parameter to call `draw_texture_rectangle` but got `float`.",
    "warning_line": 883,
    "pred_top-1": {
      "pred": "draw_texture_rectangle(center_x, center_y,\n                       arcade.load_texture(scale),\n                       texture,\n                       angle=angle, alpha=alpha)",
      "pred_parsed": "    draw_texture_rectangle(center_x, center_y,\n    arcade.load_texture(scale),\n    texture,\n    angle=angle, alpha=alpha)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "draw_texture_rectangle(center_x, center_y,\n                       arcade.load_texture(scale),\n                       texture,\n                       angle=angle, alpha=alpha)",
      "pred_parsed": "    draw_texture_rectangle(center_x, center_y,\n    arcade.load_texture(scale),\n    texture,\n    angle=angle, alpha=alpha)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "draw_texture_rectangle(center_x, center_y,\n                       arcade.drawing_support.Texture(scale),\n                       texture,\n                       angle=angle, alpha=alpha)",
      "pred_parsed": "    draw_texture_rectangle(center_x, center_y,\n    arcade.drawing_support.Texture(scale),\n    texture,\n    angle=angle, alpha=alpha)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "draw_texture_rectangle(center_x, center_y,\n                       arcade.load_texture(scale),\n                       texture,\n                       angle=angle, alpha=alpha)",
      "pred_parsed": "    draw_texture_rectangle(center_x, center_y,\n    arcade.load_texture(scale),\n    texture,\n    angle=angle, alpha=alpha)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "draw_texture_rectangle(center_x, center_y,\n                       arcade.load_texture(scale),\n                       texture,\n                       angle=angle, alpha=alpha)",
      "pred_parsed": "    draw_texture_rectangle(center_x, center_y,\n    arcade.load_texture(scale),\n    texture,\n    angle=angle, alpha=alpha)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "raiden-network/raiden",
    "repo_dir": "./GitHub/GitHub/raiden-network-raiden",
    "commit": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "filename": "raiden/transfer/state_change.py",
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            block_number=typing.BlockNumber(int(data['block_number'])),",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelSettled.__init__` but got `int`.",
    "warning_line": 542,
    "pred_top-1": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=typing.ChannelID(int(data['channel_identifier'])),\nblock_number=typing.BlockNumber(int(data['block_number'])),",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=typing.ChannelID(int(data['channel_identifier'])),\nblock_number=typing.BlockNumber(int(data['block_number'])),",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=typing.ChannelID(int(data['channel_identifier'])),\nblock_number=typing.BlockNumber(int(data['block_number'])),",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=typing.ChannelID(int(data['channel_identifier'])),\nblock_number=typing.BlockNumber(int(data['block_number'])),",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=typing.ChannelID(int(data['channel_identifier'])),\nblock_number=typing.BlockNumber(int(data['block_number'])),",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jamesoff/simplemonitor",
    "repo_dir": "./GitHub/GitHub/jamesoff-simplemonitor",
    "commit": "ebf14585452f9ca5db63aad3fb5c88bf313732bd",
    "filename": "simplemonitor/Loggers/network.py",
    "source_code": "                    )\n                result = json_loads(serialized)\n                self.simplemonitor.update_remote_monitor(result, addr[0])",
    "target_code": "                    )\n                <DED>result = json_loads(bytes(serialized))\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `bytes` for 1st positional only parameter to call `json_loads` but got `bytearray`.",
    "warning_line": 189,
    "pred_top-1": {
      "pred": "serialized = bytes(serialized)\n                result = json_loads(serialized)\n                self.simplemonitor.update_remote_monitor(result, addr[0])",
      "pred_parsed": "                    serialized = bytes(serialized)\n                    result = json_loads(serialized)\n                    self.simplemonitor.update_remote_monitor(result, addr[0])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "result = json_loads(bytes(serialized))\n                self.simplemonitor.update_remote_monitor(result, addr[0])",
      "pred_parsed": "                    result = json_loads(bytes(serialized))\n                    self.simplemonitor.update_remote_monitor(result, addr[0])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "result = json_loads(bytes(serialized))\n                self.simplemonitor.update_remote_monitor(result, addr[0])",
      "pred_parsed": "                    result = json_loads(bytes(serialized))\n                    self.simplemonitor.update_remote_monitor(result, addr[0])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "result = json_loads(bytes(serialized))\n                self.simplemonitor.update_remote_monitor(result, addr[0])",
      "pred_parsed": "                    result = json_loads(bytes(serialized))\n                    self.simplemonitor.update_remote_monitor(result, addr[0])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "result = json_loads(bytes(serialized))\n                self.simplemonitor.update_remote_monitor(result, addr[0])",
      "pred_parsed": "                    result = json_loads(bytes(serialized))\n                    self.simplemonitor.update_remote_monitor(result, addr[0])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "raiden-network/raiden",
    "repo_dir": "./GitHub/GitHub/raiden-network-raiden",
    "commit": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "filename": "raiden/transfer/state.py",
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            target_state=data['target_state'],",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `TargetTask.__init__` but got `int`.",
    "warning_line": 223,
    "pred_top-1": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),\ntarget_state=data['target_state'],",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),\ntarget_state=data['target_state'],",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),\ntarget_state=data['target_state'],",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),\ntarget_state=data['target_state'],",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),\ntarget_state=data['target_state'],",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "allenai/allennlp",
    "repo_dir": "./GitHub/GitHub/allenai-allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        super().__init__(vocab, regularizer)",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        <IND>super().__init__(vocab, **kwargs)\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "warning_line": 59,
    "pred_top-1": {
      "pred": "def __init__(\n        self,\n        vocab: Vocabulary,\n        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        if regularizer is None:\n            regularizer = RegularizerApplicator()\n        super().__init__(vocab, regularizer)",
      "pred_parsed": "        def __init__(\n        self,\n        vocab: Vocabulary,\n        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n        ) -> None:\n        if regularizer is None:\n        regularizer = RegularizerApplicator()\n        super().__init__(vocab, regularizer)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if regularizer is not None:\n            super().__init__(vocab, regularizer)\n        else:\n            super().__init__(vocab)",
      "pred_parsed": "        if regularizer is not None:\n        super().__init__(vocab, regularizer)\n        else:\n        super().__init__(vocab)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if regularizer is None:\n            super().__init__(vocab, regularizer)\n        else:\n            super().__init__(vocab)",
      "pred_parsed": "        if regularizer is None:\n        super().__init__(vocab, regularizer)\n        else:\n        super().__init__(vocab)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if regularizer is not None:\n    super().__init__(vocab, regularizer)\nelse:\n    super().__init__(vocab)",
      "pred_parsed": "        if regularizer is not None:\n        super().__init__(vocab, regularizer)\n        else:\n        super().__init__(vocab)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if regularizer is None:\n            super().__init__(vocab, regularizer)\n        else:\n            super().__init__(vocab)",
      "pred_parsed": "        if regularizer is None:\n        super().__init__(vocab, regularizer)\n        else:\n        super().__init__(vocab)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "allenai/allennlp",
    "repo_dir": "./GitHub/GitHub/allenai-allennlp",
    "commit": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "filename": "allennlp/models/graph_parser.py",
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        super().__init__(vocab, regularizer)",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
    "warning_line": 79,
    "pred_top-1": {
      "pred": "if regularizer is None:\n            super().__init__(vocab, regularizer)\n        else:\n            super().__init__(vocab)",
      "pred_parsed": "        if regularizer is None:\n        super().__init__(vocab, regularizer)\n        else:\n        super().__init__(vocab)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if regularizer is not None:\n            super().__init__(vocab, regularizer)\n        else:\n            super().__init__(vocab)",
      "pred_parsed": "        if regularizer is not None:\n        super().__init__(vocab, regularizer)\n        else:\n        super().__init__(vocab)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if regularizer is not None:\n            super().__init__(vocab, regularizer)\n        else:\n            super().__init__(vocab)",
      "pred_parsed": "        if regularizer is not None:\n        super().__init__(vocab, regularizer)\n        else:\n        super().__init__(vocab)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if regularizer is not None:\n            super().__init__(vocab, regularizer)\n        else:\n            super().__init__(vocab)",
      "pred_parsed": "        if regularizer is not None:\n        super().__init__(vocab, regularizer)\n        else:\n        super().__init__(vocab)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if regularizer is None:\n            super().__init__(vocab, regularizer)\n        else:\n            super().__init__(vocab)",
      "pred_parsed": "        if regularizer is None:\n        super().__init__(vocab, regularizer)\n        else:\n        super().__init__(vocab)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "allenai/allennlp",
    "repo_dir": "./GitHub/GitHub/allenai-allennlp",
    "commit": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "filename": "allennlp/common/logging.py",
    "source_code": "    else:\n        level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
    "target_code": "    <DED>else:\n        <IND>level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", \"INFO\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Optional[str]`.",
    "warning_line": 103,
    "pred_top-1": {
      "pred": "else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n    if level_name is not None:\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "pred_parsed": "    else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n    if level_name is not None:\n    LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n    if level_name is not None:\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "pred_parsed": "    else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n    if level_name is not None:\n    LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n    if level_name is not None:\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "pred_parsed": "    else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n    if level_name is not None:\n    LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n    if level_name is not None:\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "pred_parsed": "    else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n    if level_name is not None:\n    LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n    if level_name is not None:\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
      "pred_parsed": "    else:\n    level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n    if level_name is not None:\n    LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "algolia/algoliasearch-client-python",
    "repo_dir": "./GitHub/GitHub/algolia-algoliasearch-client-python",
    "commit": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "filename": "algoliasearch/insights_client_async.py",
    "source_code": "    def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token",
    "target_code": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
    "warning_line": 32,
    "pred_top-1": {
      "pred": "def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n    super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        insights_client._config,\n        user_token\n    )",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n    super(UserInsightsClientAsync, self).__init__(\n    insights_client._transporter,\n    insights_client._config,\n    user_token\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, str) -> None\n\n    super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, str) -> None\n    \n    super(UserInsightsClientAsync, self).__init__(\n    insights_client._transporter,\n    user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n    super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        insights_client._config,\n        user_token\n    )",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n    super(UserInsightsClientAsync, self).__init__(\n    insights_client._transporter,\n    insights_client._config,\n    user_token\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, str) -> None\n\n    super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        user_token",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, str) -> None\n    \n    super(UserInsightsClientAsync, self).__init__(\n    insights_client._transporter,\n    user_token\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n    super(UserInsightsClientAsync, self).__init__(\n        insights_client._transporter,\n        insights_client._config,\n        user_token\n    )",
      "pred_parsed": "    def __init__(self, insights_client, user_token):\n    # type: (InsightsClient, Transporter, InsightsConfig) -> None\n    \n    super(UserInsightsClientAsync, self).__init__(\n    insights_client._transporter,\n    insights_client._config,\n    user_token\n    )\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "quay/quay",
    "repo_dir": "./GitHub/GitHub/quay-quay",
    "commit": "38be6d05d08bc72cc13a89073bb5364b8adf6c04",
    "filename": "test/specs.py",
    "source_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"",
    "target_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `str`.",
    "warning_line": 29,
    "pred_top-1": {
      "pred": "import hashlib\n\nFAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"",
      "pred_parsed": "import hashlib\n\nFAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "import hashlib\n\nFAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"",
      "pred_parsed": "import hashlib\n\nFAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"",
      "pred_parsed": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "import hashlib\n\nFAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"",
      "pred_parsed": "import hashlib\n\nFAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "import hashlib\n\nFAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"",
      "pred_parsed": "import hashlib\n\nFAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "borglab/gtsfm",
    "repo_dir": "./GitHub/GitHub/borglab-gtsfm",
    "commit": "26f76a40e21bd082123f275404efca964faa59b9",
    "filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "source_code": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )",
    "target_code": "        <IND>cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Tuple[int, int, int]` for 2nd positional only parameter to call `compute_cycle_error` but got `List[int]`.",
    "warning_line": 201,
    "pred_top-1": {
      "pred": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n                    i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n                )",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n                    i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n                )",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )",
      "pred_parsed": "        cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n        i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "stac-utils/pystac",
    "repo_dir": "./GitHub/GitHub/stac-utils-pystac",
    "commit": "acaf0e023be27409aa4d159ed84910ff34103f93",
    "filename": "pystac/collection.py",
    "source_code": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)",
    "target_code": "    <DED>@classmethod\n    def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\":\n        <IND>minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Variable[T]` for 2nd parameter `maximum` to call `RangeSummary.__init__` but got `Optional[Variable[T]]`.",
    "warning_line": 437,
    "pred_top-1": {
      "pred": "@classmethod\ndef from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n    return cls(minimum=minimum, maximum=maximum, typ=typ)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n    return cls(minimum=minimum, maximum=maximum, typ=typ)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "@classmethod\ndef from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n    return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n    return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "@classmethod\ndef from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n    return cls(minimum=minimum, maximum=maximum) if maximum is not None else cls(minimum=minimum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n    return cls(minimum=minimum, maximum=maximum) if maximum is not None else cls(minimum=minimum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "@classmethod\ndef from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n    return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n    return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "@classmethod\ndef from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: Variable[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n    return cls(minimum=minimum, maximum=maximum)",
      "pred_parsed": "    @classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n    minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n    maximum: Variable[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n    return cls(minimum=minimum, maximum=maximum)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "samschott/maestral",
    "repo_dir": "./GitHub/GitHub/samschott-maestral",
    "commit": "79e5f46885de75b022513de6598e8baf4ea66f97",
    "filename": "maestral/cli.py",
    "source_code": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])",
    "target_code": "        <IND>maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=(\"gui\",))\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Tuple[str, ...]` for 1st parameter `extras` to call `pkg_resources.Distribution.requires` but got `List[str]`.",
    "warning_line": 550,
    "pred_top-1": {
      "pred": "maestral_dist = pkg_resources.get_distribution(\"maestral\")\nrequirements = maestral_dist.requires(extras=tuple([\"gui\"]))",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=tuple([\"gui\"]))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "maestral_dist = pkg_resources.get_distribution(\"maestral\")\nrequirements = maestral_dist.requires(extras=tuple([\"gui\"]))",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=tuple([\"gui\"]))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "maestral_dist = pkg_resources.get_distribution(\"maestral\")\nrequirements = maestral_dist.requires(extras=tuple([\"gui\"]))",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=tuple([\"gui\"]))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "maestral_dist = pkg_resources.get_distribution(\"maestral\")\nrequirements = maestral_dist.requires(extras=tuple([\"gui\"]))",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=tuple([\"gui\"]))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "maestral_dist = pkg_resources.get_distribution(\"maestral\")\nrequirements = maestral_dist.requires(extras=tuple([\"gui\"]))",
      "pred_parsed": "        maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=tuple([\"gui\"]))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "raiden-network/raiden",
    "repo_dir": "./GitHub/GitHub/raiden-network-raiden",
    "commit": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "filename": "raiden/transfer/events.py",
    "source_code": "        restored = cls(\n            payment_identifier=int(data['payment_identifier']),\n            reason=data['reason'],",
    "target_code": "        <IND>restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `PaymentID` for 1st parameter `payment_identifier` to call `EventInvalidReceivedLockedTransfer.__init__` but got `int`.",
    "warning_line": 739,
    "pred_top-1": {
      "pred": "restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],",
      "pred_parsed": "        restored = cls(\n        payment_identifier=PaymentID(int(data['payment_identifier'])),\n        reason=data['reason'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],",
      "pred_parsed": "        restored = cls(\n        payment_identifier=PaymentID(int(data['payment_identifier'])),\n        reason=data['reason'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],",
      "pred_parsed": "        restored = cls(\n        payment_identifier=PaymentID(int(data['payment_identifier'])),\n        reason=data['reason'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "restored = cls(\n            payment_identifier=PaymentID(data['payment_identifier']),\n            reason=data['reason'],",
      "pred_parsed": "        restored = cls(\n        payment_identifier=PaymentID(data['payment_identifier']),\n        reason=data['reason'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],",
      "pred_parsed": "        restored = cls(\n        payment_identifier=PaymentID(int(data['payment_identifier'])),\n        reason=data['reason'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "quantumlib/Cirq",
    "repo_dir": "./GitHub/GitHub/quantumlib-Cirq",
    "commit": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "filename": "cirq/docs/snippets_test.py",
    "source_code": "    if expected_failure is not None:\n        assert_code_snippet_fails(after, state, expected_failure)",
    "target_code": "    if expected_failure is not None:\n        <IND>assert after is not None\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `assert_code_snippet_fails` but got `typing.Optional[str]`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": "if expected_failure is not None:\n    assert_code_snippet_fails(str(after), state, str(expected_failure))",
      "pred_parsed": "    if expected_failure is not None:\n    assert_code_snippet_fails(str(after), state, str(expected_failure))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if expected_failure is not None:\n    assert_code_snippet_fails(str(after), state, str(expected_failure))",
      "pred_parsed": "    if expected_failure is not None:\n    assert_code_snippet_fails(str(after), state, str(expected_failure))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if expected_failure is not None:\n    assert_code_snippet_fails(str(after), state, str(expected_failure))",
      "pred_parsed": "    if expected_failure is not None:\n    assert_code_snippet_fails(str(after), state, str(expected_failure))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if expected_failure is not None:\n    assert_code_snippet_fails(str(after), state, str(expected_failure))",
      "pred_parsed": "    if expected_failure is not None:\n    assert_code_snippet_fails(str(after), state, str(expected_failure))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if expected_failure is not None:\n    assert_code_snippet_fails(str(after), state, str(expected_failure))",
      "pred_parsed": "    if expected_failure is not None:\n    assert_code_snippet_fails(str(after), state, str(expected_failure))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "deepmipt/DeepPavlov",
    "repo_dir": "./GitHub/GitHub/deepmipt-DeepPavlov",
    "commit": "1de404c11bc5f40b766e966573506921980ff524",
    "filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "source_code": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)",
    "target_code": "        log.info(f\"Saving model to {self.save_path}\")\n        save_pickle(self.ec_data, self.save_path)\n\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `save_pickle` but got `List[typing.Any]`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": "log.info(f\"Saving model to {self.save_path}\")\nself.save_path.parent.mkdir(parents=True, exist_ok=True)\nsave_pickle(dict(self.ec_data), self.save_path)",
      "pred_parsed": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(dict(self.ec_data), self.save_path)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "log.info(f\"Saving model to {self.save_path}\")\nself.save_path.parent.mkdir(parents=True, exist_ok=True)\nsave_pickle(dict(self.ec_data), self.save_path)",
      "pred_parsed": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(dict(self.ec_data), self.save_path)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "log.info(f\"Saving model to {self.save_path}\")\nself.save_path.parent.mkdir(parents=True, exist_ok=True)\nsave_pickle(dict(self.ec_data), self.save_path)",
      "pred_parsed": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(dict(self.ec_data), self.save_path)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "log.info(f\"Saving model to {self.save_path}\")\nself.save_path.parent.mkdir(parents=True, exist_ok=True)\nsave_pickle(dict(self.ec_data), self.save_path)",
      "pred_parsed": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(dict(self.ec_data), self.save_path)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "log.info(f\"Saving model to {self.save_path}\")\nself.save_path.parent.mkdir(parents=True, exist_ok=True)\nsave_pickle(dict(self.ec_data), self.save_path)",
      "pred_parsed": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(dict(self.ec_data), self.save_path)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "volatilityfoundation/volatility3",
    "repo_dir": "./GitHub/GitHub/volatilityfoundation-volatility3",
    "commit": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "filename": "volatility/framework/interfaces/configuration.py",
    "source_code": "        obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            context.add_layer(obj)",
    "target_code": "        <DED>obj = self._construct_class(context, config_path, args)\n        if obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface):\n            <IND>context.add_layer(obj)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `interfaces.layers.DataLayerInterface` for 1st positional only parameter to call `ContextInterface.add_layer` but got `interfaces.objects.ObjectInterface`.",
    "warning_line": 635,
    "pred_top-1": {
      "pred": "if isinstance(obj, interfaces.layers.DataLayerInterface):\n    context.add_layer(obj)",
      "pred_parsed": "        if isinstance(obj, interfaces.layers.DataLayerInterface):\n        context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if isinstance(obj, interfaces.layers.DataLayerInterface):\n    context.add_layer(obj)",
      "pred_parsed": "        if isinstance(obj, interfaces.layers.DataLayerInterface):\n        context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if isinstance(obj, interfaces.layers.DataLayerInterface):\n    context.add_layer(obj)",
      "pred_parsed": "        if isinstance(obj, interfaces.layers.DataLayerInterface):\n        context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if isinstance(obj, interfaces.layers.DataLayerInterface):\n                    context.add_layer(obj)",
      "pred_parsed": "        if isinstance(obj, interfaces.layers.DataLayerInterface):\n        context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if isinstance(obj, interfaces.layers.DataLayerInterface):\n    context.add_layer(obj)",
      "pred_parsed": "        if isinstance(obj, interfaces.layers.DataLayerInterface):\n        context.add_layer(obj)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "theupdateframework/python-tuf",
    "repo_dir": "./GitHub/GitHub/theupdateframework-python-tuf",
    "commit": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3",
    "filename": "tests/repository_simulator.py",
    "source_code": "        if delegator.delegations is None:\n            delegator.delegations = Delegations({}, {})\n        # put delegation last by default",
    "target_code": "        if delegator.delegations is None:\n            <IND>delegator.delegations = Delegations({}, OrderedDict())\n        # put delegation last by default\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `OrderedDict[str, DelegatedRole]` for 2nd positional only parameter to call `Delegations.__init__` but got `Dict[Variable[_KT], Variable[_VT]]`.",
    "warning_line": 354,
    "pred_top-1": {
      "pred": "from collections import OrderedDict\n\nif delegator.delegations is None:\n    delegator.delegations = Delegations(OrderedDict(), {})\n# put delegation last by default",
      "pred_parsed": "        from collections import OrderedDict\n        \n        if delegator.delegations is None:\n        delegator.delegations = Delegations(OrderedDict(), {})\n        # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "from collections import OrderedDict\n\nif delegator.delegations is None:\n    delegator.delegations = Delegations(OrderedDict(), {})\n# put delegation last by default",
      "pred_parsed": "        from collections import OrderedDict\n        \n        if delegator.delegations is None:\n        delegator.delegations = Delegations(OrderedDict(), {})\n        # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "from collections import OrderedDict\n\nif delegator.delegations is None:\n    delegator.delegations = Delegations(OrderedDict(), {})\n# put delegation last by default",
      "pred_parsed": "        from collections import OrderedDict\n        \n        if delegator.delegations is None:\n        delegator.delegations = Delegations(OrderedDict(), {})\n        # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "from collections import OrderedDict\n\nif delegator.delegations is None:\n    delegator.delegations = Delegations(OrderedDict(), {})\n# put delegation last by default",
      "pred_parsed": "        from collections import OrderedDict\n        \n        if delegator.delegations is None:\n        delegator.delegations = Delegations(OrderedDict(), {})\n        # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "from collections import OrderedDict\n\nif delegator.delegations is None:\n    delegator.delegations = Delegations(OrderedDict(), {})\n# put delegation last by default",
      "pred_parsed": "        from collections import OrderedDict\n        \n        if delegator.delegations is None:\n        delegator.delegations = Delegations(OrderedDict(), {})\n        # put delegation last by default\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "flairNLP/flair",
    "repo_dir": "./GitHub/GitHub/flairNLP-flair",
    "commit": "61d62a046c45382bc4a016e1acd88959c95f3054",
    "filename": "flair/trainers/trainer.py",
    "source_code": "                        if isinstance(loss, Tuple):\n                            average_over += loss[1]",
    "target_code": "\n                        if isinstance(loss, tuple):\n                            <IND>average_over += loss[1]\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `typing._SpecialForm`.",
    "warning_line": 472,
    "pred_top-1": {
      "pred": "if isinstance(loss, tuple):\n    average_over += loss[1]",
      "pred_parsed": "                        if isinstance(loss, tuple):\n                        average_over += loss[1]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if isinstance(loss, tuple):\n    average_over += loss[1]",
      "pred_parsed": "                        if isinstance(loss, tuple):\n                        average_over += loss[1]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if isinstance(loss, tuple):\n    average_over += loss[1]",
      "pred_parsed": "                        if isinstance(loss, tuple):\n                        average_over += loss[1]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if isinstance(loss, tuple):\n    average_over += loss[1]",
      "pred_parsed": "                        if isinstance(loss, tuple):\n                        average_over += loss[1]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if isinstance(loss, tuple):\n    average_over += loss[1]",
      "pred_parsed": "                        if isinstance(loss, tuple):\n                        average_over += loss[1]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "raiden-network/raiden",
    "repo_dir": "./GitHub/GitHub/raiden-network-raiden",
    "commit": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "filename": "raiden/transfer/state_change.py",
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            deposit_transaction=data['deposit_transaction'],",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelNewBalance.__init__` but got `int`.",
    "warning_line": 488,
    "pred_top-1": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),\ndeposit_transaction=data['deposit_transaction'],",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),\ndeposit_transaction=data['deposit_transaction'],",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),\ndeposit_transaction=data['deposit_transaction'],",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),\ndeposit_transaction=data['deposit_transaction'],",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),\ndeposit_transaction=data['deposit_transaction'],",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "flairNLP/flair",
    "repo_dir": "./GitHub/GitHub/flairNLP-flair",
    "commit": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402",
    "filename": "flair/models/diagnosis/distance_prediction_model.py",
    "source_code": "        for idx, conf in enumerate(softmax):\n            label_probs.append(Label(idx, conf.item()))\n        return label_probs",
    "target_code": "        for idx, conf in enumerate(softmax):\n            <IND>label_probs.append(Label(str(idx), conf.item()))\n        <DED>return label_probs\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `Label.__init__` but got `int`.",
    "warning_line": 488,
    "pred_top-1": {
      "pred": "for idx, conf in enumerate(softmax):\n    label_probs.append(Label(str(idx), conf.item()))\nreturn label_probs",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n        label_probs.append(Label(str(idx), conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "label_probs = []\nfor idx, conf in enumerate(softmax):\n    label_probs.append(Label(str(idx), conf.item()))\nreturn label_probs",
      "pred_parsed": "        label_probs = []\n        for idx, conf in enumerate(softmax):\n        label_probs.append(Label(str(idx), conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "for idx, conf in enumerate(softmax):\n    label_probs.append(Label(str(idx), conf.item()))\nreturn label_probs",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n        label_probs.append(Label(str(idx), conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for idx, conf in enumerate(softmax):\n    label_probs.append(Label(str(idx), conf.item()))\nreturn label_probs",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n        label_probs.append(Label(str(idx), conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "for idx, conf in enumerate(softmax):\n    label_probs.append(Label(str(idx), conf.item()))\nreturn label_probs",
      "pred_parsed": "        for idx, conf in enumerate(softmax):\n        label_probs.append(Label(str(idx), conf.item()))\n        return label_probs\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "raiden-network/raiden",
    "repo_dir": "./GitHub/GitHub/raiden-network-raiden",
    "commit": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "filename": "raiden/transfer/state.py",
    "source_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=int(data['channel_identifier']),\n        )",
    "target_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n        )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `RouteState.__init__` but got `int`.",
    "warning_line": 679,
    "pred_top-1": {
      "pred": "node_address=to_canonical_address(data['node_address']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),",
      "pred_parsed": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "node_address=to_canonical_address(data['node_address']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),",
      "pred_parsed": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "node_address=to_canonical_address(data['node_address']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),",
      "pred_parsed": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "node_address=to_canonical_address(data['node_address']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),",
      "pred_parsed": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "node_address=to_canonical_address(data['node_address']),\nchannel_identifier=ChannelID(int(data['channel_identifier'])),",
      "pred_parsed": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=ChannelID(int(data['channel_identifier'])),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Instagram/LibCST",
    "repo_dir": "./GitHub/GitHub/Instagram-LibCST",
    "commit": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8",
    "filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "source_code": "                new_value = self._handle_NameOrAttribute(value)\n            elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(value)",
    "target_code": "                <IND>new_value = self._handle_NameOrAttribute(value)\n            <DED>elif isinstance(value, cst.Subscript):\n                <IND>new_value = self._handle_Subscript(value)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `cst._nodes.expression.Subscript` for 1st positional only parameter to call `TypeCollector._handle_Subscript` but got `cst._nodes.expression.BaseExpression`.",
    "warning_line": 80,
    "pred_top-1": {
      "pred": "elif isinstance(value, cst.Subscript):\n    new_value = self._handle_Subscript(value)",
      "pred_parsed": "                elif isinstance(value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "elif isinstance(base.value, cst.Subscript):\n    new_value = self._handle_Subscript(base.value)",
      "pred_parsed": "                elif isinstance(base.value, cst.Subscript):\n                new_value = self._handle_Subscript(base.value)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "elif isinstance(value, cst.Subscript):\n    new_value = self._handle_Subscript(value)",
      "pred_parsed": "                elif isinstance(value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "elif isinstance(value, cst.Subscript):\n    new_value = self._handle_Subscript(value)",
      "pred_parsed": "                elif isinstance(value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "elif isinstance(value, cst.Subscript):\n    new_value = self._handle_Subscript(value)",
      "pred_parsed": "                elif isinstance(value, cst.Subscript):\n                new_value = self._handle_Subscript(value)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "facebookresearch/Mephisto",
    "repo_dir": "./GitHub/GitHub/facebookresearch-Mephisto",
    "commit": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "source_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                json_data = json.loads(json_fp)\n            for jd in json_data:",
    "target_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                <IND>json_data = json.load(json_fp)\n            <DED>for jd in json_data:\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `json.loads` but got `io.TextIOWrapper`.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n    json_str = json_fp.read()\n    json_data = json.loads(json_str)\nfor jd in json_data:",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n            json_str = json_fp.read()\n            json_data = json.loads(json_str)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n    json_str = json_fp.read()\n    json_data = json.loads(json_str)\nfor jd in json_data:",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n            json_str = json_fp.read()\n            json_data = json.loads(json_str)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n    json_data = json.load(json_fp)\nfor jd in json_data:",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n            json_data = json.load(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n    json_data = json.load(json_fp)\nfor jd in json_data:",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n            json_data = json.load(json_fp)\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n    json_data = json.loads(json_fp.read())\nfor jd in json_data:",
      "pred_parsed": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n            json_data = json.loads(json_fp.read())\n            for jd in json_data:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "NVIDIA-Merlin/Transformers4Rec",
    "repo_dir": "./GitHub/GitHub/NVIDIA-Merlin-Transformers4Rec",
    "commit": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7",
    "filename": "transformers4rec/torch/features/embedding.py",
    "source_code": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                tables[table.name] = table",
    "target_code": "            features_dim[name] = table.dim\n            if name not in tables:\n                <IND>tables[name] = table\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
    "warning_line": 76,
    "pred_top-1": {
      "pred": "if table.name is not None and table.name not in tables:\n                    tables[table.name] = table",
      "pred_parsed": "            if table.name is not None and table.name not in tables:\n            tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if table.name is not None:\n                tables[table.name] = table",
      "pred_parsed": "            if table.name is not None:\n            tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "features_dim[name] = table.dim\nif table.name is not None and table.name not in tables:\n    tables[table.name] = table",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None and table.name not in tables:\n            tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if table.name is not None and table.name not in tables:\n                    tables[table.name] = table",
      "pred_parsed": "            if table.name is not None and table.name not in tables:\n            tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "features_dim[name] = table.dim\nif table.name is not None and table.name not in tables:\n    tables[table.name] = table",
      "pred_parsed": "            features_dim[name] = table.dim\n            if table.name is not None and table.name not in tables:\n            tables[table.name] = table\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "spesmilo/electrum",
    "repo_dir": "./GitHub/GitHub/spesmilo-electrum",
    "commit": "7b18c91b74bbebfe56ba547080ab29775e42feb2",
    "filename": "electrum/lnpeer.py",
    "source_code": "            current_commitment_signature=None,\n            current_htlc_signatures=[],\n        )",
    "target_code": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n        )\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `bytes` for 16th parameter `current_htlc_signatures` to call `LocalConfig.__init__` but got `List[Variable[_T]]`.",
    "warning_line": 477,
    "pred_top-1": {
      "pred": "current_commitment_signature=None,\ncurrent_htlc_signatures=b'',",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "current_commitment_signature=None,\ncurrent_htlc_signatures=b'',",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "current_commitment_signature=None,\ncurrent_htlc_signatures=b'',",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "current_commitment_signature=None,\ncurrent_htlc_signatures=b'',",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "current_commitment_signature=None,\ncurrent_htlc_signatures=b'',",
      "pred_parsed": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Mic92/nixpkgs-review",
    "repo_dir": "./GitHub/GitHub/Mic92-nixpkgs-review",
    "commit": "27cba6e4ff24dd074fa0e030db49f9f0656f264a",
    "filename": "nixpkgs_review/review.py",
    "source_code": "    with proc as nix_env:\n        return parse_packages_xml(nix_env.stdout)",
    "target_code": "    with proc as nix_env:\n        <IND>assert nix_env.stdout\n        return parse_packages_xml(nix_env.stdout)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `IO[bytes]` for 1st positional only parameter to call `parse_packages_xml` but got `Optional[IO[typing.Any]]`.",
    "warning_line": 258,
    "pred_top-1": {
      "pred": "with proc as nix_env:\n    return parse_packages_xml(nix_env.stdout.read())",
      "pred_parsed": "    with proc as nix_env:\n    return parse_packages_xml(nix_env.stdout.read())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "with proc as nix_env:\n    return parse_packages_xml(nix_env.stdout.read())",
      "pred_parsed": "    with proc as nix_env:\n    return parse_packages_xml(nix_env.stdout.read())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "with proc as nix_env:\n    return parse_packages_xml(nix_env.stdout.read())",
      "pred_parsed": "    with proc as nix_env:\n    return parse_packages_xml(nix_env.stdout.read())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "with proc as nix_env:\n    return parse_packages_xml(nix_env.stdout.read())",
      "pred_parsed": "    with proc as nix_env:\n    return parse_packages_xml(nix_env.stdout.read())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "with proc as nix_env:\n    return parse_packages_xml(nix_env.stdout.read())",
      "pred_parsed": "    with proc as nix_env:\n    return parse_packages_xml(nix_env.stdout.read())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "irmen/Tale",
    "repo_dir": "./GitHub/GitHub/irmen-Tale",
    "commit": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "filename": "tale/charbuilder.py",
    "source_code": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)",
    "target_code": "        player.init_gender(self.gender)\n        title = \"\" if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 2nd positional only parameter to call `Player.init_names` but got `typing.Optional[str]`.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "player.init_gender(self.gender)\ntitle = self.title if self.title else self._name\nplayer.init_names(self._name, title, self.description, self.short_description)",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = self.title if self.title else self._name\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "player.init_gender(self.gender)\ntitle = self._name if self.title is None else self.title\nplayer.init_names(self._name, title, self.description, self.short_description)",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = self._name if self.title is None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "player.init_gender(self.gender)\ntitle = self._name if self.title is None else self.title\nplayer.init_names(self._name, title, self.description, self.short_description)",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = self._name if self.title is None else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "player.init_gender(self.gender)\ntitle = str(None) if self.title == self._name else self.title\nplayer.init_names(self._name, title, self.description, self.short_description)",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = str(None) if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "player.init_gender(self.gender)\ntitle = str(None) if self.title == self._name else self.title\nplayer.init_names(self._name, title, self.description, self.short_description)",
      "pred_parsed": "        player.init_gender(self.gender)\n        title = str(None) if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "edgedb/edgedb",
    "repo_dir": "./GitHub/GitHub/edgedb-edgedb",
    "commit": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "filename": "edb/edgeql/compiler/expr.py",
    "source_code": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)",
    "target_code": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `qlast.IsOp` for 1st positional only parameter to call `compile_type_check_op` but got `qlast.Base`.",
    "warning_line": 91,
    "pred_top-1": {
      "pred": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\nop_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\nop_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\nop_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\nop_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    op_node = compile_type_check_op(expr, ctx=ctx)",
      "pred_parsed": "def compile_IsOp(\nexpr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\nop_node = compile_type_check_op(expr, ctx=ctx)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "RasaHQ/rasa",
    "repo_dir": "./GitHub/GitHub/RasaHQ-rasa",
    "commit": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "filename": "rasa_nlu/model.py",
    "source_code": "        for component in self.pipeline:\n            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)\n            updates = component.pipeline_init(*args)",
    "target_code": "        for component in self.pipeline:\n            <IND>args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n            updates = component.pipeline_init(*args)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Dict[str, typing.Any]` for 3rd positional only parameter to call `rasa_nlu.components.fill_args` but got `RasaNLUConfig`.",
    "warning_line": 175,
    "pred_top-1": {
      "pred": "for component in self.pipeline:\n    args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n    updates = component.pipeline_init(*args)",
      "pred_parsed": "        for component in self.pipeline:\n        args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n        updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "for component in self.pipeline:\n    args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n    updates = component.pipeline_init(*args)",
      "pred_parsed": "        for component in self.pipeline:\n        args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n        updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "for component in self.pipeline:\n    args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n    updates = component.pipeline_init(*args)",
      "pred_parsed": "        for component in self.pipeline:\n        args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n        updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for component in self.pipeline:\n    args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n    updates = component.pipeline_init(*args)",
      "pred_parsed": "        for component in self.pipeline:\n        args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n        updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "for component in self.pipeline:\n    args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n    updates = component.pipeline_init(*args)",
      "pred_parsed": "        for component in self.pipeline:\n        args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n        updates = component.pipeline_init(*args)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ConsenSys/mythril",
    "repo_dir": "./GitHub/GitHub/ConsenSys-mythril",
    "commit": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "filename": "mythril/laser/ethereum/instructions.py",
    "source_code": "                new = Or(new, key_argument != index_argument)",
    "target_code": "\n                new = Or(new, cast(Bool, key_argument != index_argument))\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `mythril.laser.smt.bool.Bool` for 2nd positional only parameter to call `mythril.laser.smt.bool.Or` but got `bool`.",
    "warning_line": 1374,
    "pred_top-1": {
      "pred": "from mythril.laser.smt import Bool\n                new = Or(new, Bool(key_argument != index_argument))",
      "pred_parsed": "                from mythril.laser.smt import Bool\n                new = Or(new, Bool(key_argument != index_argument))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "from mythril.laser.smt import symbol_factory\n\nkey_argument = symbol_factory.BitVecSym('key_argument', 256)\nindex_argument = symbol_factory.BitVecSym('index_argument', 256)\n\nnew = Or(new, key_argument != index_argument)",
      "pred_parsed": "                from mythril.laser.smt import symbol_factory\n                \n                key_argument = symbol_factory.BitVecSym('key_argument', 256)\n                index_argument = symbol_factory.BitVecSym('index_argument', 256)\n                \n                new = Or(new, key_argument != index_argument)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "new = Or(new, Bool(key_argument != index_argument))",
      "pred_parsed": "                new = Or(new, Bool(key_argument != index_argument))\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "from mythril.laser.smt import symbol_factory\n\nkey_argument = symbol_factory.BitVecSym(\"key_argument\", 256)\nindex_argument = symbol_factory.BitVecSym(\"index_argument\", 256)\n\nnew = Or(key_argument, index_argument)\nnew = Or(new, key_argument != index_argument)",
      "pred_parsed": "                from mythril.laser.smt import symbol_factory\n                \n                key_argument = symbol_factory.BitVecSym(\"key_argument\", 256)\n                index_argument = symbol_factory.BitVecSym(\"index_argument\", 256)\n                \n                new = Or(key_argument, index_argument)\n                new = Or(new, key_argument != index_argument)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "from mythril.laser.smt import symbol_factory\n\nkey_argument = symbol_factory.BitVecSym(\"key_argument\", 256)\nindex_argument = symbol_factory.BitVecSym(\"index_argument\", 256)\n\nnew = Or(key_argument, index_argument)\nnew = Or(new, key_argument != index_argument)",
      "pred_parsed": "                from mythril.laser.smt import symbol_factory\n                \n                key_argument = symbol_factory.BitVecSym(\"key_argument\", 256)\n                index_argument = symbol_factory.BitVecSym(\"index_argument\", 256)\n                \n                new = Or(key_argument, index_argument)\n                new = Or(new, key_argument != index_argument)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "chanzuckerberg/miniwdl",
    "repo_dir": "./GitHub/GitHub/chanzuckerberg-miniwdl",
    "commit": "1b3f26c69b306c12226eaa02145072af0de12839",
    "filename": "WDL/StdLib.py",
    "source_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
    "target_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
    "warning_line": 180,
    "pred_top-1": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n(\"read_map\", [T.File()], T.Map(T.Any(), T.Any()), _notimpl),\n(\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(T.Any(), T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n(\"read_map\", [T.File()], T.Map(T.Any(), T.Any()), _notimpl),\n(\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(T.Any(), T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n(\"read_map\", [T.File()], T.Map(T.Any(), T.Any()), _notimpl),\n(\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(T.Any(), T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n                (\"read_map\", [T.File()], T.Map(T.Any(), T.Any()), _notimpl),\n                (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(T.Any(), T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n(\"read_map\", [T.File()], T.Map(T.Any(), T.Any()), _notimpl),\n(\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),",
      "pred_parsed": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(T.Any(), T.Any()), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "raiden-network/raiden",
    "repo_dir": "./GitHub/GitHub/raiden-network-raiden",
    "commit": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "filename": "raiden/transfer/events.py",
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=PaymentID(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `TokenAmount` for 4th parameter `amount` to call `EventPaymentReceivedSuccess.__init__` but got `int`.",
    "warning_line": 598,
    "pred_top-1": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nidentifier=int(data['identifier']),\namount=TokenAmount(int(data['amount'])),\ninitiator=to_canonical_address(data['initiator']),",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nidentifier=int(data['identifier']),\namount=TokenAmount(int(data['amount']), data['token_address']),\ninitiator=to_canonical_address(data['initiator']),",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=TokenAmount(int(data['amount']), data['token_address']),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nidentifier=int(data['identifier']),\namount=TokenAmount(int(data['amount'])),\ninitiator=to_canonical_address(data['initiator']),",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nidentifier=int(data['identifier']),\namount=TokenAmount(int(data['amount'])),\ninitiator=to_canonical_address(data['initiator']),",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "token_network_identifier=to_canonical_address(data['token_network_identifier']),\nidentifier=int(data['identifier']),\namount=TokenAmount(int(data['amount'])),\ninitiator=to_canonical_address(data['initiator']),",
      "pred_parsed": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "tensorflow/datasets",
    "repo_dir": "./GitHub/GitHub/tensorflow-datasets",
    "commit": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f",
    "filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "source_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),",
    "target_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `frozenset[str]` for 5th parameter `step_metadata_keys` to call `BuilderConfig.__init__` but got `typing.Set[str]`.",
    "warning_line": 210,
    "pred_top-1": {
      "pred": "file_suffix='_medium_expert-v2',\nstep_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),",
      "pred_parsed": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "file_suffix='_medium_expert-v2',\nstep_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),",
      "pred_parsed": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),",
      "pred_parsed": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n        ),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),",
      "pred_parsed": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n        ),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),",
      "pred_parsed": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n        ),\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": false,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "intel/dffml",
    "repo_dir": "./GitHub/GitHub/intel-dffml",
    "commit": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3",
    "filename": "dffml/operation/output.py",
    "source_code": "group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)",
    "target_code": "\n<DED><DED>group_by_spec = Definition(name=\"group_by_spec\", primitive=\"Dict[str, Any]\")\n\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `NamedTuple` for 3rd parameter `spec` to call `Definition.__init__` but got `typing.Type[GroupBySpec]`.",
    "warning_line": 39,
    "pred_top-1": {
      "pred": "group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec()\n)",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec()\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec()\n)",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec()\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec()\n)",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec()\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec()\n)",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec()\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec()\n)",
      "pred_parsed": "group_by_spec = Definition(\nname=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec()\n)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "olist/correios",
    "repo_dir": "./GitHub/GitHub/olist-correios",
    "commit": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457",
    "filename": "correios/client.py",
    "source_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        from_zip_code = ZipCode(from_zip_code)\n        to_zip_code = ZipCode(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",",
    "target_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        <IND>from_zip_code = ZipCode.create(from_zip_code)\n        to_zip_code = ZipCode.create(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `ZipCode.__init__` but got `Union[ZipCode, str]`.",
    "warning_line": 326,
    "pred_top-1": {
      "pred": "def verifica_disponibilidade_servico(self, from_zip_code: Union[ZipCode, str], to_zip_code: Union[ZipCode, str]) -> bool:\n    if isinstance(from_zip_code, str):\n        from_zip_code = ZipCode(from_zip_code)\n    if isinstance(to_zip_code, str):\n        to_zip_code = ZipCode(to_zip_code)\n    result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "pred_parsed": "                                    def verifica_disponibilidade_servico(self, from_zip_code: Union[ZipCode, str], to_zip_code: Union[ZipCode, str]) -> bool:\n                                    if isinstance(from_zip_code, str):\n                                    from_zip_code = ZipCode(from_zip_code)\n                                    if isinstance(to_zip_code, str):\n                                    to_zip_code = ZipCode(to_zip_code)\n                                    result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if isinstance(from_zip_code, str):\n    from_zip_code = ZipCode(from_zip_code)\nif isinstance(to_zip_code, str):\n    to_zip_code = ZipCode(to_zip_code)\nresult = self._auth_call(\"verificaDisponibilidadeServico\",",
      "pred_parsed": "                                    if isinstance(from_zip_code, str):\n                                    from_zip_code = ZipCode(from_zip_code)\n                                    if isinstance(to_zip_code, str):\n                                    to_zip_code = ZipCode(to_zip_code)\n                                    result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if isinstance(from_zip_code, ZipCode):\n    from_zip_code = from_zip_code\nelse:\n    from_zip_code = ZipCode(from_zip_code)\n\nif isinstance(to_zip_code, ZipCode):\n    to_zip_code = to_zip_code\nelse:\n    to_zip_code = ZipCode(to_zip_code)\n\nresult = self._auth_call(\"verificaDisponibilidadeServico\",",
      "pred_parsed": "                                    if isinstance(from_zip_code, ZipCode):\n                                    from_zip_code = from_zip_code\n                                    else:\n                                    from_zip_code = ZipCode(from_zip_code)\n                                    \n                                    if isinstance(to_zip_code, ZipCode):\n                                    to_zip_code = to_zip_code\n                                    else:\n                                    to_zip_code = ZipCode(to_zip_code)\n                                    \n                                    result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if isinstance(from_zip_code, ZipCode):\n    from_zip_code = from_zip_code\nelse:\n    from_zip_code = ZipCode(from_zip_code)\n\nif isinstance(to_zip_code, ZipCode):\n    to_zip_code = to_zip_code\nelse:\n    to_zip_code = ZipCode(to_zip_code)\n\nresult = self._auth_call(\"verificaDisponibilidadeServico\",",
      "pred_parsed": "                                    if isinstance(from_zip_code, ZipCode):\n                                    from_zip_code = from_zip_code\n                                    else:\n                                    from_zip_code = ZipCode(from_zip_code)\n                                    \n                                    if isinstance(to_zip_code, ZipCode):\n                                    to_zip_code = to_zip_code\n                                    else:\n                                    to_zip_code = ZipCode(to_zip_code)\n                                    \n                                    result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def check_availability(self, from_zip_code: Union[ZipCode, str],\n                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        if isinstance(from_zip_code, str):\n            from_zip_code = ZipCode(from_zip_code)\n        if isinstance(to_zip_code, str):\n            to_zip_code = ZipCode(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",",
      "pred_parsed": "                                    def check_availability(self, from_zip_code: Union[ZipCode, str],\n                                    to_zip_code: Union[ZipCode, str]) -> bool:\n                                    if isinstance(from_zip_code, str):\n                                    from_zip_code = ZipCode(from_zip_code)\n                                    if isinstance(to_zip_code, str):\n                                    to_zip_code = ZipCode(to_zip_code)\n                                    result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ktbyers/netmiko",
    "repo_dir": "./GitHub/GitHub/ktbyers-netmiko",
    "commit": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8",
    "filename": "netmiko/dell/dell_isilon_ssh.py",
    "source_code": "        if not self.check_enable_mode():\n            output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):",
    "target_code": "        if not self.check_enable_mode():\n            <IND>new_data = self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            assert isinstance(new_data, str)\n            output += new_data\n            if re.search(pattern, output, flags=re_flags):\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `str.__add__` but got `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any], str]`.",
    "warning_line": 65,
    "pred_top-1": {
      "pred": "if not self.check_enable_mode():\n    output = str(output) + self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n    )\n    if re.search(pattern, output, flags=re_flags):",
      "pred_parsed": "        if not self.check_enable_mode():\n        output = str(output) + self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n        )\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if not self.check_enable_mode():\n    output = str(output) + self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n    )\n    if re.search(pattern, output, flags=re_flags):",
      "pred_parsed": "        if not self.check_enable_mode():\n        output = str(output) + self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n        )\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if not self.check_enable_mode():\n    output = str(output) + self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n    )\n    if re.search(pattern, output, flags=re_flags):",
      "pred_parsed": "        if not self.check_enable_mode():\n        output = str(output) + self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n        )\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if not self.check_enable_mode():\n    output = str(output) + self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n    )\n    if re.search(pattern, output, flags=re_flags):",
      "pred_parsed": "        if not self.check_enable_mode():\n        output = str(output) + self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n        )\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if not self.check_enable_mode():\n    output = str(output) + self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n    )\n    if re.search(pattern, output, flags=re_flags):",
      "pred_parsed": "        if not self.check_enable_mode():\n        output = str(output) + self.send_command_timing(\n        cmd, strip_prompt=False, strip_command=False\n        )\n        if re.search(pattern, output, flags=re_flags):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "optuna/optuna",
    "repo_dir": "./GitHub/GitHub/optuna-optuna",
    "commit": "e17476d91462f955a7bb3793ab67c32fa4107afb",
    "filename": "optuna/storages/cached_storage.py",
    "source_code": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal",
    "target_code": "                dists[param_name] = distribution\n                cached_trial.distributions = dists\n                updates.params[param_name] = param_value_internal\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `distributions.BaseDistribution` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, distributions.BaseDistribution]`.",
    "warning_line": 182,
    "pred_top-1": {
      "pred": "dists[param_name] = distribution\ncached_trial.distributions[param_name] = distribution\nupdates.params[param_name] = param_value_internal",
      "pred_parsed": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = distribution\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "dists = {param_name: distribution}\ncached_trial.distributions.update(dists)\nupdates.params[param_name] = param_value_internal",
      "pred_parsed": "                dists = {param_name: distribution}\n                cached_trial.distributions.update(dists)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "dists = {param_name: distribution}\ncached_trial.distributions.update(dists)\nupdates.params[param_name] = param_value_internal",
      "pred_parsed": "                dists = {param_name: distribution}\n                cached_trial.distributions.update(dists)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "dists = {param_name: distribution}\ncached_trial.distributions.update(dists)\nupdates.params[param_name] = param_value_internal",
      "pred_parsed": "                dists = {param_name: distribution}\n                cached_trial.distributions.update(dists)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "dists = {param_name: distribution}\ncached_trial.distributions.update(dists)\nupdates.params[param_name] = param_value_internal",
      "pred_parsed": "                dists = {param_name: distribution}\n                cached_trial.distributions.update(dists)\n                updates.params[param_name] = param_value_internal\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "apache/airflow",
    "repo_dir": "./GitHub/GitHub/apache-airflow",
    "commit": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0",
    "filename": "airflow/security/kerberos.py",
    "source_code": "        time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:",
    "target_code": "        <IND>time.sleep(1.5)\n        ret = perform_krb181_workaround(cmd_principal)\n        if exit_on_fail and ret != 0:\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `str` for 1st positional only parameter to call `perform_krb181_workaround` but got `Optional[str]`.",
    "warning_line": 117,
    "pred_top-1": {
      "pred": "time.sleep(1.5)\nif principal:\n    ret = perform_krb181_workaround(principal)\n    if exit_on_fail and ret != 0:",
      "pred_parsed": "        time.sleep(1.5)\n        if principal:\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "time.sleep(1.5)\nif principal is not None:\n    ret = perform_krb181_workaround(principal)\n    if exit_on_fail and ret != 0:",
      "pred_parsed": "        time.sleep(1.5)\n        if principal is not None:\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "time.sleep(1.5)\nif principal is not None:\n    ret = perform_krb181_workaround(principal)\n    if exit_on_fail and ret != 0:",
      "pred_parsed": "        time.sleep(1.5)\n        if principal is not None:\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "time.sleep(1.5)\nif principal is not None:\n    ret = perform_krb181_workaround(str(principal))\n    if exit_on_fail and ret != 0:",
      "pred_parsed": "        time.sleep(1.5)\n        if principal is not None:\n        ret = perform_krb181_workaround(str(principal))\n        if exit_on_fail and ret != 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "time.sleep(1.5)\nif principal is not None:\n    ret = perform_krb181_workaround(str(principal))\nelse:\n    ret = perform_krb181_workaround()\nif exit_on_fail and ret != 0:",
      "pred_parsed": "        time.sleep(1.5)\n        if principal is not None:\n        ret = perform_krb181_workaround(str(principal))\n        else:\n        ret = perform_krb181_workaround()\n        if exit_on_fail and ret != 0:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "paul-nameless/tg",
    "repo_dir": "./GitHub/GitHub/paul-nameless-tg",
    "commit": "b466724d058c15d999f2c9866aa7ba5e08308744",
    "filename": "tg/controllers.py",
    "source_code": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
    "target_code": "        <IND>chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not chat_id:\n            <IND>return\n        <DED>from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is None:\n            <IND>return\n        <DED>self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "warning_type": "Incompatible parameter type [6]",
    "warning_message": " Expected `int` for 1st positional only parameter to call `Tdlib.forward_msgs` but got `Optional[int]`.",
    "warning_line": 111,
    "pred_top-1": {
      "pred": "chat_id = self.model.chats.id_by_index(self.model.current_chat)\nif not self.model.yanked_msgs:\n    return\nfrom_chat_id, msg_ids = self.model.yanked_msgs\nif chat_id and from_chat_id and msg_ids:\n    self.tg.forward_msgs(int(chat_id), int(from_chat_id), msg_ids)",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n        return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if chat_id and from_chat_id and msg_ids:\n        self.tg.forward_msgs(int(chat_id), int(from_chat_id), msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "chat_id = self.model.chats.id_by_index(self.model.current_chat)\nif not self.model.yanked_msgs:\n    return\nfrom_chat_id, msg_ids = self.model.yanked_msgs\nif from_chat_id is not None:\n    self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n        return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is not None:\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "chat_id = self.model.chats.id_by_index(self.model.current_chat)\nif not self.model.yanked_msgs:\n    return\nfrom_chat_id, msg_ids = self.model.yanked_msgs\nif chat_id is not None and from_chat_id is not None and msg_ids is not None:\n    self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n        return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if chat_id is not None and from_chat_id is not None and msg_ids is not None:\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "chat_id = self.model.chats.id_by_index(self.model.current_chat)\nif not self.model.yanked_msgs:\n    return\nfrom_chat_id, msg_ids = self.model.yanked_msgs\nif from_chat_id is not None and chat_id is not None:\n    self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n        return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is not None and chat_id is not None:\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "chat_id = self.model.chats.id_by_index(self.model.current_chat)\nif not self.model.yanked_msgs:\n    return\nfrom_chat_id, msg_ids = self.model.yanked_msgs\nif from_chat_id is not None and msg_ids is not None:\n    self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
      "pred_parsed": "        chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n        return\n        from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is not None and msg_ids is not None:\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_unique_constraints.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    company: ormar.String(max_length=200)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    company = ormar.String(max_length=200)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
    "warning_line": 24,
    "pred_top-1": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)\ncompany: ormar.StringField(max_length=200)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n    company: ormar.StringField(max_length=200)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)\ncompany: ormar.StringField(max_length=200)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n    company: ormar.StringField(max_length=200)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)\ncompany: ormar.StringField(max_length=200)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n    company: ormar.StringField(max_length=200)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)\ncompany: ormar.StringField(max_length=200)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n    company: ormar.StringField(max_length=200)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)\ncompany: ormar.StringField(max_length=200)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n    company: ormar.StringField(max_length=200)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "tensorflow/tfx",
    "repo_dir": "./GitHub/GitHub/tensorflow-tfx",
    "commit": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "source_code": "class BaseExampleGenExecutor(\n    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
    "target_code": "\n<DED>class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor, abc.ABC):\n  <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `six.with_metaclass(abc.ABCMeta, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)` is not a valid type.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "class BaseExampleGenExecutor(\n    six.with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
      "pred_parsed": "class BaseExampleGenExecutor(\nsix.with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "class BaseExampleGenExecutor(\n    six.with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
      "pred_parsed": "class BaseExampleGenExecutor(\nsix.with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "class BaseExampleGenExecutor(\n    six.with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
      "pred_parsed": "class BaseExampleGenExecutor(\nsix.with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "class BaseExampleGenExecutor(\n    six.with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
      "pred_parsed": "class BaseExampleGenExecutor(\nsix.with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "class BaseExampleGenExecutor(six.with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
      "pred_parsed": "class BaseExampleGenExecutor(six.with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "tensorflow/tfx",
    "repo_dir": "./GitHub/GitHub/tensorflow-tfx",
    "commit": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "filename": "tfx/tools/cli/handler/base_handler.py",
    "source_code": "class BaseHandler(with_metaclass(abc.ABCMeta, object)):",
    "target_code": "\nclass BaseHandler(abc.ABC):\n  <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `six.with_metaclass(abc.ABCMeta, object)` is not a valid type.",
    "warning_line": 36,
    "pred_top-1": {
      "pred": "import six\nclass BaseHandler(six.with_metaclass(abc.ABCMeta, object)):",
      "pred_parsed": "import six\nclass BaseHandler(six.with_metaclass(abc.ABCMeta, object)):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-2": {
      "pred": "import six\n\nclass BaseHandler(six.with_metaclass(abc.ABCMeta, object)):",
      "pred_parsed": "import six\n\nclass BaseHandler(six.with_metaclass(abc.ABCMeta, object)):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-3": {
      "pred": "import six\nclass BaseHandler(six.with_metaclass(abc.ABCMeta, object)):",
      "pred_parsed": "import six\nclass BaseHandler(six.with_metaclass(abc.ABCMeta, object)):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-4": {
      "pred": "import six\n\nclass BaseHandler(six.with_metaclass(abc.ABCMeta, object)):",
      "pred_parsed": "import six\n\nclass BaseHandler(six.with_metaclass(abc.ABCMeta, object)):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "pred_top-5": {
      "pred": "import six\n\nclass BaseHandler(six.with_metaclass(abc.ABCMeta, object)):",
      "pred_parsed": "import six\n\nclass BaseHandler(six.with_metaclass(abc.ABCMeta, object)):\n",
      "warning_removed": false,
      "fail_reason": "Error Still Exists"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "cgre-aachen/gempy",
    "repo_dir": "./GitHub/GitHub/cgre-aachen-gempy",
    "commit": "a0a4e5bdf417fd13741fd5b29916845f93dc2098",
    "filename": "gempy/assets/topology.py",
    "source_code": "        unconf_lith_id: int,\n        edges: Array[int, ..., 2],\n        centroids: Dict[int, np.ndarray]",
    "target_code": "        unconf_lith_id: int,\n        edges: np.ndarray,\n        centroids: Dict[int, np.ndarray]\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `nptyping.Array[(int, ..., 2)]` is not a valid type.",
    "warning_line": 361,
    "pred_top-1": {
      "pred": "unconf_lith_id: int,\n                edges: np.ndarray[int, ..., 2],\n                centroids: Dict[int, np.ndarray]",
      "pred_parsed": "        unconf_lith_id: int,\n        edges: np.ndarray[int, ..., 2],\n        centroids: Dict[int, np.ndarray]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "unconf_lith_id: int,\nedges: np.ndarray[int, ..., 2],\ncentroids: Dict[int, np.ndarray]",
      "pred_parsed": "        unconf_lith_id: int,\n        edges: np.ndarray[int, ..., 2],\n        centroids: Dict[int, np.ndarray]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "unconf_lith_id: int,\nedges: np.ndarray[int, ..., 2],\ncentroids: Dict[int, np.ndarray]",
      "pred_parsed": "        unconf_lith_id: int,\n        edges: np.ndarray[int, ..., 2],\n        centroids: Dict[int, np.ndarray]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "unconf_lith_id: int,\nedges: np.ndarray[int, ..., 2],\ncentroids: Dict[int, np.ndarray]",
      "pred_parsed": "        unconf_lith_id: int,\n        edges: np.ndarray[int, ..., 2],\n        centroids: Dict[int, np.ndarray]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "unconf_lith_id: int,\nedges: np.ndarray[int, ..., 2],\ncentroids: Dict[int, np.ndarray]",
      "pred_parsed": "        unconf_lith_id: int,\n        edges: np.ndarray[int, ..., 2],\n        centroids: Dict[int, np.ndarray]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "missionpinball/mpf",
    "repo_dir": "./GitHub/GitHub/missionpinball-mpf",
    "commit": "15afcda17766968f420d53b885f8eca0cf3b40a7",
    "filename": "mpf/core/mode_controller.py",
    "source_code": "RemoteMethod = namedtuple('RemoteMethod',\n                          'method config_section kwargs priority',\n                          verbose=False)",
    "target_code": "\nRemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'])\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `typing.Final[False]` is not a valid type.",
    "warning_line": 12,
    "pred_top-1": {
      "pred": "RemoteMethod = namedtuple('RemoteMethod',\n ('method', 'config_section', 'kwargs', 'priority'),\n verbose=False)",
      "pred_parsed": "RemoteMethod = namedtuple('RemoteMethod',\n('method', 'config_section', 'kwargs', 'priority'),\nverbose=False)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "RemoteMethod = namedtuple('RemoteMethod',\n                         ('method', 'config_section', 'kwargs', 'priority'),\n                         verbose=False)",
      "pred_parsed": "RemoteMethod = namedtuple('RemoteMethod',\n('method', 'config_section', 'kwargs', 'priority'),\nverbose=False)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "RemoteMethod = namedtuple('RemoteMethod', ('method', 'config_section', 'kwargs', 'priority'), verbose=False)",
      "pred_parsed": "RemoteMethod = namedtuple('RemoteMethod', ('method', 'config_section', 'kwargs', 'priority'), verbose=False)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "RemoteMethod = namedtuple('RemoteMethod',\n ('method', 'config_section', 'kwargs', 'priority'),\n verbose=False)",
      "pred_parsed": "RemoteMethod = namedtuple('RemoteMethod',\n('method', 'config_section', 'kwargs', 'priority'),\nverbose=False)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "RemoteMethod = namedtuple('RemoteMethod',\n ('method', 'config_section', 'kwargs', 'priority'),\n verbose=False)",
      "pred_parsed": "RemoteMethod = namedtuple('RemoteMethod',\n('method', 'config_section', 'kwargs', 'priority'),\nverbose=False)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_queryset_level_methods.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.Boolean(default=False)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    completed= ormar.Boolean(default=False)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.Boolean($parameter$default = False)` is not a valid type.",
    "warning_line": 37,
    "pred_top-1": {
      "pred": "id: ormar.Integer(primary_key=True)\ntext: ormar.String(max_length=500)\ncompleted: ormar.BooleanField(default=False)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.BooleanField(default=False)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.Integer(primary_key=True)\ntext: ormar.String(max_length=500)\ncompleted: ormar.BooleanField(default=False)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.BooleanField(default=False)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.Integer(primary_key=True)\ntext: ormar.String(max_length=500)\ncompleted: ormar.BooleanField(default=False)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.BooleanField(default=False)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.Integer(primary_key=True)\ntext: ormar.String(max_length=500)\ncompleted: ormar.BooleanField(default=False)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.BooleanField(default=False)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\ntext: ormar.String(max_length=500)\ncompleted: ormar.BooleanField(default=False)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.BooleanField(default=False)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "google/caliban",
    "repo_dir": "./GitHub/GitHub/google-caliban",
    "commit": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "filename": "caliban/gke/cluster.py",
    "source_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):",
    "target_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]:\n    <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `typing.Optional(kubernetes.client.V1Job)` is not a valid type.",
    "warning_line": 548,
    "pred_top-1": {
      "pred": "def create_tpu_job(\n      name: str,\n      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[kubernetes.client.V1Job]:",
      "pred_parsed": "      def create_tpu_job(\n      name: str,\n      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[kubernetes.client.V1Job]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def create_job(k: KubernetesClient,\n               preemptible_tpu: bool = True,\n               tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> typing.Optional[kubernetes.client.V1Job]:",
      "pred_parsed": "      def create_job(k: KubernetesClient,\n      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> typing.Optional[kubernetes.client.V1Job]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def create_job(\n      name: str,\n      namespace: str,\n      image: str,\n      command: List[str],\n      args: List[str],\n      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[kubernetes.client.V1Job]:",
      "pred_parsed": "      def create_job(\n      name: str,\n      namespace: str,\n      image: str,\n      command: List[str],\n      args: List[str],\n      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[kubernetes.client.V1Job]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def create_tpu_job(\n      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> typing.Optional[kubernetes.client.V1Job]:",
      "pred_parsed": "      def create_tpu_job(\n      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> typing.Optional[kubernetes.client.V1Job]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def create_tpu_job(\n      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> typing.Optional[kubernetes.client.V1Job]:",
      "pred_parsed": "      def create_tpu_job(\n      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> typing.Optional[kubernetes.client.V1Job]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jwkvam/bowtie",
    "repo_dir": "./GitHub/GitHub/jwkvam-bowtie",
    "commit": "34981bc0791798ec6a8261d14d7713b48c3e66a1",
    "filename": "bowtie/_component.py",
    "source_code": "# pylint: disable=too-few-public-methods\nclass Component(with_metaclass(_Maker, object)):",
    "target_code": "# pylint: disable=too-few-public-methods\n<DED><DED>class Component(metaclass=_Maker):\n    <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `future.utils.with_metaclass(bowtie._component._Maker, object)` is not a valid type.",
    "warning_line": 240,
    "pred_top-1": {
      "pred": "# pylint: disable=too-few-public-methods\nfrom future.utils import with_metaclass\n\nclass Component(with_metaclass(_Maker, object)):\n    pass",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nfrom future.utils import with_metaclass\n\nclass Component(with_metaclass(_Maker, object)):\npass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# pylint: disable=too-few-public-methods\nfrom future.utils import with_metaclass\n\nclass Component(with_metaclass(_Maker, object)):\n    pass",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nfrom future.utils import with_metaclass\n\nclass Component(with_metaclass(_Maker, object)):\npass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# pylint: disable=too-few-public-methods\nfrom future.utils import with_metaclass\n\nclass Component(with_metaclass(_Maker, object)):\n    pass",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nfrom future.utils import with_metaclass\n\nclass Component(with_metaclass(_Maker, object)):\npass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# pylint: disable=too-few-public-methods\nfrom future.utils import with_metaclass\n\nclass Component(with_metaclass(_Maker, object)):",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nfrom future.utils import with_metaclass\n\nclass Component(with_metaclass(_Maker, object)):\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# pylint: disable=too-few-public-methods\nfrom future.utils import with_metaclass\n\nclass Component(with_metaclass(_Maker, object)):\n    pass",
      "pred_parsed": "# pylint: disable=too-few-public-methods\nfrom future.utils import with_metaclass\n\nclass Component(with_metaclass(_Maker, object)):\npass\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": true
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "docs_src/fastapi/docs001.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
    "warning_line": 35,
    "pred_top-1": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "golemfactory/clay",
    "repo_dir": "./GitHub/GitHub/golemfactory-clay",
    "commit": "7af4b37a587e7179390f0d24a108365fd0545eb6",
    "filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "source_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):",
    "target_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n        <IND>",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `(typing.Optional[bool], typing.Optional[typing.Match])` is not a valid type.",
    "warning_line": 24,
    "pred_top-1": {
      "pred": "def check_messages(\n        awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:",
      "pred_parsed": "            def check_messages(\n            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def check_messages(\n        awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:",
      "pred_parsed": "            def check_messages(\n            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def check_messages(\n        awaited_messages: typing.Optional[list] = None\n    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):\n        if awaited_messages is None:\n            return None, None\n        else:\n            for message in awaited_messages:\n                match = re.search(message, 'Hello World!')\n                if match is not None:\n                    return True, match\n            return False, None",
      "pred_parsed": "            def check_messages(\n            awaited_messages: typing.Optional[list] = None\n            ) -> (typing.Optional[bool], typing.Optional[typing.Match]):\n            if awaited_messages is None:\n            return None, None\n            else:\n            for message in awaited_messages:\n            match = re.search(message, 'Hello World!')\n            if match is not None:\n            return True, match\n            return False, None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def process_messages(\n            awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:",
      "pred_parsed": "            def process_messages(\n            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def check_message(\n        message: str,\n        awaited_messages: typing.Optional[list] = None\n) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:",
      "pred_parsed": "            def check_message(\n            message: str,\n            awaited_messages: typing.Optional[list] = None\n            ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_more_same_table_joins.py",
    "source_code": "    id: ormar.Integer(primary_key=True, autoincrement=False)\n    name: ormar.String(max_length=100)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True, autoincrement=False)\n    name = ormar.String(max_length=100)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.Integer($parameter$primary_key = True, $parameter$autoincrement = False)` is not a valid type.",
    "warning_line": 20,
    "pred_top-1": {
      "pred": "id: ormar.IntegerField(primary_key=True, autoincrement=False)\n                name: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True, autoincrement=False)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.IntegerField(primary_key=True, autoincrement=False)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True, autoincrement=False)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.IntegerField(primary_key=True, autoincrement=False)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True, autoincrement=False)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.IntegerField(primary_key=True, autoincrement=False)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True, autoincrement=False)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.IntegerField(primary_key=True, autoincrement=False)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True, autoincrement=False)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "BurnySc2/python-sc2",
    "repo_dir": "./GitHub/GitHub/BurnySc2-python-sc2",
    "commit": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53",
    "filename": "sc2/position.py",
    "source_code": "    @staticmethod\n    def center(a: [\"Point2\"]) -> \"Point2\":\n        \"\"\" Returns the central point for points in list \"\"\"",
    "target_code": "    <DED>@staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        <IND>\"\"\" Returns the central point for points in list \"\"\"\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `[sc2.position.Point2]` is not a valid type.",
    "warning_line": 240,
    "pred_top-1": {
      "pred": "@staticmethod\ndef center(a: [sc2.position.Point2]) -> sc2.position.Point2:\n    \"\"\" Returns the central point for points in list \"\"\"",
      "pred_parsed": "    @staticmethod\n    def center(a: [sc2.position.Point2]) -> sc2.position.Point2:\n    \"\"\" Returns the central point for points in list \"\"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "@staticmethod\ndef center(a: [sc2.position.Point2]) -> sc2.position.Point2:\n    \"\"\" Returns the central point for points in list \"\"\"",
      "pred_parsed": "    @staticmethod\n    def center(a: [sc2.position.Point2]) -> sc2.position.Point2:\n    \"\"\" Returns the central point for points in list \"\"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "@staticmethod\ndef center(a: List[sc2.position.Point2]) -> sc2.position.Point2:\n    \"\"\" Returns the central point for points in list \"\"\"",
      "pred_parsed": "    @staticmethod\n    def center(a: List[sc2.position.Point2]) -> sc2.position.Point2:\n    \"\"\" Returns the central point for points in list \"\"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "@staticmethod\ndef center(a: [sc2.position.Point2]) -> sc2.position.Point2:\n    \"\"\" Returns the central point for points in list \"\"\"",
      "pred_parsed": "    @staticmethod\n    def center(a: [sc2.position.Point2]) -> sc2.position.Point2:\n    \"\"\" Returns the central point for points in list \"\"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "@staticmethod\ndef center(a: List[sc2.position.Point2]) -> sc2.position.Point2:\n    \"\"\" Returns the central point for points in list \"\"\"",
      "pred_parsed": "    @staticmethod\n    def center(a: List[sc2.position.Point2]) -> sc2.position.Point2:\n    \"\"\" Returns the central point for points in list \"\"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_more_reallife_fastapi.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
    "warning_line": 49,
    "pred_top-1": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey('Category', nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey('Category', nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "docs_src/fields/docs003.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
    "warning_line": 16,
    "pred_top-1": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "scikit-learn-contrib/MAPIE",
    "repo_dir": "./GitHub/GitHub/scikit-learn-contrib-MAPIE",
    "commit": "8ffdc639645c54503ea4387c2a0d8e38e317305f",
    "filename": "mapie/tests/test_classification.py",
    "source_code": "    def predict(self, X: np.ndarray) -> np.ndarray():\n        return np.array([1, 2, 1])\n\n    def predict_proba(self, X: np.ndarray) -> np.ndarray():\n        if np.max(X) <= 2:",
    "target_code": "\n    <DED>def predict(self, X: np.ndarray) -> np.ndarray:\n        <IND>return np.array([1, 2, 1])\n\n    <DED>def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        <IND>if np.max(X) <= 2:\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `np.ndarray()` is not a valid type.",
    "warning_line": 116,
    "pred_top-1": {
      "pred": "def predict(self, X: np.ndarray) -> np.ndarray:\n    return np.array([1, 2, 1])\n\ndef predict_proba(self, X: np.ndarray) -> np.ndarray:\n    if np.max(X) <= 2:",
      "pred_parsed": "    def predict(self, X: np.ndarray) -> np.ndarray:\n    return np.array([1, 2, 1])\n    \n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n    if np.max(X) <= 2:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def predict(self, X: np.ndarray) -> np.ndarray:\n    return np.array([1, 2, 1])\n\ndef predict_proba(self, X: np.ndarray) -> np.ndarray:\n    if np.max(X) <= 2:",
      "pred_parsed": "    def predict(self, X: np.ndarray) -> np.ndarray:\n    return np.array([1, 2, 1])\n    \n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n    if np.max(X) <= 2:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def predict(self, X: np.ndarray) -> np.ndarray:\n    return np.array([1, 2, 1])\n\ndef predict_proba(self, X: np.ndarray) -> np.ndarray:\n    if np.max(X) <= 2:",
      "pred_parsed": "    def predict(self, X: np.ndarray) -> np.ndarray:\n    return np.array([1, 2, 1])\n    \n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n    if np.max(X) <= 2:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def predict(self, X: np.ndarray) -> np.ndarray:\n    return np.array([1, 2, 1])\n\ndef predict_proba(self, X: np.ndarray) -> np.ndarray:\n    if np.max(X) <= 2:",
      "pred_parsed": "    def predict(self, X: np.ndarray) -> np.ndarray:\n    return np.array([1, 2, 1])\n    \n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n    if np.max(X) <= 2:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def predict(self, X: np.ndarray) -> np.ndarray:\n    return np.array([1, 2, 1])\n\ndef predict_proba(self, X: np.ndarray) -> np.ndarray:\n    if np.max(X) <= 2:",
      "pred_parsed": "    def predict(self, X: np.ndarray) -> np.ndarray:\n    return np.array([1, 2, 1])\n    \n    def predict_proba(self, X: np.ndarray) -> np.ndarray:\n    if np.max(X) <= 2:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "TheAlgorithms/Python",
    "repo_dir": "./GitHub/GitHub/TheAlgorithms-Python",
    "commit": "60895366c0f50844af2737130ed98c2510e90060",
    "filename": "ciphers/trafid_cipher.py",
    "source_code": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):\n    tmp, thisPart = \"\", \"\"",
    "target_code": "\n<DED>def __decryptPart(\n    messagePart: str, character2Number: dict[str, str]\n) -> tuple[str, str, str]:\n    <IND>tmp, thisPart = \"\", \"\"\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `(str, str, str)` is not a valid type.",
    "warning_line": 19,
    "pred_top-1": {
      "pred": "def __decryptPart(messagePart: str, character2Number: dict) -> tuple:\n    tmp, thisPart = \"\", \"\"",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> tuple:\ntmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __decryptPart(messagePart: str, character2Number: dict) -> tuple:\n    tmp, thisPart = \"\", \"\"",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> tuple:\ntmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __decryptPart(messagePart: str, character2Number: dict) -> tuple:\n    tmp, thisPart = \"\", \"\"",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> tuple:\ntmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __decryptPart(messagePart: str, character2Number: dict) -> tuple:\n    tmp, thisPart = \"\", \"\"",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> tuple:\ntmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __decryptPart(messagePart: str, character2Number: dict) -> tuple:\n    tmp, thisPart = \"\", \"\"",
      "pred_parsed": "def __decryptPart(messagePart: str, character2Number: dict) -> tuple:\ntmp, thisPart = \"\", \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_queryset_level_methods.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey(Category)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.ForeignKey(tests.test_queryset_level_methods.Category)` is not a valid type.",
    "warning_line": 58,
    "pred_top-1": {
      "pred": "id: ormar.Integer(primary_key=True)\ntext: ormar.String(max_length=500)\ncategory: ormar.ForeignKey('Category')",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey('Category')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.Integer(primary_key=True)\ntext: ormar.String(max_length=500)\ncategory: ormar.ForeignKey('Category')",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey('Category')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.Integer(primary_key=True)\ntext: ormar.String(max_length=500)\ncategory: ormar.ForeignKey('Category')",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey('Category')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.Integer(primary_key=True)\ntext: ormar.String(max_length=500)\ncategory: ormar.ForeignKey('Category')",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey('Category')\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\ntext: ormar.String(max_length=500)\ncategory: ormar.ForeignKey(\"Category\")",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey(\"Category\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_fastapi_usage.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable = True)` is not a valid type.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey('Category', nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey('Category', nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_non_integer_pkey.py",
    "source_code": "    id: ormar.String(primary_key=True, default=key, max_length=8)\n    name: ormar.String(max_length=32)",
    "target_code": "\n    <DED>id = ormar.String(primary_key=True, default=key, max_length=8)\n    name = ormar.String(max_length=32)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length = 8)` is not a valid type.",
    "warning_line": 24,
    "pred_top-1": {
      "pred": "id: ormar.Integer(primary_key=True, default=key, max_length=8)\nname: ormar.String(max_length=32)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True, default=key, max_length=8)\n    name: ormar.String(max_length=32)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.Integer(primary_key=True, default=key, max_length=8)\nname: ormar.String(max_length=32)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True, default=key, max_length=8)\n    name: ormar.String(max_length=32)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.Integer(primary_key=True, default=key, max_length=8)\nname: ormar.String(max_length=32)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True, default=key, max_length=8)\n    name: ormar.String(max_length=32)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.StringField(primary_key=True, default=key, max_length=8)\nname: ormar.StringField(max_length=32)",
      "pred_parsed": "    id: ormar.StringField(primary_key=True, default=key, max_length=8)\n    name: ormar.StringField(max_length=32)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True, default=key)\n                name: ormar.String(max_length=32)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True, default=key)\n    name: ormar.String(max_length=32)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "google/caliban",
    "repo_dir": "./GitHub/GitHub/google-caliban",
    "commit": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "filename": "caliban/gke/cluster.py",
    "source_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional(List[str]) = None,\n      args: Optional[List[str]] = None,",
    "target_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `typing.Optional(typing.List[str])` is not a valid type.",
    "warning_line": 687,
    "pred_top-1": {
      "pred": "experiments: Iterable[conf.Experiment],\ncommand: Optional[List[str]] = None,\nargs: Optional[List[str]] = None,",
      "pred_parsed": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "experiments: Iterable[conf.Experiment],\ncommand: Optional[List[str]] = None,\nargs: Optional[List[str]] = None,",
      "pred_parsed": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "experiments: Iterable[conf.Experiment],\ncommand: Optional[List[str]] = None,\nargs: Optional[List[str]] = None,",
      "pred_parsed": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "experiments: Iterable[conf.Experiment],\n                command: Optional[List[str]] = None,\n                args: Optional[List[str]] = None,",
      "pred_parsed": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "experiments: Iterable[conf.Experiment],\n                command: Optional[List[str]] = None,\n                args: Optional[List[str]] = None,",
      "pred_parsed": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "Ultimaker/Uranium",
    "repo_dir": "./GitHub/GitHub/Ultimaker-Uranium",
    "commit": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9",
    "filename": "UM/PluginObject.py",
    "source_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str: Any]:\n        return self._metadata",
    "target_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    <DED>def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        <IND>self._metadata = metadata\n\n    <DED>def getMetaData(self) -> Dict[str, Any]:\n        <IND>return self._metadata\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
    "warning_line": 31,
    "pred_top-1": {
      "pred": "#   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        self._metadata = metadata\n\n    def getMetaData(self) -> Dict[str, Any]:\n        return self._metadata",
      "pred_parsed": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n    self._metadata = metadata\n    \n    def getMetaData(self) -> Dict[str, Any]:\n    return self._metadata\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "#   The metadata of the plugin is set at the moment it is loaded.\ndef setMetaData(self, metadata: Dict[str, Any]) -> None:\n    self._metadata = metadata\n\ndef getMetaData(self) -> Dict[str, Any]:\n    return self._metadata",
      "pred_parsed": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n    self._metadata = metadata\n    \n    def getMetaData(self) -> Dict[str, Any]:\n    return self._metadata\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "#   The metadata of the plugin is set at the moment it is loaded.\ndef setMetaData(self, metadata: Dict[str, Any]) -> None:\n    self._metadata = metadata\n\ndef getMetaData(self) -> Dict[str, Any]:\n    return self._metadata",
      "pred_parsed": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n    self._metadata = metadata\n    \n    def getMetaData(self) -> Dict[str, Any]:\n    return self._metadata\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "#   The metadata of the plugin is set at the moment it is loaded.\ndef setMetaData(self, metadata: Dict[str, Any]) -> None:\n    self._metadata = metadata\n\ndef getMetaData(self) -> Dict[str, Any]:\n    return self._metadata",
      "pred_parsed": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n    self._metadata = metadata\n    \n    def getMetaData(self) -> Dict[str, Any]:\n    return self._metadata\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "#   The metadata of the plugin is set at the moment it is loaded.\ndef setMetaData(self, metadata: Dict[str, Any]) -> None:\n    self._metadata = metadata\n\ndef getMetaData(self) -> Dict[str, Any]:\n    return self._metadata",
      "pred_parsed": "    #   The metadata of the plugin is set at the moment it is loaded.\n    def setMetaData(self, metadata: Dict[str, Any]) -> None:\n    self._metadata = metadata\n    \n    def getMetaData(self) -> Dict[str, Any]:\n    return self._metadata\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "brainglobe/brainrender",
    "repo_dir": "./GitHub/GitHub/brainglobe-brainrender",
    "commit": "43874da26cfb07b286c8002d093f903c5c4b4ed6",
    "filename": "brainrender/scene.py",
    "source_code": "        self,\n        plane: [str, Plane],\n        actors=None,",
    "target_code": "        self,\n        plane,\n        actors=None,\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `[str, vedo.Plane]` is not a valid type.",
    "warning_line": 336,
    "pred_top-1": {
      "pred": "self,\nplane: vedo.Plane,\nactors=None,",
      "pred_parsed": "        self,\n        plane: vedo.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self,\nplane: vedo.Plane,\nactors=None,",
      "pred_parsed": "        self,\n        plane: vedo.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self,\nplane: vedo.Plane,\nactors=None,",
      "pred_parsed": "        self,\n        plane: vedo.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self,\nplane: vedo.Plane,\nactors=None,",
      "pred_parsed": "        self,\n        plane: vedo.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self,\nplane: vedo.Plane,\nactors=None,",
      "pred_parsed": "        self,\n        plane: vedo.Plane,\n        actors=None,\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_more_reallife_fastapi.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
    "warning_line": 48,
    "pred_top-1": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey('Category', nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey('Category', nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)\ncategory: ormar.ForeignKey(\"Category\", nullable=True)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(\"Category\", nullable=True)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "RasaHQ/rasa",
    "repo_dir": "./GitHub/GitHub/RasaHQ-rasa",
    "commit": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2",
    "filename": "rasa/core/channels/webexteams.py",
    "source_code": "        text: Optional[Text],\n        sender_id: [Optional[Text]],\n        metadata: Optional[Dict],",
    "target_code": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `[typing.Optional[typing.Text]]` is not a valid type.",
    "warning_line": 78,
    "pred_top-1": {
      "pred": "text: Optional[Text],\nsender_id: Optional[Text],\nmetadata: Optional[Dict],",
      "pred_parsed": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "text: Optional[Text],\nsender_id: Optional[Text],\nmetadata: Optional[Dict],",
      "pred_parsed": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "text: Optional[Text],\nsender_id: Optional[Text],\nmetadata: Optional[Dict],",
      "pred_parsed": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "text: Optional[Text],\nsender_id: Optional[Text],\nmetadata: Optional[Dict],",
      "pred_parsed": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "text: Optional[Text],\nsender_id: Optional[Text],\nmetadata: Optional[Dict],",
      "pred_parsed": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "freqtrade/freqtrade",
    "repo_dir": "./GitHub/GitHub/freqtrade-freqtrade",
    "commit": "88755fcded808c2c094b6ee317affbcd1894bf7c",
    "filename": "freqtrade/indicator_helpers.py",
    "source_code": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):\n    magic = pi * sqrt(2) / smoothing",
    "target_code": "\n<DED>def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series:\n    <IND>magic = pi * sqrt(2) / smoothing\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `type(pandas.Series)` is not a valid type.",
    "warning_line": 16,
    "pred_top-1": {
      "pred": "def ehlers_super_smoother(series: pd.Series, smoothing: float = 6) -> pd.Series:\n    magic = np.pi * np.sqrt(2) / smoothing",
      "pred_parsed": "def ehlers_super_smoother(series: pd.Series, smoothing: float = 6) -> pd.Series:\nmagic = np.pi * np.sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def ehlers_super_smoother(series: pd.Series, smoothing: float = 6) -> pd.Series:\n    magic = np.pi * np.sqrt(2) / smoothing",
      "pred_parsed": "def ehlers_super_smoother(series: pd.Series, smoothing: float = 6) -> pd.Series:\nmagic = np.pi * np.sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def ehlers_super_smoother(series: pd.Series, smoothing: float = 6) -> pd.Series:\n    magic = np.pi * np.sqrt(2) / smoothing",
      "pred_parsed": "def ehlers_super_smoother(series: pd.Series, smoothing: float = 6) -> pd.Series:\nmagic = np.pi * np.sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def ehlers_super_smoother(series: pd.Series, smoothing: float = 6) -> pd.Series:\n    magic = pi * sqrt(2) / smoothing",
      "pred_parsed": "def ehlers_super_smoother(series: pd.Series, smoothing: float = 6) -> pd.Series:\nmagic = pi * sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def ehlers_super_smoother(series: pd.Series, smoothing: float = 6) -> pd.Series:\n    magic = np.pi * np.sqrt(2) / smoothing",
      "pred_parsed": "def ehlers_super_smoother(series: pd.Series, smoothing: float = 6) -> pd.Series:\nmagic = np.pi * np.sqrt(2) / smoothing\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_foreign_keys.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.String(max_length=100)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    album = ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title = ormar.String(max_length=100)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
    "warning_line": 41,
    "pred_top-1": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nalbum: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\ntitle: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nalbum: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\ntitle: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nalbum: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\ntitle: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nalbum: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\ntitle: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nalbum: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\ntitle: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_more_reallife_fastapi.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
    "warning_line": 38,
    "pred_top-1": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Flax-Network/flax-blockchain",
    "repo_dir": "./GitHub/GitHub/Flax-Network-flax-blockchain",
    "commit": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "filename": "src/util/Conditions.py",
    "source_code": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n    for _ in conditions:",
    "target_code": "<DED>def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    <IND>d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `typing.Dict[slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.types.ConditionVarPair.ConditionVarPair], None)]` is not a valid type.",
    "warning_line": 43,
    "pred_top-1": {
      "pred": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:",
      "pred_parsed": "def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\nd: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\nfor _ in conditions:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "python/mypy",
    "repo_dir": "./GitHub/GitHub/python-mypy",
    "commit": "021283f03639d185c3a0985684a94307c9fcc15b",
    "filename": "mypy/checker.py",
    "source_code": "            else:\n                extra_info = [] # type: [str]\n                if subtype_label is not None:",
    "target_code": "            <DED>else:\n                <IND>extra_info = [] # type: List[str]\n                if subtype_label is not None:\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `\"[str]\"` is not a valid type.",
    "warning_line": 1292,
    "pred_top-1": {
      "pred": "else:\n                    extra_info = [] # type: list[str]\n                    if subtype_label is not None:",
      "pred_parsed": "            else:\n            extra_info = [] # type: list[str]\n            if subtype_label is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "else:\n    extra_info = [] # type: list[str]\n    if subtype_label is not None:",
      "pred_parsed": "            else:\n            extra_info = [] # type: list[str]\n            if subtype_label is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "else:\n    extra_info = []\n    if subtype_label is not None:\n        extra_info = [subtype_label]",
      "pred_parsed": "            else:\n            extra_info = []\n            if subtype_label is not None:\n            extra_info = [subtype_label]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "else:\n    extra_info = []\n    if subtype_label is not None:\n        extra_info = [subtype_label]",
      "pred_parsed": "            else:\n            extra_info = []\n            if subtype_label is not None:\n            extra_info = [subtype_label]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "else:\n    extra_info = [] # type: list\n    if subtype_label is not None:",
      "pred_parsed": "            else:\n            extra_info = [] # type: list\n            if subtype_label is not None:\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_many_to_many.py",
    "source_code": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=40)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=40)\n\n",
    "warning_type": "Invalid type [31]",
    "warning_message": " Expression `ormar.String($parameter$max_length = 40)` is not a valid type.",
    "warning_line": 33,
    "pred_top-1": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=40)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=40)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=40)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=40)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.CharField(max_length=40)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.CharField(max_length=40)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=40)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=40)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=40)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=40)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "asyml/texar-pytorch",
    "repo_dir": "./GitHub/GitHub/asyml-texar-pytorch",
    "commit": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "filename": "texar/torch/run/metric/generation.py",
    "source_code": "    def add(self, predicted: List[str], labels: List[str]) -> None:\n        for (reference, hypothesis) in zip(labels, predicted):",
    "target_code": "\n    <DED>def add(self, predicted: List[MaybeList[str]],\n            labels: List[MaybeList[str]]) -> None:\n        <IND>for (reference, hypothesis) in zip(labels, predicted):\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `texar.torch.run.metric.generation.BLEU.add` overrides method defined in `StreamingMetric` inconsistently. Parameter of type `List[str]` is not a supertype of the overridden parameter `List[typing.Union[List[str], str]]`.",
    "warning_line": 69,
    "pred_top-1": {
      "pred": "def add(self, predicted: List[typing.Union[List[str], str]], labels: List[typing.Union[List[str], str]]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):",
      "pred_parsed": "    def add(self, predicted: List[typing.Union[List[str], str]], labels: List[typing.Union[List[str], str]]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def add(self, predicted: List[typing.Union[List[str], str]], labels: List[typing.Union[List[str], str]]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):",
      "pred_parsed": "    def add(self, predicted: List[typing.Union[List[str], str]], labels: List[typing.Union[List[str], str]]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def add(self, predicted: List[typing.Union[List[str], str]], labels: List[typing.Union[List[str], str]]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):",
      "pred_parsed": "    def add(self, predicted: List[typing.Union[List[str], str]], labels: List[typing.Union[List[str], str]]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def add(self, predicted: List[typing.Union[List[str], str]], labels: List[typing.Union[List[str], str]]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):",
      "pred_parsed": "    def add(self, predicted: List[typing.Union[List[str], str]], labels: List[typing.Union[List[str], str]]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def add(self, predicted: List[typing.Union[List[str], str]], labels: List[typing.Union[List[str], str]]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):",
      "pred_parsed": "    def add(self, predicted: List[typing.Union[List[str], str]], labels: List[typing.Union[List[str], str]]) -> None:\n    for (reference, hypothesis) in zip(labels, predicted):\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "unit8co/darts",
    "repo_dir": "./GitHub/GitHub/unit8co-darts",
    "commit": "2977f4f666e255b617ad980eab81d6ff6aad9db3",
    "filename": "darts/models/theta.py",
    "source_code": "    def fit(self, ts, component_index: Optional[int] = None):\n        super().fit(ts, component_index)\n        # Check univariate time series",
    "target_code": "\n    <DED>def fit(self, ts):\n        <IND>super().fit(ts)\n        # Check univariate time series\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `darts.models.theta.FourTheta.fit` overrides method defined in `UnivariateForecastingModel` inconsistently. Could not find parameter `series` in overriding signature.",
    "warning_line": 218,
    "pred_top-1": {
      "pred": "def fit(self, ts, series: Optional[int] = None, component_index: Optional[int] = None):\n                    super().fit(ts, series, component_index)\n                    # Check univariate time series",
      "pred_parsed": "    def fit(self, ts, series: Optional[int] = None, component_index: Optional[int] = None):\n    super().fit(ts, series, component_index)\n    # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def fit(self, ts, component_index: Optional[int] = None):\n    super().fit(ts, series=ts, component_index=component_index)\n    # Check univariate time series",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None):\n    super().fit(ts, series=ts, component_index=component_index)\n    # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def fit(self, ts, component_index: Optional[int] = None):\n    super().fit(ts, series=ts, component_index=component_index)\n    # Check univariate time series",
      "pred_parsed": "    def fit(self, ts, component_index: Optional[int] = None):\n    super().fit(ts, series=ts, component_index=component_index)\n    # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def fit(self, ts, series: str, component_index: Optional[int] = None):\n                    super().fit(ts, series, component_index)\n                    # Check univariate time series",
      "pred_parsed": "    def fit(self, ts, series: str, component_index: Optional[int] = None):\n    super().fit(ts, series, component_index)\n    # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def fit(self, ts, series, component_index: Optional[int] = None):\n    super().fit(ts, series, component_index)\n    # Check univariate time series",
      "pred_parsed": "    def fit(self, ts, series, component_index: Optional[int] = None):\n    super().fit(ts, series, component_index)\n    # Check univariate time series\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ConsenSys/mythril",
    "repo_dir": "./GitHub/GitHub/ConsenSys-mythril",
    "commit": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9",
    "filename": "mythril/laser/smt/bitvecfunc.py",
    "source_code": "        return _arithmetic_helper(self, other, operator.or_)\n\n    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":",
    "target_code": "\n        if not isinstance(other, BitVec):\n            <IND>other = BitVec(z3.BitVecVal(other, self.size()))\n        <DED>return _arithmetic_helper(self, other, operator.or_)\n\n    <DED>def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        <IND>",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `mythril.laser.smt.bitvecfunc.BitVecFunc.__xor__` overrides method defined in `BitVec` inconsistently. Parameter of type `BitVec` is not a supertype of the overridden parameter `Union[BitVec, int]`.",
    "warning_line": 145,
    "pred_top-1": {
      "pred": "def __xor__(self, other: Union[BitVec, int]) -> \"BitVecFunc\":\n        return _arithmetic_helper(self, other, operator.xor)",
      "pred_parsed": "        def __xor__(self, other: Union[BitVec, int]) -> \"BitVecFunc\":\n        return _arithmetic_helper(self, other, operator.xor)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __xor__(self, other: Union[BitVec, int]) -> \"BitVecFunc\":\n    return _arithmetic_helper(self, other, operator.xor)",
      "pred_parsed": "        def __xor__(self, other: Union[BitVec, int]) -> \"BitVecFunc\":\n        return _arithmetic_helper(self, other, operator.xor)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __xor__(self, other: Union[BitVec, int]) -> \"BitVecFunc\":\n    return _arithmetic_helper(self, other, operator.xor)",
      "pred_parsed": "        def __xor__(self, other: Union[BitVec, int]) -> \"BitVecFunc\":\n        return _arithmetic_helper(self, other, operator.xor)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __xor__(self, other: Union[BitVec, int]) -> \"BitVecFunc\":\n        return _arithmetic_helper(self, other, operator.xor)",
      "pred_parsed": "        def __xor__(self, other: Union[BitVec, int]) -> \"BitVecFunc\":\n        return _arithmetic_helper(self, other, operator.xor)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __xor__(self, other: Union[BitVec, int]) -> \"BitVecFunc\":\n    return _arithmetic_helper(self, other, operator.xor)",
      "pred_parsed": "        def __xor__(self, other: Union[BitVec, int]) -> \"BitVecFunc\":\n        return _arithmetic_helper(self, other, operator.xor)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Ultimaker/Cura",
    "repo_dir": "./GitHub/GitHub/Ultimaker-Cura",
    "commit": "25b18dee7a02b09a692ce71e853e7e4c32da8e28",
    "filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "source_code": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
    "target_code": "\n    <DED>def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        <IND>data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `plugins.UM3NetworkPrinting.src.LegacyUM3PrinterOutputController.LegacyUM3PrinterOutputController.setTargetBedTemperature` overrides method defined in `PrinterOutputController` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `float`.",
    "warning_line": 36,
    "pred_top-1": {
      "pred": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)",
      "pred_parsed": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n    data = str(temperature)\n    self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "pallets/werkzeug",
    "repo_dir": "./GitHub/GitHub/pallets-werkzeug",
    "commit": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "filename": "src/werkzeug/datastructures.pyi",
    "source_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: int = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...",
    "target_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `src.werkzeug.datastructures.ImmutableListMixin.pop` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
    "warning_line": 52,
    "pred_top-1": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn: ...\ndef insert(self, pos: int, value: V) -> NoReturn: ...\ndef pop(self, index: SupportsIndex = -1) -> NoReturn: ...\ndef reverse(self) -> NoReturn: ...",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn: ...\ndef insert(self, pos: int, value: V) -> NoReturn: ...\ndef pop(self, index: SupportsIndex = -1) -> NoReturn: ...\ndef reverse(self) -> NoReturn: ...",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn: ...\ndef insert(self, pos: int, value: V) -> NoReturn: ...\ndef pop(self, index: SupportsIndex = -1) -> NoReturn: ...\ndef reverse(self) -> NoReturn: ...",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...",
      "pred_parsed": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "raiden-network/raiden",
    "repo_dir": "./GitHub/GitHub/raiden-network-raiden",
    "commit": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd",
    "filename": "raiden/messages.py",
    "source_code": "    def from_dict(\n            cls: typing.Type[typing.T_UpdatePFS],\n            data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        return cls(",
    "target_code": "    def from_dict(\n            cls,\n            data: typing.Dict[str, typing.Any],\n    ) -> 'UpdatePFS':\n        <IND>return cls(\n",
    "warning_type": "Inconsistent override [14]",
    "warning_message": " `raiden.messages.UpdatePFS.from_dict` overrides method defined in `Message` inconsistently. Parameter of type `typing.Type[Variable[typing.T_UpdatePFS (bound to UpdatePFS)]]` is not a supertype of the overridden parameter `typing.Type[Message]`.",
    "warning_line": 1769,
    "pred_top-1": {
      "pred": "def from_dict(\n                    cls: typing.Type[Message],\n                    data: typing.Dict,\n                ) -> typing.T_UpdatePFS:\n                    return cls(",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[Message],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n    return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def from_dict(\n        cls: typing.Type[Message],\n        data: typing.Dict,\n) -> typing.T_UpdatePFS:\n    return cls(",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[Message],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n    return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def from_dict(\n        cls: typing.Type[Message],\n        data: typing.Dict,\n) -> typing.T_UpdatePFS:\n    return cls(",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[Message],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n    return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def from_dict(\n        cls: typing.Type[Message],\n        data: typing.Dict,\n) -> typing.T_UpdatePFS:\n    return cls(",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[Message],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n    return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def from_dict(\n            cls: typing.Type[Message],\n            data: typing.Dict,\n) -> typing.T_UpdatePFS:\n    return cls(",
      "pred_parsed": "    def from_dict(\n    cls: typing.Type[Message],\n    data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n    return cls(\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_new_annotation_style.py",
    "source_code": "    id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `team` declared in class `Member` has type `Optional[Team]` but is used as type `typing.Type[ormar.fields.foreign_key.ForeignKeyField]`.",
    "warning_line": 76,
    "pred_top-1": {
      "pred": "id: int = ormar.Integer(primary_key=True)\nteam: Optional[Team] = ormar.ForeignKey(Team, related_name=\"members\")\nemail: str = ormar.String(max_length=100)",
      "pred_parsed": "    id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team, related_name=\"members\")\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: int = ormar.Integer(primary_key=True)\nteam: Optional[ormar.ForeignKey(Team)] = ormar.ForeignKey(Team)\nemail: str = ormar.String(max_length=100)",
      "pred_parsed": "    id: int = ormar.Integer(primary_key=True)\n    team: Optional[ormar.ForeignKey(Team)] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: int = ormar.Integer(primary_key=True)\nteam: Optional[Team] = ormar.ForeignKey(Team, related_name=\"members\")\nemail: str = ormar.String(max_length=100)",
      "pred_parsed": "    id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team, related_name=\"members\")\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team, backref=\"members\")\n    email: str = ormar.String(max_length=100)",
      "pred_parsed": "    id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team, backref=\"members\")\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: int = ormar.Integer(primary_key=True)\nteam: Optional[Team] = ormar.ForeignKey(Team, backref=\"members\")\nemail: str = ormar.String(max_length=100)",
      "pred_parsed": "    id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team, backref=\"members\")\n    email: str = ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "mobilityhouse/ocpp",
    "repo_dir": "./GitHub/GitHub/mobilityhouse-ocpp",
    "commit": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "filename": "ocpp/v16/call.py",
    "source_code": "    id_tag: str\n    connector_id: int = None\n    charging_profile: Dict = None",
    "target_code": "    <IND>id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `charging_profile` declared in class `RemoteStartTransactionPayload` has type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
    "warning_line": 96,
    "pred_top-1": {
      "pred": "id_tag: str\nconnector_id: int = None\ncharging_profile: Dict[Any, Any] = None",
      "pred_parsed": "    id_tag: str\n    connector_id: int = None\n    charging_profile: Dict[Any, Any] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id_tag: str\nconnector_id: int = None\ncharging_profile: Dict[typing.Any, typing.Any] = None",
      "pred_parsed": "    id_tag: str\n    connector_id: int = None\n    charging_profile: Dict[typing.Any, typing.Any] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id_tag: str\nconnector_id: int = None\ncharging_profile: Dict[Any, Any] = None",
      "pred_parsed": "    id_tag: str\n    connector_id: int = None\n    charging_profile: Dict[Any, Any] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id_tag: str\nconnector_id: int = None\ncharging_profile: Dict[typing.Any, typing.Any] = None",
      "pred_parsed": "    id_tag: str\n    connector_id: int = None\n    charging_profile: Dict[typing.Any, typing.Any] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id_tag: str\nconnector_id: int = None\ncharging_profile: Dict[Any, Any] = None",
      "pred_parsed": "    id_tag: str\n    connector_id: int = None\n    charging_profile: Dict[Any, Any] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "wemake-services/dotenv-linter",
    "repo_dir": "./GitHub/GitHub/wemake-services-dotenv-linter",
    "commit": "69892deec3de61824124bfe3e1da9182f1527ba6",
    "filename": "dotenv_linter/grammar/fst.py",
    "source_code": "    body: List[Union[Comment, Statement]] = field(default=list)",
    "target_code": "\n    __slots__ = {'lineno', 'col_offset', 'raw_text', 'text', 'body'}\n\n    body: List[Union[Comment, Statement]]\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `body` declared in class `Module` has type `List[Union[Comment, Statement]]` but is used as type `typing.Type[list]`.",
    "warning_line": 139,
    "pred_top-1": {
      "pred": "body: List[Union[Comment, Statement]] = field(default_factory=list)",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default_factory=list)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "body: List[Union[Comment, Statement]] = field(default_factory=list)",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default_factory=list)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "body: List[Union[Comment, Statement]] = field(default_factory=list)",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default_factory=list)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "body: List[Union[Comment, Statement]] = field(default_factory=list)",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default_factory=list)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "body: List[Union[Comment, Statement]] = field(default_factory=list)",
      "pred_parsed": "    body: List[Union[Comment, Statement]] = field(default_factory=list)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "cylc/cylc-flow",
    "repo_dir": "./GitHub/GitHub/cylc-cylc-flow",
    "commit": "aa541ef7622378a99558e517385504d1767097e6",
    "filename": "cylc/flow/scheduler.py",
    "source_code": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = None\n    publisher: WorkflowPublisher = None\n    barrier: Optional[Barrier] = None",
    "target_code": "    pub_port: Optional[int] = None\n    server: Optional[SuiteRuntimeServer] = None\n    publisher: Optional[WorkflowPublisher] = None\n    barrier: Optional[Barrier] = None\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `publisher` declared in class `Scheduler` has type `WorkflowPublisher` but is used as type `None`.",
    "warning_line": 213,
    "pred_top-1": {
      "pred": "pub_port: Optional[int] = None\nserver: SuiteRuntimeServer = SuiteRuntimeServer()\npublisher: WorkflowPublisher = WorkflowPublisher(pub_port)\nbarrier: Optional[Barrier] = None",
      "pred_parsed": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = SuiteRuntimeServer()\n    publisher: WorkflowPublisher = WorkflowPublisher(pub_port)\n    barrier: Optional[Barrier] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "pub_port: Optional[int] = None\nserver: SuiteRuntimeServer = None\npublisher: WorkflowPublisher = WorkflowPublisher()\nbarrier: Optional[Barrier] = None",
      "pred_parsed": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = None\n    publisher: WorkflowPublisher = WorkflowPublisher()\n    barrier: Optional[Barrier] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "pub_port: Optional[int] = None\nserver: SuiteRuntimeServer = None\npublisher: WorkflowPublisher = WorkflowPublisher()\nbarrier: Optional[Barrier] = None",
      "pred_parsed": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = None\n    publisher: WorkflowPublisher = WorkflowPublisher()\n    barrier: Optional[Barrier] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "pub_port: Optional[int] = None\nserver: SuiteRuntimeServer = None\npublisher: WorkflowPublisher = WorkflowPublisher()\nbarrier: Optional[Barrier] = None",
      "pred_parsed": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = None\n    publisher: WorkflowPublisher = WorkflowPublisher()\n    barrier: Optional[Barrier] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "pub_port: Optional[int] = None\nserver: SuiteRuntimeServer = None\npublisher: WorkflowPublisher = WorkflowPublisher()\nbarrier: Optional[Barrier] = None",
      "pred_parsed": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = None\n    publisher: WorkflowPublisher = WorkflowPublisher()\n    barrier: Optional[Barrier] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "mobilityhouse/ocpp",
    "repo_dir": "./GitHub/GitHub/mobilityhouse-ocpp",
    "commit": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "filename": "ocpp/v16/call.py",
    "source_code": "class ClearChargingProfilePayload:\n    id: int = None\n    connector_id: int = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None",
    "target_code": "class ClearChargingProfilePayload:\n    <IND>id: Optional[int] = None\n    connector_id: Optional[int] = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: Optional[int] = None\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `connector_id` declared in class `ClearChargingProfilePayload` has type `int` but is used as type `None`.",
    "warning_line": 61,
    "pred_top-1": {
      "pred": "class ClearChargingProfilePayload:\n    id: int = None\n    connector_id: int = 0\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None",
      "pred_parsed": "class ClearChargingProfilePayload:\nid: int = None\nconnector_id: int = 0\ncharging_profile_purpose: Optional[ChargingProfilePurposeType] = None\nstack_level: int = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "class ClearChargingProfilePayload:\n    id: int = None\n    connector_id: Optional[int] = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None",
      "pred_parsed": "class ClearChargingProfilePayload:\nid: int = None\nconnector_id: Optional[int] = None\ncharging_profile_purpose: Optional[ChargingProfilePurposeType] = None\nstack_level: int = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "class ClearChargingProfilePayload:\n    id: int = None\n    connector_id: int = 0\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None",
      "pred_parsed": "class ClearChargingProfilePayload:\nid: int = None\nconnector_id: int = 0\ncharging_profile_purpose: Optional[ChargingProfilePurposeType] = None\nstack_level: int = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "class ClearChargingProfilePayload:\n    id: int = None\n    connector_id: Optional[int] = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None",
      "pred_parsed": "class ClearChargingProfilePayload:\nid: int = None\nconnector_id: Optional[int] = None\ncharging_profile_purpose: Optional[ChargingProfilePurposeType] = None\nstack_level: int = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "class ClearChargingProfilePayload:\n    id: int = None\n    connector_id: Optional[int] = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None",
      "pred_parsed": "class ClearChargingProfilePayload:\nid: int = None\nconnector_id: Optional[int] = None\ncharging_profile_purpose: Optional[ChargingProfilePurposeType] = None\nstack_level: int = None\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "python/mypy",
    "repo_dir": "./GitHub/GitHub/python-mypy",
    "commit": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe",
    "filename": "mypy/checkstrformat.py",
    "source_code": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = None  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker",
    "target_code": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `msg` declared in class `StringFormatterChecker` has type `MessageBuilder` but is used as type `None`.",
    "warning_line": 175,
    "pred_top-1": {
      "pred": "# Some services are provided by a TypeChecker instance.\nchk = None  # type: mypy.checker.TypeChecker\n# This is shared with TypeChecker, but stored also here for convenience.\nmsg = mypy.messages.MessageBuilder()  # type: MessageBuilder\n# Some services are provided by a ExpressionChecker instance.\nexprchk = None  # type: mypy.checkexpr.ExpressionChecker",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = mypy.messages.MessageBuilder()  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# Some services are provided by a TypeChecker instance.\nchk = None  # type: mypy.checker.TypeChecker\n# This is shared with TypeChecker, but stored also here for convenience.\nmsg = MessageBuilder()  # type: MessageBuilder\n# Some services are provided by a ExpressionChecker instance.\nexprchk = None  # type: mypy.checkexpr.ExpressionChecker",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = MessageBuilder()  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# Some services are provided by a TypeChecker instance.\nchk = None  # type: mypy.checker.TypeChecker\n# This is shared with TypeChecker, but stored also here for convenience.\nmsg = MessageBuilder()  # type: MessageBuilder\n# Some services are provided by a ExpressionChecker instance.\nexprchk = None  # type: mypy.checkexpr.ExpressionChecker",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = MessageBuilder()  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "# Some services are provided by a TypeChecker instance.\nchk = None  # type: mypy.checker.TypeChecker\n# This is shared with TypeChecker, but stored also here for convenience.\nmsg = MessageBuilder()  # type: MessageBuilder\n# Some services are provided by a ExpressionChecker instance.\nexprchk = None  # type: mypy.checkexpr.ExpressionChecker",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = MessageBuilder()  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# Some services are provided by a TypeChecker instance.\n                chk = None  # type: mypy.checker.TypeChecker\n                # This is shared with TypeChecker, but stored also here for convenience.\n                msg = mypy.messages.MessageBuilder()  # type: MessageBuilder\n                # Some services are provided by a ExpressionChecker instance.\n                exprchk = None  # type: mypy.checkexpr.ExpressionChecker",
      "pred_parsed": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = mypy.messages.MessageBuilder()  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "angr/angr",
    "repo_dir": "./GitHub/GitHub/angr-angr",
    "commit": "98cc88d3cb9a577fd001977d8515d43075aa619f",
    "filename": "angr/calling_conventions.py",
    "source_code": "    ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address",
    "target_code": "\n    <DED>ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `FP_ARG_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
    "warning_line": 353,
    "pred_top-1": {
      "pred": "ARG_REGS: List[str] = []                                  # A list of all the registers used for integral args, in order (names or offsets)\nFP_ARG_REGS: List[str] = []                               # A list of all the registers used for floating point args, in order\nSTACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address",
      "pred_parsed": "    ARG_REGS: List[str] = []                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "ARG_REGS: List[str] = []                                  # A list of all the registers used for integral args, in order (names or offsets)\nFP_ARG_REGS: List[str] = []                               # A list of all the registers used for floating point args, in order\nSTACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address",
      "pred_parsed": "    ARG_REGS: List[str] = []                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "ARG_REGS: List[str] = []                                  # A list of all the registers used for integral args, in order (names or offsets)\nFP_ARG_REGS: List[str] = []                               # A list of all the registers used for floating point args, in order\nSTACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address",
      "pred_parsed": "    ARG_REGS: List[str] = []                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "ARG_REGS: List[str] = []                                  # A list of all the registers used for integral args, in order (names or offsets)\nFP_ARG_REGS: List[str] = []                               # A list of all the registers used for floating point args, in order\nSTACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address",
      "pred_parsed": "    ARG_REGS: List[str] = []                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "ARG_REGS: List[str] = []                                  # A list of all the registers used for integral args, in order (names or offsets)\nFP_ARG_REGS: List[str] = []                               # A list of all the registers used for floating point args, in order\nSTACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address",
      "pred_parsed": "    ARG_REGS: List[str] = []                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "cylc/cylc-flow",
    "repo_dir": "./GitHub/GitHub/cylc-cylc-flow",
    "commit": "aa541ef7622378a99558e517385504d1767097e6",
    "filename": "cylc/flow/scheduler.py",
    "source_code": "    # suite params\n    stop_mode: StopMode = None\n    stop_task: Optional[str] = None",
    "target_code": "    # suite params\n    stop_mode: Optional[StopMode] = None\n    stop_task: Optional[str] = None\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `stop_mode` declared in class `Scheduler` has type `StopMode` but is used as type `None`.",
    "warning_line": 181,
    "pred_top-1": {
      "pred": "# suite params\nstop_mode: StopMode = StopMode.ABORT\nstop_task: Optional[str] = None",
      "pred_parsed": "    # suite params\n    stop_mode: StopMode = StopMode.ABORT\n    stop_task: Optional[str] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# suite params\nstop_mode: StopMode = StopMode.ABORT\nstop_task: Optional[str] = None",
      "pred_parsed": "    # suite params\n    stop_mode: StopMode = StopMode.ABORT\n    stop_task: Optional[str] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# suite params\nstop_mode: StopMode = StopMode.ABORT\nstop_task: Optional[str] = None",
      "pred_parsed": "    # suite params\n    stop_mode: StopMode = StopMode.ABORT\n    stop_task: Optional[str] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "# suite params\nstop_mode: StopMode = StopMode.ABORT\nstop_task: Optional[str] = None",
      "pred_parsed": "    # suite params\n    stop_mode: StopMode = StopMode.ABORT\n    stop_task: Optional[str] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# suite params\nstop_mode: StopMode = StopMode.ABORT\nstop_task: Optional[str] = None",
      "pred_parsed": "    # suite params\n    stop_mode: StopMode = StopMode.ABORT\n    stop_task: Optional[str] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "explosion/spaCy",
    "repo_dir": "./GitHub/GitHub/explosion-spaCy",
    "commit": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "filename": "spacy/training/augment.py",
    "source_code": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}",
    "target_code": "<DED>class OrthVariants(BaseModel):\n    <IND>paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `single` declared in class `OrthVariants` has type `List[OrthVariantsSingle]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
    "warning_line": 26,
    "pred_top-1": {
      "pred": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []",
      "pred_parsed": "class OrthVariants(BaseModel):\npaired: List[OrthVariantsPaired] = []\nsingle: List[OrthVariantsSingle] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []",
      "pred_parsed": "class OrthVariants(BaseModel):\npaired: List[OrthVariantsPaired] = []\nsingle: List[OrthVariantsSingle] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []",
      "pred_parsed": "class OrthVariants(BaseModel):\npaired: List[OrthVariantsPaired] = []\nsingle: List[OrthVariantsSingle] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []",
      "pred_parsed": "class OrthVariants(BaseModel):\npaired: List[OrthVariantsPaired] = []\nsingle: List[OrthVariantsSingle] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "class OrthVariants(BaseModel):\n    paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []",
      "pred_parsed": "class OrthVariants(BaseModel):\npaired: List[OrthVariantsPaired] = []\nsingle: List[OrthVariantsSingle] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "mesonbuild/meson",
    "repo_dir": "./GitHub/GitHub/mesonbuild-meson",
    "commit": "70d2207212e9ae6a2b5d345811acfbe441b6ec74",
    "filename": "mesonbuild/interpreterbase.py",
    "source_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: str",
    "target_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: T.Optional[str]\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `tmp_meson_version` declared in class `InterpreterBase` has type `str` but is used as type `None`.",
    "warning_line": 461,
    "pred_top-1": {
      "pred": "# current meson version target within that if-block.\nself.tmp_meson_version = '' # type: str",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = '' # type: str\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# current meson version target within that if-block.\n        self.tmp_meson_version = '' # type: str",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = '' # type: str\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# current meson version target within that if-block.\nself.tmp_meson_version = '' # type: str",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = '' # type: str\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "# current meson version target within that if-block.\n        self.tmp_meson_version = '' # type: str",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = '' # type: str\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# current meson version target within that if-block.\nself.tmp_meson_version = \"\" # type: str",
      "pred_parsed": "        # current meson version target within that if-block.\n        self.tmp_meson_version = \"\" # type: str\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "Project-MONAI/MONAILabel",
    "repo_dir": "./GitHub/GitHub/Project-MONAI-MONAILabel",
    "commit": "4bcf6ea684888411b771da5f4e9632bae0e267a0",
    "filename": "monailabel/config.py",
    "source_code": "    APP_DIR: str = None\n    STUDIES: str = None",
    "target_code": "\n    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `STUDIES` declared in class `Settings` has type `str` but is used as type `None`.",
    "warning_line": 12,
    "pred_top-1": {
      "pred": "APP_DIR: str = \"\"\nSTUDIES: str = \"\"",
      "pred_parsed": "    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "APP_DIR: str = \"\"\nSTUDIES: str = \"\"",
      "pred_parsed": "    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "APP_DIR: str = \"\"\nSTUDIES: str = \"\"",
      "pred_parsed": "    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "APP_DIR: str = \"\"\nSTUDIES: str = \"\"",
      "pred_parsed": "    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "APP_DIR: str = \"\"\n    STUDIES: str = \"\"",
      "pred_parsed": "    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "OSInside/kiwi",
    "repo_dir": "./GitHub/GitHub/OSInside-kiwi",
    "commit": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "filename": "kiwi/builder/kis.py",
    "source_code": "        )\n        self.image: str = None\n        self.append_file = ''.join([self.image_name, '.append'])",
    "target_code": "        )\n        self.image: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `image` declared in class `KisBuilder` has type `str` but is used as type `None`.",
    "warning_line": 86,
    "pred_top-1": {
      "pred": "self.image: str = \"\"",
      "pred_parsed": "        self.image: str = \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "self.image: str = \"\"",
      "pred_parsed": "        self.image: str = \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "self.image: str = \"\"",
      "pred_parsed": "        self.image: str = \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "self.image: str = \"\"",
      "pred_parsed": "        self.image: str = \"\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "self.image: str = \"\"\nself.append_file = ''.join([self.image_name, '.append'])",
      "pred_parsed": "        self.image: str = \"\"\n        self.append_file = ''.join([self.image_name, '.append'])\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "missionpinball/mpf",
    "repo_dir": "./GitHub/GitHub/missionpinball-mpf",
    "commit": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "filename": "mpf/core/events.py",
    "source_code": "        self.waiter = False\n        self.event = None   # type: asyncio.Event",
    "target_code": "        self.waiter = False\n        self.event = None   # type: Optional[asyncio.Event]\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `event` declared in class `QueuedEvent` has type `asyncio.locks.Event` but is used as type `None`.",
    "warning_line": 794,
    "pred_top-1": {
      "pred": "self.waiter = False\nself.event = asyncio.Event()   # type: asyncio.Event",
      "pred_parsed": "        self.waiter = False\n        self.event = asyncio.Event()   # type: asyncio.Event\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "self.waiter = False\nself.event = asyncio.Event()   # type: asyncio.Event",
      "pred_parsed": "        self.waiter = False\n        self.event = asyncio.Event()   # type: asyncio.Event\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self.waiter = False\nself.event = asyncio.Event()   # type: asyncio.Event",
      "pred_parsed": "        self.waiter = False\n        self.event = asyncio.Event()   # type: asyncio.Event\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "import asyncio\n                \n                self.waiter = False\n                self.event = asyncio.Event()   # type: asyncio.Event",
      "pred_parsed": "        import asyncio\n        \n        self.waiter = False\n        self.event = asyncio.Event()   # type: asyncio.Event\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self.waiter = False\nself.event = asyncio.Event()   # type: asyncio.Event",
      "pred_parsed": "        self.waiter = False\n        self.event = asyncio.Event()   # type: asyncio.Event\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_new_annotation_style.py",
    "source_code": "    id: int = ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `id` declared in class `Organisation` has type `int` but is used as type `ormar.fields.model_fields.Integer`.",
    "warning_line": 54,
    "pred_top-1": {
      "pred": "id: ormar.Integer(primary_key=True)\nident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.Integer = ormar.Integer(primary_key=True)\nident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "pred_parsed": "    id: ormar.Integer = ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.Integer(primary_key=True)\nident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.Integer = ormar.Integer(primary_key=True)\n                ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "pred_parsed": "    id: ormar.Integer = ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\nident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "microsoft/msticpy",
    "repo_dir": "./GitHub/GitHub/microsoft-msticpy",
    "commit": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "source_code": "    ioc: str\n    ioc_type: str\n    query_subtype: str = None\n    result: bool = False",
    "target_code": "    ioc: str\n    ioc_type: Optional[str]\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `query_subtype` declared in class `LookupResult` has type `str` but is used as type `None`.",
    "warning_line": 50,
    "pred_top-1": {
      "pred": "ioc: str\nioc_type: str\nquery_subtype: str = \"\"\nresult: bool = False",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = \"\"\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "ioc: str\nioc_type: str\nquery_subtype: str\nresult: bool = False",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "ioc: str\nioc_type: str\nquery_subtype: Optional[str] = None\nresult: bool = False",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "ioc: str\nioc_type: str\nquery_subtype: str = \"\"\nresult: bool = False",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = \"\"\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "ioc: str\nioc_type: str\nquery_subtype: str = \"\"\nresult: bool = False",
      "pred_parsed": "    ioc: str\n    ioc_type: str\n    query_subtype: str = \"\"\n    result: bool = False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "Andarius/piou",
    "repo_dir": "./GitHub/GitHub/Andarius-piou",
    "commit": "2d6f659202b7ec37a5a9b1fe260950363abc51d2",
    "filename": "piou/cli.py",
    "source_code": "class Cli:\n    description: str = None\n    formatter: Formatter = field(default_factory=RichFormatter)",
    "target_code": "class Cli:\n    <IND>description: Optional[str] = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `description` declared in class `Cli` has type `str` but is used as type `None`.",
    "warning_line": 15,
    "pred_top-1": {
      "pred": "class Cli:\n    description: str = \"\"\n    formatter: Formatter = field(default_factory=RichFormatter)",
      "pred_parsed": "class Cli:\ndescription: str = \"\"\nformatter: Formatter = field(default_factory=RichFormatter)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "class Cli:\n    description: str = \"\"\n    formatter: Formatter = field(default_factory=RichFormatter)",
      "pred_parsed": "class Cli:\ndescription: str = \"\"\nformatter: Formatter = field(default_factory=RichFormatter)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "class Cli:\n    description: str = \"\"\n    formatter: Formatter = field(default_factory=RichFormatter)",
      "pred_parsed": "class Cli:\ndescription: str = \"\"\nformatter: Formatter = field(default_factory=RichFormatter)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "class Cli:\n    description: str = \"\"\n    formatter: Formatter = field(default_factory=RichFormatter)",
      "pred_parsed": "class Cli:\ndescription: str = \"\"\nformatter: Formatter = field(default_factory=RichFormatter)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "class Cli:\n    description: str = \"\"\n    formatter: Formatter = field(default_factory=RichFormatter)",
      "pred_parsed": "class Cli:\ndescription: str = \"\"\nformatter: Formatter = field(default_factory=RichFormatter)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "mobilityhouse/ocpp",
    "repo_dir": "./GitHub/GitHub/mobilityhouse-ocpp",
    "commit": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "filename": "ocpp/v16/call.py",
    "source_code": "    requested_message: MessageTrigger\n    connector_id: int = None",
    "target_code": "    <IND>requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `connector_id` declared in class `TriggerMessagePayload` has type `int` but is used as type `None`.",
    "warning_line": 134,
    "pred_top-1": {
      "pred": "requested_message: MessageTrigger\nconnector_id: int = 0",
      "pred_parsed": "    requested_message: MessageTrigger\n    connector_id: int = 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "requested_message: MessageTrigger\nconnector_id: int = 0",
      "pred_parsed": "    requested_message: MessageTrigger\n    connector_id: int = 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "requested_message: MessageTrigger\nconnector_id: int = 0",
      "pred_parsed": "    requested_message: MessageTrigger\n    connector_id: int = 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "requested_message: MessageTrigger\nconnector_id: int = 0",
      "pred_parsed": "    requested_message: MessageTrigger\n    connector_id: int = 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "requested_message: MessageTrigger\nconnector_id: int = 0",
      "pred_parsed": "    requested_message: MessageTrigger\n    connector_id: int = 0\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "instadeepai/Mava",
    "repo_dir": "./GitHub/GitHub/instadeepai-Mava",
    "commit": "e9693e9e7f081d68802b70615e799cb910353fe7",
    "filename": "mava/systems/tf/mappo/system.py",
    "source_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agents\n                for a_i, agent in enumerate(agents)\n            }",
    "target_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agent\n                for agent in agents\n            }\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `_agent_net_config` declared in class `MAPPO` has type `Dict[str, str]` but is used as type `Dict[str, Union[typing.List[str], str]]`.",
    "warning_line": 153,
    "pred_top-1": {
      "pred": "self._agent_net_config = {\n    agent: agent.split(\"_\")[0] if shared_weights else agents[a_i]\n    for a_i, agent in enumerate(agents)\n}",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents[a_i]\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "self._agent_net_config = {\n    agent: agent.split(\"_\")[0] if shared_weights else agents[a_i]\n    for a_i, agent in enumerate(agents)\n}",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents[a_i]\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self._agent_net_config = {\n    agent: agent.split(\"_\")[0] if shared_weights else [agent]\n    for a_i, agent in enumerate(agents)\n}",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else [agent]\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self._agent_net_config = {\n    agent: agent.split(\"_\")[0] if shared_weights else agent\n    for a_i, agent in enumerate(agents)\n}",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agent\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agents[a_i]\n                for a_i, agent in enumerate(agents)\n            }",
      "pred_parsed": "            self._agent_net_config = {\n            agent: agent.split(\"_\")[0] if shared_weights else agents[a_i]\n            for a_i, agent in enumerate(agents)\n            }\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "collerek/ormar",
    "repo_dir": "./GitHub/GitHub/collerek-ormar",
    "commit": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "filename": "tests/test_new_annotation_style.py",
    "source_code": "    id: int = ormar.Integer(primary_key=True)\n    name: str = ormar.String(max_length=100)",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `name` declared in class `Album` has type `str` but is used as type `ormar.fields.model_fields.String`.",
    "warning_line": 22,
    "pred_top-1": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "id: ormar.IntegerField(primary_key=True)\nname: ormar.StringField(max_length=100)",
      "pred_parsed": "    id: ormar.IntegerField(primary_key=True)\n    name: ormar.StringField(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "id: ormar.Integer(primary_key=True)\nname: ormar.String(max_length=100)",
      "pred_parsed": "    id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "emissary-ingress/emissary",
    "repo_dir": "./GitHub/GitHub/emissary-ingress-emissary",
    "commit": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "filename": "ambassador/ambassador_diag/diagd.py",
    "source_code": "                    self.env_good = True\n                    self.failure_list = None",
    "target_code": "                    <IND>self.env_good = True\n                    self.failure_list = []\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `None`.",
    "warning_line": 707,
    "pred_top-1": {
      "pred": "self.env_good = True\nself.failure_list = []",
      "pred_parsed": "                    self.env_good = True\n                    self.failure_list = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "self.env_good = True\nself.failure_list = []",
      "pred_parsed": "                    self.env_good = True\n                    self.failure_list = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self.env_good = True\nself.failure_list = []",
      "pred_parsed": "                    self.env_good = True\n                    self.failure_list = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self.env_good = True\nself.failure_list = []",
      "pred_parsed": "                    self.env_good = True\n                    self.failure_list = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self.env_good = True\nself.failure_list = []",
      "pred_parsed": "                    self.env_good = True\n                    self.failure_list = []\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "kinnala/scikit-fem",
    "repo_dir": "./GitHub/GitHub/kinnala-scikit-fem",
    "commit": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7",
    "filename": "skfem/assembly/dofs.py",
    "source_code": "    topo: Mesh = None\n    element: Element = None",
    "target_code": "\n    topo: Mesh\n    element: Element\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `element` declared in class `Dofs` has type `skfem.element.element.Element` but is used as type `None`.",
    "warning_line": 171,
    "pred_top-1": {
      "pred": "topo: Mesh = Mesh()\n    element: Element = ElementTriP1()",
      "pred_parsed": "    topo: Mesh = Mesh()\n    element: Element = ElementTriP1()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "topo: Mesh = Mesh()\nelement: Element = Element()",
      "pred_parsed": "    topo: Mesh = Mesh()\n    element: Element = Element()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "topo: Mesh = None\n    element: Element = Element()",
      "pred_parsed": "    topo: Mesh = None\n    element: Element = Element()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "topo: Mesh = Mesh()\n                element: Element = ElementTriP1()",
      "pred_parsed": "    topo: Mesh = Mesh()\n    element: Element = ElementTriP1()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "topo: Mesh = Mesh()\nelement: Element = ElementTriP1()",
      "pred_parsed": "    topo: Mesh = Mesh()\n    element: Element = ElementTriP1()\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "huggingface/datasets",
    "repo_dir": "./GitHub/GitHub/huggingface-datasets",
    "commit": "49e517a3d21392291d771872204594f43cd09532",
    "filename": "src/datasets/features.py",
    "source_code": "    num_classes: int = None\n    names: List[str] = None\n    names_file: str = None\n    id: Optional[str] = None",
    "target_code": "\n    num_classes: Optional[int] = None\n    names: Optional[List[str]] = None\n    names_file: Optional[str] = None\n    id: Optional[str] = None\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `names_file` declared in class `ClassLabel` has type `str` but is used as type `None`.",
    "warning_line": 552,
    "pred_top-1": {
      "pred": "num_classes: int = None\nnames: List[str] = None\nnames_file: str = \"\"\nid: Optional[str] = None",
      "pred_parsed": "    num_classes: int = None\n    names: List[str] = None\n    names_file: str = \"\"\n    id: Optional[str] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "num_classes: int = None\nnames: List[str] = None\nnames_file: str = \"\"\nid: Optional[str] = None",
      "pred_parsed": "    num_classes: int = None\n    names: List[str] = None\n    names_file: str = \"\"\n    id: Optional[str] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "num_classes: int = None\nnames: List[str] = None\nnames_file: str = \"\"\nid: Optional[str] = None",
      "pred_parsed": "    num_classes: int = None\n    names: List[str] = None\n    names_file: str = \"\"\n    id: Optional[str] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "num_classes: int = None\nnames: List[str] = None\nnames_file: str = \"\"\nid: Optional[str] = None",
      "pred_parsed": "    num_classes: int = None\n    names: List[str] = None\n    names_file: str = \"\"\n    id: Optional[str] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "num_classes: int = None\nnames: List[str] = None\nnames_file: str = \"\"\nid: Optional[str] = None",
      "pred_parsed": "    num_classes: int = None\n    names: List[str] = None\n    names_file: str = \"\"\n    id: Optional[str] = None\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "actionless/pikaur",
    "repo_dir": "./GitHub/GitHub/actionless-pikaur",
    "commit": "dc22538c3d010c381442569fed417df83c0f8ecc",
    "filename": "pikaur_test/helpers.py",
    "source_code": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code",
    "target_code": "\n    def _fake_exit(self, code: int = 0) -> NoReturn:\n        <IND>self.returncode = code\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `returncode` declared in class `InterceptSysOutput` has type `int` but is used as type `Optional[int]`.",
    "warning_line": 85,
    "pred_top-1": {
      "pred": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    if code is None:\n        self.returncode = 0\n    else:\n        self.returncode = code",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    if code is None:\n    self.returncode = 0\n    else:\n    self.returncode = code\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        self.returncode = code if code is not None else 0",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    self.returncode = code if code is not None else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    self.returncode = code if code is not None else 0",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    self.returncode = code if code is not None else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    self.returncode = int(code) if code is not None else 0",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    self.returncode = int(code) if code is not None else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    self.returncode = code if code is not None else 0",
      "pred_parsed": "    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n    self.returncode = code if code is not None else 0\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "bentoml/BentoML",
    "repo_dir": "./GitHub/GitHub/bentoml-BentoML",
    "commit": "9e7a86be53833f3f36dda09dbfeba114b4977fcd",
    "filename": "bentoml/service.py",
    "source_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: InferenceAPI = []",
    "target_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `_inference_apis` declared in class `BentoService` has type `InferenceAPI` but is used as type `List[Variable[_T]]`.",
    "warning_line": 588,
    "pred_top-1": {
      "pred": "# List of inference APIs that this BentoService provides\n_inference_apis: List[InferenceAPI] = []",
      "pred_parsed": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "# List of inference APIs that this BentoService provides\n_inference_apis: List[InferenceAPI] = []",
      "pred_parsed": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "# List of inference APIs that this BentoService provides\n_inference_apis: List[InferenceAPI] = []",
      "pred_parsed": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "# List of inference APIs that this BentoService provides\n_inference_apis: List[InferenceAPI] = []",
      "pred_parsed": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "# List of inference APIs that this BentoService provides\n_inference_apis: List[InferenceAPI] = []",
      "pred_parsed": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "ehForwarderBot/efb-telegram-master",
    "repo_dir": "./GitHub/GitHub/ehForwarderBot-efb-telegram-master",
    "commit": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6",
    "filename": "efb_telegram_master/master_message.py",
    "source_code": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n                # Chat not found anyway, build a fake object",
    "target_code": "            m.author = self.chat_manager.self\n            m_chat = self.chat_manager.get_chat(channel, uid)\n            if not m_chat:\n                # Chat not found anyway, build a fake object\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `chat` declared in class `ETMMsg` has type `efb_telegram_master.chat.ETMChat` but is used as type `Optional[efb_telegram_master.chat.ETMChat]`.",
    "warning_line": 271,
    "pred_top-1": {
      "pred": "m.author = self.chat_manager.self\nm.chat = self.chat_manager.get_chat(channel, uid)\nif m.chat is None:\n    # Chat not found anyway, build a fake object\n    m.chat = ETMChat(channel, uid)",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if m.chat is None:\n            # Chat not found anyway, build a fake object\n            m.chat = ETMChat(channel, uid)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "m.author = self.chat_manager.self\nm.chat = self.chat_manager.get_chat(channel, uid)\nif m.chat is None:\n    # Chat not found anyway, build a fake object\n    m.chat = ETMChat(channel, uid)\n    m.chat.name = \"Unknown\"",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if m.chat is None:\n            # Chat not found anyway, build a fake object\n            m.chat = ETMChat(channel, uid)\n            m.chat.name = \"Unknown\"\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "m.author = self.chat_manager.self\n                m.chat = self.chat_manager.get_chat(channel, uid)\n                if m.chat is None:\n                    # Chat not found anyway, build a fake object\n                    m.chat = ETMChat(channel, uid)",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if m.chat is None:\n            # Chat not found anyway, build a fake object\n            m.chat = ETMChat(channel, uid)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "m.author = self.chat_manager.self\nm.chat = self.chat_manager.get_chat(channel, uid)\nif m.chat is None:\n    # Chat not found anyway, build a fake object\n    m.chat = ETMChat(channel, uid)",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if m.chat is None:\n            # Chat not found anyway, build a fake object\n            m.chat = ETMChat(channel, uid)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "m.author = self.chat_manager.self\nm.chat = self.chat_manager.get_chat(channel, uid)\nif m.chat is None:\n    # Chat not found anyway, build a fake object\n    m.chat = ETMChat(channel, uid)",
      "pred_parsed": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if m.chat is None:\n            # Chat not found anyway, build a fake object\n            m.chat = ETMChat(channel, uid)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "OSInside/kiwi",
    "repo_dir": "./GitHub/GitHub/OSInside-kiwi",
    "commit": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "filename": "kiwi/builder/kis.py",
    "source_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = None\n        self.hypervisor_filename: str = None\n        self.result = Result(xml_state)",
    "target_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
    "warning_type": "Incompatible attribute type [8]",
    "warning_message": " Attribute `kernel_filename` declared in class `KisBuilder` has type `str` but is used as type `None`.",
    "warning_line": 90,
    "pred_top-1": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename = ''\n        self.hypervisor_filename = ''\n        self.result = Result(xml_state)",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename = ''\n        self.hypervisor_filename = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5'])\nself.kernel_filename = ''\nself.hypervisor_filename = ''\nself.result = Result(xml_state)",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename = ''\n        self.hypervisor_filename = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5'])\nself.kernel_filename = ''\nself.hypervisor_filename = ''\nself.result = Result(xml_state)",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename = ''\n        self.hypervisor_filename = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5'])\nself.kernel_filename = ''\nself.hypervisor_filename = ''\nself.result = Result(xml_state)",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename = ''\n        self.hypervisor_filename = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "self.checksum_name = ''.join([self.image_name, '.md5'])\nself.kernel_filename = ''\nself.hypervisor_filename = ''\nself.result = Result(xml_state)",
      "pred_parsed": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename = ''\n        self.hypervisor_filename = ''\n        self.result = Result(xml_state)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "repo_dir": "./GitHub/GitHub/jupyterhub-zero-to-jupyterhub-k8s",
    "commit": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "filename": "images/hub/jupyterhub_config.py",
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>if cfg_key is None:\n            <IND>cfg_key = camelCaseify(trait)\n        <DED>set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
    "warning_line": 275,
    "pred_top-1": {
      "pred": "for trait, cfg_key in common_oauth_traits:\n    set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str(cfg_key))",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str(cfg_key))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n    set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n    set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for trait, cfg_key in common_oauth_traits:\n    set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str(cfg_key))",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str(cfg_key))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n    set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "standardebooks/tools",
    "repo_dir": "./GitHub/GitHub/standardebooks-tools",
    "commit": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3",
    "filename": "se/formatting.py",
    "source_code": " number = int(number)\n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])",
    "target_code": "\n value = int(number)\n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10 != 1) * (value % 10 < 4) * value % 10::4])\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `/` is not supported for operand types `str` and `int`.",
    "warning_line": 720,
    "exception": "'pred_top-1'"
  },
  {
    "repo": "irmen/Tale",
    "repo_dir": "./GitHub/GitHub/irmen-Tale",
    "commit": "2bf79167e755c6ac169a0c13c401e65fbbfde997",
    "filename": "tale/driver.py",
    "source_code": "        else:\n            raise ValueError(\"unknown topic: \" + topicname)",
    "target_code": "        <DED>else:\n            <IND>raise ValueError(\"unknown topic: \" + str(topicname))\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `str` and `Union[str, typing.Tuple[typing.Any, ...]]`.",
    "warning_line": 1052,
    "pred_top-1": {
      "pred": "else:\n    raise ValueError(\"unknown topic: \" + str(topicname))",
      "pred_parsed": "        else:\n        raise ValueError(\"unknown topic: \" + str(topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "else:\n    raise ValueError(\"unknown topic: \" + str(topicname))",
      "pred_parsed": "        else:\n        raise ValueError(\"unknown topic: \" + str(topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "else:\n    raise ValueError(\"unknown topic: \" + str(topicname))",
      "pred_parsed": "        else:\n        raise ValueError(\"unknown topic: \" + str(topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "else:\n    raise ValueError(\"unknown topic: \" + str(topicname))",
      "pred_parsed": "        else:\n        raise ValueError(\"unknown topic: \" + str(topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "else:\n    raise ValueError(\"unknown topic: \" + str(topicname))",
      "pred_parsed": "        else:\n        raise ValueError(\"unknown topic: \" + str(topicname))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "Ultimaker/Cura",
    "repo_dir": "./GitHub/GitHub/Ultimaker-Cura",
    "commit": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af",
    "filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "source_code": "                    callback(True)\n                elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) < self._library_max_private_projects)",
    "target_code": "                    <IND>callback(True)\n                <DED>elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) and self._library_max_private_projects is not None:\n                    <IND>callback(len(response) < self._library_max_private_projects)\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `<` is not supported for operand types `int` and `Optional[int]`.",
    "warning_line": 95,
    "pred_top-1": {
      "pred": "if isinstance(response, DigitalFactoryProjectResponse):\n    callback(True)\nelif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n    callback(len(response) <= self._library_max_private_projects)",
      "pred_parsed": "                    if isinstance(response, DigitalFactoryProjectResponse):\n                    callback(True)\n                    elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) <= self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) <= self._library_max_private_projects)",
      "pred_parsed": "                    elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) <= self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if isinstance(response, DigitalFactoryProjectResponse):\n    callback(True)\nelif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n    callback(len(response) <= self._library_max_private_projects)",
      "pred_parsed": "                    if isinstance(response, DigitalFactoryProjectResponse):\n                    callback(True)\n                    elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) <= self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if isinstance(response, DigitalFactoryProjectResponse):\n    callback(True)\nelif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n    callback(len(response) <= self._library_max_private_projects)",
      "pred_parsed": "                    if isinstance(response, DigitalFactoryProjectResponse):\n                    callback(True)\n                    elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) <= self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) <= self._library_max_private_projects)",
      "pred_parsed": "                    elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    callback(len(response) <= self._library_max_private_projects)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "python-poetry/poetry",
    "repo_dir": "./GitHub/GitHub/python-poetry-poetry",
    "commit": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "filename": "poetry/mixology/incompatibility.py",
    "source_code": "        if other_line is not None:\n            buffer.append(\" \" + other_line)",
    "target_code": "        if other_line is not None:\n            <IND>buffer.append(\" \" + str(other_line))\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `str` and `int`.",
    "warning_line": 249,
    "pred_top-1": {
      "pred": "if other_line is not None:\n    buffer.append(\" \" + str(other_line))",
      "pred_parsed": "        if other_line is not None:\n        buffer.append(\" \" + str(other_line))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if other_line is not None:\n    buffer.append(\" \" + str(other_line))",
      "pred_parsed": "        if other_line is not None:\n        buffer.append(\" \" + str(other_line))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if other_line is not None:\n    buffer.append(\" \" + str(other_line))",
      "pred_parsed": "        if other_line is not None:\n        buffer.append(\" \" + str(other_line))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if other_line is not None:\n    buffer.append(\" \" + str(other_line))",
      "pred_parsed": "        if other_line is not None:\n        buffer.append(\" \" + str(other_line))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if other_line is not None:\n    buffer.append(\" \" + str(other_line))",
      "pred_parsed": "        if other_line is not None:\n        buffer.append(\" \" + str(other_line))\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "repo_dir": "./GitHub/GitHub/jupyterhub-zero-to-jupyterhub-k8s",
    "commit": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "filename": "images/hub/jupyterhub_config.py",
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>if cfg_key is None:\n            <IND>cfg_key = camelCaseify(trait)\n        <DED>set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
    "warning_line": 279,
    "pred_top-1": {
      "pred": "for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n    set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n    set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n    set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "for trait, cfg_key in common_oauth_traits:\n                    if cfg_key is not None:\n                        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n    set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
      "pred_parsed": "    for trait, cfg_key in common_oauth_traits:\n    if cfg_key is not None:\n    set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "crytic/slither",
    "repo_dir": "./GitHub/GitHub/crytic-slither",
    "commit": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b",
    "filename": "slither/core/solidity_types/elementary_type.py",
    "source_code": "            return 32, True\n\n        return int(self.size / 8), False",
    "target_code": "            <IND>return 32, True\n        <DED>if self.size is None:\n            <IND>return 32, True\n        <DED>return int(self.size / 8), False\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `/` is not supported for operand types `Optional[int]` and `int`.",
    "warning_line": 180,
    "pred_top-1": {
      "pred": "return int(self.size / 8), False",
      "pred_parsed": "            return int(self.size / 8), False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "return int(self.size / 8), False",
      "pred_parsed": "            return int(self.size / 8), False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "return int(self.size / 8), False",
      "pred_parsed": "            return int(self.size / 8), False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "return int(self.size / 8), False",
      "pred_parsed": "            return int(self.size / 8), False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "return int(self.size / 8), False",
      "pred_parsed": "            return int(self.size / 8), False\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "rizar/attention-lvcsr",
    "repo_dir": "./GitHub/GitHub/rizar-attention-lvcsr",
    "commit": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "filename": "theano/tensor/tests/test_basic.py",
    "source_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n                     [255, 1])],",
    "target_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n                                 dtype='int8'),\n                     [255, 1])],\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `range` and `range`.",
    "warning_line": 848,
    "pred_top-1": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'),\n                     [255, 1])],",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n      numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'),\n                 [255, 1])],",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'),\n                     [255, 1])],",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "pred_top-4": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'),\n                     [255, 1])],",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "pred_top-5": {
      "pred": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n      numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'),\n                 [255, 1])],",
      "pred_parsed": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n    numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)), dtype='int8'),\n    [255, 1])],\n",
      "warning_removed": false,
      "fail_reason": "Parsing failure"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "ConsenSys/mythril",
    "repo_dir": "./GitHub/GitHub/ConsenSys-mythril",
    "commit": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f",
    "filename": "mythril/laser/ethereum/instructions.py",
    "source_code": "            return [global_state]\n\n        if size > 0:",
    "target_code": "            return [global_state]\n        <DED>size = cast(int, size)\n        if size > 0:\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `>` is not supported for operand types `Union[int, mythril.laser.smt.expression.Expression]` and `int`.",
    "warning_line": 748,
    "pred_top-1": {
      "pred": "if size > 0:\n    return [global_state]",
      "pred_parsed": "            if size > 0:\n            return [global_state]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "if isinstance(size, int) and size > 0:\n    return [global_state]",
      "pred_parsed": "            if isinstance(size, int) and size > 0:\n            return [global_state]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "if size > 0:\n    return [global_state]",
      "pred_parsed": "            if size > 0:\n            return [global_state]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "if size > 0:\n    return [global_state]",
      "pred_parsed": "            if size > 0:\n            return [global_state]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "if size > 0:\n    return [global_state]",
      "pred_parsed": "            if size > 0:\n            return [global_state]\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "microsoft/msticpy",
    "repo_dir": "./GitHub/GitHub/microsoft-msticpy",
    "commit": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "filename": "msticpy/sectools/tiproviders/http_base.py",
    "source_code": "            err_result.raw_result = (\n                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )",
    "target_code": "            err_result.raw_result = (\n                type(err).__name__ + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `typing.Type[typing.Union[ConnectionError, LookupError, NotImplementedError, json.decoder.JSONDecodeError]]` and `str`.",
    "warning_line": 159,
    "pred_top-1": {
      "pred": "err_result.raw_result = (\n    str(type(err)) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n)",
      "pred_parsed": "            err_result.raw_result = (\n            str(type(err)) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "err_result.raw_result = (\n    str(type(err)) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n)",
      "pred_parsed": "            err_result.raw_result = (\n            str(type(err)) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "err_result.raw_result = (\n    str(type(err)) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n)",
      "pred_parsed": "            err_result.raw_result = (\n            str(type(err)) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "err_result.raw_result = (\n    str(type(err)) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n)",
      "pred_parsed": "            err_result.raw_result = (\n            str(type(err)) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "err_result.raw_result = (\n    str(type(err)) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n)",
      "pred_parsed": "            err_result.raw_result = (\n            str(type(err)) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "RasaHQ/rasa",
    "repo_dir": "./GitHub/GitHub/RasaHQ-rasa",
    "commit": "f78a6a17d5146248500630a2397ee099a24e0f5c",
    "filename": "rasa/nlu/classifiers/diet_classifier.py",
    "source_code": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"{file_name}.tf_model\"",
    "target_code": "\n        <DED>model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\"{file_name}.tf_model\"\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `/` is not supported for operand types `str` and `str`.",
    "warning_line": 1015,
    "pred_top-1": {
      "pred": "model_dir = Path(model_dir)\ntf_model_file = model_dir / f\"{file_name}.tf_model\"",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"{file_name}.tf_model\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "model_dir = Path(model_dir)\ntf_model_file = model_dir / Path(f\"{file_name}.tf_model\")",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / Path(f\"{file_name}.tf_model\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "model_dir = Path(model_dir)\ntf_model_file = model_dir / f\"{file_name}.tf_model\"",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"{file_name}.tf_model\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "model_dir = Path(model_dir)\ntf_model_file = model_dir / Path(f\"{file_name}.tf_model\")",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = model_dir / Path(f\"{file_name}.tf_model\")\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "model_dir = Path(model_dir)\ntf_model_file = Path(model_dir) / f\"{file_name}.tf_model\"",
      "pred_parsed": "        model_dir = Path(model_dir)\n        tf_model_file = Path(model_dir) / f\"{file_name}.tf_model\"\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "lykoss/lykos",
    "repo_dir": "./GitHub/GitHub/lykoss-lykos",
    "commit": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "filename": "src/users.py",
    "source_code": "        # So if any list is non-empty, something went terribly wrong\n        assert not self.lists + self.sets + self.dict_keys + self.dict_values",
    "target_code": "        # So if any list is non-empty, something went terribly wrong\n        <DED><DED>assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values\n\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `+` is not supported for operand types `typing.List[UserList]` and `typing.List[UserSet]`.",
    "warning_line": 464,
    "pred_top-1": {
      "pred": "# So if any list is non-empty, something went terribly wrong\n                assert not (self.lists or self.sets or self.dict_keys or self.dict_values)",
      "pred_parsed": "        # So if any list is non-empty, something went terribly wrong\n        assert not (self.lists or self.sets or self.dict_keys or self.dict_values)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-2": {
      "pred": "# So if any list is non-empty, something went terribly wrong\n                assert not (self.lists or self.sets or self.dict_keys or self.dict_values)",
      "pred_parsed": "        # So if any list is non-empty, something went terribly wrong\n        assert not (self.lists or self.sets or self.dict_keys or self.dict_values)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-3": {
      "pred": "# So if any list is non-empty, something went terribly wrong\nassert not any(self.lists + self.sets + self.dict_keys + self.dict_values)",
      "pred_parsed": "        # So if any list is non-empty, something went terribly wrong\n        assert not any(self.lists + self.sets + self.dict_keys + self.dict_values)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-4": {
      "pred": "# So if any list is non-empty, something went terribly wrong\nassert not any(self.lists + self.sets + self.dict_keys + self.dict_values)",
      "pred_parsed": "        # So if any list is non-empty, something went terribly wrong\n        assert not any(self.lists + self.sets + self.dict_keys + self.dict_values)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "pred_top-5": {
      "pred": "# So if any list is non-empty, something went terribly wrong\nassert not any(self.lists) and not any(self.sets) and not any(self.dict_keys) and not any(self.dict_values)",
      "pred_parsed": "        # So if any list is non-empty, something went terribly wrong\n        assert not any(self.lists) and not any(self.sets) and not any(self.dict_keys) and not any(self.dict_values)\n",
      "warning_removed": true,
      "fail_reason": "N/A"
    },
    "top-1_removal": true,
    "top-3_removal": true,
    "top-5_removal": true
  },
  {
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "repo_dir": "./GitHub/GitHub/Trusted-AI-adversarial-robustness-toolbox",
    "commit": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37",
    "filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "source_code": "    def _check_params(self) -> None:\n        if self.step <= 0:\n            raise ValueError(\"Step size must be strictly positive.\")\n        if self.eps <= 0:\n            raise ValueError(\"Value of eps must be strictly positive.\")",
    "target_code": "    <DED>def _check_params(self) -> None:\n        <IND>if self.step is not None and self.step <= 0:\n            <IND>raise ValueError(\"Step size must be strictly positive.\")\n        <DED>if self.eps is not None and self.eps <= 0:\n            <IND>raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "warning_type": "Unsupported operand [58]",
    "warning_message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
    "warning_line": 148,
    "pred_top-1": {
      "pred": "def _check_params(self) -> None:\n    if self.step <= 0:\n        raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps <= 0:\n        raise ValueError(\"Value of eps must be strictly positive.\")",
      "pred_parsed": "    def _check_params(self) -> None:\n    if self.step <= 0:\n    raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps <= 0:\n    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def _check_params(self) -> None:\n    if self.step <= 0:\n        raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps <= 0:\n        raise ValueError(\"Value of eps must be strictly positive.\")",
      "pred_parsed": "    def _check_params(self) -> None:\n    if self.step <= 0:\n    raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps <= 0:\n    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def _check_params(self) -> None:\n    if self.step <= 0:\n        raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps <= 0:\n        raise ValueError(\"Value of eps must be strictly positive.\")",
      "pred_parsed": "    def _check_params(self) -> None:\n    if self.step <= 0:\n    raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps <= 0:\n    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def _check_params(self) -> None:\n    if self.step <= 0:\n        raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps <= 0:\n        raise ValueError(\"Value of eps must be strictly positive.\")",
      "pred_parsed": "    def _check_params(self) -> None:\n    if self.step <= 0:\n    raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps <= 0:\n    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def _check_params(self) -> None:\n    if self.step <= 0:\n        raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps <= 0:\n        raise ValueError(\"Value of eps must be strictly positive.\")",
      "pred_parsed": "    def _check_params(self) -> None:\n    if self.step <= 0:\n    raise ValueError(\"Step size must be strictly positive.\")\n    if self.eps is not None and self.eps <= 0:\n    raise ValueError(\"Value of eps must be strictly positive.\")\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  },
  {
    "repo": "faust-streaming/faust",
    "repo_dir": "./GitHub/GitHub/faust-streaming-faust",
    "commit": "51de861ada304a1763a4872811274818a8ee0851",
    "filename": "faust/agents/agent.py",
    "source_code": "    def __aiter__(self) -> AsyncIterator:\n        return aiter(self._stream())",
    "target_code": "    <DED>def __aiter__(self) -> AsyncIterator:\n        <IND>return aiter(self._stream)\n",
    "warning_type": "Call error [29]",
    "warning_message": " `faust.types.streams.StreamT[typing.Any]` is not a function.",
    "warning_line": 1123,
    "pred_top-1": {
      "pred": "def __aiter__(self) -> AsyncIterator:\n    return aiter(self._stream().__anext__)",
      "pred_parsed": "    def __aiter__(self) -> AsyncIterator:\n    return aiter(self._stream().__anext__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-2": {
      "pred": "def __aiter__(self) -> AsyncIterator:\n    return aiter(self._stream.__call__())",
      "pred_parsed": "    def __aiter__(self) -> AsyncIterator:\n    return aiter(self._stream.__call__())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-3": {
      "pred": "def __aiter__(self) -> AsyncIterator:\n    return aiter(self._stream().items())",
      "pred_parsed": "    def __aiter__(self) -> AsyncIterator:\n    return aiter(self._stream().items())\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-4": {
      "pred": "def __aiter__(self) -> AsyncIterator:\n    return aiter(self._stream().__anext__)",
      "pred_parsed": "    def __aiter__(self) -> AsyncIterator:\n    return aiter(self._stream().__anext__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "pred_top-5": {
      "pred": "def __aiter__(self) -> AsyncIterator:\n    return aiter(self._stream().__anext__)",
      "pred_parsed": "    def __aiter__(self) -> AsyncIterator:\n    return aiter(self._stream().__anext__)\n",
      "warning_removed": false,
      "fail_reason": "New Error(s) Appear"
    },
    "top-1_removal": false,
    "top-3_removal": false,
    "top-5_removal": false
  }
]