[
  {
    "source_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")\n            <DED>elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "target_code": "\n                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constraint == 0 else 'check stack')}\")\n            <DED>elif opcode == AP2Action.ADD_NUM_REGISTER:\n",
    "warning_line": "                vprint(f\"{prefix}      {lineno}: {action_name} Constrain Mouse: {'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack')}\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `constrained` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 3041,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DragonMinded/bemaniutils",
    "source_filename": "bemani/format/afp.py",
    "target_filename": "bemani/format/afp.py",
    "source_changeid": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da^",
    "target_changeid": "72f81e4f58c2ef9d2b51f63ed7b52fbd9438a3da",
    "predictions": [
      "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "1": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "2": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "3": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "4": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "5": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "6": "<DED> vprint(f\" \n prefix <IND> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "7": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "8": "<DED> vprint(f\" \n prefix <DED> <DED> lineno \n : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "9": "<DED> vprint(f\" \n prefix <DED> <IND> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "10": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "11": "<DED> vprint(f\" \n prefix \n <DED> lineno \n : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "12": "<DED> vprint(f\" \n prefix \n <IND> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "13": "<DED> vprint(f\" \n prefix <IND> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "14": "<IND> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "15": "<DED> vprint(f\" \n prefix <IND> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "16": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name <DED> Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "17": "<IND> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "18": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name <DED> Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "19": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <IND> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "20": "<DED> vprint(f\" \n prefix <DED> <DED> lineno \n : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "21": "<DED> vprint(f\" \n prefix <DED> <DED> lineno \n : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "22": "<DED> vprint(f\" \n prefix <DED> <IND> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "23": "<DED> vprint(f\" \n prefix <DED> <IND> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "24": "<DED> vprint(f\" \n prefix \n <DED> lineno <IND> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "25": "<DED> vprint(f\" \n prefix \n <DED> lineno \n : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "26": "<DED> vprint(f\" \n prefix \n <DED> lineno \n : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "27": "<DED> vprint(f\" \n prefix \n <IND> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "28": "<DED> vprint(f\" \n prefix \n <IND> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "29": "<IND> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "30": "<DED> vprint(f\" \n prefix <IND> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "31": "<DED> vprint(f\" \n prefix <IND> <DED> lineno \n : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "32": "<IND> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "33": "<DED> vprint(f\" \n prefix <IND> <IND> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "34": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name <DED> Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "35": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n \n elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "36": "<IND> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "37": "<IND> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "38": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name <DED> Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "39": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <DED> : \n action_name <IND> Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "40": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name <DED> Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "41": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name <DED> Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "42": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n \n elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "43": "<IND> vprint(f\" \n prefix <IND> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "44": "<DED> vprint(f\" \n prefix \n <DED> lineno <DED> : \n action_name <IND> Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "45": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <IND> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "46": "<DED> vprint(f\" \n prefix <DED> <DED> lineno <IND> : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "47": "<DED> vprint(f\" \n prefix <DED> <DED> lineno \n : \n action_name \n Constrain Mouse: \n 'yes' if constraint is not None else ('no' if constrained == 0 else 'check stack') \n \") \n <IND> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "48": "<DED> vprint(f\" <IND> prefix <DED> <DED> lineno <DED> : \n action_name \n Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n",
      "49": "<DED> vprint(f\" \n prefix <IND> <DED> lineno <DED> : \n action_name <DED> Constrain Mouse: \n 'yes' if constraint > 0 else ('no' if constrained == 0 else 'check stack') \n \") \n <DED> elif opcode == AP2Action.ADD_NUM_REGISTER: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # Run some test predictions\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "target_code": "    # Run some test predictions\n    _, X_test, _, y_test = load_diabetes_dataset()\n    results = mean_squared_error(y_test, model.predict(X_test))\n",
    "warning_line": "    results = mean_squared_error(y_test, model.predict(X_test))",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `y_test` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 42,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "operatorai/modelstore",
    "source_filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "target_filename": "examples/examples-by-ml-library/libraries/keras_example.py",
    "source_changeid": "844f81b8e61e526f245bc146b37d65966f0433a2^",
    "target_changeid": "844f81b8e61e526f245bc146b37d65966f0433a2",
    "predictions": [
      "# Run some test predictions \n y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# Run some test predictions \n y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "1": "# Run some test predictions \n _, y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "2": "# Run some test predictions \n _, x_test, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "3": "# Run some test predictions \n _, X_test, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "4": "# Run some test predictions \n y_test = model.predict(X_test) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "5": "# Run some test predictions \n y_test = y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "6": "# Run some test predictions \n y_test = Y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "7": "# Run some test predictions \n y_test = mean_squared_error(y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "8": "# Run some test predictions \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "9": "# Run some test predictions \n _, X_test, _, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "10": "# Run some test predictions \n _, y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, _, model.predict(X_test)) \n",
      "11": "# Run some test predictions \n __test_results = mean_squared_error(y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "12": "# Run some test predictions \n _, x_test, _, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "13": "# Run some test predictions \n y_test_results = mean_squared_error(y_test_results, model.predict(X_test)) \n results = mean_squared_error(y_test_results, model.predict(X_test)) \n",
      "14": "# Run some test predictions \n _, _, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "15": "# Run some test predictions \n __test_error = mean_squared_error(y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "16": "# Run some test predictions \n y_test_results = mean_squared_error(y_test_results, model.predict(X_test)) \n results = mean_squared_error(y_test_results, model.predict(X_test_results)) \n",
      "17": "# Run some test predictions \n _ids = mean_squared_error(y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "18": "# Run some test predictions \n y_test_predictions = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "19": "# Run some test predictions \n mean_squared_error(y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "20": "# Run some test predictions \n _, x_test, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, x_test) \n",
      "21": "# Run some test predictions \n y_test_error = mean_squared_error(y_test_error, model.predict(X_test)) \n results = mean_squared_error(y_test_error, model.predict(X_test)) \n",
      "22": "# Run some test predictions \n y_test = Y_test.predict(X_test) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "23": "# Run some test predictions \n _, X_test, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, _, model.predict(X_test)) \n",
      "24": "# Run some test predictions \n _, y_test, _, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "25": "# Run some test predictions \n y_test_error = mean_squared_error(y_test_error), model.predict(X_test)) \n results = mean_squared_error(y_test_error), model.predict(X_test_error)) \n",
      "26": "# Run some test predictions \n _, Y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "27": "# Run some test predictions \n y_test_results = mean_squared_error(y_test_results, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "28": "# Run some test predictions \n __test_results = mean_squared_error(y_test, model.predict(X_test)) \n results = mean_squared_error(__test, model.predict(X_test)) \n",
      "29": "# Run some test predictions \n _, x_test, _, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, _, model.predict(X_test)) \n",
      "30": "# Run some test predictions \n x_test = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "31": "# Run some test predictions \n _, x_test, y_test = test.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "32": "# Run some test predictions \n _, x_test, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, _, model.predict(X_test)) \n",
      "33": "# Run some test predictions \n _, X_test, _, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, _, model.predict(X_test)) \n",
      "34": "# Run some test predictions \n _, x_test, y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "35": "# Run some test predictions \n y_test_results = mean_squared_error(y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "36": "# Run some test predictions \n y_test_results = mean_squared_error(y_test_results, model.predict(X_test)) \n results = mean_squared_error(y_test_results), model.predict(X_test_results) \n",
      "37": "# Run some test predictions \n __test_error = mean_squared_error(y_test, model.predict(X_test)) \n results = mean_squared_error(__test, model.predict(X_test)) \n",
      "38": "# Run some test predictions \n y_test_error = mean_squared_error(y_test_error, model.predict(X_test)) \n results = mean_squared_error(y_test_error), model.predict(X_test_error)) \n",
      "39": "# Run some test predictions \n _, _, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, _, model.predict(X_test)) \n",
      "40": "# Run some test predictions \n _, x_test, y_test = model.predict(X_test)) \n results = mean_squared_error(x_test, model.predict(X_test)) \n",
      "41": "# Run some test predictions \n y_test_predict = model.predict(X_test)) \n results = mean_squared_error(y_test_predict) \n",
      "42": "# Run some test predictions \n y_test_error = mean_squared_error(y_test, model.predict(X_test)) \n results = mean_squared_error(y_test_error, model.predict(X_test)) \n",
      "43": "# Run some test predictions \n y_test = y_test.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "44": "# Run some test predictions \n y_test_error = mean_squared_error(y_test_error), model.predict(X_test)) \n results = mean_squared_error(y_test_error, model.predict(X_test)) \n",
      "45": "# Run some test predictions \n y_test_results = mean_squared_error(y_test_results, model.predict(X_test)) \n results = mean_squared_error(y_test_results), model.predict(X_test_results) \n \n",
      "46": "# Run some test predictions \n _, X_test, y_test = model.predict(X_test)) \n results = mean_squared_error(y_test, _, X_test) \n",
      "47": "# Run some test predictions \n _, X_test, _ = model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n",
      "48": "# Run some test predictions \n y_test_predictions = model.predict(X_test)) \n results = mean_squared_error(y_test_prediction, model.predict(X_test)) \n",
      "49": "# Run some test predictions \n y_test_error = mean_squared_error(y_test, model.predict(X_test)) \n results = mean_squared_error(y_test, model.predict(X_test)) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>\"\"\"WSGI controller for object requests.\"\"\"\n    server_type = _('Object')\n\n",
    "target_code": "    <IND>\"\"\"WSGI controller for object requests.\"\"\"\n    server_type = 'Object'\n\n",
    "warning_line": "    server_type = _('Object')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `_` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 235,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "openstack/swift",
    "source_filename": "swift/proxy/controllers/obj.py",
    "target_filename": "swift/proxy/controllers/obj.py",
    "source_changeid": "2a38a040924b621bce4e999b3c7dab692f497a21^",
    "target_changeid": "2a38a040924b621bce4e999b3c7dab692f497a21",
    "predictions": [
      "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "1": "<DED> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "2": "<IND> \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "3": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = _('Object') \n \n",
      "4": "{ \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "5": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n <DED>",
      "6": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n <IND>",
      "7": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = bool('Object') \n \n",
      "8": "} \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "9": "\n \"\"\"WSGI controller for object requests.\"\"\" <IND> server_type = 'Object' \n \n",
      "10": "\n \"\"\"WSGI controller for object requests.\"\"\" <DED> server_type = 'Object' \n \n",
      "11": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' <DED> \n",
      "12": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' <IND> \n",
      "13": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n {",
      "14": "\n \"\"\"WSGI controller for object requests.\"\"\" { server_type = 'Object' \n \n",
      "15": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = tuple('Object') \n \n",
      "16": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' { \n",
      "17": "\\ \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "18": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n }",
      "19": "\n \"\"\"WSGI controller for object requests.\"\"\" } server_type = 'Object' \n \n",
      "20": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' } \n",
      "21": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "22": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "23": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "24": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "25": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "26": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "27": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "28": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \\",
      "29": "^ \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "30": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "31": "\n \"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \\ \n",
      "32": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "33": "\n \"\"\"WSGI controller for object requests.\"\"\" \\ server_type = 'Object' \n \n",
      "34": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "35": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "36": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "37": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "38": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "39": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "40": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "41": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "42": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "43": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "44": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "45": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "46": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "47": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "48": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n",
      "49": "\"\"\"WSGI controller for object requests.\"\"\" \n server_type = 'Object' \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>@pyqtSlot()\n    @pyqtSignature('bool')  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "target_code": "\n    <DED>@pyqtSlot(bool)  # prevents actions being handled twice\n    def help_toggled(self, flag):\n",
    "warning_line": "    @pyqtSignature('bool')  # prevents actions being handled twice",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `pyqtSignature` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "inasafe/inasafe",
    "source_filename": "safe/gui/tools/peta_bencana_dialog.py",
    "target_filename": "safe/gui/tools/peta_bencana_dialog.py",
    "source_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74^",
    "target_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "predictions": [
      "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "1": "\n <IND> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "2": "\n \n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "3": "<DED> <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "4": "<IND> <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "5": "\n { @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "6": "\n } @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "7": "\n \\ @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "8": "{ <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "9": "<DED> <IND> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "10": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice <IND> def help_toggled(self, flag): \n",
      "11": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice <DED> def help_toggled(self, flag): \n",
      "12": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "13": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): <IND>",
      "14": "} <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "15": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): <DED>",
      "16": "<IND> <IND> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "17": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "18": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "19": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "20": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "21": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "22": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "23": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "24": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "25": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "26": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "27": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "28": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "29": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "30": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "31": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "32": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "33": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): {",
      "34": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "35": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "36": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "37": "\n <DED> @pyqtSlot(bool) # prevents actions being handled twice { def help_toggled(self, flag): \n",
      "38": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "39": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "40": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "41": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "42": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "43": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "44": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "45": "\n ^ @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "46": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "47": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "48": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n",
      "49": "\n @pyqtSlot(bool) # prevents actions being handled twice \n def help_toggled(self, flag): \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self._payload_post(\"/chat/remove_participants/\", data)\n\n    <DED>def _admin_status(self, user_ids: Iterable[str], status: bool):\n        <IND>data = {\"add\": admin, \"thread_fbid\": self.id}\n\n",
    "target_code": "        data = {\"uid\": user_id, \"tid\": self.id}\n        j = self.session._payload_post(\"/chat/remove_participants/\", data)\n\n    <DED>def _admin_status(self, user_ids: Iterable[str], status: bool):\n        <IND>data = {\"add\": status, \"thread_fbid\": self.id}\n\n",
    "warning_line": "        data = {\"add\": admin, \"thread_fbid\": self.id}",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `admin` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 75,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "fbchat-dev/fbchat",
    "source_filename": "fbchat/_group.py",
    "target_filename": "fbchat/_group.py",
    "source_changeid": "deda3b433d5759311fb8232f1d9b6db23a9d4372^",
    "target_changeid": "deda3b433d5759311fb8232f1d9b6db23a9d4372",
    "predictions": [
      "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "1": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "2": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "3": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "4": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "5": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "6": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "7": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "8": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "9": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "10": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "11": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "12": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "13": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "14": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "15": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "16": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "17": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "18": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "19": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "20": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "21": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "22": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "23": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "24": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "25": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "26": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "27": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "28": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "29": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "30": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "31": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "32": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "33": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "34": "data = \n \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "35": "data = <DED> \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "36": "data = \n \"uid\": user_id, \"tid\": self.id \n <IND> j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "37": "data = <DED> \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "38": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "39": "data = <DED> \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "40": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "41": "data = <IND> \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "42": "data = <IND> \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "43": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <DED> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "44": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "45": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <DED> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "46": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <IND> \"add\": admin, \"thread_fbid\": self.id \n \n",
      "47": "data = <DED> \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n \n <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "48": "data = <DED> \"uid\": user_id, \"tid\": self.id \n <DED> j = self._payload_post(\"/chat/remove_participants/\", data) \n <DED> <DED> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = \n \"add\": admin, \"thread_fbid\": self.id \n \n",
      "49": "data = \n \"uid\": user_id, \"tid\": self.id \n \n j = self._payload_post(\"/chat/remove_participants/\", data) \n <IND> <IND> def _admin_status(self, user_ids: Iterable[str], status: bool): \n <IND> data = <DED> \"add\": admin, \"thread_fbid\": self.id \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nkey1 = [rands(10) for _ in xrange(N)]\nkey2 = [rands(10) for _ in xrange(N)]\n\nzipped = izip(key1, key2)\n\n",
    "target_code": "\nkey1 = [rands(10) for _ in range(N)]\nkey2 = [rands(10) for _ in range(N)]\n\nzipped = list(zip(key1, key2))\n\n",
    "warning_line": "key1 = [rands(10) for _ in xrange(N)]",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 10,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pandas-dev/pandas",
    "source_filename": "scripts/bench_join_multi.py",
    "target_filename": "scripts/bench_join_multi.py",
    "source_changeid": "6c304c78d6a0559525abe16f03465d275c516455^",
    "target_changeid": "6c304c78d6a0559525abe16f03465d275c516455",
    "predictions": [
      "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <DED> zipped = izip(key1, key2) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <DED> zipped = izip(key1, key2) \n \n",
      "1": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <IND> zipped = izip(key1, key2) \n \n",
      "2": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "3": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n { zipped = izip(key1, key2) \n \n",
      "4": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n } zipped = izip(key1, key2) \n \n",
      "5": "<DED> key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <DED> zipped = izip(key1, key2) \n \n",
      "6": "<DED> key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <IND> zipped = izip(key1, key2) \n \n",
      "7": "<IND> key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <DED> zipped = izip(key1, key2) \n \n",
      "8": "<DED> key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "9": "<IND> key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <IND> zipped = izip(key1, key2) \n \n",
      "10": "<IND> key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n \n",
      "11": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \\ zipped = izip(key1, key2) \n \n",
      "12": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <DED> zipped = izip(key1, key2) \n <DED>",
      "13": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <DED> zipped = izip(key1, key2) \n <IND>",
      "14": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <IND> zipped = izip(key1, key2) \n <DED>",
      "15": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <IND> zipped = izip(key1, key2) \n <IND>",
      "16": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "17": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "18": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n <DED>",
      "19": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "20": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "21": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "22": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "23": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n \n zipped = izip(key1, key2) \n <IND>",
      "24": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "25": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "26": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "27": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "28": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "29": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "30": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "31": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "32": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "33": "{ key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <DED> zipped = izip(key1, key2) \n \n",
      "34": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "35": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "36": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "37": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "38": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n ^ zipped = izip(key1, key2) \n \n",
      "39": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "40": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "41": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "42": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "43": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "44": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "45": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "46": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "47": "{ key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n <IND> zipped = izip(key1, key2) \n \n",
      "48": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n",
      "49": "\n key1 = [rands(10) for _ in range(N)] \n key2 = [rands(10) for _ in range(N)] \n zipped = izip(key1, key2) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # GET nodes/<uuid>/state/power\n    <IND>@wsme_pecan.wsexpose(NodePowerState, unicode)\n    def get(self, node_id):\n",
    "target_code": "    # GET nodes/<uuid>/state/power\n    <IND>@wsme_pecan.wsexpose(NodePowerState, wtypes.text)\n    def get(self, node_id):\n",
    "warning_line": "    @wsme_pecan.wsexpose(NodePowerState, unicode)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `unicode` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 73,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "openstack/ironic",
    "source_filename": "ironic/api/controllers/v1/node.py",
    "target_filename": "ironic/api/controllers/v1/node.py",
    "source_changeid": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18^",
    "target_changeid": "6aec2c18ba7abf06f24ad5c9431c6395eac41f18",
    "predictions": [
      "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "1": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "2": "# GET nodes/uuid>/state/power \n \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "3": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, text) \n def get(self, node_id): \n",
      "4": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, text) \n def get(self, node_id): \n",
      "5": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, str) \n def get(self, node_id): \n",
      "6": "# GET nodes/uuid>/state/power \n { @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "7": "# GET nodes/uuid>/state/power \n } @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "8": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, str) \n def get(self, node_id): \n",
      "9": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan.wsexpose) \n def get(self, node_id): \n",
      "10": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, unicode) \n def get(self, node_id): \n",
      "11": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wsme_pecan.wsexpose) \n def get(self, node_id): \n",
      "12": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, unicode) \n def get(self, node_id): \n",
      "13": "# GET nodes/uuid>/state/power \n \n @wsme_pecan.wsexpose(NodePowerState, text) \n def get(self, node_id): \n",
      "14": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, wdocs.text) \n def get(self, node_id): \n",
      "15": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, wtypes.text) \n def get(self, node_id): \n",
      "16": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wdocs.text) \n def get(self, node_id): \n",
      "17": "# GET nodes/uuid>/state/power \n \\ @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "18": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wtypes.text) \n def get(self, node_id): \n",
      "19": "# GET nodes/uuid>/state/power \n \n @wsme_pecan.wsexpose(NodePowerState, str) \n def get(self, node_id): \n",
      "20": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState) \n def get(self, node_id): \n",
      "21": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState) \n def get(self, node_id): \n",
      "22": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, def get(self, node_id)) \n",
      "23": "# GET nodes/uuid>/state/power \n \n @wsme_pecan.wsexpose(NodePowerState, unicode) \n def get(self, node_id): \n",
      "24": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, def get(self, node_id)) \n",
      "25": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, non-str) \n def get(self, node_id): \n",
      "26": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "27": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "28": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "29": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "30": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, non-str) \n def get(self, node_id): \n",
      "31": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "32": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "33": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "34": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "35": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "36": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "37": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "38": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "39": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "40": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "41": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "42": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "43": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "44": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "45": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "46": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "47": "# GET nodes/uuid>/state/power \n @wsme_pecan.wsexpose(NodePowerState, wtype) \n def get(self, node_id): \n",
      "48": "# GET nodes/uuid>/state/power \n <DED> @wsme_pecan.wsexpose(NodePowerState, wdocs.docs) \n def get(self, node_id): \n",
      "49": "# GET nodes/uuid>/state/power \n <IND> @wsme_pecan.wsexpose(NodePowerState, wdocs.docs) \n def get(self, node_id): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": true,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>@pyqtSignature('')\n    def run_selected_clicked(self):\n",
    "target_code": "\n    <DED>@pyqtSlot()\n    def run_selected_clicked(self):\n",
    "warning_line": "    @pyqtSignature('')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `pyqtSignature` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 570,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "inasafe/inasafe",
    "source_filename": "safe/gui/tools/batch/batch_dialog.py",
    "target_filename": "safe/gui/tools/batch/batch_dialog.py",
    "source_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74^",
    "target_changeid": "8a2c28924860b8dc834766fd239cfef4dcf40a74",
    "predictions": [
      "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "1": "\n <IND> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "2": "\n <DED> @pyqtSignature(str('')) \n def run_selected_clicked(self): \n",
      "3": "\n \n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "4": "<DED> <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "5": "<IND> <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "6": "\n { @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "7": "\n } @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "8": "\n <IND> @pyqtSignature(str('')) \n def run_selected_clicked(self): \n",
      "9": "\n \\ @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "10": "{ <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "11": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "12": "<DED> <IND> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "13": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): <IND>",
      "14": "\n <DED> @pyqtSignature('') <DED> def run_selected_clicked(self): \n",
      "15": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): <DED>",
      "16": "\n <DED> @pyqtSignature('') <IND> def run_selected_clicked(self): \n",
      "17": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "18": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "19": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "20": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "21": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "22": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "23": "} <DED> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "24": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "25": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "26": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "27": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "28": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "29": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "30": "\n <DED> @pyqtSignature('') { def run_selected_clicked(self): \n",
      "31": "<IND> <IND> @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "32": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "33": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "34": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "35": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "36": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "37": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "38": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "39": "\n <DED> @pyqtSignature('') \n def run_selected_clicked(self): {",
      "40": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "41": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "42": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "43": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "44": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "45": "\n ^ @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "46": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "47": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "48": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n",
      "49": "\n @pyqtSignature('') \n def run_selected_clicked(self): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    raw_input('finished')\n",
    "target_code": "\n    input('finished')\n\n\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/convection/exponential2D/mesh2D.py",
    "target_filename": "examples/convection/exponential2D/mesh2D.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "\n input('finished') \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n input('finished') \n \n",
      "1": "\n input('finished') \n \n \n",
      "2": "\n input('finished') \n",
      "3": "\n input('finished') \n <IND>",
      "4": "\n input('finished') \n <DED>",
      "5": "<DED> input('finished') \n \n",
      "6": "\n input('finished') \n \n <DED>",
      "7": "<IND> input('finished') \n \n",
      "8": "\n input('finished') \n \n <IND>",
      "9": "\n input('finished') \n {",
      "10": "\n input('finished') \n }",
      "11": "\n input('finished') \n <IND> \n",
      "12": "\n input('finished') \n <DED> \n",
      "13": "\n input('finished') \n \n \n \n",
      "14": "\n input('finished') \n \n {",
      "15": "\n input('finished') \n \n }",
      "16": "<DED> input('finished') \n \n \n",
      "17": "{ input('finished') \n \n",
      "18": "\n input('finished') \n \\",
      "19": "\n input('finished') <IND> \n",
      "20": "\n input('finished') <DED> \n",
      "21": "<IND> input('finished') \n \n \n",
      "22": "\n input('finished') \n { \n",
      "23": "\n input('finished') \n",
      "24": "} input('finished') \n \n",
      "25": "\n input('finished') { \n",
      "26": "\n input('finished') \n } \n",
      "27": "\n input('finished') \n",
      "28": "\n input('finished') \n",
      "29": "\n input('finished') \n",
      "30": "\n input('finished') \n",
      "31": "\n input('finished') \n",
      "32": "\n input('finished') \n",
      "33": "\n input('finished') \n",
      "34": "\n input('finished') \n",
      "35": "\n input('finished') \n",
      "36": "\n input('finished') \n",
      "37": "\n input('finished') \n ^",
      "38": "\n input('finished') \n",
      "39": "\n input('finished') \n",
      "40": "\n input('finished') \n \n \\",
      "41": "\n input('finished') \n",
      "42": "\n input('finished') \n",
      "43": "\n input('finished') \n",
      "44": "\n input('finished') \n",
      "45": "\n input('finished') \n",
      "46": "\n input('finished') } \n",
      "47": "\n input('finished') \n",
      "48": "\n input('finished') \n",
      "49": "\n input('finished') \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    viewer.plot()\n    raw_input('finished')\n",
    "target_code": "    viewer.plot()\n    input('finished')\n\n\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 70,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/levelSet/distanceFunction/square.py",
    "target_filename": "examples/levelSet/distanceFunction/square.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "viewer.plot() \n input('finished') \n \n \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "viewer.plot() \n input('finished') \n \n \n \n",
      "1": "viewer.plot() \n input('finished') \n \n \n",
      "2": "viewer.plot() \n input('finished') \n \n \n \n \n",
      "3": "viewer.plot() \n input('finished') \n \n \n <DED>",
      "4": "viewer.plot() \n input('finished') \n \n \n <IND>",
      "5": "viewer.plot() \n input('finished') \n \n <IND> \n",
      "6": "viewer.plot() \n input('finished') \n \n <DED> \n",
      "7": "viewer.plot() \n input('finished') \n \n",
      "8": "viewer.plot() \n input('finished') \n \n \n \n <DED>",
      "9": "viewer.plot() \n input('finished') \n \n \n \n <IND>",
      "10": "viewer.plot() \n input('finished') \n <IND> \n \n",
      "11": "viewer.plot() \n input('finished') \n \n \n {",
      "12": "viewer.plot() \n input('finished') \n \n \n }",
      "13": "viewer.plot() \n input('finished') \n <DED> \n \n",
      "14": "viewer.plot() \n input('finished') \n \n \n <DED> \n",
      "15": "viewer.plot() \n input('finished') \n \n \n <IND> \n",
      "16": "viewer.plot() \n input('finished') \n \n { \n",
      "17": "viewer.plot() \n input('finished') \n \n } \n",
      "18": "viewer.plot() \n input('finished') \n \n \n \n {",
      "19": "viewer.plot() \n input('finished') \n \n \n \n }",
      "20": "viewer.plot() \n input('finished') \n \n <IND>",
      "21": "viewer.plot() \n input('finished') \n \n <DED>",
      "22": "viewer.plot() \n input('finished') \n \n <IND> \n \n",
      "23": "viewer.plot() \n input('finished') \n \n \n \\",
      "24": "viewer.plot() \n input('finished') \n \n <DED> \n \n",
      "25": "viewer.plot() \n input('finished') \n { \n \n",
      "26": "viewer.plot() \n input('finished') \n } \n \n",
      "27": "viewer.plot() \n input('finished') \n <IND> \n",
      "28": "viewer.plot() \n input('finished') \n \n \n { \n",
      "29": "viewer.plot() \n input('finished') \n \n \n",
      "30": "viewer.plot() \n input('finished') \n <IND> \n \n \n",
      "31": "viewer.plot() \n input('finished') \n \n \n",
      "32": "viewer.plot() \n input('finished') \n \n \n",
      "33": "viewer.plot() \n input('finished') \n \n \n",
      "34": "viewer.plot() \n input('finished') \n \n \n",
      "35": "viewer.plot() \n input('finished') \n \n \n } \n",
      "36": "viewer.plot() \n input('finished') \n <DED> \n",
      "37": "viewer.plot() \n input('finished') \n <DED> \n \n \n",
      "38": "viewer.plot() \n input('finished') \n \n \n",
      "39": "viewer.plot() \n input('finished') \n \n \n",
      "40": "viewer.plot() \n input('finished') \n \n \n",
      "41": "viewer.plot() \n input('finished') \n \n \\ \n",
      "42": "viewer.plot() \n input('finished') \n \n \n",
      "43": "viewer.plot() \n input('finished') \n \n \n",
      "44": "viewer.plot() \n input('finished') \n \n \n",
      "45": "viewer.plot() \n input('finished') \n \n \n ^",
      "46": "viewer.plot() \n input('finished') \n \n \n",
      "47": "viewer.plot() \n input('finished') \n \n \n \n \\",
      "48": "viewer.plot() \n input('finished') \n \n \n",
      "49": "viewer.plot() \n input('finished') \n \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if not r.ok:\n            <IND>return PaymentStatus(r, None)\n        <DED>payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]\n        payment = payments[0] if payments else None\n",
    "target_code": "        if not r.ok:\n            <IND>return PaymentStatus(None)\n        <DED>payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == checking_id]\n        payment = payments[0] if payments else None\n",
    "warning_line": "        payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash]",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `payment_hash` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/wallets/clightning.py",
    "target_filename": "lnbits/wallets/clightning.py",
    "source_changeid": "c3e337a3195f1c2597fb11dc3ad3859c52634484^",
    "target_changeid": "c3e337a3195f1c2597fb11dc3ad3859c52634484",
    "predictions": [
      "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "1": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "2": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "3": "if not r.ok: \n <DED> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "4": "if not r.ok: \n <DED> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "5": "if not r.ok: \n <DED> return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "6": "if not r.ok: \n \n return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "7": "if not r.ok: \n \n return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "8": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payments_hash] \n payment = payments[0] if payments else None \n",
      "9": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n { payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "10": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payments_hash] \n payment = payments[0] if payments else None \n",
      "11": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n } payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "12": "if not r.ok: \n \n return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "13": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payments_hash] \n payment = payments[0] if payments else None \n",
      "14": "if not r.ok: \n { return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "15": "if not r.ok: \n } return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "16": "if not r.ok: \n { return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "17": "if not r.ok: \n } return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "18": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = payments[p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "19": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payments = payments[0] if payments else None \n",
      "20": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payments = payments[0] if payments else None \n",
      "21": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = payments[p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "22": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \\ payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "23": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if payment_hash is not None and p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "24": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if payment_hash is not None and p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "25": "if not r.ok: \n <DED> return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payments_hash] \n payment = payments[0] if payments else None \n",
      "26": "if not r.ok: \n <DED> return PaymentStatus(r, None) \n { payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "27": "if not r.ok: \n <DED> return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payments_hash] \n payment = payments[0] if payments else None \n",
      "28": "if not r.ok: \n <DED> return PaymentStatus(r, None) \n } payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "29": "if not r.ok: \n { return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "30": "if not r.ok: \n } return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "31": "if not r.ok: \n <IND> return PaymentStates(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "32": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "33": "if not r.ok: \n \\ return PaymentStatus(r, None) \n <IND> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "34": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments = payments[p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "35": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "36": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "37": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payments = payments[0] if payments else None \n",
      "38": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "39": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "40": "if not r.ok: \n \\ return PaymentStatus(r, None) \n <DED> payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "41": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <IND> payments = p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "42": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "43": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "44": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "45": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "46": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "47": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "48": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n payments = [p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n",
      "49": "if not r.ok: \n <IND> return PaymentStatus(r, None) \n <DED> payments = p for p in r.json()[\"payments\"] if p[\"payment_hash\"] == payment_hash] \n payment = payments[0] if payments else None \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.base import AuthViewSet\n\n\nclass PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):\n    <IND>",
    "target_code": "from api.v2.serializers.details import PlatformTypeSerializer\nfrom api.v2.views.base import AuthReadOnlyViewSet\n\n\nclass PlatformTypeViewSet(AuthReadOnlyViewSet):\n    <IND>",
    "warning_line": "class PlatformTypeViewSet(viewsets.ReadOnlyModelViewSet):",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `viewsets` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 7,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cyverse/atmosphere",
    "source_filename": "api/v2/views/platform_type.py",
    "target_filename": "api/v2/views/platform_type.py",
    "source_changeid": "d8f8caa69f3b76619119aa5a8336834cea381470^",
    "target_changeid": "d8f8caa69f3b76619119aa5a8336834cea381470",
    "predictions": [
      "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "1": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "2": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "3": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "4": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "5": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <IND> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "6": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "7": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n <DED> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "8": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <IND> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "9": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n <IND> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "10": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <IND> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "11": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <IND> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "12": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <DED> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "13": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n <DED> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "14": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <IND> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "15": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n <IND> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "16": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n \n <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "17": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <DED> <DED> class PlatformTypeReadOnlyViewSet(AuthReadOnlyViewSet): \n <IND>",
      "18": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <IND> <DED> class PlatformTypeReadOnlyViewSet(AuthReadOnlyViewSet): \n <IND>",
      "19": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n <IND> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "20": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n \n <DED> class PlatformTypeReadOnlyViewSet(AuthReadOnlyViewSet): \n <IND>",
      "21": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n \n <IND> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "22": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n <DED> <IND> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "23": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n <IND> <IND> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "24": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n \n <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "25": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <DED> <IND> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "26": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <IND> <IND> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "27": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <DED> <DED> class PlatformTypeViewSet(ReadOnlyViewSet): \n <IND>",
      "28": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <DED> class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "29": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <DED>",
      "30": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <DED> class PlatformTypeViewSet(AuthReadOnlyModelViewSet): \n <IND>",
      "31": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n <DED> <IND> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "32": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <DED>",
      "33": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <IND> <DED> class PlatformTypeViewSet(ReadOnlyViewSet): \n <IND>",
      "34": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> \n class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "35": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <DED> <IND> class PlatformTypeReadOnlyViewSet(AuthReadOnlyViewSet): \n <IND>",
      "36": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n \n <IND> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "37": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <DED>",
      "38": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n <IND> <IND> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "39": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> \n class PlatformTypeViewSet(ReadOnlyModelViewSet): \n <IND>",
      "40": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthSet \n \n <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "41": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <DED>",
      "42": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "43": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n <IND> <IND> class PlatformTypeReadOnlyViewSet(AuthReadOnlyViewSet): \n <IND>",
      "44": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthReadOnlyViewSet \n \n <DED> class PlatformTypeViewSet(ReadOnlyViewSet): \n <IND>",
      "45": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> \n class PlatformTypeViewSet(AuthReadOnlyViewSet): \n <IND>",
      "46": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n \n",
      "47": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <DED> class PlatformTypeViewSet(ReadOnlyModelViewSet): \n \n",
      "48": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <DED> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n \n",
      "49": "from api.v2.serializers.details import PlatformTypeSerializer \n from api.v2.base import AuthViewSet \n <IND> <DED> class PlatformTypeViewSet(AuthReadOnlyViewSet): \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        return self is other or (\n            isintance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "target_code": "        return self is other or (\n            isinstance(other, GraphQLScalarTypeExtension)\n            and other.directives == self.directives\n",
    "warning_line": "            isintance(other, GraphQLScalarTypeExtension)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `isintance` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 166,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tartiflette/tartiflette",
    "source_filename": "tartiflette/types/scalar.py",
    "target_filename": "tartiflette/types/scalar.py",
    "source_changeid": "3687c351642880d71c17be9eb508ef4f80bc6dcc^",
    "target_changeid": "3687c351642880d71c17be9eb508ef4f80bc6dcc",
    "predictions": [
      "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n"
    ],
    "correct": true,
    "top_five": {
      "0": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "1": "return self is other or ( \n GraphQLScalarTypeExtension isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "2": "return self is other or ( \n else.isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "3": "return self is other or ( \n assert else is not None \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "4": "return self is other or ( \n other.directives == self.directives \n ) \n return self.isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "5": "return self is other or ( \n assert isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "6": "return self is other or ( \n str(isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "7": "return self is other or ( \n str(isinstance(other, GraphQLScalarTypeExtension)) \n and other.directives == self.directives \n",
      "8": "return self is other or ( \n else.intance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "9": "return self is other or ( \n str(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "10": "return self is other or ( \n GraphQLScalarTypeExtension isinstance(other), GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "11": "return self is other or ( \n GraphQLScalarTypeExtension is not None \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "12": "return self is other or ( \n GraphQLScalarTypeExtension isinstance(other) \n and other.directives == self.directives \n",
      "13": "return self is other or ( \n assert self.directives is not None \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "14": "return self is other or ( \n GraphQLScalarTypeExtension or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "15": "return self is other or ( \n self.isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "16": "return self is other or GraphQLScalarTypeExtension or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "17": "return self is other or ( \n GraphQLScalarTypeExtension.isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "18": "return self is other or ( \n other.intance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "19": "return self is other or ( <DED> isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "20": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) <DED> and other.directives == self.directives \n",
      "21": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives <IND>",
      "22": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) <IND> and other.directives == self.directives \n",
      "23": "return self is other or ( \n other.isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "24": "return self is other or ( <IND> isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "25": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives <DED>",
      "26": "return self is other or ( \n else.instance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "27": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) { and other.directives == self.directives \n",
      "28": "return self is other or ( { isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "29": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives {",
      "30": "return self is other or ( \n other.directives == self.directives \n and other.directives == self.directives \n",
      "31": "return self is other or ( \n GraphQLScalarTypeExtension isinstance(other, Other) \n and other.directives == self.directives \n",
      "32": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) } and other.directives == self.directives \n",
      "33": "return self is other or ( \n isinstance(other, GraphQLTypeExtension) \n and other.directives == self.directives \n",
      "34": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives }",
      "35": "return self is other or ( \n other.directives == self.directives \n",
      "36": "return self is other or ( \n GraphQLScalarTypeExtension isinstance(other, other.directives) \n and other.directives == self.directives \n",
      "37": "return self is other or ( } isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "38": "return self is other or ( \n isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "39": "return self is other or ( \n GraphQLScalarTypeExtension isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives <IND>",
      "40": "return self is other or ( \n isinstance(other, GraphQLscalarTypeExtension) \n and other.directives == self.directives \n",
      "41": "return self is other or ( \n GraphQLScalarTypeExtension isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives <DED>",
      "42": "return self is other or ( \n other.instance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "43": "return self is other or ( \n str(isinstance(other), GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "44": "return self is other or ( \n GraphQLScalarTypeExtension and other.directives == self.directives \n",
      "45": "return self is other or ( \n str(self, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "46": "return self is other or ( \n GraphQLScalarTypeExtension isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives {",
      "47": "return self is other or ( \n GraphQLScalarTypeExtension) \n and other.directives == self.directives \n",
      "48": "return self is other or ( \n GraphQLScalarTypeExtension or else) \n and other.directives == self.directives \n",
      "49": "return self is other or ( \n assertion isinstance(other, GraphQLScalarTypeExtension) \n and other.directives == self.directives \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    _example_code = u'F'\n    _valid_ingestibles = set(xrange(10, 14))\n\n",
    "target_code": "    _example_code = u'F'\n    _valid_ingestibles = set(range(10, 14))\n\n",
    "warning_line": "    _valid_ingestibles = set(xrange(10, 14))",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 384,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wrye-bash/wrye-bash",
    "source_filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "target_filename": "Mopy/bash/patcher/patchers/multitweak_names.py",
    "source_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211^",
    "target_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "predictions": [
      "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10, 14))) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10, 14))) \n \n",
      "1": "_example_code = u'F' \n _valid_ingestibles = set(xrange(10, 14)) \n \n",
      "2": "_example_code = u'F' \n _valid_ingestibles = set(list(xrange(10, 14))) \n \n",
      "3": "_example_code = u'F' \n _valid_ingestibles = set(set(range(10, 14))) \n \n",
      "4": "_example_code = u'F' \n _valid_ingestibles = set(0, 14)) \n \n",
      "5": "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10), 14)) \n \n",
      "6": "_example_code = u'F' \n _valid_ingestibles = set(six.range(10, 14)) \n \n",
      "7": "_example_code = u'F' \n _valid_ingestibles = set(np.ndarray) \n \n",
      "8": "_example_code = u'F' \n _valid_ingestibles = set(list(xrange(10), 14))) \n \n",
      "9": "_example_code = u'F' \n _valid_ingestibles = set(defined(xrange(10, 14))) \n \n",
      "10": "_example_code = u'F' \n _valid_ingestibles = set(result(xrange(10, 14))) \n \n",
      "11": "_example_code = u'F' \n _valid_ingestibles = set(_range(10, 14)) \n \n",
      "12": "_example_code = u'F' \n _valid_ingestibles = set(list(range(10, 14))) \n \n",
      "13": "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10), 14)) \n \n",
      "14": "_example_code = u'F' \n _valid_ingestibles = set((xrange(10, 14))) \n \n",
      "15": "_example_code = u'F' \n _valid_ingestibles = set('xrange', '14') \n \n",
      "16": "_example_code = u'F' \n _valid_ingestibles = set(xrange(10), 14)) \n \n",
      "17": "_example_code = u'F' \n _valid_ingestibles = set(length(xrange(10, 14))) \n \n",
      "18": "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10, 14))) \n <DED>",
      "19": "_example_code = u'F' \n _valid_ingestibles = set(list(xrange(10), 14)) \n \n",
      "20": "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10, 14))) \n <IND>",
      "21": "_example_code = u'F' \n _valid_ingestibles = set(set(10, 14)) \n \n",
      "22": "_example_code = u'F' \n _valid_ingestibles = set(set(0, 14)) \n \n",
      "23": "_example_code = u'F' \n _valid_ingestibles = set(group(xrange(10, 14))) \n \n",
      "24": "_example_code = u'F' \n _valid_ingestibles = set(str(xrange(10, 14))) \n \n",
      "25": "_example_code = u'F' \n _valid_ingestibles = set(multiply(xrange(10, 14))) \n \n",
      "26": "_example_code = u'F' \n _valid_ingestibles = set(list(xrange(10), 14)) \n \n",
      "27": "_example_code = u'F' \n _valid_ingestibles = set(quota(xrange(10, 14))) \n \n",
      "28": "_example_code = u'F' \n _valid_ingestibles = set(set(np.ndarray)) \n \n",
      "29": "_example_code = u'F' \n _valid_ingestibles = set(tuple(xrange(10, 14))) \n \n",
      "30": "_example_code = u'F' \n _valid_ingestibles = set( xrange(10, 14)) \n \n",
      "31": "_example_code = u'F' <IND> _valid_ingestibles = set(set(xrange(10, 14))) \n \n",
      "32": "_example_code = u'F' <DED> _valid_ingestibles = set(set(xrange(10, 14))) \n \n",
      "33": "_example_code = u'F' \n _valid_ingestibles = set(t.xrange(10, 14)) \n \n",
      "34": "_example_code = u'F' \n valid_ingestibles = set(set(xrange(10, 14))) \n \n",
      "35": "_example_code = u'F' \n _valid_ingestibles = set(xrange(10, 14)) \n <DED>",
      "36": "_example_code = u'F' \n _valid_ingestibles = set(full(), set(xrange(10, 14))) \n \n",
      "37": "_example_code = u'F' \n _valid_ingestibles = set(u'F', range(10, 14)) \n \n",
      "38": "_example_code = u'F' \n _valid_ingestibles = set(horizontal(xrange(10, 14))) \n \n",
      "39": "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10, 14))) <DED> \n",
      "40": "_example_code = u'F' \n _valid_ingestibles = set(xrange(10, 14)) \n <IND>",
      "41": "_example_code = u'F' \n _valid_ingestibles = set(00, 14)) \n \n",
      "42": "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10, 14))) <IND> \n",
      "43": "_example_code = u'F' \n _valid_ingestibles = set(list(10, 14)) \n \n",
      "44": "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10, 14))) \n {",
      "45": "_example_code = u'F' \n _valid_ingestibles = set('10', '14') \n \n",
      "46": "_example_code = u'F' \n _valid_ingestibles = set(set(xrange(10, 14))) { \n",
      "47": "_example_code = u'F' \n _valid_ingestibles = set(range(10, 14)) \n \n",
      "48": "_example_code = u'F' \n valid_ingestibles = set(xrange(10, 14)) \n \n",
      "49": "_example_code = u'F' \n _valid_ingestibles = set(xrange(10), 14)) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": true,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <DED><DED>else:\n                    <IND>joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(\n                        left._mir, right._tir, uid))\n                <DED>ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "target_code": "                <DED><DED>else:\n                    <IND>def joiner(left: MatrixTable):\n                        <IND>return MatrixTable(MatrixAnnotateRowsTable(left._mir, right._tir, uid, all_matches))\n                <DED><DED>ast = Join(GetField(TopLevelReference('va'), uid),\n",
    "warning_line": "                    joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable(",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `MatrixAnnotateRowsTable` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1637,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hail-is/hail",
    "source_filename": "hail/python/hail/table.py",
    "target_filename": "hail/python/hail/table.py",
    "source_changeid": "a4f829b77eae7fb17752eb6185ad8a5313aea629^",
    "target_changeid": "a4f829b77eae7fb17752eb6185ad8a5313aea629",
    "predictions": [
      "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "1": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "2": "\n <DED> else: \n <DED> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "3": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "4": "\n <IND> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "5": "\n <DED> else: \n <DED> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "6": "\n <IND> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "7": "\n <DED> else: \n \n joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "8": "\n <DED> else: \n <DED> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "9": "\n <IND> else: \n <DED> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "10": "\n <IND> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "11": "\n \n else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "12": "\n <DED> else: \n \n joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "13": "\n <DED> else: \n <IND> lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "14": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "15": "\n <IND> else: \n <DED> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "16": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( <DED> left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "17": "\n \n else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "18": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( <IND> left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "19": "\n <DED> else: \n <IND> lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "20": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n { ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "21": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "22": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n } ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "23": "<IND> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "24": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( <DED> left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "25": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( <IND> left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "26": "<IND> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "27": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MultipleAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "28": "\n <DED> else: \n \n joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "29": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(TrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "30": "\n <DED> else: \n { joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "31": "\n <IND> else: \n \n joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "32": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MultipleAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "33": "\n } else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "34": "\n <DED> else: \n } joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "35": "\n { else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "36": "\n <IND> else: \n <DED> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "37": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( { left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "38": "\n \n else: \n <DED> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "39": "\n \n else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "40": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(TrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "41": "\n <DED> else: \n { joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "42": "\n <IND> else: \n \n joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "43": "<DED> <DED> else: \n <DED> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "44": "\n <DED> else: \n <DED> lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "45": "<DED> <DED> else: \n <IND> joiner = lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "46": "\n <IND> else: \n <IND> lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "47": "\n <DED> else: \n <IND> lambda left: MatrixTable(MatrixAnnotateRowsTable( \n left._mir, right._tir, uid)) \n \n ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "48": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(self, left._mir, right._tir, uid)) \n <DED> ast = Join(GetField(TopLevelReference('va'), uid), \n",
      "49": "\n <DED> else: \n <IND> joiner = lambda left: MatrixTable(self, left._mir, right._tir, uid)) \n <IND> ast = Join(GetField(TopLevelReference('va'), uid), \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED>elif platform_system == \"Windows\":\n    <IND>raise Error(\"Windows not supported\")\n\n<DED>else:\n    <IND>raise Error(\"Unknown platform\")\n\n",
    "target_code": "<DED>elif platform_system == \"Windows\":\n    <IND>raise NotImplementedError(\"Windows not supported\")\n\n<DED>else:\n    <IND>raise Exception(\"Unknown platform\")\n\n",
    "warning_line": "    raise Error(\"Windows not supported\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `Error` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 68,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "streamlit/streamlit",
    "source_filename": "examples/run_on_save.py",
    "target_filename": "examples/run_on_save.py",
    "source_changeid": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15^",
    "target_changeid": "443091b7b3c7aa0b7c6b628a0cb41a79d6febd15",
    "predictions": [
      "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "1": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "2": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "3": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "4": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "5": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "6": "\n elif platform_system == \"Windows\": \n <DED> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "7": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "8": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "9": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "10": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> <DED> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "11": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n \n else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "12": "<IND> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "13": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> <DED> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "14": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <IND> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "15": "\n elif platform_system == \"Windows\": \n <DED> raise Error(\"Windows not supported\") \n <DED> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "16": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "17": "\n elif platform_system == \"Windows\": \n <DED> raise Error(\"Windows not supported\") \n <IND> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "18": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "19": "\n elif platform_system == \"Windows\": \n <DED> raise Error(\"Windows not supported\") \n \n <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "20": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform not supported\") \n \n <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "21": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "22": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n \n raise Error(\"Unknown platform\") \n \n",
      "23": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> \n else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "24": "<IND> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "25": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> <IND> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "26": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> \n else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "27": "<IND> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "28": "<IND> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "29": "\n elif platform_system == \"Windows\": \n \n raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "30": "\n elif platform_system == \"Windows\": \n <DED> raise Error(\"Windows not supported\") \n \n <DED> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "31": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform not supported\") \n \n <DED> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "32": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "33": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform not supported\") \n <DED> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "34": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> <IND> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "35": "\n elif platform_system == \"Windows\": \n <DED> raise Error(\"Windows not supported\") \n <DED> <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "36": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> <DED> else: \n \n raise Error(\"Unknown platform\") \n \n",
      "37": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <DED> <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "38": "\n elif platform_system == \"Windows\": \n <DED> raise Error(\"Unknown platform not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "39": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform not supported\") \n <IND> <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "40": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n \n else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "41": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "42": "<DED> elif platform_system == \"Windows\": \n <DED> raise Error(\"Windows not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "43": "<IND> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <DED> else: \n <DED> raise Error(\"Unknown platform\") \n \n",
      "44": "\n elif platform_system == \"Windows\": \n <DED> raise Error(\"Windows not supported\") \n <IND> <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "45": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> <DED> else: \n \n raise Error(\"Unknown platform\") \n \n",
      "46": "<DED> elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n <IND> <IND> else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "47": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Windows not supported\") \n \n <IND> else: \n \n raise Error(\"Unknown platform\") \n \n",
      "48": "\n elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform not supported\") \n \n \n else: \n <IND> raise Error(\"Unknown platform\") \n \n",
      "49": "<IND> elif platform_system == \"Windows\": \n <IND> raise Error(\"Unknown platform not supported\") \n \n <DED> else: \n <IND> raise Error(\"Unknown platform\") \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>@typecheck(structs=oneof(expr_array, listof(Struct)),\n           identifier=str)\n",
    "target_code": "\n<DED>@typecheck(structs=oneof(expr_array),\n           identifier=str)\n",
    "warning_line": "@typecheck(structs=oneof(expr_array, listof(Struct)),",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `listof` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 649,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hail-is/hail",
    "source_filename": "python/hail/expr/functions.py",
    "target_filename": "python/hail/expr/functions.py",
    "source_changeid": "03529d3cea41debbdb3cfd3dbc390337f438fbb5^",
    "target_changeid": "03529d3cea41debbdb3cfd3dbc390337f438fbb5",
    "predictions": [
      "\n <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "1": "\n <IND> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "2": "\n \n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "3": "<DED> <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "4": "<IND> <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "5": "\n { @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "6": "\n } @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "7": "\n \\ @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "8": "\n <DED> @typecheck(structs=oneof(expr_array), <DED> identifier=str) \n",
      "9": "<DED> <IND> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "10": "\n <DED> @typecheck(structs=oneof(expr_array), <IND> identifier=str) \n",
      "11": "{ <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "12": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "13": "<IND> <IND> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "14": "\n <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) <IND>",
      "15": "\n <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) <DED>",
      "16": "} <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "17": "\n <DED> @typecheck(structs=oneof(expr_array), { identifier=str) \n",
      "18": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "19": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "20": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "21": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "22": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "23": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "24": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "25": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "26": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "27": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "28": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "29": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "30": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "31": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "32": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "33": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "34": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "35": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "36": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "37": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "38": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "39": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "40": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "41": "\n <DED> @typecheck(structs=oneof(expr_array), \n identifier=str) {",
      "42": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "43": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "44": "\n ^ @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "45": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "46": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "47": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "48": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n",
      "49": "\n @typecheck(structs=oneof(expr_array), \n identifier=str) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    surfactantViewer.plot()\n    print surfactantVariable\n    raw_input('finished')\n",
    "target_code": "    surfactantViewer.plot()\n    print(surfactantVariable)\n    input('finished')\n",
    "warning_line": "    raw_input('finished')",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 88,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/levelSet/surfactant/square.py",
    "target_filename": "examples/levelSet/surfactant/square.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \n",
      "1": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \n \n",
      "2": "surfactantViewer.plot() \n print surfactantVariable \n input('finished') \n \n",
      "3": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "4": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n <IND>",
      "5": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n <DED>",
      "6": "surfactantViewer.plot() \n input('finished') \n \n",
      "7": "surfactantViewer.plot() \n print surfactantVariable \n input('finished') \n \n \n",
      "8": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n {",
      "9": "surfactantViewer.plot() \n print (surfactantVariable) \n input('finished') \n \n",
      "10": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \n <DED>",
      "11": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \n <IND>",
      "12": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n }",
      "13": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n <IND> \n",
      "14": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n <DED> \n",
      "15": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \\",
      "16": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \n {",
      "17": "surfactantViewer.plot() <IND> print(surfactantVariable) \n input('finished') \n \n",
      "18": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n \n }",
      "19": "surfactantViewer.plot() <DED> print(surfactantVariable) \n input('finished') \n \n",
      "20": "surfactantViewer.plot() \n print(surfactantVariable) <IND> input('finished') \n \n",
      "21": "surfactantViewer.plot() \n print(surfactantVariable) <DED> input('finished') \n \n",
      "22": "surfactantViewer.plot() \n input('finished') \n \n \n",
      "23": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') <IND> \n",
      "24": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') <DED> \n",
      "25": "surfactantViewer.plot() \n print surfactantVariable \n input('finished') \n <IND>",
      "26": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "27": "surfactantViewer.plot() \n print surfactantVariable \n input('finished') \n <DED>",
      "28": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n { \n",
      "29": "surfactantViewer.plot() { print(surfactantVariable) \n input('finished') \n \n",
      "30": "surfactantViewer.plot() \n print(surfactantVariable) { input('finished') \n \n",
      "31": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "32": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "33": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "34": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') { \n",
      "35": "surfactantViewer.plot() \n print surfactantVariable \n input('finished') \n",
      "36": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "37": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "38": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n } \n",
      "39": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "40": "surfactantViewer.plot() \n print (surfactantVariable) \n input('finished') \n \n \n",
      "41": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "42": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "43": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "44": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "45": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "46": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "47": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n",
      "48": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n ^",
      "49": "surfactantViewer.plot() \n print(surfactantVariable) \n input('finished') \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED><DED>_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8)\n\n",
    "target_code": "<DED><DED>_BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = range(8)\n\n",
    "warning_line": "_UPDATE = xrange(8)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `xrange` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 296,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wrye-bash/wrye-bash",
    "source_filename": "Mopy/bash/basher/frames.py",
    "target_filename": "Mopy/bash/basher/frames.py",
    "source_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211^",
    "target_changeid": "65bac9cf90d11d24003971cbe457a93e7138c211",
    "predictions": [
      "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "1": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "2": "\n <IND> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "3": "\n <IND> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "4": "\n \n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "5": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "6": "\n \n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "7": "<IND> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "8": "<DED> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "9": "<IND> <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "10": "\n { _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "11": "\n } _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "12": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n <IND>",
      "13": "\n { _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "14": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n <DED>",
      "15": "\n } _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "16": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n <IND>",
      "17": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n <DED>",
      "18": "\n \\ _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "19": "<DED> <IND> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "20": "{ <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "21": "\n \\ _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "22": "<DED> <IND> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "23": "<IND> <IND> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "24": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) <IND> \n",
      "25": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) <DED> \n",
      "26": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "27": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n {",
      "28": "{ <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "29": "} <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "30": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "31": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "32": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "33": "<IND> <IND> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n \n",
      "34": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "35": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "36": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "37": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "38": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) <IND> \n",
      "39": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "40": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "41": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) <DED> \n",
      "42": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "43": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "44": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "45": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "46": "\n <DED> _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT, _UPDATE = xrange(8) \n {",
      "47": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "48": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n",
      "49": "\n _BACK, _FORWARD, _MOD_LIST, _CRC, _VERSION, _LOAD_PLUGINS, _COPY_TEXT,_UPDATE = xrange(8) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def get_label(cls) -> str:\n        <IND>return self.__name__  #\u00a0default label is the class name\n\n",
    "target_code": "    def get_label(cls) -> str:\n        <IND>return cls.__name__  # default label is the class name\n\n",
    "warning_line": "        return self.__name__  #\u00a0default label is the class name",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `self` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "algoo/preview-generator",
    "source_filename": "preview_generator/preview/generic_preview.py",
    "target_filename": "preview_generator/preview/generic_preview.py",
    "source_changeid": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2^",
    "target_changeid": "2426a0d353c61b3970d8930eafd8f9f3a9be90c2",
    "predictions": [
      "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n \n",
      "1": "def get_label(cls) -> str: \n <DED> return self.__name__ # default label is the class name \n \n",
      "2": "def get_label(cls) -> str: \n \n return self.__name__ # default label is the class name \n \n",
      "3": "def get_label(cls) -> str: \n { return self.__name__ # default label is the class name \n \n",
      "4": "def get_label(cls) -> str: \n } return self.__name__ # default label is the class name \n \n",
      "5": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n <IND>",
      "6": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n <DED>",
      "7": "def get_label(cls) -> str: \n \\ return self.__name__ # default label is the class name \n \n",
      "8": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name <IND> \n",
      "9": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name <DED> \n",
      "10": "def get_label(cls) -> str: <IND> <IND> return self.__name__ # default label is the class name \n \n",
      "11": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "12": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "13": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "14": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "15": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "16": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "17": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "18": "def get_label(cls) -> str: <DED> <IND> return self.__name__ # default label is the class name \n \n",
      "19": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "20": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "21": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "22": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "23": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "24": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "25": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "26": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "27": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name \n {",
      "28": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "29": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "30": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "31": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "32": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "33": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "34": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "35": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "36": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "37": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "38": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "39": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "40": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "41": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "42": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "43": "def get_label(cls) -> str: \n <IND> return self.__name__ # default label is the class name { \n",
      "44": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "45": "def get_label(cls) -> str: \n ^ return self.__name__ # default label is the class name \n \n",
      "46": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "47": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "48": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n",
      "49": "def get_label(cls) -> str: \n return self.__name__ # default label is the class name \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    raw_input(\"finished\")\n",
    "target_code": "\n    input(\"finished\")\n",
    "warning_line": "    raw_input(\"finished\")",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `raw_input` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 136,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "usnistgov/fipy",
    "source_filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "target_filename": "examples/elphf/diffusion/mesh1Ddimensional.py",
    "source_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787^",
    "target_changeid": "ccec299e7c00058b92e0c2d863f4a27c1eb2b787",
    "predictions": [
      "\n input(\"finished\") \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n input(\"finished\") \n",
      "1": "<DED> input(\"finished\") \n",
      "2": "<IND> input(\"finished\") \n",
      "3": "\n input(\"finished\") \n \n",
      "4": "\n input(\"finished\") <DED>",
      "5": "\n input(\"finished\") <IND>",
      "6": "{ input(\"finished\") \n",
      "7": "} input(\"finished\") \n",
      "8": "\n input(\"finished\") {",
      "9": "\n input(\"finished\") }",
      "10": "\\ input(\"finished\") \n",
      "11": "\n input(\"finished\") \n <DED>",
      "12": "\n input(\"finished\") \n <IND>",
      "13": "\n input(\"finished\") \\",
      "14": "input(\"finished\") \n",
      "15": "\n input(\"finished\")",
      "16": "input(\"finished\") \n",
      "17": "input(\"finished\") \n",
      "18": "input(\"finished\") \n",
      "19": "input(\"finished\") \n",
      "20": "\n input(\"finished\")",
      "21": "^ input(\"finished\") \n",
      "22": "\n input(\"finished\")",
      "23": "input(\"finished\") \n",
      "24": "input(\"finished\") \n",
      "25": "input(\"finished\") \n",
      "26": "\n input(\"finished\")",
      "27": "input(\"finished\") \n",
      "28": "input(\"finished\") \n",
      "29": "input(\"finished\") \n",
      "30": "input(\"finished\") \n",
      "31": "input(\"finished\") \n",
      "32": "input(\"finished\") \n",
      "33": "\n input(\"finished\")",
      "34": "input(\"finished\") \n",
      "35": "input(\"finished\") \n",
      "36": "input(\"finished\") \n",
      "37": "\n input(\"finished\")",
      "38": "input(\"finished\") \n",
      "39": "\n input(\"finished\")",
      "40": "\n input(\"finished\") ^",
      "41": "\n input(\"finished\")",
      "42": "\n input(\"finished\")",
      "43": "input(\"finished\") \n",
      "44": "\n input(\"finished\")",
      "45": "\n input(\"finished\")",
      "46": "input(\"finished\") \n",
      "47": "\n input(\"finished\")",
      "48": "input(\"finished\") \n",
      "49": "input(\"finished\") \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        \n self.conf = Config()\n\n",
    "target_code": "        \n        self.conf = Config()\n\n",
    "warning_line": "\tself.conf = Config()",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `self` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "naparuba/shinken",
    "source_filename": "shinken/scheduler.py",
    "target_filename": "shinken/scheduler.py",
    "source_changeid": "c06286af38d1d2593644ad708ee18f4fd7842d54^",
    "target_changeid": "c06286af38d1d2593644ad708ee18f4fd7842d54",
    "predictions": [
      "\n self = Config() \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n self = Config() \n \n",
      "1": "\n self.conf = Config() \n \n",
      "2": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n",
      "3": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n",
      "4": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n #",
      "5": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n #",
      "6": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf))) \n \n self.conf, tuple(self.conf, elif isinstance(self.conf), elif isinstance(self.conf)) \n \n",
      "7": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf))) \n \n self.conf, tuple(self.conf, elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf)) \n #",
      "8": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf, elif isinstance(self.conf), elif isinstance(self.conf)) \n #",
      "9": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf)) \n #",
      "10": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif isinstance(self.conf)) \n #",
      "11": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif)) \n #",
      "12": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf)) \n #",
      "13": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif isinstance(self.conf), elif)) \n #",
      "14": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif isinstance(self.conf))) \n \n ) \n \n",
      "15": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf))) \n \n self.conf, tuple(self.conf, elif isinstance(self.conf), elif isinstance(self.conf)) \n \n elif isinstance(self.conf, elif isinstance(self.conf), elif isinstance(self.conf)) \n #",
      "16": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf))) \n \n self.conf, tuple(self.conf, elif isinstance(self.conf), elif isinstance(self.conf)) \n \n elif isinstance(self.conf, elif isinstance(self.conf, elif isinstance(self.conf)) \n #",
      "17": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf))) \n \n self.conf, tuple(self.conf, elif isinstance(self.conf), elif isinstance(self.conf)) \n \n elif isinstance(self.conf), elif isinstance(self.conf, elif isinstance(self.conf)) \n #",
      "18": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf))) \n \n self.conf, elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf)) \n #",
      "19": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf))) \n \n self.conf, elif isinstance(self.conf, elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf)) \n #",
      "20": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif) # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif,",
      "22": "\n assert self.conf is not None \n self.conf = Config() \n \n",
      "23": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif)) \n #",
      "24": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, \"",
      "25": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif elif e",
      "26": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif elif elif el",
      "27": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif elif elif elif elif elif",
      "28": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif elif elif elif elif elif elif e",
      "29": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif) #",
      "30": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif)",
      "31": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif",
      "32": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif) # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "33": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, \"",
      "34": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif) # # # # # # # # # # # # # # # # # # # #",
      "35": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif)) \n #",
      "36": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif elif elif elif elif",
      "37": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, \"",
      "38": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif)) \n #",
      "39": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif)",
      "40": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif) continut",
      "41": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif) continut",
      "42": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif elif, elif elif elif elif",
      "43": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif)itudine",
      "44": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif) elif,",
      "45": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif) embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod embod",
      "46": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n",
      "47": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif) elif elif e",
      "48": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif elif,",
      "49": "\n if not isinstance(self, tuple(self.conf), tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf), elif isinstance(self.conf, tuple(self.conf, tuple(self.conf), elif isinstance(self.conf, elif))): \n <IND> self.conf = elif isinstance(self.conf) \n \n self.conf = elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf), elif isinstance(self.conf, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif, elif elif, elif, elif elif el"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>def _log_prob_with_subsetting(self,\n                                  obs: Union[Tensor, Cens],\n                                  group_idx: Selector,\n",
    "target_code": "    <DED>def _log_prob_with_subsetting(self,\n                                  obs: Tensor,\n                                  group_idx: Selector,\n",
    "warning_line": "                                  obs: Union[Tensor, Cens],",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `Cens` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 172,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "strongio/torch-kalman",
    "source_filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "target_filename": "torch_kalman/state_belief/families/censored_gaussian/censored_gaussian.py",
    "source_changeid": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca^",
    "target_changeid": "5d1bed409c26f0846ee71ee78ea5d1a3f3c36aca",
    "predictions": [
      "\n def _log_prob_with_subsetting(self, \n obs: Tensor, \n group_idx: Selector, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def _log_prob_with_subsetting(self, \n obs: Tensor, \n group_idx: Selector, \n",
      "1": "\n def _log_prob_with_subsetting(self, \n obs, \n group_idx: Selector, \n",
      "2": "\n def _log_prob_with_subsetting(self, \n obs: Union[Tensor, Tensor], \n group_idx: Selector, \n",
      "3": "\n def _log_prob_with_subsetting(self, \n obs, <DED> group_idx: Selector, \n",
      "4": "\n def _log_prob_with_subsetting(self, \n obs: Union[Tensor, Cens], \n group_idx: Selector, \n",
      "5": "\n def _log_prob_with_subsetting(self, \n obs, <IND> group_idx: Selector, \n",
      "6": "<DED> def _log_prob_with_subsetting(self, \n obs: Tensor, \n group_idx: Selector, \n",
      "7": "\n def _log_prob_with_subsetting(self, \n obs, { group_idx: Selector, \n",
      "8": "<IND> def _log_prob_with_subsetting(self, \n obs: Tensor, \n group_idx: Selector, \n",
      "9": "<DED> def _log_prob_with_subsetting(self, \n obs, \n group_idx: Selector, \n",
      "10": "\n def _log_prob_with_subsetting(self, \n obs, } group_idx: Selector, \n",
      "11": "\n def _log_prob_with_subsetting(self, \n obs, \n group_idx, \n",
      "12": "<IND> def _log_prob_with_subsetting(self, \n obs, \n group_idx: Selector, \n",
      "13": "\n def _log_prob_with_subsetting(self, \n obs=Tensor, \n group_idx= Selector, \n",
      "14": "\n def _log_prob_with_subsetting(self, \n obs, \\ group_idx: Selector, \n",
      "15": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "16": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "17": "\n def _log_prob_with_subsetting(self, \n obs = Tensor, \n group_idx = Selector, \n",
      "18": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "19": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "20": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "21": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "22": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "23": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "24": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "25": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "26": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "27": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "28": "\n def _log_prob_with_subsetting(self, \n obs, ^ group_idx: Selector, \n",
      "29": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "30": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "31": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "32": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "33": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "34": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "35": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "36": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "37": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "38": "<DED> def _log_prob_with_subsetting(self, \n obs, <DED> group_idx: Selector, \n",
      "39": "\n def _log_prob_with_subsetting(self, \n obs, Its group_idx: Selector, \n",
      "40": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "41": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "42": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "43": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "44": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "45": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "46": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "47": "\n def _log_prob_with_subsetting(self, \n obs, group_idx: Selector, \n",
      "48": "\n def _log_prob_with_subsetting(self, \n obs=Tensor, \n group_idx=Selector, \n",
      "49": "\n def _log_prob_with_subsetting(self, \n obs = Tensor, \n group_idx: Selector, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": true,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    required_params = (\n        ('product', unicode),\n        ('version', unicode),\n    )\n",
    "target_code": "    required_params = (\n        'product',\n        'version',\n    )\n",
    "warning_line": "        ('product', unicode),",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `unicode` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1460,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mozilla-services/socorro",
    "source_filename": "webapp-django/crashstats/crashstats/models.py",
    "target_filename": "webapp-django/crashstats/crashstats/models.py",
    "source_changeid": "ef180e818afd44ef793d9ffd2570883dedcc5084^",
    "target_changeid": "ef180e818afd44ef793d9ffd2570883dedcc5084",
    "predictions": [
      "required_params = ( \n ('product', unicode), \n ('version', unicode), \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "required_params = ( \n ('product', unicode), \n ('version', unicode), \n ) \n",
      "1": "required_params = ( \n ('product', 'text'), \n ('version', 'text'), \n ) \n",
      "2": "required_params = ( \n ('product', 'unicode'), \n ('version', 'unicode'), \n ) \n",
      "3": "required_params = ( \n ('product', 'utf-8'), \n ('version', 'utf-8'), \n ) \n",
      "4": "required_params = ( \n ('product', ''), \n ('version', ''), \n ) \n",
      "5": "required_params = ( \n ('product', unicode), \n ('version', version), \n ) \n",
      "6": "required_params = ( \n ('product', encoding), \n ('version', encoding), \n ) \n",
      "7": "required_params = ( \n ('product', np.ndarray), \n ('version', np.ndarray), \n ) \n",
      "8": "required_params = ( \n ('product', lisp), \n ('version', lisp), \n ) \n",
      "9": "required_params = ( \n ('product', 'code'), \n ('version', 'code'), \n ) \n",
      "10": "required_params = ( \n ('product', encoding, \n ('version', encoding), \n ) \n",
      "11": "required_params = ( \n ('product', 'type'), \n ('version', 'type'), \n ) \n",
      "12": "required_params = ( \n ('product', e.g. ''), \n ('version', e.g. ''), \n ) \n",
      "13": "required_params = ( \n ('product', t.np.ndarray), \n ('version', t.ndarray), \n ) \n",
      "14": "required_params = ( \n ('product', 'ethical'), \n ('version', 'ethical'), \n ) \n",
      "15": "required_params = ( \n ('product', glossary), \n ('version', glossary), \n ) \n",
      "16": "required_params = ( \n ('product', enumerate'), \n ('version', enumerate'), \n ) \n",
      "17": "required_params = ( \n ('product', 'description'), \n ('version', 'description'), \n ) \n",
      "18": "required_params = ( \n ('product', 'u.s.description'), \n ('version', 'u.s.description'), \n ) \n",
      "19": "required_params = ( \n ('product', 'tc'), \n ('version', 'tc'), \n ) \n",
      "20": "required_params = ( \n ('product', unicode), \n ('version','version'), \n ) \n",
      "21": "required_params = ( \n ('product', text_type), \n ('version', text_type), \n ) \n",
      "22": "required_params = ( \n ('product', libre), \n ('version', libre), \n ) \n",
      "23": "required_params = ( \n ('product', tuple_type), \n ('version', tuple_type), \n ) \n",
      "24": "required_params = ( \n ('product', 'ont'), \n ('version', 'ont'), \n ) \n",
      "25": "required_params = ( \n ('product', lib_encode), \n ('version', lib_encode), \n ) \n",
      "26": "required_params = ( \n ('product', text), \n ('version', text), \n ) \n",
      "27": "required_params = ( \n ('product','str'), \n ('version','str'), \n ) \n",
      "28": "required_params = ( \n ('product', 'unicode'), \n ('version','version'), \n ) \n",
      "29": "required_params = ( \n ('product','version'), \n ('version','version'), \n ) \n",
      "30": "required_params = ( \n ('product', 'label'), \n ('version', 'label'), \n ) \n",
      "31": "required_params = ( \n ('product', 'unicode'), \n ('version', 'utf-8'), \n ) \n",
      "32": "required_params = ( \n ('product', 'decimal'), \n ('version', 'decimal'), \n ) \n",
      "33": "required_params = ( \n ('product', 'id'), \n ('version', 'id'), \n ) \n",
      "34": "required_params = ( \n ('product', 'e'), \n ('version', 'e'), \n ) \n",
      "35": "required_params = ( \n ('product', 'unicode'), \n ('version', 'unit'), \n ) \n",
      "36": "required_params = ( \n ('product', Lexicon, \n ('version', Lexicon), \n ) \n",
      "37": "required_params = ( \n ('product', acronym), \n ('version', acronym), \n ) \n",
      "38": "required_params = ( \n ('product', unicode), \n ('version', version'), \n ) \n",
      "39": "required_params = ( \n ('product', unicode), \n ('version', 'utf-8'), \n ) \n",
      "40": "required_params = ( \n ('product', unicode), \n ('version', unicode), \n ) \n",
      "41": "required_params = ( \n ('product','version'), \n ('version', 'unicode'), \n ) \n",
      "42": "required_params = ( \n ('product', 'unicode'), \n ('version', ''), \n ) \n",
      "43": "required_params = ( \n ('product', dtype), \n ('version', dtype), \n ) \n",
      "44": "required_params = ( \n ('product', unicode), <DED> ('version', unicode), \n ) \n",
      "45": "required_params = ( \n ('product', unicode), <IND> ('version', unicode), \n ) \n",
      "46": "required_params = ( <IND> ('product', unicode), \n ('version', unicode), \n ) \n",
      "47": "required_params = ( \n ('product', unicode), \n ('version', unicode), <DED> ) \n",
      "48": "required_params = ( \n ('product', unicode), \n ('version', unicode), <IND> ) \n",
      "49": "required_params = ( <DED> ('product', unicode), \n ('version', unicode), \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        type = self.parse_type()\n        return StarType(type, line)\n\n",
    "target_code": "        type = self.parse_type()\n        return StarType(type, star.line)\n\n",
    "warning_line": "        return StarType(type, line)",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `line` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 153,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/parsetype.py",
    "target_filename": "mypy/parsetype.py",
    "source_changeid": "5938c9212918aadbf26300ab52c6fe7173a35da7^",
    "target_changeid": "5938c9212918aadbf26300ab52c6fe7173a35da7",
    "predictions": [
      "type = self.parse_type() \n return StarType(type, str) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "type = self.parse_type() \n return StarType(type, str) \n \n",
      "1": "type = self.parse_type() \n return StarType(type, line) \n \n",
      "2": "type = self.parse_type() \n return StarType(type, range) \n \n",
      "3": "type = self.parse_type() \n return StarType(type, str(line)) \n \n",
      "4": "type = self.parse_type() \n assert isinstance(type, line) \n return StarType(type, line) \n \n",
      "5": "type = self.parse_type() \n return StarType(type, 'line') \n \n",
      "6": "type = self.parse_type() \n return StarType(type, string) \n \n",
      "7": "type = self.parse_type() \n return StarType(type, np.ndarray) \n \n",
      "8": "type = self.parse_type() \n return StarType(type, type) \n \n",
      "9": "type = self.parse_type() \n return StarType(type=self.parse_type()) \n \n",
      "10": "type = self.parse_type() \n starType = self.parse_type() \n return StarType(type, str) \n \n",
      "11": "type = self.parse_type() \n starType = self.parse_type() \n return StarType(type, line) \n \n",
      "12": "type = self.parse_type() \n return StarType(type, char) \n \n",
      "13": "type = self.parse_type() \n return StarType(type, bool) \n \n",
      "14": "type = self.parse_type() \n return StarType(type,...) \n \n",
      "15": "type = self.parse_type() \n return StarType(type, str) \n <IND>",
      "16": "type = self.parse_type() \n return StarType(type, str) \n <DED>",
      "17": "type = self.parse_type() \n return StarType(type, int, line) \n \n",
      "18": "type = self.parse_type() \n return StarType(type, Scope) \n \n",
      "19": "type = self.parse_type() \n return StarType(type, tuple) \n \n",
      "20": "type = self.parse_type() \n return StarType(type, text) \n \n",
      "21": "type = self.parse_type() \n return StarType(type, scope) \n \n",
      "22": "type = self.parse_type() \n return StarType(type, python_type) \n \n",
      "23": "type = self.parse_type() \n return StarType(type(line)) \n \n",
      "24": "type = self.parse_type() \n return starType(type, str) \n \n",
      "25": "type = self.parse_type() \n assert isinstance(type, line) \n return StarType(type, str) \n \n",
      "26": "type = self.parse_type() \n starType = self.parse_type() \n return starType(type, line) \n \n",
      "27": "type = self.parse_type() \n starType = self.parse_type() \n return starType(type, str) \n \n",
      "28": "type = self.parse_type() \n return StarType(type,.line) \n \n",
      "29": "type = self.parse_type() \n return StarType(type, list(line)) \n \n",
      "30": "type = self.parse_type() \n return StarType(type, spline) \n \n",
      "31": "type = self.parse_type() <IND> return StarType(type, str) \n \n",
      "32": "type = self.parse_type() <DED> return StarType(type, str) \n \n",
      "33": "type = self.parse_type() \n return StarType(type, str) <DED> \n",
      "34": "type = self.parse_type() \n return StarType(type, str) <IND> \n",
      "35": "type = self.parse_type() \n return StarType(type, letter) \n \n",
      "36": "type = self.parse_type() \n return StarType(type, ellipsis) \n \n",
      "37": "type = self.parse_type() \n return StarType(type, str) \n {",
      "38": "type = self.parse_type() \n return StarType(type, subtype) \n \n",
      "39": "type = self.parse_type() \n return StarType(type, np.decode(self.parse_type())) \n \n",
      "40": "type = self.parse_type() \n return StarType(type, str) { \n",
      "41": "type = self.parse_type() \n return StarType(type, int) \n \n",
      "42": "type = self.parse_type() \n return StarType(type, np.line) \n \n",
      "43": "type = self.parse_type() { return StarType(type, str) \n \n",
      "44": "type = self.parse_type() \n return StarType(type, tuple(line)) \n \n",
      "45": "type = self.parse_type() \n return StarType(type, float) \n \n",
      "46": "type = self.parse_type() \n return StarType(type, value) \n \n",
      "47": "type = self.parse_type() \n return StarType(type, '') \n \n",
      "48": "type = self.parse_type() \n return StarType(type, str) \n }",
      "49": "type = self.parse_type() \n return StarType(type, span) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    },\n    F5_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "target_code": "    },\n    F5_API_DEVICE_TYPE: {\n        DEVICE_CLASS_KEY: F5Device,\n",
    "warning_line": "    F5_DEVICE_TYPE: {",
    "linter_report": {
      "rule_id": "Unbound name [10]",
      "message": " Name `F5_DEVICE_TYPE` is used but not defined in the current scope.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 32,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "networktocode/pyntc",
    "source_filename": "pyntc/devices/__init__.py",
    "target_filename": "pyntc/devices/__init__.py",
    "source_changeid": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9^",
    "target_changeid": "ebb35344e0121c29cbf1a1cf69c09daefe5943a9",
    "predictions": [
      "\n, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "1": "<DED>, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "2": "<IND>, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "3": "\n, \n F5_DEVICE_TYPE: \n <DED> DEVICE_CLASS_KEY: F5Device, \n",
      "4": "<DED>, \n F5_DEVICE_TYPE: \n <DED> DEVICE_CLASS_KEY: F5Device, \n",
      "5": "<IND>, \n F5_DEVICE_TYPE: \n <DED> DEVICE_CLASS_KEY: F5Device, \n",
      "6": "\n, \n F5_DEVICE_TYPE: \n \n DEVICE_CLASS_KEY: F5Device, \n",
      "7": "<DED>, \n F5_DEVICE_TYPE: \n \n DEVICE_CLASS_KEY: F5Device, \n",
      "8": "<IND>, \n F5_DEVICE_TYPE: \n \n DEVICE_CLASS_KEY: F5Device, \n",
      "9": "{, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "10": "}, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "11": "\n, \n F5_DEVICE_TYPE: \n { DEVICE_CLASS_KEY: F5Device, \n",
      "12": "\n, \n F5_DEVICE_TYPE: \n } DEVICE_CLASS_KEY: F5Device, \n",
      "13": "<DED>, \n F5_DEVICE_TYPE: \n { DEVICE_CLASS_KEY: F5Device, \n",
      "14": "<DED>, \n F5_DEVICE_TYPE: \n } DEVICE_CLASS_KEY: F5Device, \n",
      "15": "\n, \n F5_DEVICE_TYPE: <IND> <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "16": "\n, \n F5_DEVICE_TYPE: <DED> <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "17": "<DED>, \n F5_DEVICE_TYPE: <IND> <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "18": "\\, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "19": "<DED>, \n F5_DEVICE_TYPE: <DED> <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "20": "{, \n F5_DEVICE_TYPE: \n <DED> DEVICE_CLASS_KEY: F5Device, \n",
      "21": "<IND>, \n F5_DEVICE_TYPE: \n { DEVICE_CLASS_KEY: F5Device, \n",
      "22": "<IND>, \n F5_DEVICE_TYPE: \n } DEVICE_CLASS_KEY: F5Device, \n",
      "23": "}, \n F5_DEVICE_TYPE: \n <DED> DEVICE_CLASS_KEY: F5Device, \n",
      "24": "<IND>, \n F5_DEVICE_TYPE: <IND> <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "25": "\n, \n F5_DEVICE_TYPE: \n \\ DEVICE_CLASS_KEY: F5Device, \n",
      "26": "\n, \n F5_DEVICE_TYPE: { <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "27": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "28": "<IND>, \n F5_DEVICE_TYPE: <DED> <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "29": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "30": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "31": "<DED>, \n F5_DEVICE_TYPE: \n \\ DEVICE_CLASS_KEY: F5Device, \n",
      "32": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "33": "<DED>, \n F5_DEVICE_TYPE: { <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "34": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "35": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "36": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "37": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "38": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "39": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "40": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "41": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "42": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "43": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "44": "^, \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "45": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "46": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "47": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "48": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n",
      "49": ", \n F5_DEVICE_TYPE: \n <IND> DEVICE_CLASS_KEY: F5Device, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    __slots__ = ('__weakref__',)\n\n",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_line": "    __slots__ = ('__weakref__',)",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 653,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DisnakeDev/disnake",
    "source_filename": "discord/user.py",
    "target_filename": "discord/user.py",
    "source_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0^",
    "target_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "predictions": [
      "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "1": "<DED> __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "2": "<IND> __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "3": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n <IND>",
      "4": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n <DED>",
      "5": "{ __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "6": "\n __slots__ = BaseUser.__slots__ + ['__weakref__',) \n \n",
      "7": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) <IND> \n",
      "8": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) <DED> \n",
      "9": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n {",
      "10": "} __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "11": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) { \n",
      "12": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n }",
      "13": "\n __slots__ = BaseUser.__slots__ + ('__weakref__'), \n \n",
      "14": "\n __slots__ = ('__weakref__',) \n \n",
      "15": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) } \n",
      "16": "\n __slots__ = BaseUser.__slots__ = ('__weakref__',) \n \n",
      "17": "\\ __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "18": "\n __slots__ = BaseUser.__slots__ +('__weakref__',) \n \n",
      "19": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \\",
      "20": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "21": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \\ \n",
      "22": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "23": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "24": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "25": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "26": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "27": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "28": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "29": "^ __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "30": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "31": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "32": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "33": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "34": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "35": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "36": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "37": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "38": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "39": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "40": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "41": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "42": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "43": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "44": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "45": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "46": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "47": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "48": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "49": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def get_node_type(self) -> Optional[str]:\n        <IND>return 'IpAddress'\n",
    "target_code": "\n    <DED>def get_node_type(self) -> str:\n        <IND>return 'IpAddress'\n",
    "warning_line": "    def get_node_type(self) -> Optional[str]:",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `grapl_analyzerlib.nodes.ip_address_node.IpAddressView.get_node_type` overrides method defined in `DynamicNodeView` inconsistently. Returned type `typing.Optional[str]` is not a subtype of the overridden return `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 125,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "grapl-security/grapl",
    "source_filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "target_filename": "grapl_analyzerlib/nodes/ip_address_node.py",
    "source_changeid": "0e2a0983c414948cdaca9bd496bf111188b9b551^",
    "target_changeid": "0e2a0983c414948cdaca9bd496bf111188b9b551",
    "predictions": [
      "\n <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "1": "\n <IND> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "2": "\n <DED> def get_node_type(self) -> str: \n <DED> return 'IpAddress' \n",
      "3": "\n <DED> def get_node_type(self) -> str: \n <IND> return \"IpAddress\" \n",
      "4": "\n <DED> def get_node_type(self) -> str: \n \n return 'IpAddress' \n",
      "5": "\n \n def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "6": "<DED> <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "7": "\n <IND> def get_node_type(self) -> str: \n <DED> return 'IpAddress' \n",
      "8": "<IND> <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "9": "\n <DED> def get_node_type(self) -> Optional[str]: \n <IND> return 'IpAddress' \n",
      "10": "\n <DED> def get_node_type(self) -> str: \n { return 'IpAddress' \n",
      "11": "\n <DED> def get_node_type(self) -> str: \n } return 'IpAddress' \n",
      "12": "\n { def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "13": "\n } def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "14": "\n <IND> def get_node_type(self) -> str: \n <IND> return \"IpAddress\" \n",
      "15": "\n <DED> def get_node_type(self) -> str: \n <DED> return \"IpAddress\" \n",
      "16": "\n <IND> def get_node_type(self) -> str: \n \n return 'IpAddress' \n",
      "17": "\n <DED> def get_node_type(self, str) -> str: \n <IND> return 'IpAddress' \n",
      "18": "\n \n def get_node_type(self) -> str: \n <DED> return 'IpAddress' \n",
      "19": "<DED> <IND> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "20": "\n <DED> def get_node_type(self) -> str: \n \\ return 'IpAddress' \n",
      "21": "\n \\ def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "22": "\n <DED> def get_node_types(self) -> str: \n <IND> return 'IpAddress' \n",
      "23": "<DED> <DED> def get_node_type(self) -> str: \n <DED> return 'IpAddress' \n",
      "24": "{ <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "25": "<IND> <IND> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "26": "\n <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' <IND>",
      "27": "\n <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' <DED>",
      "28": "<IND> <DED> def get_node_type(self) -> str: \n <DED> return 'IpAddress' \n",
      "29": "\n <DED> def get_node_type(self) -> str: <IND> <IND> return 'IpAddress' \n",
      "30": "\n def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "31": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "32": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "33": "\n <DED> def get_node_type(self) -> str: <DED> <IND> return 'IpAddress' \n",
      "34": "} <DED> def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "35": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "36": "\n <DED> def get_node_type(self) -> IpAddress: \n <IND> return 'IpAddress' \n",
      "37": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "38": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "39": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "40": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "41": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "42": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "43": "\n def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "44": "\n def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "45": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "46": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "47": "\n <DED> def get_node_type(self) -> str: \n return 'IpAddress' \n",
      "48": "\n def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n",
      "49": "\n def get_node_type(self) -> str: \n <IND> return 'IpAddress' \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>@staticmethod\n    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:\n        <IND>pass\n\n",
    "target_code": "    <DED>@staticmethod\n    def getParams() -> Optional[Dict[str, ParamSpec]]:\n        <IND>return None\n\n",
    "warning_line": "    def getParams() -> Optional[Dict[str, Dict[str, Any]]]:",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `ciphey.basemods.Crackers.hash.HashBuster.getParams` overrides method defined in `ciphey.iface._modules.ConfigurableModule` inconsistently. Returned type `Optional[Dict[str, Dict[str, typing.Any]]]` is not a subtype of the overridden return `Optional[Dict[str, ciphey.iface._modules.ParamSpec]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 105,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ciphey/Ciphey",
    "source_filename": "ciphey/basemods/Crackers/hash.py",
    "target_filename": "ciphey/basemods/Crackers/hash.py",
    "source_changeid": "5544e945c591d063a2541fd40991c1f81b729575^",
    "target_changeid": "5544e945c591d063a2541fd40991c1f81b729575",
    "predictions": [
      "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "1": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "2": "\n @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "3": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n \n",
      "4": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n \n",
      "5": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED>",
      "6": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <IND>",
      "7": "\n @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n \n",
      "8": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED>",
      "9": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <IND>",
      "10": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n \n pass \n \n",
      "11": "\n @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <DED>",
      "12": "\n @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n <IND>",
      "13": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n \n pass \n \n",
      "14": "<DED> @staticmethod \n def getParams() -> \"Optional[Dict[str, Dict[str, Any]]\": \n <IND> pass \n \n",
      "15": "<DED> @staticmethod \n def getParams() -> Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "16": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass <DED> \n",
      "17": "\n @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n \n pass \n \n",
      "18": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass <IND> \n",
      "19": "{ @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "20": "<IND> @staticmethod \n def getParams() -> \"Optional[Dict[str, Dict[str, Any]]\": \n <IND> pass \n \n",
      "21": "} @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "22": "<IND> @staticmethod \n def getParams() -> Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "23": "\n @staticmethod \n def getParams() -> \"Optional[Dict[str, Dict[str, Any]]\": \n <IND> pass \n \n",
      "24": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass <DED> \n",
      "25": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "26": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> return \"\" \n \n",
      "27": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass <IND> \n",
      "28": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n <DED>",
      "29": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n <IND>",
      "30": "\n @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass <DED> \n",
      "31": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n { pass \n \n",
      "32": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> return \"\" \n \n",
      "33": "\n @staticmethod \n def getParams() -> Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "34": "\n @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass <IND> \n",
      "35": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n } pass \n \n",
      "36": "\n @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> return \"\" \n \n",
      "37": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> pass \n \n",
      "38": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> return None \n \n",
      "39": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> return True \n",
      "40": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n {",
      "41": "<DED> @staticmethod \n def getParams() -> Options[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "42": "<DED> @staticmethod \n def getParams() -> 'Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "43": "<DED> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> getParams() \n",
      "44": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n <DED>",
      "45": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <DED> pass \n <IND>",
      "46": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n { pass \n \n",
      "47": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n } pass \n \n",
      "48": "\\ @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n",
      "49": "<IND> @staticmethod \n def getParams() -> Optional[Dict[str, Dict[str, Any]]]: \n <IND> pass \n \n def getParams() -> Optional[Dict[str, Dict[str, Any]]: \n <IND> return None \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    __slots__ = ('__weakref__',)\n\n",
    "target_code": "\n    __slots__ = BaseUser.__slots__ + ('__weakref__',)\n\n",
    "warning_line": "    __slots__ = ('__weakref__',)",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `__slots__` overrides attribute defined in `BaseUser` inconsistently. Type `typing.Tuple[str]` is not a subtype of the overridden attribute `typing.Tuple[str, str, str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 653,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nextcord/nextcord",
    "source_filename": "discord/user.py",
    "target_filename": "discord/user.py",
    "source_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0^",
    "target_changeid": "e75c248a9a41e14639dc4c032cea47867c886ec0",
    "predictions": [
      "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "1": "<DED> __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "2": "<IND> __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "3": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n <IND>",
      "4": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n <DED>",
      "5": "{ __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "6": "\n __slots__ = BaseUser.__slots__ + ['__weakref__',) \n \n",
      "7": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) <IND> \n",
      "8": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) <DED> \n",
      "9": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n {",
      "10": "} __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "11": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) { \n",
      "12": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n }",
      "13": "\n __slots__ = BaseUser.__slots__ + ('__weakref__'), \n \n",
      "14": "\n __slots__ = ('__weakref__',) \n \n",
      "15": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) } \n",
      "16": "\n __slots__ = BaseUser.__slots__ = ('__weakref__',) \n \n",
      "17": "\\ __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "18": "\n __slots__ = BaseUser.__slots__ +('__weakref__',) \n \n",
      "19": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \\",
      "20": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "21": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \\ \n",
      "22": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "23": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "24": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "25": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "26": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "27": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "28": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "29": "^ __slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "30": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "31": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "32": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "33": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "34": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "35": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "36": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "37": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "38": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "39": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "40": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "41": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "42": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "43": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "44": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "45": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n",
      "46": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "47": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "48": "\n __slots__ = BaseUser.__slots__ + ('__weakref__',) \n",
      "49": "__slots__ = BaseUser.__slots__ + ('__weakref__',) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    <IND>subscription_msg_types = {commands.NewBlock}\n",
    "target_code": "class ETHChainTipMonitor(BaseChainTipMonitor):\n    <IND>subscription_msg_types = frozenset({commands.NewBlock})\n",
    "warning_line": "    subscription_msg_types = {commands.NewBlock}",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `subscription_msg_types` overrides attribute defined in `p2p.peer.PeerSubscriber` inconsistently. Type `typing.Set[typing.Type[commands.NewBlock]]` is not a subtype of the overridden attribute `typing.Set[typing.Type[p2p.protocol.Command]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 6,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ethereum/trinity",
    "source_filename": "trinity/protocol/eth/monitors.py",
    "target_filename": "trinity/protocol/eth/monitors.py",
    "source_changeid": "ad61361109f7df88eb807a543191d491e76eed0c^",
    "target_changeid": "ad61361109f7df88eb807a543191d491e76eed0c",
    "predictions": [
      "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n \n",
      "1": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = commands.NewBlock \n \n",
      "2": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <DED> subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n \n",
      "3": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( <IND> commands.NewBlock \n ) \n \n",
      "4": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( <DED> commands.NewBlock \n ) \n \n",
      "5": "class ETHChainTipMonitor(BaseChainTipMonitor): \n \n subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n \n",
      "6": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = freezing.NewBlock() \n \n",
      "7": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock <IND> ) \n \n",
      "8": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock <DED> ) \n \n",
      "9": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( { commands.NewBlock \n ) \n \n",
      "10": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n <IND>",
      "11": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n <DED>",
      "12": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( } commands.NewBlock \n ) \n \n",
      "13": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock { ) \n \n",
      "14": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <DED> subscription_msg_types = commands.NewBlock \n \n",
      "15": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock \n ).decode() \n",
      "16": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock } ) \n \n",
      "17": "class ETHChainTipMonitor(BaseChainTipMonitor): \n { subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n \n",
      "18": "class ETHChainTipMonitor(BaseChainTipMonitor): \n } subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n \n",
      "19": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \\ commands.NewBlock \n ) \n \n",
      "20": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <DED> subscription_msg_types = frozenset( <IND> commands.NewBlock \n ) \n \n",
      "21": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <DED> subscription_msg_types = frozenset( <DED> commands.NewBlock \n ) \n \n",
      "22": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n {",
      "23": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = freezing.Set( \n commands.NewBlock \n ) \n \n",
      "24": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = p2p.peer.NewBlock \n \n",
      "25": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "26": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = freezingset( \n commands.NewBlock \n ) \n \n",
      "27": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n }",
      "28": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "29": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "30": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = freezing.set( \n commands.NewBlock \n ) \n \n",
      "31": "class ETHChainTipMonitor(BaseChainTipMonitor): \n \n subscription_msg_types = commands.NewBlock \n \n",
      "32": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <DED> subscription_msg_types = frozenset( \n commands.NewBlock <IND> ) \n \n",
      "33": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "34": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "35": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "36": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <DED> subscription_msg_types = frozenset( \n commands.NewBlock <DED> ) \n \n",
      "37": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "38": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "39": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "40": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = command.NewBlock \n \n",
      "41": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( \n commands.NewBlock \\ ) \n \n",
      "42": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( ^ commands.NewBlock \n ) \n \n",
      "43": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "44": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "45": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "46": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "47": "class ETHChainTipMonitor(BaseChainTipMonitor): \n \\ subscription_msg_types = frozenset( \n commands.NewBlock \n ) \n \n",
      "48": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n",
      "49": "class ETHChainTipMonitor(BaseChainTipMonitor): \n <IND> subscription_msg_types = frozenset( commands.NewBlock \n ) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":\n        <IND>if not self.parallel:\n",
    "target_code": "\n    <DED>def to(self, device: torch.device) -> \"ResnetPreProcessorHabitat\":\n        <IND>if not self.parallel:\n",
    "warning_line": "    def to(self, device: torch.device) -> \"ResnetPreProcessorThor\":",
    "linter_report": {
      "rule_id": "Inconsistent override [15]",
      "message": " `rl_habitat.habitat_preprocessors.ResnetPreProcessorHabitat.to` overrides method defined in `Preprocessor` inconsistently. Returned type `unknown` is not a subtype of the overridden return `Preprocessor`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 100,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allenact",
    "source_filename": "rl_habitat/habitat_preprocessors.py",
    "target_filename": "rl_habitat/habitat_preprocessors.py",
    "source_changeid": "6b723350aab127ea8e1a702d88f253aae29bdc3c^",
    "target_changeid": "6b723350aab127ea8e1a702d88f253aae29bdc3c",
    "predictions": [
      "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "1": "\n <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "2": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "3": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n \n if not self.parallel: \n",
      "4": "\n \n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "5": "<DED> <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "6": "\n <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "7": "<IND> <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "8": "\n <DED> def to(self, device: torch.device) -> ResnetPreProcessorThor: \n <IND> if not self.parallel: \n",
      "9": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n } if not self.parallel: \n",
      "10": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n { if not self.parallel: \n",
      "11": "\n { def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "12": "\n } def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "13": "\n <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n \n if not self.parallel: \n",
      "14": "\n <DED> def to(self, device: torch.device) -> List[ResnetPreProcessorThor]: \n <IND> if not self.parallel: \n",
      "15": "\n \n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "16": "<DED> <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "17": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n \\ if not self.parallel: \n",
      "18": "\n \\ def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "19": "\n <DED> def to(self, device_name: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "20": "<DED> <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "21": "{ <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "22": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: <IND>",
      "23": "<IND> <IND> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "24": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": <IND> <IND> if not self.parallel: \n",
      "25": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: <DED>",
      "26": "<IND> <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <DED> if not self.parallel: \n",
      "27": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "28": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "29": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": <DED> <IND> if not self.parallel: \n",
      "30": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "31": "} <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "32": "\n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "33": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "34": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "35": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "36": "\n <IND> def to(self, device: torch.device) -> ResnetPreProcessorThor: \n <IND> if not self.parallel: \n",
      "37": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "38": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "39": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "40": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "41": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "42": "\n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "43": "\n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "44": "\n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "45": "\n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "46": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "47": "\n def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n <IND> if not self.parallel: \n",
      "48": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n",
      "49": "\n <DED> def to(self, device: torch.device) -> \"ResnetPreProcessorThor\": \n if not self.parallel: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: str = None,\n    ):\n",
    "target_code": "        capture_error: Optional[Union[bool, str]] = None,\n        method_name: Optional[str] = None,\n    ):\n",
    "warning_line": "        method_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " method_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 605,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/tracing/tracer.py",
    "target_filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): \n"
    ],
    "correct": true,
    "top_five": {
      "0": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): \n",
      "1": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ) -> None: \n",
      "2": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): <IND>",
      "3": "capture_error: Optional[Union[bool, str]] = None, <IND> method_name: Optional[str] = None, \n ): \n",
      "4": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, <IND> ): \n",
      "5": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, <DED> ): \n",
      "6": "capture_error: Optional[Union[bool, str]] = None, <DED> method_name: Optional[str] = None, \n ): \n",
      "7": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): <DED>",
      "8": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): {",
      "9": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, { ): \n",
      "10": "capture_error: Optional[Union[bool, str]] = None, { method_name: Optional[str] = None, \n ): \n",
      "11": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, } ): \n",
      "12": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): }",
      "13": "capture_error: Optional[Union[bool, str]] = None, } method_name: Optional[str] = None, \n ): \n",
      "14": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): \\",
      "15": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \\ ): \n",
      "16": "capture_error: Optional[Union[bool, str]] = None, \\ method_name: Optional[str] = None, \n ): \n",
      "17": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \n ): \n",
      "18": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ):",
      "19": "captured_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): \n",
      "20": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ): \n",
      "21": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ):",
      "22": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \n ): \n",
      "23": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ): \n",
      "24": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ):",
      "25": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \n ): \n",
      "26": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ): \n",
      "27": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ):",
      "28": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \n ): \n",
      "29": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ): \n",
      "30": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ):",
      "31": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ):",
      "32": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ): \n",
      "33": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \n ): \n",
      "34": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ): \n",
      "35": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ):",
      "36": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \n ): \n",
      "37": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ): ^",
      "38": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ):",
      "39": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \n ): \n",
      "40": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \n ): \n",
      "41": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ): \n",
      "42": "capture_error: Optional[Union[bool, str]] = None, ^ method_name: Optional[str] = None, \n ): \n",
      "43": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ^ ): \n",
      "44": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ): \n",
      "45": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \n ): \n",
      "46": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ): \n",
      "47": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, \n ):",
      "48": "capture_error: Optional[Union[bool, str]] = None, method_name: Optional[str] = None, \n ): \n",
      "49": "capture_error: Optional[Union[bool, str]] = None, \n method_name: Optional[str] = None, ): \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        usertags: list = [],\n        configure_timeout: str = 10,\n    ) -> dict:\n",
    "target_code": "        usertags: list = [],\n        configure_timeout: int = 10,\n    ) -> dict:\n",
    "warning_line": "        configure_timeout: str = 10,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " configure_timeout is declared to have type `str` but is used as type `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 37,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "adw0rd/instagrapi",
    "source_filename": "instagrapi/igtv.py",
    "target_filename": "instagrapi/igtv.py",
    "source_changeid": "0344324a593097604ea701186dc17afb977245f0^",
    "target_changeid": "0344324a593097604ea701186dc17afb977245f0",
    "predictions": [
      "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: \n",
      "1": "usertags: list = [], \n configure_timeout: str = 10, \n ) -> dict: \n",
      "2": "usertags: list = [], \n configure_timeout: int = 10 \n ) -> dict: \n",
      "3": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: <IND>",
      "4": "usertags: list = [], <DED> configure_timeout: int = 10, \n ) -> dict: \n",
      "5": "usertags: list = [], <IND> configure_timeout: int = 10, \n ) -> dict: \n",
      "6": "usertags: list = [], \n configure_timeout: int = 10, <IND> ) -> dict: \n",
      "7": "usertags: list = [], \n configure_timeout: int = 10, <DED> ) -> dict: \n",
      "8": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: <DED>",
      "9": "usertags: list = [], \n configure_timeout: Optional[str] = 10, \n ) -> dict: \n",
      "10": "usertags: list = [], { configure_timeout: int = 10, \n ) -> dict: \n",
      "11": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: {",
      "12": "usertags: list = [], \n configure_timeout: int = 10, { ) -> dict: \n",
      "13": "usertags: list = [], \n configure_timeout: int = 10, } ) -> dict: \n",
      "14": "usertags: list = [], } configure_timeout: int = 10, \n ) -> dict: \n",
      "15": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: }",
      "16": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: \\",
      "17": "usertags: list = [], \n configure_timeout: int = 10, \\ ) -> dict: \n",
      "18": "usertags: list = [], \n configure_timeout: Int = 10, \n ) -> dict: \n",
      "19": "usertags: list = [], \\ configure_timeout: int = 10, \n ) -> dict: \n",
      "20": "usertags: list = [], \n configure_timeout: float = 10, \n ) -> dict: \n",
      "21": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict:",
      "22": "usertags: list = [], \n configure_timeout: int = 10, ) -> dict: \n",
      "23": "usertags: list = [], configure_timeout: int = 10, \n ) -> dict: \n",
      "24": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict:",
      "25": "usertags: list = [], \n configure_timeout: int = 10, ) -> dict: \n",
      "26": "usertags: list = [], configure_timeout: int = 10, \n ) -> dict: \n",
      "27": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict:",
      "28": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict:",
      "29": "usertags: list = [], \n configure_timeout: int = 10, ) -> dict: \n",
      "30": "usertags: list = [], configure_timeout: int = 10, \n ) -> dict: \n",
      "31": "usertags: list = [], configure_timeout: int = 10, \n ) -> dict: \n",
      "32": "usertags: list = [], \n configure_timeout: int = 10, ) -> dict: \n",
      "33": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict:",
      "34": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict:",
      "35": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict:",
      "36": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict:",
      "37": "usertags: list = [], \n configure_timeout: int = 10, ) -> dict: \n",
      "38": "usertags: list = [], \n configure_timeout: int = 10, ) -> dict: \n",
      "39": "usertags: list = [], configure_timeout: int = 10, \n ) -> dict: \n",
      "40": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict: ^",
      "41": "usertags: list = [], \n configure_timeout: int = 10, ) -> dict: \n",
      "42": "usertags: list = [], configure_timeout: int = 10, \n ) -> dict: \n",
      "43": "usertags: list = [], ^ configure_timeout: int = 10, \n ) -> dict: \n",
      "44": "usertags: list = [], configure_timeout: int = 10, \n ) -> dict: \n",
      "45": "usertags: list = [], configure_timeout: int = 10, \n ) -> dict: \n",
      "46": "usertags: list = [], \n configure_timeout: int = 10, ) -> dict: \n",
      "47": "usertags: list = [], \n configure_timeout: int = 10, ^ ) -> dict: \n",
      "48": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict:",
      "49": "usertags: list = [], \n configure_timeout: int = 10, \n ) -> dict:"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        should_archive: bool = True,\n        extra_data: Dict = None,\n        dispatch_to: List[str] = None,\n    ) -> None:\n",
    "target_code": "        should_archive: bool = True,\n        extra_data: Optional[Dict] = None,\n        dispatch_to: Optional[List[str]] = None,\n    ) -> None:\n",
    "warning_line": "        dispatch_to: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " dispatch_to is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 30,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "PUNCH-Cyber/stoq",
    "source_filename": "stoq/data_classes.py",
    "target_filename": "stoq/data_classes.py",
    "source_changeid": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c^",
    "target_changeid": "da996c201bee36f66ad1a879c6b7b9d3949ccb9c",
    "predictions": [
      "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "1": "should_archive: bool = True, <IND> extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "2": "should_archive: bool = True, <DED> extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "3": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, <IND> dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "4": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, <IND> ) -> None: \n",
      "5": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, <DED> ) -> None: \n",
      "6": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, <DED> dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "7": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: <IND>",
      "8": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: <DED>",
      "9": "should_archive: bool = True, { extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "10": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, { ) -> None: \n",
      "11": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: {",
      "12": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, { dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "13": "should_archive: bool = True, \n extra_data: Dict = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "14": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, } ) -> None: \n",
      "15": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: }",
      "16": "should_archive: bool = True, } extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "17": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, } dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "18": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \\ ) -> None: \n",
      "19": "should_archive: bool = True, \\ extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "20": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \\",
      "21": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \\ dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "22": "should_archive: bool = True, extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "23": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None:",
      "24": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "25": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, ) -> None: \n",
      "26": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None:",
      "27": "should_archive: bool = True, extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "28": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "29": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, ) -> None: \n",
      "30": "should_archive: bool = True, \n extra_data: Dict = None, \n dispatch_to: List[str] = [], \n ) -> None: \n",
      "31": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None:",
      "32": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None:",
      "33": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, ) -> None: \n",
      "34": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "35": "should_archive: bool = True, extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "36": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None:",
      "37": "should_archive: bool = True, extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "38": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, ) -> None: \n",
      "39": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "40": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None:",
      "41": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, ) -> None: \n",
      "42": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None:",
      "43": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None:",
      "44": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "45": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, ) -> None: \n",
      "46": "should_archive: bool = True, extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "47": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "48": "should_archive: bool = True, extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, \n ) -> None: \n",
      "49": "should_archive: bool = True, \n extra_data: Optional[Dict] = None, \n dispatch_to: Optional[List[str]] = None, ) -> None: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                     https: bool = False,\n                     ssl_key: str = None,\n                     ssl_cert: str = None) -> None:\n    <IND>",
    "target_code": "                     https: bool = False,\n                     ssl_key: Optional[str] = None,\n                     ssl_cert: Optional[str] = None) -> None:\n    <IND>",
    "warning_line": "                     ssl_cert: str = None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " ssl_cert is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 89,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepmipt/DeepPavlov",
    "source_filename": "deeppavlov/utils/alexa/server.py",
    "target_filename": "deeppavlov/utils/alexa/server.py",
    "source_changeid": "0f32759c67ea961737a6538fd37426f564bae925^",
    "target_changeid": "0f32759c67ea961737a6538fd37426f564bae925",
    "predictions": [
      "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>"
    ],
    "correct": true,
    "top_five": {
      "0": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "1": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <DED>",
      "2": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n \n",
      "3": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n {",
      "4": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n }",
      "5": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n \\",
      "6": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "7": "https: bool = False, <IND> ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "8": "https: bool = False, <DED> ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "9": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "10": "https: bool = False, \n ssl_key: Optional[str] = None, <IND> ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "11": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: <IND> <IND>",
      "12": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "13": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "14": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "15": "https: bool = False, \n ssl_key: Optional[str] = None, <DED> ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "16": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "17": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: <DED> <IND>",
      "18": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "19": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "20": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "21": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "22": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "23": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "24": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "25": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "26": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "27": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "28": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "29": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "30": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "31": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "32": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "33": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "34": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "35": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "36": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "37": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "38": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "39": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "40": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "41": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "42": "https: bool = False, { ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "43": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n ^",
      "44": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "45": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "46": "https: bool = False, \n ssl_key: Optional[str] = None, { ssl_cert: Optional[str] = None) -> None: \n <IND>",
      "47": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: { <IND>",
      "48": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n",
      "49": "https: bool = False, \n ssl_key: Optional[str] = None, \n ssl_cert: Optional[str] = None) -> None: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "target_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_line": "    def message(self, target: str, message: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 332,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/__init__.py",
    "target_filename": "src/utils/irc/__init__.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message"
    ],
    "correct": false,
    "top_five": {
      "0": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message",
      "1": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message",
      "2": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message",
      "3": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message",
      "4": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "5": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "6": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "7": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "8": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notice: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "9": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notice: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "10": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "11": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "12": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "13": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "14": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "15": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "16": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "17": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "18": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n \n def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "19": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "20": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notice: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "21": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n \n def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "22": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notice: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "23": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "24": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "25": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "26": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "27": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ) -> Notice: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "28": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ) -> Notice: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "29": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message, tags)) \n",
      "30": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message, tags)) \n",
      "31": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message, tags)) \n",
      "32": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message, tags)) \n",
      "33": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.note(target, message",
      "34": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.note(target, message",
      "35": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "36": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "37": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.note(target, message",
      "38": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.note(target, message",
      "39": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message.)) \n",
      "40": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message.)) \n",
      "41": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "42": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message.)) \n",
      "43": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice",
      "44": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message.)) \n",
      "45": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.",
      "46": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice",
      "47": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.",
      "48": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str,]) \n",
      "49": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        choices: typing.Iterable,\n        labels: typing.Iterable[str] = None,\n        *,\n        error: str = None\n    ):\n",
    "target_code": "        choices: typing.Iterable,\n        labels: typing.Optional[typing.Iterable[str]] = None,\n        *,\n        error: typing.Optional[str] = None\n    ):\n",
    "warning_line": "        labels: typing.Iterable[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " labels is declared to have type `typing.Iterable[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 476,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/validate.py",
    "target_filename": "src/marshmallow/validate.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n"
    ],
    "correct": true,
    "top_five": {
      "0": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "1": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: str = None \n ): \n",
      "2": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, <DED> error: typing.Optional[str] = None \n ): \n",
      "3": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, <IND> error: typing.Optional[str] = None \n ): \n",
      "4": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None <DED> ): \n",
      "5": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ) -> None: \n",
      "6": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None <IND> ): \n",
      "7": "choices: typing.Iterable, <DED> labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "8": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, <IND> *, \n error: typing.Optional[str] = None \n ): \n",
      "9": "choices: typing.Iterable, <IND> labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "10": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, <DED> *, \n error: typing.Optional[str] = None \n ): \n",
      "11": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): <IND>",
      "12": "choices: typing.Optional[typing.Iterable], \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "13": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): <DED>",
      "14": "choices: typing.Iterable, \n labels: typing.Optional[typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "15": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, { error: typing.Optional[str] = None \n ): \n",
      "16": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None { ): \n",
      "17": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): {",
      "18": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, { *, \n error: typing.Optional[str] = None \n ): \n",
      "19": "choices: typing.Iterable, { labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "20": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str], \n *, \n error: typing.Optional[str] = None \n ): \n",
      "21": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None } ): \n",
      "22": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, } error: typing.Optional[str] = None \n ): \n",
      "23": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, } *, \n error: typing.Optional[str] = None \n ): \n",
      "24": "choices: typing.Iterable, } labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "25": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): }",
      "26": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: str = 0 \n ): \n",
      "27": "options: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "28": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \\ ): \n",
      "29": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \\ error: typing.Optional[str] = None \n ): \n",
      "30": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: str = '' \n ): \n",
      "31": "choices: typing.Iterable, \\ labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "32": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \\",
      "33": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \\ *, \n error: typing.Optional[str] = None \n ): \n",
      "34": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None ): \n",
      "35": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, error: typing.Optional[str] = None \n ): \n",
      "36": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ):",
      "37": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "38": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ):",
      "39": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, *, \n error: typing.Optional[str] = None \n ): \n",
      "40": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None ): \n",
      "41": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, *, \n error: typing.Optional[str] = None \n ): \n",
      "42": "choices: typing.Iterable, labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ): \n",
      "43": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, error: typing.Optional[str] = None \n ): \n",
      "44": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None ): \n",
      "45": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None ): \n",
      "46": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, error: typing.Optional[str] = None \n ): \n",
      "47": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ):",
      "48": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, error: typing.Optional[str] = None \n ): \n",
      "49": "choices: typing.Iterable, \n labels: typing.Optional[typing.Iterable[str]] = None, \n *, \n error: typing.Optional[str] = None \n ):"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def message(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: dict=None\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "target_code": "\n<DED>def message(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags)\n<DED>def notice(target: str, message: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n",
    "warning_line": "def notice(target: str, message: str, tags: dict=None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/protocol.py",
    "target_filename": "src/utils/irc/protocol.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc."
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "1": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "2": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n \n def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "3": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "4": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "5": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n <DED> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "6": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "7": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n <DED> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "8": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "9": "\n <IND> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "10": "\n <IND> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "11": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n <IND> ) -> 'utils.irc.",
      "12": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n <DED> ) -> 'utils.irc.",
      "13": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n",
      "14": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n <IND> ) -> 'utils.irc.",
      "15": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n <DED> ) -> 'utils.irc.",
      "16": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n",
      "17": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n \n def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "18": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <DED> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "19": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n <DED> ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "20": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <DED> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "21": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n <DED> ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "22": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n <IND> ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "23": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n <IND> ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "24": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n \n def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "25": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n <IND> \n ) -> 'utils.irc.",
      "26": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "27": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n <IND> \n ) -> 'utils.irc.",
      "28": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "29": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n <DED> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.",
      "30": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n",
      "31": "\n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n",
      "32": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n \n def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n",
      "33": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n",
      "34": "\n <DED> def message(target: str, message: str, tags: typing.Dict[str, str]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Dict[str, str]= \n \n \n",
      "35": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, \n",
      "36": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, \n",
      "37": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, <DED>",
      "38": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, <DED>",
      "39": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, <IND>",
      "40": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, <IND>",
      "41": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, \n",
      "42": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, \n",
      "43": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, {",
      "44": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, {",
      "45": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, <DED>",
      "46": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n \n def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, \n",
      "47": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <DED> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, <DED>",
      "48": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, }",
      "49": "\n <DED> def message(target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> \n ) -> 'utils.irc.IRCParsedLine': \n <IND> return utils.irc.IRCParsedLine(\"PRIVMSG\", [target, message], tags=tags) \n <IND> def notice(target: str, message: str, tags: typing.Optional[typing.Dict[str, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: List[str] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "target_code": "                                       category_map: Dict[int, List[str]],\n                                       immutable_features: Optional[List[str]] = None,\n                                       diverse=False) -> List[np.ndarray]:\n",
    "warning_line": "                                       immutable_features: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " immutable_features is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 677,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "SeldonIO/alibi",
    "source_filename": "alibi/explainers/backends/cfrl_tabular.py",
    "target_filename": "alibi/explainers/backends/cfrl_tabular.py",
    "source_changeid": "dcf6282c677d0cab48f62e23f707f4ad05497d60^",
    "target_changeid": "dcf6282c677d0cab48f62e23f707f4ad05497d60",
    "predictions": [
      "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "1": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "2": "category_map: Dict[int, List[str]], \n immutable_features: List[str], \n diverse=False) -> List[np.ndarray]: \n",
      "3": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = (), \n diverse=False) -> List[np.ndarray]: \n",
      "4": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n divers=False) -> List[np.ndarray]: \n",
      "5": "category_map: Dict[int, List[str]], \n immutable_features: List[List[str]] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "6": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n divers=False) -> List[np.ndarray]: \n",
      "7": "category_map: Dict[int, List[str]], <DED> immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "8": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], <DED> diverse=False) -> List[np.ndarray]: \n",
      "9": "category_map: Dict[int, List[str]], <IND> immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "10": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: <IND>",
      "11": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], <IND> diverse=False) -> List[np.ndarray]: \n",
      "12": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: <DED>",
      "13": "category_map: Dict[int, List[str]], <DED> immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "14": "category_map: Dict[int, List[str]], <IND> immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "15": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: <IND>",
      "16": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, <DED> diverse=False) -> List[np.ndarray]: \n",
      "17": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, <IND> diverse=False) -> List[np.ndarray]: \n",
      "18": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: <DED>",
      "19": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], { diverse=False) -> List[np.ndarray]: \n",
      "20": "category_map: Dict[int, List[str]], { immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "21": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: {",
      "22": "category_map: Dict[int, List[str]], { immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "23": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: {",
      "24": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, { diverse=False) -> List[np.ndarray]: \n",
      "25": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], } diverse=False) -> List[np.ndarray]: \n",
      "26": "category_map: Dict[int, List[str]], } immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "27": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: }",
      "28": "category_map: Dict[int, List[str], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "29": "category_map: Dict[int, List[str]], } immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "30": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: }",
      "31": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, } diverse=False) -> List[np.ndarray]: \n",
      "32": "category_map: Dict[int, List[str]], \n immutable_features: List[str, List[str]] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "33": "category_map: Dict[int, List[str]], \n immutable_features: Union[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \n",
      "34": "category_map: Dict[int, List[str]], \n immutable_features: Union[List[str]] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "35": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diversity=False) -> List[np.ndarray]: \n",
      "36": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = []), \n diverse=False) -> List[np.ndarray]: \n",
      "37": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diversity=False) -> List[np.ndarray]: \n",
      "38": "category_map: Dict[int, List[str]], \\ immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "39": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \\",
      "40": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \\ diverse=False) -> List[np.ndarray]: \n",
      "41": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]: \\",
      "42": "category_map: Dict[int, List[str]], \n immutable_features: List[str], \n divers=False) -> List[np.ndarray]: \n",
      "43": "category_map: Dict[int, List[str]], immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "44": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], diverse=False) -> List[np.ndarray]: \n",
      "45": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]:",
      "46": "category_map: Dict[int, List[str]], immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]: \n",
      "47": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], \n diverse=False) -> List[np.ndarray]:",
      "48": "category_map: Dict[int, List[str]], \n immutable_features: List[str] = [], diverse=False) -> List[np.ndarray]: \n",
      "49": "category_map: Dict[int, List[str]], \n immutable_features: Optional[List[str]] = None, \n diverse=False) -> List[np.ndarray]:"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        <IND>if value is not None:\n            <IND>value = str(value)\n        <DED>self._properties[\"statementByteBudget\"] = value\n\n",
    "target_code": "    def statement_byte_budget(self, value: Union[int, None]):\n        <IND>new_value = None if value is None else str(value)\n        self._properties[\"statementByteBudget\"] = new_value\n\n",
    "warning_line": "            value = str(value)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " value is declared to have type `Optional[int]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 211,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "googleapis/python-bigquery",
    "source_filename": "google/cloud/bigquery/job/query.py",
    "target_filename": "google/cloud/bigquery/job/query.py",
    "source_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9^",
    "target_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "predictions": [
      "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "1": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value): \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "2": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "3": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "4": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "5": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "6": "def statement_byte_budget(self, value: Union[int, None]): \n <DED> if value is not None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "7": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "8": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value): \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "9": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> value = str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "10": "def statement_byte_budget(self, value: Union[int, None]): \n <DED> if value is None else str(value): \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "11": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = str(value) \n \n self._properties[\"statementByteBudget\"] = value \n \n",
      "12": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "13": "def statement_byte_budget(self, value: Union[int, None]): \n <DED> if value is None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "14": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <DED> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "15": "def statement_byte_budget(self, value: Union[int, None]): \n <DED> if value is not None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "16": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <DED> value = str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "17": "def statement_byte_budget(self, value: Union[int, None]): \n <DED> if value is not None: \n <IND> value = str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "18": "def statement_byte_budget(self, value: Union[int, None]): \n \n if value is not None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "19": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n \n self._properties[\"statementByteBudget\"] = value \n \n",
      "20": "def statement_byte_budget(self, value: Union[int, None]): \n \n if value is None else str(value): \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "21": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value): \n \n self._properties[\"statementByteBudget\"] = value \n \n",
      "22": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = None # type: Optional[str] \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "23": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = value \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "24": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = None # type: Optional[str] \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "25": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> assert value is not None \n self._properties[\"statementByteBudget\"] = value \n \n",
      "26": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> value = str(value) \n \n self._properties[\"statementByteBudget\"] = value \n \n",
      "27": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> assert value is not None \n self._properties[\"statementByteBudget\"] = value \n \n",
      "28": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> value = None # type: Optional[str] \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "29": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <IND> value = None # type: Optional[str] \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "30": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = Union[str(value)) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "31": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = value \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "32": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = Union[str(value)) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "33": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) = None \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "34": "def statement_byte_budget(self, value: Union[int, None]): \n \n if value is not None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "35": "def statement_byte_budget(self, value: Union[int, None]): \n \n if value is None: \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "36": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = None or str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "37": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n \n value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "38": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None else str(value) = None \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "39": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n \n self._properties[\"statementByteBudget\"] = value \n \n",
      "40": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <DED> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "41": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = self._properties[\"statementByteBudget\"] = value \n \n",
      "42": "def statement_byte_budget(self, value: Union[int, None]): \n <DED> if value is None: \n <IND> value = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "43": "def statement_byte_budget(self, value: Union[int, None]): \n <DED> if value is not None: \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "44": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value__ = str(value) \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "45": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is None: \n <DED> value = str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "46": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> value = None or str(value) \n <IND> self._properties[\"statementByteBudget\"] = value \n \n",
      "47": "def statement_byte_budget(self, value: Union[int, None]): \n <DED> if value is None else str(value): \n <DED> self._properties[\"statementByteBudget\"] = value \n \n",
      "48": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> assert isinstance(value, str) \n self._properties[\"statementByteBudget\"] = value \n \n",
      "49": "def statement_byte_budget(self, value: Union[int, None]): \n <IND> if value is not None: \n <IND> assert isinstance(value, str) \n self._properties[\"statementByteBudget\"] = \"value\" \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def filter(self, predicate: Predicate = None) -> t.List[T]:\n        <IND>",
    "target_code": "\n    <DED>def filter(self, predicate: Predicate) -> t.List[T]:\n        <IND>",
    "warning_line": "    def filter(self, predicate: Predicate = None) -> t.List[T]:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " predicate is declared to have type `dharma.data.formulae.predicate.Predicate` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 81,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pcah/python-clean-architecture",
    "source_filename": "dharma/domain/repos/in_memory.py",
    "target_filename": "dharma/domain/repos/in_memory.py",
    "source_changeid": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e^",
    "target_changeid": "3ba523ddb08ebaa7acfd4a453b4faf7365562e4e",
    "predictions": [
      "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "1": "\n <IND> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "2": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <DED>",
      "3": "\n <DED> def filter(self, predicate: Optional[Pr\u00e4dikate] = None) -> t.List[T]: \n <IND>",
      "4": "\n <DED> def filter(self, predicate: Predicate) -> t.List[T]: \n <IND>",
      "5": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n \n",
      "6": "\n <DED> def filter(self, predicate: Optional[predicate] = None) -> t.List[T]: \n <IND>",
      "7": "\n \n def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "8": "\n <IND> def filter(self, predicate: Optional[Pr\u00e4dikate] = None) -> t.List[T]: \n <IND>",
      "9": "\n <IND> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <DED>",
      "10": "\n <DED> def filter(self, predicate: Optional[Pr\u00e4dikate] = None) -> t.List[T]: \n <DED>",
      "11": "<DED> <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "12": "\n <DED> def filter(self, predicate: Optional[\"Predicate\"] = None) -> t.List[T]: \n <IND>",
      "13": "\n <IND> def filter(self, predicate: Predicate) -> t.List[T]: \n <IND>",
      "14": "<IND> <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "15": "\n <DED> def filter(self, predicate: Predicate) -> t.List[T]: \n <DED>",
      "16": "\n <DED> def filter(self, predicate: Optional[Pr\u00e4dicate] = None) -> t.List[T]: \n <IND>",
      "17": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n {",
      "18": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n }",
      "19": "\n { def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "20": "\n } def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "21": "\n <IND> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n \n",
      "22": "\n <DED> def filter(self, predicate: Optional[Pr\u00e4dikate] = None) -> t.List[T]: \n \n",
      "23": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T].List[T]: \n <IND>",
      "24": "\n <DED> def filter(self, predicate: dharma.data.formulae.Predicate) -> t.List[T]: \n <IND>",
      "25": "\n <IND> def filter(self, predicate: Optional[predicate] = None) -> t.List[T]: \n <IND>",
      "26": "\n <DED> def filter(self, predicate: Optional[predicate] = None) -> t.List[T]: \n <DED>",
      "27": "\n \n def filter(self, predicate: Optional[Pr\u00e4dikate] = None) -> t.List[T]: \n <IND>",
      "28": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n \\",
      "29": "\n \n def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <DED>",
      "30": "\n \\ def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "31": "\n <IND> def filter(self, predicate: Optional[Pr\u00e4dikate] = None) -> t.List[T]: \n <DED>",
      "32": "<DED> <IND> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "33": "\n <DED> def filter(self, predicate: Predicate) -> t.List[T]: \n \n",
      "34": "\n <IND> def filter(self, predicate: Optional[\"Predicate\"] = None) -> t.List[T]: \n <IND>",
      "35": "<DED> <DED> def filter(self, predicate: Optional[Pr\u00e4dikate] = None) -> t.List[T]: \n <IND>",
      "36": "{ <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "37": "<DED> <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <DED>",
      "38": "\n <DED> def filter(self, predicate: Optional[\"Predicate\"] = None) -> t.List[T]: \n <DED>",
      "39": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: <IND> <IND>",
      "40": "<IND> <IND> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "41": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: <DED> <IND>",
      "42": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n",
      "43": "\n def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n <IND>",
      "44": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n",
      "45": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n",
      "46": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n",
      "47": "\n <IND> def filter(self, predicate: Optional[Pr\u00e4dicate] = None) -> t.List[T]: \n <IND>",
      "48": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n",
      "49": "\n <DED> def filter(self, predicate: Optional[Predicate] = None) -> t.List[T]: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_line": "        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2315,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n"
    ],
    "correct": true,
    "top_five": {
      "0": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "1": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), <IND> gcp_conn_id: str = \"google_cloud_default\", \n",
      "2": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), <DED> gcp_conn_id: str = \"google_cloud_default\", \n",
      "3": "timeout: Optional[float] = None, <DED> metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "4": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", <IND>",
      "5": "timeout: Optional[float] = None, <IND> metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "6": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", <DED>",
      "7": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "8": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", {",
      "9": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), { gcp_conn_id: str = \"google_cloud_default\", \n",
      "10": "timeout: Optional[float] = None, { metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "11": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), } gcp_conn_id: str = \"google_cloud_default\", \n",
      "12": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", }",
      "13": "timeout: Optional[float] = None, } metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "14": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \\",
      "15": "timeout: Optional[float] = None, \\ metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "16": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \\ gcp_conn_id: str = \"google_cloud_default\", \n",
      "17": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "18": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "19": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "20": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "21": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "22": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "23": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "24": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "25": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "26": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "27": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "28": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "29": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str,...]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "30": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "31": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "32": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "33": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "34": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "35": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "36": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "37": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "38": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "39": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "40": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "41": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", ^",
      "42": "timeout: Optional[float] = None, ^ metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "43": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "44": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "45": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "46": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "47": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), ^ gcp_conn_id: str = \"google_cloud_default\", \n",
      "48": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "49": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: threading.Lock\n               ):  # type: (...) -> None\n",
    "target_code": "                runtimeContext,   # type: RuntimeContext\n                tmpdir_lock=None  # type: Optional[threading.Lock]\n               ):  # type: (...) -> None\n",
    "warning_line": "                tmpdir_lock=None  # type: threading.Lock",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tmpdir_lock is declared to have type `threading.Lock` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 104,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "common-workflow-language/cwltool",
    "source_filename": "cwltool/command_line_tool.py",
    "target_filename": "cwltool/command_line_tool.py",
    "source_changeid": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c^",
    "target_changeid": "a9078408aafdee0e0f7c27954fb80ef1a0c39e9c",
    "predictions": [
      "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n"
    ],
    "correct": true,
    "top_five": {
      "0": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "1": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None <IND>",
      "2": "runtimeContext, # type: RuntimeContext <IND> tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "3": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] <IND> ): # type: (...) -> None \n",
      "4": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None <DED>",
      "5": "runtimeContext, # type: RuntimeContext <DED> tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "6": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] <DED> ): # type: (...) -> None \n",
      "7": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] { ): # type: (...) -> None \n",
      "8": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None {",
      "9": "runtimeContext, # type: RuntimeContext { tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "10": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] } ): # type: (...) -> None \n",
      "11": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None }",
      "12": "runtimeContext, # type: RuntimeContext } tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "13": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \\ ): # type: (...) -> None \n",
      "14": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \\",
      "15": "runtimeContext, # type: RuntimeContext \\ tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "16": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "17": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "18": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None",
      "19": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "20": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "21": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None",
      "22": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "23": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "24": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None",
      "25": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None",
      "26": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "27": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "28": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "29": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "30": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "31": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ^ ): # type: (...) -> None \n",
      "32": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "33": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "34": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None",
      "35": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "36": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "37": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "38": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "39": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "40": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None",
      "41": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None",
      "42": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "43": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None ^",
      "44": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "45": "runtimeContext, # type: RuntimeContext ^ tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "46": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] ): # type: (...) -> None \n",
      "47": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "48": "runtimeContext, # type: RuntimeContext tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None \n",
      "49": "runtimeContext, # type: RuntimeContext \n tmpdir_lock=None # type: Optional[threading.Lock] \n ): # type: (...) -> None"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        string = _fmt(string)\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, string\n        )\n",
    "target_code": "\n        return lib.TCOD_console_get_height_rect_fmt(\n            self.console_c, x, y, width, height, _fmt(string)\n        )\n",
    "warning_line": "        string = _fmt(string)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " string is declared to have type `str` but is used as type `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 312,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "libtcod/python-tcod",
    "source_filename": "tcod/console.py",
    "target_filename": "tcod/console.py",
    "source_changeid": "60066f30f07303a0cb7092b760a8e661330a63b9^",
    "target_changeid": "60066f30f07303a0cb7092b760a8e661330a63b9",
    "predictions": [
      "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "1": "\n fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "2": "<DED> _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "3": "<IND> _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "4": "\n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "5": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(0) \n ) \n",
      "6": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "7": "<DED> fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "8": "\n fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "9": "<IND> fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "10": "\n str = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "11": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(1) \n ) \n",
      "12": "\n fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(0) \n ) \n",
      "13": "\n string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "14": "\n _fmt = _fmt(string) \n lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "15": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "16": "\n fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "17": "\n _fmt(string) = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "18": "\n str = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "19": "\n fmt_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "20": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt[string] \n ) \n",
      "21": "\n _fmt(string) = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "22": "\n fmt_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "23": "\n _fmt(string) = lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n ) \n",
      "24": "\n str = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "25": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string <DED> )) \n",
      "26": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, string \n ) \n",
      "27": "<DED> _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "28": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt) \n",
      "29": "<DED> _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(0) \n ) \n",
      "30": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() <IND> ) \n",
      "31": "<IND> _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "32": "<DED> fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "33": "<IND> _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(0) \n ) \n",
      "34": "\n fmt_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "35": "\n fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string <DED> )) \n",
      "36": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() <DED> ) \n",
      "37": "\n fmt_array = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "38": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string <IND> )) \n",
      "39": "\n fmt_str = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "40": "\n fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(1) \n ) \n",
      "41": "\n _fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(2) \n ) \n",
      "42": "\n fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt[string] \n ) \n",
      "43": "\n string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "44": "<DED> return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "45": "<IND> fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string \n )) \n",
      "46": "\n string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string) \n ) \n",
      "47": "\n fmt_string = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt_string \n ) \n",
      "48": "<DED> str = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt() \n ) \n",
      "49": "\n fmt = _fmt(string) \n return lib.TCOD_console_get_height_rect_fmt( \n self.console_c, x, y, width, height, _fmt(string <IND> )) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if type_type == SCALAR:\n        <IND>type_ = sub_type\n    <DED>elif type_type == ARRAY:\n        <IND>type_ = query.ArrayQueryParameterType(sub_type, name=name)\n    <DED>elif type_type == STRUCT:\n",
    "target_code": "    if type_type == SCALAR:\n        <IND>result_type = sub_type\n    <DED>elif type_type == ARRAY:\n        <IND>result_type = query.ArrayQueryParameterType(sub_type, name=name)\n    <DED>elif type_type == STRUCT:\n",
    "warning_line": "        type_ = query.ArrayQueryParameterType(sub_type, name=name)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " type_ is declared to have type `str` but is used as type `query.ArrayQueryParameterType`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 231,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "googleapis/python-bigquery",
    "source_filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "target_filename": "google/cloud/bigquery/dbapi/_helpers.py",
    "source_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9^",
    "target_changeid": "66b3dd9f9aec3fda9610a3ceec8d8a477f2ab3b9",
    "predictions": [
      "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "1": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "2": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "3": "if type_type == SCALAR: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "4": "if type_type == SCALAR: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "5": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <DED> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "6": "if type_type == SCALAR: \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "7": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <DED> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "8": "if type_type == SCALAR: \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "9": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <DED> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "10": "if type_type == SCALAR: \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "11": "if type_type == SCALAR: \n <IND> query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "12": "if type_type == SCALAR: \n <IND> elif type_type == RRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "13": "if type_type == SCALAR: \n <IND> query = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "14": "if type_type == SCALAR: \n <IND> sub_type = sub_type \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "15": "if type_type == SCALAR: \n <IND> sub_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "16": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n <IND> elif type_type == ARRAY: \n <IND> assert sub_type is not None \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> assert elif type_type == STRUCT: \n",
      "17": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> assert sub_type is not None \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> assert elif type_type == STRUCT: \n",
      "18": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "19": "if type_type == SCALAR: \n <IND> sub_type = sub_type \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "20": "if type_type == SCALAR: \n <IND> sub_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "21": "if type_type == SCALAR: \n \n elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "22": "if type_type == SCALAR: \n <IND> elif type_type == RRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "23": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n <IND> elif type_type == ARRAY: \n <IND> assert sub_type is not None \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> assert elif type_type == STRUCT: \n",
      "24": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> assert sub_type is not None \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> assert elif type_type == STRUCT: \n",
      "25": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n \n elif type_type == ARRAY: \n <IND> assert sub_type is not None \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> assert elif type_type == STRUCT: \n",
      "26": "if type_type == SCALAR: \n <IND> sub_type = sub_type \n \n elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "27": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n <IND> elif type_type == ARRAY: \n <IND> assert sub_type is not None \n assert type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> assert elif type_type == STRUCT: \n",
      "28": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "29": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> assert sub_type is not None \n assert type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> assert elif type_type == STRUCT: \n",
      "30": "if type_type == SCALAR: \n <IND> sub_type = sub_type \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "31": "if type_type == SCALAR: \n <IND> query = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "32": "if type_type == SCALAR: \n <IND> sub_type = sub_type \n <DED> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "33": "if type_type == SCALAR: \n \n elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "34": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n \n elif type_type == ARRAY: \n <IND> assert sub_type is not None \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> assert elif type_type == STRUCT: \n",
      "35": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n elif type_type == ARRAY: \n <IND> assert sub_type is not None \n assert elif type_type == STRUCT: \n",
      "36": "if type_type == SCALAR: \n <DED> query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "37": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n { elif type_type == STRUCT: \n",
      "38": "if type_type == SCALAR: \n <IND> elif type_type == RRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "39": "if type_type == SCALAR: \n <IND> sub_type = sub_type \n \n elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> elif type_type == STRUCT: \n",
      "40": "if type_type == SCALAR: \n <IND> query.QueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "41": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> assert elif type_type == STRUCT: \n",
      "42": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n } elif type_type == STRUCT: \n",
      "43": "if type_type == SCALAR: \n <IND> elif type_type == ARRAY: \n \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "44": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n <IND> elif type_type == ARRAY: \n <IND> assert sub_type is not None \n assert type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> assert elif type_type == STRUCT: \n",
      "45": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n <DED> elif type_type == ARRAY: \n <IND> assert sub_type is not None \n assert type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <IND> assert elif type_type == STRUCT: \n",
      "46": "if type_type == SCALAR: \n \n elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "47": "if type_type == SCALAR: \n <IND> sub_type = sub_type \n \n elif type_type == ARRAY: \n <IND> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n elif type_type == STRUCT: \n",
      "48": "if type_type == SCALAR: \n <DED> elif type_type == ARRAY: \n <DED> type_ = query.ArrayQueryParameterType(sub_type, name=name) \n <DED> elif type_type == STRUCT: \n",
      "49": "if type_type == SCALAR: \n <IND> assert sub_type is not None \n type_ = sub_type \n <IND> elif type_type == ARRAY: \n <IND> assert sub_type is not None \n type_ = query.ArrayQueryParameterType(sub_type, name=name) \n \n assert elif type_type == STRUCT: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "target_code": "            branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None,\n            env: Union[Mapping[str, str], None] = None, clone_multi_options: Union[Sequence[TBD], None] = None\n            ) -> 'Submodule':\n",
    "warning_line": "            env: Mapping[str, str] = None, clone_multi_options: Union[Sequence[TBD], None] = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " env is declared to have type `Mapping[str, str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 342,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "gitpython-developers/GitPython",
    "source_filename": "git/objects/submodule/base.py",
    "target_filename": "git/objects/submodule/base.py",
    "source_changeid": "2e2fe186d09272c3cb6c96467fff362deb90994f^",
    "target_changeid": "2e2fe186d09272c3cb6c96467fff362deb90994f",
    "predictions": [
      "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n"
    ],
    "correct": false,
    "top_five": {
      "0": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "1": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "2": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "3": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "4": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "5": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "6": "branch: Optional[Union[str, None]] = None, no_checkout: bool = False, depth: Optional[Union[int, None]] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "7": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "8": "branch: Optional[Union[str, None]] = None, no_checkout: bool = False, depth: Optional[Union[int, None]] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "9": "branch: Union[str, None], no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "10": "branch: Union[str, None], no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "11": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "12": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> Submodule: \n",
      "13": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> Submodule: \n",
      "14": "branch: Union[str, None], no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "15": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "16": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "17": "branch: Union[str, None], no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "18": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> Submodule: \n",
      "19": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> Submodule: \n",
      "20": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None], \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "21": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Optional[Union[int, None]] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "22": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> \"Submodule\": \n",
      "23": "branch: Optional[Union[str, None]], no_checkout: bool = False, depth: Optional[Union[int, None]] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "24": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> \"Submodule\": \n",
      "25": "branch: Union[str, None], no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "26": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "27": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Optional[Union[int, None]] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "28": "branch: Optional[Union[str, None]], no_checkout: bool = False, depth: Optional[Union[int, None]] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "29": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None <IND> ) -> 'Submodule': \n",
      "30": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None <IND> ) -> 'Submodule': \n",
      "31": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str], clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> \"Submodule\": \n",
      "32": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None <DED> ) -> 'Submodule': \n",
      "33": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None <DED> ) -> 'Submodule': \n",
      "34": "branch: Union[str, None], no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "35": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': <IND>",
      "36": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, <IND> env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "37": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, <IND> env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "38": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> \"Submodule\": \n",
      "39": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': <IND>",
      "40": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, <DED> env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "41": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, <DED> env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "42": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': <DED>",
      "43": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': \n",
      "44": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> 'Submodule': <DED>",
      "45": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None] = None { ) -> 'Submodule': \n",
      "46": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]], clone_multi_options: Optional[Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': \n",
      "47": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None { ) -> 'Submodule': \n",
      "48": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Optional[Mapping[str, str]] = None, clone_multi_options: Union[Sequence[TBD], None] = None \n ) -> Submodule: \n",
      "49": "branch: Union[str, None] = None, no_checkout: bool = False, depth: Union[int, None] = None, \n env: Union[Mapping[str, str], clone_multi_options: Union[Sequence[TBD], None]] = None \n ) -> 'Submodule': {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        key: str = \"\",\n        algorithms: List[str] = None,\n        options: Dict = None,\n        **kwargs,\n",
    "target_code": "        key: str = \"\",\n        algorithms: Optional[List[str]] = None,\n        options: Optional[Dict] = None,\n        **kwargs,\n",
    "warning_line": "        algorithms: List[str] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " algorithms is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 135,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jpadilla/pyjwt",
    "source_filename": "jwt/api_jws.py",
    "target_filename": "jwt/api_jws.py",
    "source_changeid": "31a8701d11709ce0807b60f7a5fa604d14175235^",
    "target_changeid": "31a8701d11709ce0807b60f7a5fa604d14175235",
    "predictions": [
      "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "1": "key: str = \"\", \n algorithms: List[str] = [], \n options: Optional[Dict] = None, \n **kwargs, \n",
      "2": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, <IND> **kwargs, \n",
      "3": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, <DED> **kwargs, \n",
      "4": "key: str = \"\", <DED> algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "5": "key: str = \"\", \n algorithms: Optional[List[str]] = None, <IND> options: Optional[Dict] = None, \n **kwargs, \n",
      "6": "key: str = \"\", <IND> algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "7": "key: str = \"\", \n algorithms: Optional[List[str]] = None, <DED> options: Optional[Dict] = None, \n **kwargs, \n",
      "8": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, <DED>",
      "9": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, <IND>",
      "10": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, {",
      "11": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, { **kwargs, \n",
      "12": "key: str = \"\", { algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "13": "key: str = \"\", \n algorithms: Optional[List[str]] = None, { options: Optional[Dict] = None, \n **kwargs, \n",
      "14": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, }",
      "15": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, } **kwargs, \n",
      "16": "key: str = \"\", \n algorithms: Optional[List[str]] = None, } options: Optional[Dict] = None, \n **kwargs, \n",
      "17": "key: str = \"\", } algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "18": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \\",
      "19": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \\ **kwargs, \n",
      "20": "key: str = \"\", \\ algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "21": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \\ options: Optional[Dict] = None, \n **kwargs, \n",
      "22": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs,",
      "23": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, **kwargs, \n",
      "24": "key: str = \"\", algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "25": "key: str = \"\", \n algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, \n **kwargs, \n",
      "26": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs,",
      "27": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, **kwargs, \n",
      "28": "key: str = \"\", algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "29": "key: str = \"\", \n algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, \n **kwargs, \n",
      "30": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, **kwargs, \n",
      "31": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs,",
      "32": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs,",
      "33": "key: str = \"\", algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "34": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, **kwargs, \n",
      "35": "key: str = \"\", \n algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, \n **kwargs, \n",
      "36": "key: str = \"\", algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "37": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs,",
      "38": "key: str = \"\", \n algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, \n **kwargs, \n",
      "39": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, **kwargs, \n",
      "40": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, **kwargs, \n",
      "41": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, **kwargs, \n",
      "42": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs,",
      "43": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs,",
      "44": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, ^",
      "45": "key: str = \"\", algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n",
      "46": "key: str = \"\", \n algorithms: Optional[List[str]] = None, \n options: Optional[Dict] = None, ^ **kwargs, \n",
      "47": "key: str = \"\", \n algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, \n **kwargs, \n",
      "48": "key: str = \"\", \n algorithms: Optional[List[str]] = None, options: Optional[Dict] = None, \n **kwargs, \n",
      "49": "key: str = \"\", \n algorithms: Union[List[str]] = None, \n options: Optional[Dict] = None, \n **kwargs, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, comparable, *, error: str = None):\n        <IND>self.comparable = comparable\n",
    "target_code": "\n    def __init__(self, comparable, *, error: typing.Optional[str] = None):\n        <IND>self.comparable = comparable\n",
    "warning_line": "    def __init__(self, comparable, *, error: str = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " error is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 339,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/validate.py",
    "target_filename": "src/marshmallow/validate.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "1": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "2": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <DED> self.comparable = comparable \n",
      "3": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ) -> None: \n <IND> self.comparable = comparable \n",
      "4": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n \n self.comparable = comparable \n",
      "5": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <DED> self.comparable = comparable \n",
      "6": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ) -> None: \n <DED> self.comparable = comparable \n",
      "7": "\n def __init__( <DED> self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "8": "\n def __init__( <IND> self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "9": "<DED> def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "10": "<IND> def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "11": "\n def __init__( { self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "12": "\n def __init__( \n self, comparable: *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "13": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n { self.comparable = comparable \n",
      "14": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n } self.comparable = comparable \n",
      "15": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n \n self.comparable = comparable \n",
      "16": "\n def __init__( \n self, comparable: Comparable, *, error: Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "17": "\n def __init__( \n self, comparable: comparable \n *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "18": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ) -> None: \n \n self.comparable = comparable \n",
      "19": "\n def __init__( } self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "20": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ) -> bool: \n <IND> self.comparable = comparable \n",
      "21": "\n def __init__( \n self, comparable: Comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "22": "\n def __init__( \n self, comparable: comparable <IND> *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "23": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None) -> None: \n <IND> self.comparable = comparable \n",
      "24": "<DED> def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "25": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n \\ self.comparable = comparable \n",
      "26": "\n def __init__( \n self, comparable: comparable <DED> *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "27": "\n def __init__( \n self, comparable: Comparable, *, error: Optional[str] = None \n ) -> None: \n <IND> self.comparable = comparable \n",
      "28": "\n def __init__( <DED> self, comparable, *, error: typing.Optional[str] = None \n ) -> None: \n <IND> self.comparable = comparable \n",
      "29": "\n def __init__( \\ self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "30": "\n def __init__( <IND> self, comparable, *, error: typing.Optional[str] = None \n ) -> None: \n <IND> self.comparable = comparable \n",
      "31": "\n def __init__( <DED> self, comparable, *, error: typing.Optional[str] = None \n ): \n <DED> self.comparable = comparable \n",
      "32": "<IND> def __init__(self, comparable, *, error: typing.Optional[str] = None): \n <IND> self.comparable = comparable \n",
      "33": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable <IND>",
      "34": "{ def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "35": "\n def __init__( <IND> self, comparable, *, error: typing.Optional[str] = None \n ): \n <DED> self.comparable = comparable \n",
      "36": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None <IND> ): \n <IND> self.comparable = comparable \n",
      "37": "<DED> def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <DED> self.comparable = comparable \n",
      "38": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None <DED> ): \n <IND> self.comparable = comparable \n",
      "39": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable <DED>",
      "40": "\n def __init__( \n self, comparable: comparable \n *, error: typing.Optional[str] = None \n ) -> None: \n <IND> self.comparable = comparable \n",
      "41": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): <IND> <IND> self.comparable = comparable \n",
      "42": "\n def __init__( self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "43": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): <DED> <IND> self.comparable = comparable \n",
      "44": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n self.comparable = comparable \n",
      "45": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n self.comparable = comparable \n",
      "46": "\n def __init__(self, comparable, *, error: typing.Optional[str] = None): \n { self.comparable = comparable \n",
      "47": "\n def __init__( self, comparable, *, error: typing.Optional[str] = None \n ): \n <IND> self.comparable = comparable \n",
      "48": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n self.comparable = comparable \n",
      "49": "\n def __init__( \n self, comparable, *, error: typing.Optional[str] = None \n ): \n self.comparable = comparable \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Dict) -> None\n        <IND>self.db_user = db_user\n",
    "target_code": "    def __init__(self, db_user, instance=None):\n        # type: (str, Optional[Dict]) -> None\n        <IND>self.db_user = db_user\n",
    "warning_line": "    def __init__(self, db_user, instance=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " instance is declared to have type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 77,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tribe29/checkmk",
    "source_filename": "agents/plugins/mk_postgres.py",
    "target_filename": "agents/plugins/mk_postgres.py",
    "source_changeid": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1^",
    "target_changeid": "5c57fa0a4642b50bc8cdbac70ea5cce1d149b6a1",
    "predictions": [
      "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n"
    ],
    "correct": true,
    "top_five": {
      "0": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "1": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n <DED> self.db_user = db_user \n",
      "2": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Dict) -> None \n <IND> self.db_user = db_user \n",
      "3": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n \n self.db_user = db_user \n",
      "4": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Dict) -> None \n <DED> self.db_user = db_user \n",
      "5": "def __init__(self, db_user, instance=None): \n <IND> self.db_user = db_user \n",
      "6": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "7": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Dict) -> None \n \n self.db_user = db_user \n",
      "8": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Optional[Dict]) -> None \n <DED> self.db_user = db_user \n",
      "9": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Optional[Dict]) -> None \n \n self.db_user = db_user \n",
      "10": "def __init__(self, db_user, instance=None): \n # type: (Optional[str, Dict]) -> None \n <IND> self.db_user = db_user \n",
      "11": "def __init__(self, db_user, instance=None): \n # type: (str, Dict) -> None \n <IND> self.db_user = db_user \n",
      "12": "def __init__(self, db_user, instance=None): \n # type: (Optional[str, Dict]) -> None \n <DED> self.db_user = db_user \n",
      "13": "def __init__(self, db_user, instance=None): \n # type: (Optional[str]) -> None \n <IND> self.db_user = db_user \n",
      "14": "def __init__(self, db_user, instance=None): \n <DED> self.db_user = db_user \n",
      "15": "def __init__(self, db_user, instance=None): \n # type: (str, Dict) -> None \n <DED> self.db_user = db_user \n",
      "16": "def __init__(self, db_user, instance=None): \n # type: (Optional[str, Dict]) -> None \n \n self.db_user = db_user \n",
      "17": "def __init__(self, db_user, instance=None): \n # type: (Optional[str]) -> None \n <DED> self.db_user = db_user \n",
      "18": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n { self.db_user = db_user \n",
      "19": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n } self.db_user = db_user \n",
      "20": "def __init__(self, db_user, instance=None): \n # type: (str, Dict) -> None \n \n self.db_user = db_user \n",
      "21": "def __init__(self, db_user, instance=None): \n # type: (Optional[str]) -> None \n \n self.db_user = db_user \n",
      "22": "def __init__(self, db_user, instance=None): \n \n self.db_user = db_user \n",
      "23": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Dict) -> None \n { self.db_user = db_user \n",
      "24": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Dict) -> None \n } self.db_user = db_user \n",
      "25": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Optional[Dict]) -> None \n { self.db_user = db_user \n",
      "26": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Optional[Dict]) -> None \n } self.db_user = db_user \n",
      "27": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n \\ self.db_user = db_user \n",
      "28": "def __init__(self, db_user): \n # type: (str, Optional[Dict]) -> None \n <IND> self.db_user = db_user \n",
      "29": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "30": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "31": "def __init__(self, db_user, instance=None): \n # type: (Optional[str], Dict) -> None \n \\ self.db_user = db_user \n",
      "32": "def __init__(self, db_user): \n # type: (str, Optional[Dict]) -> None \n <DED> self.db_user = db_user \n",
      "33": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "34": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "35": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "36": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "37": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "38": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "39": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "40": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "41": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "42": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "43": "def __init__(self, db_user): \n # type: (Optional[str], Dict) -> None \n <IND> self.db_user = db_user \n",
      "44": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "45": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "46": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "47": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "48": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n",
      "49": "def __init__(self, db_user, instance=None): \n # type: (str, Optional[Dict]) -> None \n self.db_user = db_user \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def run_forever(self, loop: asyncio.AbstractEventLoop = None):\n        <IND>loop = loop or asyncio.get_event_loop()\n",
    "target_code": "\n    <DED>def run_forever(self, loop: typing.Optional[asyncio.AbstractEventLoop] = None):\n        <IND>loop = loop or asyncio.get_event_loop()\n",
    "warning_line": "    def run_forever(self, loop: asyncio.AbstractEventLoop = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " loop is declared to have type `asyncio.events.AbstractEventLoop` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 137,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "fscdev/vkwave",
    "source_filename": "vkwave/bots/easy/easy_bot.py",
    "target_filename": "vkwave/bots/easy/easy_bot.py",
    "source_changeid": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc^",
    "target_changeid": "b634b9be3eba31b24c9cc673fcfb02858c7bb1cc",
    "predictions": [
      "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "1": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "2": "\n <IND> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "3": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "4": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop) -> asyncio.get_event_loop(): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "5": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop) -> Asyncio.AbstractEventLoop: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "6": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop) -> Asyncio.AbstractEventLoop: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "7": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.AbstractEventLoop: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "8": "\n <IND> def run_forever(self, loop: Asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "9": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "10": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.AbstractEventLoop: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "11": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n \n loop = loop or asyncio.get_event_loop() \n",
      "12": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop) -> asyncio.get_event_loop(): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "13": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop) -> asyncio.AbstractEventLoop: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "14": "\n \n def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "15": "\n <IND> def run_forever(self, loop: asyncio.AbstractEventLoop) -> asyncio.get_event_loop(): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "16": "\n <IND> def run_forever(self, loop: asyncio.AbstractEventLoop) -> Asyncio.AbstractEventLoop: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "17": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop) -> asyncio.AbstractEventLoop: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "18": "\n <IND> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "19": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop) -> asyncio.get_event_loop(): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "20": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop) -> Asyncio.AbstractEventLoop: \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "21": "<DED> <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "22": "<IND> <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "23": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "24": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop) -> loop: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "25": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "26": "\n <DED> def run_forever(self, loop = asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "27": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n { loop = loop or asyncio.get_event_loop() \n",
      "28": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n } loop = loop or asyncio.get_event_loop() \n",
      "29": "\n { def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "30": "\n } def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "31": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.AbstractEventLoop: \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "32": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.AbstractEventLoop: \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "33": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop): \n \n loop = loop or asyncio.get_event_loop() \n",
      "34": "\n \n def run_forever(self, loop: Asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "35": "\n <IND> def run_forever(self, loop: Asyncio.AbstractEventLoop): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "36": "<DED> <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "37": "\n <IND> def run_forever(self, loop: asyncio.AbstractEventLoop): \n \n loop = loop or asyncio.get_event_loop() \n",
      "38": "\n <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop) -> None: \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "39": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n \\ loop = loop or asyncio.get_event_loop() \n",
      "40": "\n \\ def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "41": "\n \n def run_forever(self, loop: asyncio.AbstractEventLoop): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "42": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> asyncio.AbstractEventLoop: \n \n loop = loop or asyncio.get_event_loop() \n",
      "43": "\n <DED> def run_forever(self, loop: 'asyncio.AbstractEventLoop'): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "44": "<IND> <DED> def run_forever(self, loop: Asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "45": "<DED> <IND> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "46": "\n <DED> def run_forever(self, loop: Optional[asyncio.AbstractEventLoop] = None) -> Asyncio.AbstractEventLoop: \n \n loop = loop or asyncio.get_event_loop() \n",
      "47": "{ <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <IND> loop = loop or asyncio.get_event_loop() \n",
      "48": "<DED> <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): \n <DED> loop = loop or asyncio.get_event_loop() \n",
      "49": "\n <DED> def run_forever(self, loop: asyncio.AbstractEventLoop): <IND> <IND> loop = loop or asyncio.get_event_loop() \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        attributes: types.Attributes = None,\n        timestamp: int = None,\n    ) -> None:\n",
    "target_code": "        attributes: types.Attributes = None,\n        timestamp: Optional[int] = None,\n    ) -> None:\n",
    "warning_line": "        timestamp: int = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " timestamp is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 207,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "open-telemetry/opentelemetry-python",
    "source_filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "target_filename": "opentelemetry-sdk/src/opentelemetry/sdk/trace/__init__.py",
    "source_changeid": "cfecca122c202f1dcc9361f6ab2b286c0ec17226^",
    "target_changeid": "cfecca122c202f1dcc9361f6ab2b286c0ec17226",
    "predictions": [
      "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "1": "attributes: types.Attributes = None, \n timestamp: Optional[int] = None, \n ) -> None: \n",
      "2": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: <IND>",
      "3": "attributes: types.Attributes = None, <IND> timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "4": "attributes: types.Attributes = None, <DED> timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "5": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, <IND> ) -> None: \n",
      "6": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, <DED> ) -> None: \n",
      "7": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: <DED>",
      "8": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: {",
      "9": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, { ) -> None: \n",
      "10": "attributes: types.Attributes = None, { timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "11": "attributes: typing.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "12": "attributes: type.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "13": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: }",
      "14": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, } ) -> None: \n",
      "15": "attributes: types.Attributes = None, } timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "16": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int], \n ) -> None: \n",
      "17": "attributes: type.Attributes = None, \n timestamp: Optional[int] = None, \n ) -> None: \n",
      "18": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: \\",
      "19": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \\ ) -> None: \n",
      "20": "attributes: types.Attributes = None, \\ timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "21": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "22": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None:",
      "23": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, ) -> None: \n",
      "24": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None:",
      "25": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "26": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, ) -> None: \n",
      "27": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None:",
      "28": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None:",
      "29": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, ) -> None: \n",
      "30": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "31": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, ) -> None: \n",
      "32": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None:",
      "33": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "34": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None:",
      "35": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, ) -> None: \n",
      "36": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, ) -> None: \n",
      "37": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "38": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, ^ ) -> None: \n",
      "39": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "40": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None:",
      "41": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None: ^",
      "42": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None:",
      "43": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, ) -> None: \n",
      "44": "attributes: types.Attributes = None, ^ timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "45": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, ) -> None: \n",
      "46": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "47": "attributes: types.Attributes = None, timestamp: typing.Optional[int] = None, \n ) -> None: \n",
      "48": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, \n ) -> None:",
      "49": "attributes: types.Attributes = None, \n timestamp: typing.Optional[int] = None, ) -> None: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "  # First type of supported featurizers\n  <DED><DED>supported_featurizers = ['ElementPropertyFingerprint'\n                          ]  # type: List[Featurizer]\n\n",
    "target_code": "  # First type of supported featurizers\n  <DED><DED>supported_featurizers = ['ElementPropertyFingerprint']  # type: List[str]\n\n",
    "warning_line": "  supported_featurizers = ['ElementPropertyFingerprint'",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " supported_featurizers is declared to have type `List[deepchem.feat.base_classes.Featurizer]` but is used as type `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 161,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepchem/deepchem",
    "source_filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "target_filename": "deepchem/molnet/load_function/material_datasets/load_bandgap.py",
    "source_changeid": "ab558d41ffbe25b314314222924ddd5ca89e9e6b^",
    "target_changeid": "ab558d41ffbe25b314314222924ddd5ca89e9e6b",
    "predictions": [
      "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "1": "# First type of supported featurizers \n <IND> <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "2": "# First type of supported featurizers \n <DED> <IND> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "3": "# First type of supported featurizers \n <IND> <IND> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "4": "# First type of supported featurizers \n \n <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "5": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' <DED> ] \n \n",
      "6": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' <IND> ] \n \n",
      "7": "# First type of supported featurizers \n <IND> <DED> supported_featurizers = ['ElementPropertyFingerprint' <DED> ] \n \n",
      "8": "# First type of supported featurizers \n \n <IND> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "9": "# First type of supported featurizers \n <IND> <DED> supported_featurizers = ['ElementPropertyFingerprint' <IND> ] \n \n",
      "10": "# First type of supported featurizers \n <DED> \n supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "11": "# First type of supported featurizers \n <DED> <IND> supported_featurizers = ['ElementPropertyFingerprint' <DED> ] \n \n",
      "12": "# First type of supported featurizers \n <DED> <IND> supported_featurizers = ['ElementPropertyFingerprint' <IND> ] \n \n",
      "13": "# First type of supported featurizers \n <IND> \n supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "14": "# First type of supported featurizers \n <IND> <IND> supported_featurizers = ['ElementPropertyFingerprint' <DED> ] \n \n",
      "15": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' { ] \n \n",
      "16": "# First type of supported featurizers \n \n <DED> supported_featurizers = ['ElementPropertyFingerprint' <DED> ] \n \n",
      "17": "# First type of supported featurizers \n <IND> <IND> supported_featurizers = ['ElementPropertyFingerprint' <IND> ] \n \n",
      "18": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' } ] \n \n",
      "19": "# First type of supported featurizers \n \n <DED> supported_featurizers = ['ElementPropertyFingerprint' <IND> ] \n \n",
      "20": "# First type of supported featurizers \n <IND> <DED> supported_featurizers = ['ElementPropertyFingerprint' { ] \n \n",
      "21": "# First type of supported featurizers \n <IND> <DED> supported_featurizers = ['ElementPropertyFingerprint' } ] \n \n",
      "22": "# First type of supported featurizers \n <DED> <IND> supported_featurizers = ['ElementPropertyFingerprint' { ] \n \n",
      "23": "# First type of supported featurizers \n \n \n supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "24": "# First type of supported featurizers \n \n <IND> supported_featurizers = ['ElementPropertyFingerprint' <DED> ] \n \n",
      "25": "# First type of supported featurizers \n <DED> <IND> supported_featurizers = ['ElementPropertyFingerprint' } ] \n \n",
      "26": "# First type of supported featurizers \n <DED> \n supported_featurizers = ['ElementPropertyFingerprint' <DED> ] \n \n",
      "27": "# First type of supported featurizers \n <IND> <IND> supported_featurizers = ['ElementPropertyFingerprint' { ] \n \n",
      "28": "# First type of supported featurizers \n \n <IND> supported_featurizers = ['ElementPropertyFingerprint' <IND> ] \n \n",
      "29": "# First type of supported featurizers \n <IND> <IND> supported_featurizers = ['ElementPropertyFingerprint' } ] \n \n",
      "30": "# First type of supported featurizers \n <DED> \n supported_featurizers = ['ElementPropertyFingerprint' <IND> ] \n \n",
      "31": "# First type of supported featurizers \n \n <DED> supported_featurizers = ['ElementPropertyFingerprint' { ] \n \n",
      "32": "# First type of supported featurizers \n <DED> { supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "33": "# First type of supported featurizers \n { <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "34": "# First type of supported featurizers \n <IND> \n supported_featurizers = ['ElementPropertyFingerprint' <DED> ] \n \n",
      "35": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' \\ ] \n \n",
      "36": "# First type of supported featurizers \n } <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "37": "# First type of supported featurizers \n <DED> } supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "38": "# First type of supported featurizers \n \n <DED> supported_featurizers = ['ElementPropertyFingerprint' } ] \n \n",
      "39": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = List['ElementPropertyFingerprint'] \n \n",
      "40": "# First type of supported featurizers \n <IND> \n supported_featurizers = ['ElementPropertyFingerprint' <IND> ] \n \n",
      "41": "# First type of supported featurizers \n <IND> { supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "42": "# First type of supported featurizers \n <IND> <DED> supported_featurizers = ['ElementPropertyFingerprint' \\ ] \n \n",
      "43": "# First type of supported featurizers \n <IND> } supported_featurizers = ['ElementPropertyFingerprint' \n ] \n \n",
      "44": "# First type of supported featurizers \n <IND> <DED> supported_featurizers = List['ElementPropertyFingerprint'] \n \n",
      "45": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = List[ElementPropertyFingerprint] \n \n",
      "46": "# First type of supported featurizers \n <DED> <DED> supported_featurizers: List[ElementPropertyFingerprint] \n \n",
      "47": "# First type of supported featurizers \n <DED> <IND> supported_featurizers = List['ElementPropertyFingerprint'] \n \n",
      "48": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] <IND> \n",
      "49": "# First type of supported featurizers \n <DED> <DED> supported_featurizers = ['ElementPropertyFingerprint' \n ] <DED> \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            <DED>if self is Bot:\n                <IND>Bot = new\n",
    "target_code": "            <DED>if self is Bot:\n                <IND>assert isinstance(new, BotUser)\n                Bot = new\n",
    "warning_line": "                Bot = new",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " Bot is declared to have type `BotUser` but is used as type `User`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 460,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/users.py",
    "target_filename": "src/users.py",
    "source_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c^",
    "target_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "predictions": [
      "\n if self is Bot: \n <IND> Bot = new \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n if self is Bot: \n <IND> Bot = new \n",
      "1": "<DED> if self is Bot: \n <IND> Bot = new \n",
      "2": "\n if self is Bot: \n <IND> if new is not None: \n <IND> Bot = new \n",
      "3": "<IND> if self is Bot: \n <IND> Bot = new \n",
      "4": "\n if self is Bot: \n <IND> new = new \n",
      "5": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> Bot = new \n",
      "6": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> new = new \n",
      "7": "\n if self is Bot: \n <DED> Bot = new \n",
      "8": "<DED> if self is Bot: \n <IND> if new is not None: \n <IND> Bot = new \n",
      "9": "\n if self is Bot: \n <IND> if new is not None: \n <IND> new = new \n",
      "10": "<IND> if self is Bot: \n <IND> if new is not None: \n <IND> Bot = new \n",
      "11": "<DED> if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> Bot = new \n",
      "12": "\n if self is Bot: \n <IND> if new is not None: \n <DED> Bot = new \n",
      "13": "\n if self is Bot: \n <IND> Bot = User() \n",
      "14": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> if new is not None and self is not Bot: \n <IND> Bot = new \n",
      "15": "\n if self is Bot: \n <DED> if new is not None: \n <IND> Bot = new \n",
      "16": "<DED> if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> new = new \n",
      "17": "<IND> if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> Bot = new \n",
      "18": "\n if self is Bot: \n <IND> if new is None and self is not Bot: \n <IND> Bot = new \n",
      "19": "\n if self is Bot: \n <IND> if new is None and self is not None: \n <IND> Bot = new \n",
      "20": "\n if self is Bot: \n <IND> if new is None: \n <IND> Bot = new \n",
      "21": "\n if self is Bot: \n <IND> Bot = user \n",
      "22": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> if new is not None and self is not Bot: \n <IND> new = new \n",
      "23": "<IND> if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> new = new \n",
      "24": "\n if self is Bot: \n <IND> if new is None and self is not Bot: \n <IND> new = new \n",
      "25": "\n if self is Bot: \n <IND> if new is not None: \n <IND> Bot = user \n",
      "26": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <DED> Bot = new \n",
      "27": "\n if self is Bot: \n <IND> if User is not None and self is not Bot: \n <IND> Bot = new \n",
      "28": "\n if self is Bot: \n <DED> if new is not None and self is not Bot: \n <IND> Bot = new \n",
      "29": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> if new is None and self is not Bot: \n <IND> Bot = new \n",
      "30": "<DED> if self is Bot: \n <IND> new = new \n",
      "31": "\n if self is Bot: \n <IND> if new is not None: \n <IND> if new is None: \n <IND> Bot = new \n",
      "32": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> Bot = user \n",
      "33": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <DED> new = new \n",
      "34": "<DED> if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> if new is not None and self is not Bot: \n <IND> Bot = new \n",
      "35": "\n if self is Bot: \n <DED> if new is not None and self is not Bot: \n <IND> new = new \n",
      "36": "<DED> if self is Bot: \n <IND> if new is not None: \n <IND> new = new \n",
      "37": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> if new is None and self is not Bot: \n <IND> new = new \n",
      "38": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> if new is not None: \n <IND> Bot = new \n",
      "39": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> if new is not None and self is not Bot: \n <DED> Bot = new \n",
      "40": "\n if self is Bot: \n <IND> if new is not None: \n \n Bot = new \n",
      "41": "<DED> if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> if new is not None and self is not Bot: \n <IND> new = new \n",
      "42": "<DED> if self is Bot: \n <DED> Bot = new \n",
      "43": "\n if self is Bot: \n <IND> if new is None and self is not None: \n <IND> new = new \n",
      "44": "<IND> if self is Bot: \n <IND> new = new \n",
      "45": "<IND> if self is Bot: \n <IND> if new is not None: \n <IND> new = new \n",
      "46": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> if new is not None and self is not Bot: \n <IND> Bot = user \n",
      "47": "<DED> if self is Bot: \n <IND> if new is not None: \n <DED> Bot = new \n",
      "48": "\n if self is Bot: \n <IND> if new is not None: \n <IND> if new is not None: \n <IND> Bot = new \n",
      "49": "\n if self is Bot: \n <IND> if new is not None and self is not Bot: \n <IND> if new is not None and self is not Bot: \n <DED> new = new \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        method_name: str = None,\n        error: Exception = None,\n        subsegment: BaseSegment = None,\n        capture_error: Optional[bool] = None,\n",
    "target_code": "        self,\n        method_name: str,\n        error: Exception,\n        subsegment: BaseSegment,\n        capture_error: Optional[bool] = None,\n",
    "warning_line": "        error: Exception = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " error is declared to have type `Exception` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 658,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/tracing/tracer.py",
    "target_filename": "aws_lambda_powertools/tracing/tracer.py",
    "source_changeid": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86^",
    "target_changeid": "7c9a319ac5f6ad915b0a4bed7d7236ce03c4de86",
    "predictions": [
      "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "1": "self, \n method_name: str, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "2": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "3": "self, \n method_name: Optional[str] = None, \n error: Exception, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "4": "self, \n method_name: str, \n error: Optional[Exception] = None, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "5": "self, \n method_name: Optional[str] = None, \n error: Optional[Type[Exception]] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "6": "self, \n method_name: Optional[str] = None, \n error: Optional[Example] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "7": "self, <DED> method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "8": "self, <IND> method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "9": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, <IND> capture_error: Optional[bool] = None, \n",
      "10": "self, \n method_name: Optional[str] = None, <IND> error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "11": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, <IND> subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "12": "self, \n method_name: Optional[str] = None, <DED> error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "13": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, <DED> capture_error: Optional[bool] = None, \n",
      "14": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, <DED> subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "15": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, <IND>",
      "16": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, <DED>",
      "17": "self, { method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "18": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, { capture_error: Optional[bool] = None, \n",
      "19": "self, \n method_name: Optional[str] = None, { error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "20": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, { subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "21": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, {",
      "22": "self, \n method_name: Optional[str] = None, \n error: Exception, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "23": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, } subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "24": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, } capture_error: Optional[bool] = None, \n",
      "25": "self, \n method_name: Optional[str] = None, } error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "26": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, }",
      "27": "self, } method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "28": "self, \n method_name: Optional[str] = None, \n error: Optional[exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \n",
      "29": "self, \n method_name: str, \n error: TypeError, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "30": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[basesegment] = None, \n capture_error: Optional[bool] = None, \n",
      "31": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, \\",
      "32": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \\ capture_error: Optional[bool] = None, \n",
      "33": "self, \n method_name: str, \n error: typing.Optional[Exception] = None, \n subsegment: BaseSegment, \n capture_error: Optional[bool] = None, \n",
      "34": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None,",
      "35": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None, \n",
      "36": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None,",
      "37": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None, \n",
      "38": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None,",
      "39": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None,",
      "40": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None, \n",
      "41": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None, \n",
      "42": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None,",
      "43": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None,",
      "44": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None, \n",
      "45": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None,",
      "46": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None, \n",
      "47": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, capture_error: Optional[bool] = None, \n",
      "48": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None, ^",
      "49": "self, \n method_name: Optional[str] = None, \n error: Optional[Exception] = None, \n subsegment: Optional[BaseSegment] = None, \n capture_error: Optional[bool] = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        <DED>details = details.split(\", \")\n\n",
    "target_code": "\n        <DED>split_details = details.split(\", \")\n\n",
    "warning_line": "        details = details.split(\", \")",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " details is declared to have type `str` but is used as type `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 229,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hsahovic/poke-env",
    "source_filename": "src/poke_env/environment/pokemon.py",
    "target_filename": "src/poke_env/environment/pokemon.py",
    "source_changeid": "83a394d661947a52838ecc11f4750fa14f08b4d7^",
    "target_changeid": "83a394d661947a52838ecc11f4750fa14f08b4d7",
    "predictions": [
      "\n <DED> details_split = details.split(\", \") \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> details_split = details.split(\", \") \n \n",
      "1": "\n <DED> details_list = details.split(\", \") \n \n",
      "2": "\n <IND> details_split = details.split(\", \") \n \n",
      "3": "\n <DED> details.split = details.split(\", \") \n \n",
      "4": "\n <DED> details_id = details.split(\", \") \n \n",
      "5": "\n <IND> details_list = details.split(\", \") \n \n",
      "6": "\n <DED> details = details.split(\", \") \n \n",
      "7": "\n \n details_split = details.split(\", \") \n \n",
      "8": "\n <DED> if not details: \n <IND> details.split = details.split(\", \") \n \n",
      "9": "\n <DED> details_split = details.split(, \") \n \n",
      "10": "\n <DED> details__split = details.split(\", \") \n \n",
      "11": "\n <DED> details_split = details.split(\" \") \n \n",
      "12": "\n <IND> details.split = details.split(\", \") \n \n",
      "13": "\n <DED> details_split = details.split(list(\", \")) \n \n",
      "14": "<DED> <DED> details_split = details.split(\", \") \n \n",
      "15": "\n <IND> details_id = details.split(\", \") \n \n",
      "16": "\n <DED> if not details: \n <IND> details = details.split(\", \") \n \n",
      "17": "\n <DED> details = details.split(, \") \n \n",
      "18": "<IND> <DED> details_split = details.split(\", \") \n \n",
      "19": "\n <DED> details_split_list = details.split(\", \") \n \n",
      "20": "\n { details_split = details.split(\", \") \n \n",
      "21": "\n } details_split = details.split(\", \") \n \n",
      "22": "\n <DED> details_ids = details.split(\", \") \n \n",
      "23": "\n <IND> details = details.split(\", \") \n \n",
      "24": "\n <DED> details_list = lists.split(\", \") \n \n",
      "25": "\n \n details_list = details.split(\", \") \n \n",
      "26": "\n <DED> details = details.split(list(\", \")) \n \n",
      "27": "\n <IND> details_split = details.split(, \") \n \n",
      "28": "\n <IND> details__split = details.split(\", \") \n \n",
      "29": "\n <DED> if not details: \n <IND> details = details.split(\" \") \n \n",
      "30": "\n <DED> details_divs = details.split(\", \") \n \n",
      "31": "\n <IND> details_split = details.split(\" \") \n \n",
      "32": "\n <DED> details_split = detail.split(\", \") \n \n",
      "33": "\n <DED> details_split = details.split(\", \") \n <IND>",
      "34": "\n <DED> details_split = details.split(\", \") \n <DED>",
      "35": "\n <DED> details_split = details.split(), \") \n \n",
      "36": "\n \\ details_split = details.split(\", \") \n \n",
      "37": "\n <DED> details_list = details.split(, \") \n \n",
      "38": "<DED> <IND> details_split = details.split(\", \") \n \n",
      "39": "\n <DED> details_vars = details.split(\", \") \n \n",
      "40": "\n <DED> if not details: \n <IND> details = details.split(list(\", \")) \n \n",
      "41": "\n <DED> details_list = list(str, []) \n \n",
      "42": "\n <DED> details__ = details.split(\", \") \n \n",
      "43": "\n <DED> details_id = details.split(, \") \n \n",
      "44": "\n <DED> details_list = details.split(\" \") \n \n",
      "45": "\n <DED> details = details.split(\" \") \n \n",
      "46": "<DED> <DED> details_list = details.split(\", \") \n \n",
      "47": "\n <DED> details_split = details.split(\", \") <IND> \n",
      "48": "\n <DED> details_split = details.split(\", \") <DED> \n",
      "49": "\n <IND> details = details.split(, \") \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    min_size=0,   # type: int\n    average_size=None,  # type: int\n    max_size=None,  # type: int\n",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,  # type: None\n    max_size=None,  # type: int\n",
    "warning_line": "    average_size=None,  # type: int",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " average_size is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 705,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "HypothesisWorks/hypothesis",
    "source_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "target_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_changeid": "928e57554754bc780ee307835688cc752a386743^",
    "target_changeid": "928e57554754bc780ee307835688cc752a386743",
    "predictions": [
      "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int \n"
    ],
    "correct": true,
    "top_five": {
      "0": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int \n",
      "1": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: int \n",
      "2": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: Optional[int] \n",
      "3": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: None \n",
      "4": "min_size=0, # type: int \n average_size=None, # type: None <IND> max_size=None, # type: int \n",
      "5": "min_size=0, # type: int \n average_size=None, # type: None <DED> max_size=None, # type: int \n",
      "6": "min_size=0, # type: int <IND> average_size=None, # type: None \n max_size=None, # type: int \n",
      "7": "min_size=0, # type: int <DED> average_size=None, # type: None \n max_size=None, # type: int \n",
      "8": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int <IND>",
      "9": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int <DED>",
      "10": "min_size=0, # type: int \n average_size=None, # type: none \n max_size=None, # type: int \n",
      "11": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None, # type: Optional[int] \n",
      "12": "min_size=0, # type: int \n average_size=None, # type: None { max_size=None, # type: int \n",
      "13": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int {",
      "14": "min_size=0, # type: int { average_size=None, # type: None \n max_size=None, # type: int \n",
      "15": "min_size=0, # type: int \n average_size=None, # type: None } max_size=None, # type: int \n",
      "16": "min_size=0, # type: int } average_size=None, # type: None \n max_size=None, # type: int \n",
      "17": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int }",
      "18": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: Int \n",
      "19": "min_size=0, # type: int \n average_size=NONE, # type: None \n max_size=None, # type: int \n",
      "20": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None, # type: int \n",
      "21": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int \\",
      "22": "min_size=0, # type: int \\ average_size=None, # type: None \n max_size=None, # type: int \n",
      "23": "min_size=0, # type: int \n average_size=None, # type: None \\ max_size=None, # type: int \n",
      "24": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int",
      "25": "min_size=0, # type: int average_size=None, # type: None \n max_size=None, # type: int \n",
      "26": "min_size=0, # type: int \n average_size=None, # type: None max_size=None, # type: int \n",
      "27": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int",
      "28": "min_size=0, # type: int average_size=None, # type: None \n max_size=None, # type: int \n",
      "29": "min_size=0, # type: int \n average_size=None, # type: None max_size=None, # type: int \n",
      "30": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int",
      "31": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int",
      "32": "min_size=0, # type: int \n average_size=None, # type: None max_size=None, # type: int \n",
      "33": "min_size=0, # type: int average_size=None, # type: None \n max_size=None, # type: int \n",
      "34": "min_size=0, # type: int average_size=None, # type: None \n max_size=None, # type: int \n",
      "35": "min_size=0, # type: int \n average_size=None, # type: None max_size=None, # type: int \n",
      "36": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int",
      "37": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int",
      "38": "min_size=0, # type: int average_size=None, # type: None \n max_size=None, # type: int \n",
      "39": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int",
      "40": "min_size=0, # type: int \n average_size=None, # type: None max_size=None, # type: int \n",
      "41": "min_size=0, # type: int average_size=None, # type: None \n max_size=None, # type: int \n",
      "42": "min_size=0, # type: int average_size=None, # type: None \n max_size=None, # type: int \n",
      "43": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int ^",
      "44": "min_size=0, # type: int \n average_size=None, # type: None max_size=None, # type: int \n",
      "45": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int",
      "46": "min_size=0, # type: int \n average_size=None, # type: None ^ max_size=None, # type: int \n",
      "47": "min_size=0, # type: int ^ average_size=None, # type: None \n max_size=None, # type: int \n",
      "48": "min_size=0, # type: int average_size=None, # type: None \n max_size=None, # type: int \n",
      "49": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None, # type: int"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: str = None,\n        log_record_order: List[str] = None,\n        utc: bool = False,\n",
    "target_code": "        json_default: Optional[Callable[[Any], Any]] = None,\n        datefmt: Optional[str] = None,\n        log_record_order: Optional[List[str]] = None,\n        utc: bool = False,\n",
    "warning_line": "        datefmt: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " datefmt is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 63,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/logging/formatter.py",
    "target_filename": "aws_lambda_powertools/logging/formatter.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "1": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, <IND> utc: bool = False, \n",
      "2": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, <IND> log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "3": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, <DED> utc: bool = False, \n",
      "4": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, <DED> log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "5": "json_default: Optional[Callable[[Any], Any]] = None, <IND> datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "6": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, <IND>",
      "7": "json_default: Optional[Callable[[Any], Any]] = None, <DED> datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "8": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, <DED>",
      "9": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, { utc: bool = False, \n",
      "10": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, { log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "11": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, {",
      "12": "json_default: Optional[Callable[[Any], Any]] = None, { datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "13": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, } utc: bool = False, \n",
      "14": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, } log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "15": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, }",
      "16": "json_default: Optional[Callable[[Any], Any]] = None, } datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "17": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \\",
      "18": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \\ log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "19": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \\ utc: bool = False, \n",
      "20": "json_default: Optional[Callable[[Any], Any]] = None, \\ datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "21": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False,",
      "22": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "23": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, utc: bool = False, \n",
      "24": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "25": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "26": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False,",
      "27": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "28": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, utc: bool = False, \n",
      "29": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False,",
      "30": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False,",
      "31": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "32": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, utc: bool = False, \n",
      "33": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "34": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "35": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, utc: bool = False, \n",
      "36": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "37": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False,",
      "38": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False,",
      "39": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False,",
      "40": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, utc: bool = False, \n",
      "41": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, utc: bool = False, \n",
      "42": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, utc: bool = False, \n",
      "43": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "44": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "45": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "46": "json_default: Optional[Callable[[Any], Any]] = None, datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "47": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, \n utc: bool = False,",
      "48": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, log_record_order: Optional[List[str]] = None, \n utc: bool = False, \n",
      "49": "json_default: Optional[Callable[[Any], Any]] = None, \n datefmt: Optional[str] = None, \n log_record_order: Optional[List[str]] = None, ^ utc: bool = False, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        use_logits: bool = False,\n        channel_index: int = Deprecated,\n        channels_first: bool = False,\n",
    "target_code": "        use_logits: bool = False,\n        channel_index=Deprecated,\n        channels_first: bool = False,\n",
    "warning_line": "        channel_index: int = Deprecated,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " channel_index is declared to have type `int` but is used as type `art.utils._Deprecated`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 72,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "source_filename": "art/estimators/classification/keras.py",
    "target_filename": "art/estimators/classification/keras.py",
    "source_changeid": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c^",
    "target_changeid": "e9e70152a0070f2bb6b5e77c3c5f5f3fc6176c0c",
    "predictions": [
      "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, \n",
      "1": "use_logits: bool = False, \n channel_index=Deprecated, <IND> channels_first: bool = False, \n",
      "2": "use_logits: bool = False, <IND> channel_index=Deprecated, \n channels_first: bool = False, \n",
      "3": "use_logits: bool = False, \n channel_index=Deprecated, <DED> channels_first: bool = False, \n",
      "4": "use_logits: bool = False, <DED> channel_index=Deprecated, \n channels_first: bool = False, \n",
      "5": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <IND>",
      "6": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, <DED>",
      "7": "use_logits: bool = False, \n channel_index=Deprecated, { channels_first: bool = False, \n",
      "8": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, {",
      "9": "use_logits: bool = False, { channel_index=Deprecated, \n channels_first: bool = False, \n",
      "10": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, }",
      "11": "use_logits: bool = False, \n channel_index=Deprecated, } channels_first: bool = False, \n",
      "12": "use_logits: bool = False, } channel_index=Deprecated, \n channels_first: bool = False, \n",
      "13": "use_logits: bool = False, \n channel_index=Deprecated, \\ channels_first: bool = False, \n",
      "14": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, \\",
      "15": "use_logits: bool = False, \\ channel_index=Deprecated, \n channels_first: bool = False, \n",
      "16": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "17": "use_logits: bool = False, \n channel_index=Deprecated, channels_first: bool = False, \n",
      "18": "use_logits: bool = False, channel_index=Deprecated, \n channels_first: bool = False, \n",
      "19": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "20": "use_logits: bool = False, \n channel_index=Deprecated, channels_first: bool = False, \n",
      "21": "use_logits: bool = False, channel_index=Deprecated, \n channels_first: bool = False, \n",
      "22": "use_logits: bool = False, \n channel_index=Deprecated, channels_first: bool = False, \n",
      "23": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "24": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "25": "use_logits: bool = False, channel_index=Deprecated, \n channels_first: bool = False, \n",
      "26": "use_logits: bool = False, channel_index=Deprecated, \n channels_first: bool = False, \n",
      "27": "use_logits: bool = False, \n channel_index=Deprecated, channels_first: bool = False, \n",
      "28": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "29": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "30": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "31": "use_logits: bool = False, \n channel_index=Deprecated, channels_first: bool = False, \n",
      "32": "use_logits: bool = False, \n channel_index=Deprecated, channels_first: bool = False, \n",
      "33": "use_logits: bool = False, channel_index=Deprecated, \n channels_first: bool = False, \n",
      "34": "use_logits: bool = False, channel_index=Deprecated, \n channels_first: bool = False, \n",
      "35": "use_logits: bool = False, \n channel_index=Deprecated, ^ channels_first: bool = False, \n",
      "36": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False, ^",
      "37": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "38": "use_logits: bool = False, \n channel_index=Deprecated, channels_first: bool = False, \n",
      "39": "use_logits: bool = False, channel_index=Deprecated, \n channels_first: bool = False, \n",
      "40": "use_logits: bool = False, \n channel_index=Deprecated, channels_first: bool = False, \n",
      "41": "use_logits: bool = False, ^ channel_index=Deprecated, \n channels_first: bool = False, \n",
      "42": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "43": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "44": "use_logits: bool = False, channel_index=Deprecated, \n channels_first: bool = False, \n",
      "45": "use_logits: bool = False, channel_index=Deprecated, \n channels_first: bool = False, \n",
      "46": "use_logits: bool = False, \n channel_index=Deprecated, channels_first: bool = False, \n",
      "47": "use_logits: bool = False, \n channel_index=Deprecated, channels_first: bool = False, \n",
      "48": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,",
      "49": "use_logits: bool = False, \n channel_index=Deprecated, \n channels_first: bool = False,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED><DED>def rjust(self, width, fillchar=None):\n        # type: (int, Text) -> FmtStr\n        <IND>",
    "target_code": "\n    <DED><DED>def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr:\n        <IND>",
    "warning_line": "    def rjust(self, width, fillchar=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " fillchar is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 513,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "bpython/curtsies",
    "source_filename": "curtsies/formatstring.py",
    "target_filename": "curtsies/formatstring.py",
    "source_changeid": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413^",
    "target_changeid": "50b1fcc5c1442ea4387b74673c1b7e0d7c1b5413",
    "predictions": [
      "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "1": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n \n",
      "2": "\n <IND> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "3": "\n <DED> <IND> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "4": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <DED>",
      "5": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n \n",
      "6": "\n <IND> <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n \n",
      "7": "\n <DED> <IND> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n \n",
      "8": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str]=None): \n # type: (int, Text) -> FmtStr \n \n",
      "9": "\n <DED> \n def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "10": "\n \n <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "11": "\n <DED> \n def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n \n",
      "12": "\n \n <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n \n",
      "13": "\n <IND> <IND> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "14": "\n <IND> <IND> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n \n",
      "15": "\n <IND> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <DED>",
      "16": "\n <DED> <IND> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <DED>",
      "17": "\n <IND> <DED> def rjust(self, width: int, fillchar: Optional[str]=None): \n # type: (int, Text) -> FmtStr \n \n",
      "18": "\n <DED> <IND> def rjust(self, width: int, fillchar: Optional[str]=None): \n # type: (int, Text) -> FmtStr \n \n",
      "19": "\n <IND> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n \n",
      "20": "\n <DED> <IND> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n \n",
      "21": "<DED> <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "22": "<DED> <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n \n",
      "23": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str]=None) -> FmtStr: \n <IND>",
      "24": "<IND> <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n \n",
      "25": "<IND> <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "26": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n }",
      "27": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n {",
      "28": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n <IND>",
      "29": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr \n <DED>",
      "30": "\n <DED> <DED> def rjust(self, width: int, fillchar: int): \n # type: (int, Text) -> FmtStr \n \n",
      "31": "\n <DED> { def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "32": "\n <IND> \n def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "33": "\n { <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "34": "\n } <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "35": "\n \n <IND> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "36": "\n <DED> } def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "37": "\n <DED> \n def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <DED>",
      "38": "\n \n <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <DED>",
      "39": "\n <DED> \n def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n \n",
      "40": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr <DED> \n",
      "41": "\n \n <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n \n",
      "42": "\n <IND> <IND> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <DED>",
      "43": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr <IND> \n",
      "44": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None): \n # type: (int, Text) -> FmtStr { \n",
      "45": "\n <IND> <IND> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n \n",
      "46": "\n <DED> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n \\",
      "47": "<DED> <IND> <DED> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "48": "<DED> <DED> <IND> def rjust(self, width: int, fillchar: Optional[str] = None) -> FmtStr: \n <IND>",
      "49": "\n <DED> <DED> def rjust(self, width: int, fillchar: int) -> FmtStr: \n <IND>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED>def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None\n) -> str:\n",
    "target_code": "<DED>def get_markdown(\n    data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None\n) -> str:\n",
    "warning_line": "    data: Dict[str, Any], title: Optional[str] = None, exclude: List[str] = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " exclude is declared to have type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 108,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "explosion/spaCy",
    "source_filename": "spacy/cli/info.py",
    "target_filename": "spacy/cli/info.py",
    "source_changeid": "0f2de39efbd4158b19e831c45b60960b33d3e979^",
    "target_changeid": "0f2de39efbd4158b19e831c45b60960b33d3e979",
    "predictions": [
      "<DED> def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<DED> def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "1": "\n def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "2": "<IND> def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "3": "<DED> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "4": "\n def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "5": "<IND> def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "6": "{ def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "7": "<DED> def get_markdown( \n data: Optional[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "8": "\n def get_markdown( \n data: Optional[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "9": "} def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "10": "<DED> def get_markdown( \n data: Optional[str], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "11": "\n def get_markdown( \n data: Optional[str], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "12": "<IND> def get_markdown( \n data: Optional[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "13": "<DED> def get_markdown( \n data: Optional[Str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "14": "\n def get_markdown( \n data: Optional[Str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "15": "<IND> def get_markdown( \n data: Optional[str], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "16": "<DED> def get_markdown( \n data: Optional[Str] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "17": "\\ def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "18": "<DED> def get_markdown( \n data: Optional[str] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "19": "\n def get_markdown( \n data: Optional[Str] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "20": "\n def get_markdown( \n data: Optional[str] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "21": "{ def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "22": "<IND> def get_markdown( \n data: Optional[Str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "23": "} def get_markdown( \n data: Optional[Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "24": "<DED> def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ): \n",
      "25": "\n def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ): \n",
      "26": "<IND> def get_markdown( \n data: Optional[Str] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "27": "<DED> def get_markdown( \n data: Optional[Str, Any] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "28": "<IND> def get_markdown( \n data: Optional[str] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "29": "\n def get_markdown( \n data: Optional[Str, Any] = None, title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "30": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "31": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "32": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "33": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "34": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "35": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "36": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "37": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "38": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "39": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "40": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "41": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "42": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "43": "def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "44": "^ def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "45": "<IND> def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ): \n",
      "46": "<DED> def get_markdown( \n data: Optional[Str], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "47": "\n def get_markdown( \n data: Optional[Str], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: \n",
      "48": "<DED> def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: <IND>",
      "49": "<DED> def get_markdown( \n data: Dict[str, Any], title: Optional[str] = None, exclude: Optional[List[str]] = None \n ) -> str: <DED>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def batch_start(identifier: str, batch_type: str, tags: dict=None):\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "target_code": "\n<DED>def batch_start(identifier: str, batch_type: str, tags: typing.Dict[str, str]={}\n        ) -> 'utils.irc.IRCParsedLine':\n    <IND>return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type],\n",
    "warning_line": "def batch_start(identifier: str, batch_type: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 84,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/protocol.py",
    "target_filename": "src/utils/irc/protocol.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "1": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "2": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "3": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "4": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "5": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "6": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "7": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= \n \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "8": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "9": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "10": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> utils.irc.IRCParsedLine: \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "11": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "12": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Optional[typing.Dict[str, str]]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "13": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n \n ) -> utils.irc.IRCParsedLine: \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "14": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "15": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Optional[typing.Dict[str, str]]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "16": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "17": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "18": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "19": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "20": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= \n <IND> ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "21": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "22": "\n <IND> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "23": "\n <DED> def batch_start(identifier: str, batch_type: str, { tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "24": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "25": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= \n <DED> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "26": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "27": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "28": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <DED> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "29": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "30": "\n <DED> def batch_start(identifier: str, batch_type: str, } tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "31": "\n <IND> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "32": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "33": "\n <DED> def batch_start(identifier: str, batch_type: str, { tags: typing.Optional[typing.Dict[str, str]]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "34": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= \n \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "35": "\n <IND> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "36": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Optional[typing.Dict[str, str]]= \n \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "37": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Optional[typing.Dict[str, str]]= \n \n ): \n <DED> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "38": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= \n <IND> ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "39": "\n <DED> def batch_start(identifier: str, batch_type: str, { tags: typing.Dict[str, str]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "40": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= \n \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "41": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Optional[typing.Dict[str, str]]= \n \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "42": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= \n \n ): \n <DED> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "43": "\n <DED> def batch_start(identifier: str, batch_type: str, } tags: typing.Dict[str, str]= \n \n ): \n <IND> return utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "44": "\n <DED> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= \n <DED> ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "45": "\n <DED> def batch_start(identifier: str, batch_type: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "46": "\n <DED> def batch_start(identifier: str, batch_type: str, <DED> tags: typing.Dict[str, str]= \n <IND> ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "47": "\n <DED> def batch_start(identifier: str, batch_type: str, <IND> tags: typing.Dict[str, str]= \n <IND> ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "48": "\n <IND> def batch_start(identifier: str, batch_type: str, \n tags: typing.Dict[str, str]= \n \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n",
      "49": "\n <DED> def batch_start(identifier: str, batch_type: str, { tags: typing.Dict[str, str]= \n \n ) -> utils.irc.IRCParsedLine(\"BATCH\", [\"+%s\" % identifier, batch_type], \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {None: {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=None) -> None:\n        <IND>self.validatefunc(func)\n",
    "target_code": "    def __init__(self) -> None:\n        <IND>self.commands_per_priv = {\"\": {}}    # type: Dict[str, Dict[str, Callable]]\n        self.no_soul_parsing = set()   # type: Set[str]\n\n    <DED>def add(self, verb: str, func: Callable, privilege: str=\"\") -> None:\n        <IND>self.validatefunc(func)\n",
    "warning_line": "    def add(self, verb: str, func: Callable, privilege: str=None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " privilege is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 47,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/driver.py",
    "target_filename": "tale/driver.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "1": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "2": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <IND> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "3": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "4": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "5": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "6": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n [] \n # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "7": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "8": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "9": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <IND> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "10": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "11": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "12": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "13": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <IND> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "14": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\"] \n # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "15": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "16": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "17": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n [] \n # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "18": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "19": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "20": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "21": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <IND> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "22": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "23": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "24": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <IND> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "25": "def __init__(self) -> None: \n <IND> self.commands_per_priv = } \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "26": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "27": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n [] \n # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "28": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "29": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "30": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <IND> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "31": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n \n self.validatefunc(func) \n",
      "32": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "33": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "34": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "35": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "36": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "37": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n \n self.validatefunc(func) \n",
      "38": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "39": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\"] \n # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "40": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n \n def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "41": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "42": "def __init__(self) -> None: \n <IND> self.commands_per_priv = } \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "43": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "44": "def __init__(self) -> None: \n <IND> self.commands_per_priv = \n [] \n # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "45": "def __init__(self) -> None: \n <IND> self.commands_per_priv = { \"\" # type: Dict[str, Dict[str, Callable]] \n self.no_soul_parsing = set() # type: Set[str] \n \n <IND> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <DED> self.validatefunc(func) \n",
      "46": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n <DED> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "47": "def __init__(self) -> None: \n <DED> self.commands_per_priv = \n \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "48": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <DED> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n \n \n def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n",
      "49": "def __init__(self) -> None: \n <IND> self.commands_per_priv = <IND> \"\"] \n self.no_soul_parsing = set() # type: Set[str] \n <IND> <DED> def add(self, verb: str, func: Callable, privilege: str=\"\") -> None: \n <IND> self.validatefunc(func) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def unpack_model(model_file: Text, working_directory: Text = None,\n                 subdirectories: bool = False\n",
    "target_code": "\n<DED>def unpack_model(model_file: Text, working_directory: Optional[Text] = None,\n                 subdirectories: bool = False\n",
    "warning_line": "def unpack_model(model_file: Text, working_directory: Text = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " working_directory is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 70,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/model.py",
    "target_filename": "rasa/model.py",
    "source_changeid": "3490222f361f8346944939f5c5d6d7e77bbe6df7^",
    "target_changeid": "3490222f361f8346944939f5c5d6d7e77bbe6df7",
    "predictions": [
      "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "1": "\n <IND> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "2": "\n \n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "3": "<DED> <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "4": "<IND> <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "5": "\n { def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "6": "\n } def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "7": "\n \\ def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "8": "\n <DED> def unpack_model(model_file: Optional[Text], working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "9": "<DED> <IND> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "10": "{ <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "11": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "12": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, <IND> subdirectories: bool = False \n",
      "13": "<IND> <IND> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "14": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, <DED> subdirectories: bool = False \n",
      "15": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <IND>",
      "16": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False <DED>",
      "17": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "18": "} <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "19": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "20": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "21": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "22": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "23": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "24": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "25": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "26": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "27": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, { subdirectories: bool = False \n",
      "28": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "29": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "30": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "31": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "32": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "33": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "34": "\n <DED> def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False {",
      "35": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "36": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "37": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "38": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "39": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "40": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "41": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "42": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "43": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "44": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "45": "\n ^ def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "46": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "47": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "48": "\n def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n",
      "49": "\n Its def unpack_model(model_file: Text, working_directory: Optional[Text] = None, \n subdirectories: bool = False \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def translateAlgebra(query_algebra: Query = None):\n    <IND>",
    "target_code": "\n<DED>def translateAlgebra(query_algebra: Query):\n    <IND>",
    "warning_line": "def translateAlgebra(query_algebra: Query = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " query_algebra is declared to have type `Query` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 804,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RDFLib/rdflib",
    "source_filename": "rdflib/plugins/sparql/algebra.py",
    "target_filename": "rdflib/plugins/sparql/algebra.py",
    "source_changeid": "90f6fe5611f4c7411e5eac347cafb9d009829b6c^",
    "target_changeid": "90f6fe5611f4c7411e5eac347cafb9d009829b6c",
    "predictions": [
      "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND>"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def translateAlgebra(query_algebra: Query): \n <IND>",
      "1": "\n <DED> def translateAlgebra(query_algebra: Query): \n <DED>",
      "2": "\n <IND> def translateAlgebra(query_algebra: Query): \n <IND>",
      "3": "\n <DED> def translateAlgebra(query_algebra: Query): \n \n",
      "4": "\n <DED> def translateAlgebra(query_algebra: Query) -> None: \n <IND>",
      "5": "\n <IND> def translateAlgebra(query_algebra: Query): \n <DED>",
      "6": "\n \n def translateAlgebra(query_algebra: Query): \n <IND>",
      "7": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "8": "\n <DED> def translateAlgebra(query_algebra: Query = ''): \n <IND>",
      "9": "<DED> <DED> def translateAlgebra(query_algebra: Query): \n <IND>",
      "10": "\n <DED> def translateAlgebra(query_algebra: Query | None = None): \n <IND>",
      "11": "\n <DED> def translateAlgebra(query_algebra: Query = []): \n <IND>",
      "12": "<IND> <DED> def translateAlgebra(query_algebra: Query): \n <IND>",
      "13": "\n <IND> def translateAlgebra(query_algebra: Query): \n \n",
      "14": "\n <DED> def translateAlgebra(query_algebra: Query): \n {",
      "15": "\n <DED> def translateAlgebra(query_algebra: Query) -> None: \n <DED>",
      "16": "\n <IND> def translateAlgebra(query_algebra: Query) -> None: \n <IND>",
      "17": "\n <DED> def translateAlgebra(query_algebra: Query = 0 \n query_algebra: Query \n ) -> Algebra[query_algebra]: \n <IND>",
      "18": "\n <DED> def translateAlgebra(query_algebra: Query): \n }",
      "19": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> None: \n <IND>",
      "20": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Algebra[query_algebra]: \n <IND>",
      "21": "\n { def translateAlgebra(query_algebra: Query): \n <IND>",
      "22": "\n <DED> def translateAlgebra(query_algebra: Query = 0 \n ) -> Algebra[query_algebra]: \n <IND>",
      "23": "\n } def translateAlgebra(query_algebra: Query): \n <IND>",
      "24": "\n <DED> def translateAlgebra(query_algebra: Query = 0 \n ): \n <IND>",
      "25": "\n <DED> def translateAlgebra(query_algebra: Query) -> bool: \n <IND>",
      "26": "\n <IND> def translateAlgebra(query_algebra: Optional[Query] = None): \n <IND>",
      "27": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None): \n <DED>",
      "28": "\n <DED> def translateAlgebra(query_algebra: Query, **kwargs): \n <IND>",
      "29": "\n <DED> def translateAlgebra(query_algebra: Query) -> None: \n \n",
      "30": "\n <DED> def translateAlgebra(query_algebra: Query = 0 \n query_algebra: Query \n",
      "31": "\n \n def translateAlgebra(query_algebra: Query): \n <DED>",
      "32": "\n <DED> def translateAlgebra(query_algebra: Query = 0 \n ) -> bool: \n <IND>",
      "33": "\n <DED> def translateAlgebra(query_algebra: Query = 0 \n query_algebra: Query \n ) -> Algebra[query_algebra]: \n <DED>",
      "34": "\n <DED> def translateAlgebra(query_algebra: Query = 0 \n query_algebra: Query \n ) -> bool: \n <IND>",
      "35": "\n <DED> def translateAlgebra(query_algebra: Query = 0): \n <IND>",
      "36": "\n <DED> def translateAlgebra(query_algebra: Query = 0 \n query_algebra: Query \n ): \n <IND>",
      "37": "\n <DED> def translateAlgebra(query_algebra: Query = ''): \n <DED>",
      "38": "\n <IND> def translateAlgebra(query_algebra: Query = ''): \n <IND>",
      "39": "\n <DED> def translateAlgebra(query_algebra: Query): \n \\",
      "40": "\n <DED> def translateAlgebra(query_algebra: Query + [] = None): \n <IND>",
      "41": "\n <DED> def translateAlgebra(query_algebra: Query | None = None): \n <DED>",
      "42": "\n <IND> def translateAlgebra(query_algebra: Query | None = None): \n <IND>",
      "43": "\n \\ def translateAlgebra(query_algebra: Query): \n <IND>",
      "44": "\n <DED> def translateAlgebra(query_algebra: Query = 0 \n query_algebra: Query \n ) -> None: \n <IND>",
      "45": "\n <DED> def translateAlgebra(query_algebra: Query, **kwargs) -> None: \n <IND>",
      "46": "\n <DED> def translateAlgebra(query_algebra: Query = 0 \n query_algebra: Query \n ) -> Algebra[query_algebra]: \n \n",
      "47": "\n <DED> def translateAlgebra(query_algebra: Query | None = None) -> Algebra[query_algebra]: \n <IND>",
      "48": "\n <IND> def translateAlgebra(query_algebra: Optional[Query] = None) -> Algebra[query_algebra]: \n <IND>",
      "49": "\n <DED> def translateAlgebra(query_algebra: Optional[Query] = None) -> Algebra[query_algebra]: \n <DED>"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = None,\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = None,\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = None,\n        batch_callbacks: List[BatchCallback] = None,\n",
    "target_code": "        no_grad: List[str] = None,\n        optimizer: Lazy[Optimizer] = Lazy(Optimizer.default),\n        learning_rate_scheduler: Lazy[LearningRateScheduler] = None,\n        momentum_scheduler: Lazy[MomentumScheduler] = None,\n        tensorboard_writer: Lazy[TensorboardWriter] = Lazy(TensorboardWriter),\n        moving_average: Lazy[MovingAverage] = None,\n        checkpointer: Lazy[Checkpointer] = Lazy(Checkpointer),\n        batch_callbacks: List[BatchCallback] = None,\n",
    "warning_line": "        checkpointer: Lazy[Checkpointer] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " checkpointer is declared to have type `allennlp.common.lazy.Lazy[Checkpointer]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1235,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/training/trainer.py",
    "target_filename": "allennlp/training/trainer.py",
    "source_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d^",
    "target_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "predictions": [
      "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint"
    ],
    "correct": false,
    "top_five": {
      "0": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "1": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer], \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "2": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "3": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer], \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "4": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, \n checkpointer: Optional[Lazy[Checkpoint",
      "5": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n moving_average: Optional[Lazy[MovingAverage]] = None, \n checkpointer: Optional[Lazy[Checkpointer]] = None, \n batch_callbacks: Optional[List[BatchCallback]] = None, \n",
      "6": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "7": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler], \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "8": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n moving_average: Optional[Lazy[MovingAverage]] = None, \n checkpointer: Optional[Lazy[Checkpointer]] = None, \n",
      "9": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n moving_average: Optional[Lazy[MovingAverage]] = None, \n checkpointer: Optional[Lazy[Checkpoint",
      "10": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n moving_average: Optional[Lazy[MovingAverage]] = None, \n checkpointer: Optional[Lazy[Checkpointer]] = None, \n batch_callbacks: Optional[List[BatchCallBack]] = None, \n",
      "11": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Check",
      "12": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[CheckPoint",
      "13": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer], \n learning_rate_scheduler: Lazy[LearningRateScheduler], \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "14": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback]",
      "15": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer], \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Check",
      "16": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer], \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[CheckPoint",
      "17": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, <IND> checkpointer: Lazy[Checkpoint",
      "18": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, <DED> checkpointer: Lazy[Checkpoint",
      "19": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, \n checkpointer: Optional[List[BatchCallback]] = None, \n",
      "20": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n moving_average: Optional[Lazy[MovingAverage]] = None, \n checkpointer: Optional[Lazy[Checkpointer]] = None, \n batch_callbacks: Optional[List[Batch]] = None, \n",
      "21": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler], \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "22": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Optimizer]",
      "23": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n shifting_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallback] = None, \n",
      "24": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, <IND> moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "25": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, <IND> learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "26": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, <IND> momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "27": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = None, \n batch_callbacks: List[BatchCallBack] = None, \n",
      "28": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer]",
      "29": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, <IND> tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "30": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, <DED> learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "31": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, <DED> moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "32": "no_grad: List[str] = None, <IND> optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "33": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, <DED> tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "34": "no_grad: List[str] = None, <DED> optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "35": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, <DED> momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "36": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n batch_callbacks: List[BatchCallBack] = None, \n",
      "37": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, { checkpointer: Lazy[Checkpoint",
      "38": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpointer] = Lazy, \n batch_callbacks: List[BatchCallback] = None, \n",
      "39": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n moving_average: Optional[Lazy[MovingAverage]] = None, \n checkpointer: Optional[Lazy[Checkpointer]] = None, \n batch_callback: Optional[List[BatchCallback]] = None, \n",
      "40": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n batch_callbacks: List[BatchCallback]",
      "41": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, { moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "42": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, { momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "43": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, { tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "44": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, { learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "45": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n moving_average: Optional[Lazy[MovingAverage]] = None, \n checkpointer: Optional[Lazy[Checkpointer]] = None, \n batch_callbacks: Optional[Lazy[Batch]] = None, \n",
      "46": "no_grad: List[str] = None, { optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n checkpointer: Lazy[Checkpoint",
      "47": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, \n checkpointer: Optional[Lazy[Checkpointer]] = None, \n batch_callbacks: Optional[List[BatchCallback]] = None, \n",
      "48": "no_grad: List[str] = None, \n optimizer: Optional[Lazy[Optimizer]] = None, \n learning_rate_scheduler: Optional[Lazy[LearningRateScheduler]] = None, \n momentum_scheduler: Optional[Lazy[MomentumScheduler]] = None, \n tensorboard_writer: Optional[Lazy[TensorboardWriter]] = None, \n checkpointer: Optional[Lazy[CheckPointer]] = None, \n batch_callbacks: Optional[List[BatchCallback]] = None, \n",
      "49": "no_grad: List[str] = None, \n optimizer: Lazy[Optimizer] = None, \n learning_rate_scheduler: Lazy[LearningRateScheduler] = None, \n momentum_scheduler: Lazy[MomentumScheduler] = None, \n tensorboard_writer: Lazy[TensorboardWriter] = None, \n moving_average: Lazy[MovingAverage] = None, \n check pointer: Lazy[Checkpoint"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        version: Version,\n        url: Optional[str] = None,\n        extras: bool = None,\n        is_wheel: bool = True,\n",
    "target_code": "        version: Version,\n        url: str,\n        extras: Set[str],\n        is_wheel: bool = True,\n",
    "warning_line": "        extras: bool = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " extras is declared to have type `bool` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 46,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "trailofbits/pip-audit",
    "source_filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "target_filename": "pip_audit/dependency_source/resolvelib/pypi_provider.py",
    "source_changeid": "844c85f0b9a65e76577a4f2b232537af02542d6c^",
    "target_changeid": "844c85f0b9a65e76577a4f2b232537af02542d6c",
    "predictions": [
      "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "1": "version: Version, \n url: Optional[str] = None, \n extras: bool = False, \n is_wheel: bool = True, \n",
      "2": "version: Version, <DED> url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "3": "version: Version, <IND> url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "4": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, <IND> is_wheel: bool = True, \n",
      "5": "version: Version, \n url: Optional[str] = None, <IND> extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "6": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, <DED> is_wheel: bool = True, \n",
      "7": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, <IND>",
      "8": "version: Version, \n url: Optional[str] = None, <DED> extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "9": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, <DED>",
      "10": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, { is_wheel: bool = True, \n",
      "11": "version: Version, { url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "12": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, {",
      "13": "version: Version, \n url: Optional[str] = None, { extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "14": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: Optional[bool] = True, \n",
      "15": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, } is_wheel: bool = True, \n",
      "16": "version: Version, } url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "17": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, }",
      "18": "version: Version, \n url: Optional[str] = None, } extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "19": "version: Version, \\ url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "20": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \\ is_wheel: bool = True, \n",
      "21": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \\",
      "22": "version: Version, \n url: Optional[str] = None, \\ extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "23": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True,",
      "24": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, is_wheel: bool = True, \n",
      "25": "version: Version, \n url: Optional[str] = None, extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "26": "version: Version, url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "27": "version: Version, \n url: Optional[str] = None, extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "28": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True,",
      "29": "version: Version, url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "30": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, is_wheel: bool = True, \n",
      "31": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, is_wheel: bool = True, \n",
      "32": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True,",
      "33": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True,",
      "34": "version: Version, \n url: Optional[str] = None, extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "35": "version: Version, url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "36": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, is_wheel: bool = True, \n",
      "37": "version: Version, \n url: Optional[str] = None, extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "38": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True,",
      "39": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True,",
      "40": "version: Version, url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "41": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, is_wheel: bool = True, \n",
      "42": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True,",
      "43": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, is_wheel: bool = True, \n",
      "44": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, is_wheel: bool = True, \n",
      "45": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, \n is_wheel: bool = True, ^",
      "46": "version: Version, \n url: Optional[str] = None, extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "47": "version: Version, \n url: Optional[str] = None, extras: Optional[bool] = None, \n is_wheel: bool = True, \n",
      "48": "version: Version, \n url: Optional[str] = None, \n extras: Optional[bool] = None, ^ is_wheel: bool = True, \n",
      "49": "version: Version, \n url: Optional[str] = None, extras: Optional[bool] = None, \n is_wheel: bool = True, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>count = int(seconds / amount)\n    seconds %= amount\n    time_comp[label.strip()] = count\n",
    "target_code": "    <IND>count = int(seconds / amount)\n    seconds %= int(amount)\n    time_comp[label.strip()] = count\n",
    "warning_line": "    seconds %= amount",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " seconds is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 416,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "torproject/stem",
    "source_filename": "stem/util/str_tools.py",
    "target_filename": "stem/util/str_tools.py",
    "source_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8^",
    "target_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "predictions": [
      "\n count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "1": "\n count = int(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "2": "<DED> count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "3": "\n count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "4": "<IND> count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "5": "<DED> count = int(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "6": "<IND> count = int(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "7": "\n count = int(seconds / amount) \n seconds %= value \n time_comp[label.strip()] = count \n",
      "8": "\n count = int(seconds / amount) \n seconds = int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "9": "<DED> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "10": "<IND> count = int(seconds / amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "11": "\n count = int(seconds / amount) \n seconds = int(seconds) \n time_comp[label.strip()] = count \n",
      "12": "{ count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "13": "{ count = int(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "14": "} count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "15": "} count = int(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "16": "\n count = seconds / amount \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "17": "\n count = int(seconds / amount) \n seconds %= 'amount' \n time_comp[label.strip()] = count \n",
      "18": "\n count = int(seconds / amount) \n seconds %= tuple(amount) \n time_comp[label.strip()] = count \n",
      "19": "\n count = float(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "20": "\n count = int(seconds / amount) \n seconds %= int(seconds) <DED> time_comp[label.strip()] = count \n",
      "21": "\n count = int(seconds / amount) \n seconds %= int(seconds) <IND> time_comp[label.strip()] = count \n",
      "22": "\n count = int(seconds / amount) \n seconds %= total amount \n time_comp[label.strip()] = count \n",
      "23": "<DED> count = int(seconds / amount) \n seconds %= value \n time_comp[label.strip()] = count \n",
      "24": "\n count = int(seconds / amount) \n seconds %= int(seconds) { time_comp[label.strip()] = count \n",
      "25": "\n count = int(seconds / amount) \n seconds %= an amount \n time_comp[label.strip()] = count \n",
      "26": "\n count = int(seconds / amount) \n seconds %= cls(amount) \n time_comp[label.strip()] = count \n",
      "27": "<DED> count = int(seconds / amount) \n seconds = int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "28": "\n count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count <IND>",
      "29": "\n count = int(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count <IND>",
      "30": "\n count = int(seconds / amount) <DED> seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "31": "\\ count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "32": "\n count = int(seconds / amount) <IND> seconds %= int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "33": "\n count = int(seconds / amount) <DED> seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "34": "\n count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count <DED>",
      "35": "\n count = int(seconds / amount) <IND> seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "36": "\n count = int(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count <DED>",
      "37": "\n count = int(seconds / amount) \n seconds %= bytes \n time_comp[label.strip()] = count \n",
      "38": "<IND> count = int(seconds / amount) \n seconds %= value \n time_comp[label.strip()] = count \n",
      "39": "\n count = int(seconds/amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "40": "<IND> count = int(seconds / amount) \n seconds = int(seconds / amount) \n time_comp[label.strip()] = count \n",
      "41": "\n count = int(seconds / amount) \n seconds %=.amount \n time_comp[label.strip()] = count \n",
      "42": "\n count = int(seconds / amount) \n seconds %= '' \n time_comp[label.strip()] = count \n",
      "43": "\n count = int(seconds/amount) \n seconds %= amount \n time_comp[label.strip()] = count \n",
      "44": "\n count = int(seconds / amount) \n seconds %= int(seconds) } time_comp[label.strip()] = count \n",
      "45": "\n count = int(seconds / amount) \n seconds = seconds \n time_comp[label.strip()] = count \n",
      "46": "\n count = int(seconds / amount) { seconds %= int(seconds) \n time_comp[label.strip()] = count \n",
      "47": "\n count = int(seconds / amount) \n seconds %= int(seconds / amount) \n time_comp[label.strip()] = count {",
      "48": "\n count = int(seconds / amount) \n seconds %= int(seconds) \n time_comp[label.strip()] = count {",
      "49": "\n count = int(seconds / amount) \n seconds %= float \n time_comp[label.strip()] = count \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        <DED>homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "target_code": "\n        <DED>parsed_homeserver = urlparse(homeserver) if homeserver else None\n\n",
    "warning_line": "        homeserver = urlparse(homeserver) if homeserver else None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " homeserver is declared to have type `str` but is used as type `Optional[urllib.parse.ParseResult]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 104,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "poljar/matrix-nio",
    "source_filename": "nio/api.py",
    "target_filename": "nio/api.py",
    "source_changeid": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0^",
    "target_changeid": "dff04c38eab6ffd559db9eb8b3929ecb27dd10b0",
    "predictions": [
      "\n <DED> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "1": "\n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "2": "\n <DED> if not homeserver: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "3": "\n <IND> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "4": "\n <DED> if homeserver is not None: \n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "5": "\n <DED> if homeserver is not None, homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "6": "\n <DED> if homeserver is None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "7": "\n <DED> if homeserver is not None and homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "8": "\n <DED> if not isinstance(homeserver, str): \n <IND> homeserver = urlparse(homeserver) if not isinstance(homeserver) else None \n \n",
      "9": "\n <DED> if homeserver is not None: \n \n homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "10": "\n <DED> if homeserver else None: \n <IND> homeserver = urlparse(homeserver) if homeserver \n \n",
      "11": "\n <DED> if homeserver is not None and urlparse(homeserver) is not None \n homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "12": "\n <IND> if not homeserver: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "13": "\n <DED> if isinstance(homeserver, str): \n <IND> homeserver = urlparse(homeserver) if isinstance(homeserver) else None \n \n",
      "14": "\n <IND> if homeserver is not None: \n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "15": "\n <DED> if isinstance(homeserver, str): \n <IND> homeserver = urlparse(homeserver) if isinstance(homeserver, str) else None \n \n",
      "16": "\n <DED> if not isinstance(homeserver, str): \n <IND> homeserver = urlparse(homeserver) if not else None \n \n",
      "17": "\n <DED> if not homeserver: \n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "18": "\n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "19": "\n <DED> if homeserver is None, homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "20": "\n <IND> if homeserver is not None, homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "21": "\n \n if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "22": "\n <DED> if not homeserver: \n <IND> urlparse = urlparse(homeserver) if homeserver else None \n \n",
      "23": "\n <DED> if not isinstance(homeserver, str): \n <IND> homeserver = urlparse(homeserver) if not isinstance(homeserver, str) else None \n \n",
      "24": "\n <DED> urlparse = urlparse(homeserver) if urllib.parseResult else None \n \n",
      "25": "<DED> <DED> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "26": "\n <DED> if not homeserver: \n <IND> homeserver = urlparse(homeserver) if not homeserver else None \n \n",
      "27": "\n <IND> if homeserver is None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "28": "<IND> <DED> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "29": "\n <IND> if homeserver is not None and homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "30": "\n <DED> if homeserver is None: \n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "31": "\n <DED> if homeserver else None, homeserver = urlparse(homeserver) \n \n",
      "32": "\n <DED> if homeserver is not None: \n <IND> urlparse = urlparse(homeserver) if homeserver else None \n \n",
      "33": "\n <DED> if not homeserver: \n <IND> homeserver = urlparse(homeserver) if not Homeserver else None \n \n",
      "34": "\n <DED> if not homeserver: \n \n homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "35": "\n <IND> if homeserver else None: \n <IND> homeserver = urlparse(homeserver) if homeserver \n \n",
      "36": "\n <DED> urlparse = urlparse(homeserver) if urllib.parse(homeserver) else None \n \n",
      "37": "\n <DED> if not isinstance(homeserver, str): \n <IND> homeserver = urlparse(homeserver) if not isinstance(homeserver else None) \n \n",
      "38": "\n <DED> if homeserver else None: \n <DED> homeserver = urlparse(homeserver) if homeserver \n \n",
      "39": "\n <DED> if homeserver else None: \n <IND> homeserver = urlparse(homeserver) if homeserver <DED> \n",
      "40": "\n <DED> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n <IND>",
      "41": "\n <DED> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else 0 \n \n",
      "42": "\n <IND> if not homeserver: \n <DED> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "43": "\n <DED> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n <DED>",
      "44": "\n <DED> if homeserver is not None: \n <IND> homeserver = urlparse(homeserver) if homeserver else Optional[str] \n \n",
      "45": "\n <DED> if not isinstance(homeserver, str): \n <IND> homeserver = urlparse(homeserver) if homeserver else None \n \n",
      "46": "\n <DED> return urlparse(homeserver) if homeserver else None \n \n",
      "47": "\n <DED> if not homeserver: \n <IND> homeserver = urlparse(homeserver) if not urllib.parseResult else None \n \n",
      "48": "\n <DED> if homeserver else None: \n <IND> homeserver = urlparse(homeserver) if homeserver <IND> \n",
      "49": "\n <DED> if not isinstance(homeserver, str): \n <IND> homeserver = urlparse(homeserver) if isinstance(homeserver, str) else None \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)\n\n",
    "target_code": "        duetime = self.to_datetime(duetime)\n        si: ScheduledItem = ScheduledItem(self, state, action, duetime)\n\n",
    "warning_line": "        si: ScheduledItem[typing.TState] = ScheduledItem(self, state, action, duetime)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " si is declared to have type `ScheduledItem[Variable[typing.TState]]` but is used as type `ScheduledItem[object]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 93,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ReactiveX/RxPY",
    "source_filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "target_filename": "rx/scheduler/mainloop/pygamescheduler.py",
    "source_changeid": "4ba82c313df482f7ed6b65c3dbec4598aa264b90^",
    "target_changeid": "4ba82c313df482f7ed6b65c3dbec4598aa264b90",
    "predictions": [
      "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "duetime = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "1": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND>",
      "2": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "3": "duetime = self.to_datetime(duetime) \n assert self.to_datetime is not None \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "4": "duetime = self.to_datetime(duetime) \n if self.to_datetime is not None: \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "5": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "6": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <DED> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "7": "duetime = self.to_datetime(duetime) \n dt = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, dt) \n \n",
      "8": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, scheduledtime) \n \n",
      "9": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> dt = self.to_datetime(duetime) \n \n si: ScheduledItem = ScheduledItem(self, state, action, dt) \n \n",
      "10": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> duetime = self.to_datetime(duetime) \n \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "11": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, scheduled time): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, scheduled time) \n \n",
      "12": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, item): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, item) \n \n",
      "13": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> self.to_datetime = self.to_datetime(duetime) \n \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "14": "duetime = self.to_datetime(duetime) \n if self.to_datetime is not None: \n <IND> if self.to_datetime is not None: \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "15": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> dt = self.to_datetime(duetime) \n \n si: ScheduledItem = ScheduledItem(self, state, action, dt) \n \n",
      "16": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <DED>",
      "17": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "18": "duetime = self.to_datetime(duetime) \n if self.to_datetime is not None: \n \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "19": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n \n",
      "20": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> dt = self.to_datetime(duetime) \n \n dt = self.to_datetime(duetime) \n \n si: ScheduledItem = ScheduledItem(self, state, action, dt) \n \n",
      "21": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, elif isinstance(duetime)) \n \n",
      "22": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> self.to_datetime = self.to_datetime(duetime) \n <DED> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "23": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND>",
      "24": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, elif isinstance(duetime)) \n \n",
      "25": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> self.to_datetime = self.to_datetime(duetime) \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "26": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> duetime = self.to_datetime(duetime) \n \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "27": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, elif isinstance(duetime)) \n \n",
      "28": "duetime = self.to_datetime(duetime) \n if self.to_datetime is not None: \n <DED> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "29": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> duetime = self.to_datetime(duetime) \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "30": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> next.instance(duetime) \n \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "31": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> duetime = self.to_datetime(duetime) \n \n si: ScheduledItem = ScheduledItem(self, state, action, scheduledtime) \n \n",
      "32": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, scheduledtime) \n \n",
      "33": "duetime = self.to_datetime(duetime) \n if isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "34": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> duetime = self.to_datetime(duetime) \n <DED> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "35": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "36": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "37": "duetime = self.to_datetime(duetime) \n key = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "38": "duetime = self.to_datetime(duetime) \n statement = self.to_datetime(duetime) \n si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "39": "duetime = self.to_datetime(duetime) \n if 'to' is not None: \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "40": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND>",
      "41": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "42": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action) \n \n",
      "43": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <DED> si: ScheduledItem = ScheduledItem(self, state, action, elif isinstance(duetime)) \n \n",
      "44": "duetime = self.to_datetime(duetime) \n if 'today' is not None: \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "45": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, duetime) \n \n",
      "46": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, scheduled time): \n <IND> si: ScheduledItem = ScheduledItem(self, state, scheduled time) \n \n",
      "47": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, scheduled time) \n \n",
      "48": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n <IND> if not isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> elif isinstance(self, state, action, duetime): \n <IND> si: ScheduledItem = ScheduledItem(self, state, action, item) \n \n",
      "49": "duetime = self.to_datetime(duetime) \n if not isinstance(self, state, action, duetime): \n \n si: ScheduledItem = ScheduledItem(self, state, action, scheduledtime) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices: dict = None,\n    scale_factor: float = 1,\n",
    "target_code": "    image_axes: Sequence[int] = (1, 2),\n    other_indices=None,\n    scale_factor: float = 1,\n",
    "warning_line": "    other_indices: dict = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " other_indices is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Project-MONAI/MONAI",
    "source_filename": "monai/visualize/img2tensorboard.py",
    "target_filename": "monai/visualize/img2tensorboard.py",
    "source_changeid": "718d11abb2310ab74321256032a264488a7883b4^",
    "target_changeid": "718d11abb2310ab74321256032a264488a7883b4",
    "predictions": [
      "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, \n scale_factor: float = 1, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, \n scale_factor: float = 1, \n",
      "1": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[dict] = None, \n scale_factor: float = 1, \n",
      "2": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "3": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "4": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "5": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "6": "image_axes: Sequence[int] = (1, 2), \n other_indices: Typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "7": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Optional[typing.Dict[str, str]]] = None, \n scale_factor: float = 1, \n",
      "8": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[Dict] = None, \n scale_factor: float = 1, \n",
      "9": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Dict[str, str] = None, \n scale_factor: float = 1, \n",
      "10": "image_axes: Sequence[int] = (1, 2), \n other_indices: Typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "11": "image_axes: Sequence[int] = (1, 2), \n other_indices: Dict[str, str] = None, \n scale_factor: float = 1, \n",
      "12": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, <IND> scale_factor: float = 1, \n",
      "13": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, <DED> scale_factor: float = 1, \n",
      "14": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, <IND>",
      "15": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, <DED>",
      "16": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Optional[typing.Dict]] = None, \n scale_factor: float = 1, \n",
      "17": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, <IND> scale_factor: float = 1, \n",
      "18": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, {",
      "19": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, <DED> scale_factor: float = 1, \n",
      "20": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, { scale_factor: float = 1, \n",
      "21": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, <IND>",
      "22": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, <DED>",
      "23": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, {",
      "24": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, { scale_factor: float = 1, \n",
      "25": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \n",
      "26": "image_axes: Sequence[int] = (1, 2), \n other_indices: Type.Dict[str, str] = None, \n scale_factor: float = 1, \n",
      "27": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, }",
      "28": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, } scale_factor: float = 1, \n",
      "29": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, }",
      "30": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, } scale_factor: float = 1, \n",
      "31": "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, <IND> scale_factor: float = 1, \n",
      "32": "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, <DED> scale_factor: float = 1, \n",
      "33": "image_axes: Sequence[int] = (1, 2), <IND> other_indices: dict, \n scale_factor: float = 1, \n",
      "34": "image_axes: Sequence[int] = (1, 2), <DED> other_indices: dict, \n scale_factor: float = 1, \n",
      "35": "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, \n scale_factor: float = 1, <IND>",
      "36": "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, \n scale_factor: float = 1, <DED>",
      "37": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \\",
      "38": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \\ scale_factor: float = 1, \n",
      "39": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1,",
      "40": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, scale_factor: float = 1, \n",
      "41": "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, { scale_factor: float = 1, \n",
      "42": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1,",
      "43": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, scale_factor: float = 1, \n",
      "44": "image_axes: Sequence[int] = (1, 2), { other_indices: dict, \n scale_factor: float = 1, \n",
      "45": "image_axes: Sequence[int] = (1, 2), \n other_indices: Typing.Dict[str, str] = None, \n scale_factor: float = 1, \n",
      "46": "image_axes: Sequence[int] = (1, 2), \n other_indices: dict, \n scale_factor: float = 1, {",
      "47": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1, \\",
      "48": "image_axes: Sequence[int] = (1, 2), \n other_indices: Optional[typing.Dict[str, str]] = None, \\ scale_factor: float = 1, \n",
      "49": "image_axes: Sequence[int] = (1, 2), \n other_indices: typing.Optional[typing.Dict[str, str]] = None, \n scale_factor: float = 1,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        timeout: Optional[float] = None,\n        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "target_code": "        timeout: Optional[float] = None,\n        metadata: Sequence[Tuple[str, str]] = (),\n        gcp_conn_id: str = \"google_cloud_default\",\n",
    "warning_line": "        metadata: Optional[Sequence[Tuple[str, str]]] = \"\",",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " metadata is declared to have type `Optional[Sequence[Tuple[str, str]]]` but is used as type `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2221,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/operators/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n"
    ],
    "correct": true,
    "top_five": {
      "0": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "1": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), <IND> gcp_conn_id: str = \"google_cloud_default\", \n",
      "2": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), <DED> gcp_conn_id: str = \"google_cloud_default\", \n",
      "3": "timeout: Optional[float] = None, <DED> metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "4": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", <IND>",
      "5": "timeout: Optional[float] = None, <IND> metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "6": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", <DED>",
      "7": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = [], \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "8": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", {",
      "9": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), { gcp_conn_id: str = \"google_cloud_default\", \n",
      "10": "timeout: Optional[float] = None, { metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "11": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), } gcp_conn_id: str = \"google_cloud_default\", \n",
      "12": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", }",
      "13": "timeout: Optional[float] = None, } metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "14": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \\",
      "15": "timeout: Optional[float] = None, \\ metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "16": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \\ gcp_conn_id: str = \"google_cloud_default\", \n",
      "17": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "18": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "19": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "20": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "21": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "22": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "23": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "24": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "25": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "26": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "27": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "28": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "29": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str,...]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "30": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "31": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "32": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "33": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "34": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "35": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "36": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "37": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "38": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "39": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "40": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n",
      "41": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", ^",
      "42": "timeout: Optional[float] = None, ^ metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "43": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "44": "timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\", \n",
      "45": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "46": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "47": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), ^ gcp_conn_id: str = \"google_cloud_default\", \n",
      "48": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), \n gcp_conn_id: str = \"google_cloud_default\",",
      "49": "timeout: Optional[float] = None, \n metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = \"google_cloud_default\", \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):\n        <IND>",
    "target_code": "\n    def __init__(self, fid:str, rec_len:int, sfid:str=None, name:str=None, desc:str=None,\n                 parent:Optional[CardDF]=None, size={1,None}):\n        <IND>",
    "warning_line": "                 parent:Optional[CardDF]=None, rec_len:int=None, size={1,None}):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rec_len is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 687,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "osmocom/pysim",
    "source_filename": "pySim/filesystem.py",
    "target_filename": "pySim/filesystem.py",
    "source_changeid": "1e45657e0f177388379f37e8557ac1cfdbac32a5^",
    "target_changeid": "1e45657e0f177388379f37e8557ac1cfdbac32a5",
    "predictions": [
      "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "1": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "2": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "3": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <DED>",
      "4": "<DED> def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "5": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <DED>",
      "6": "<DED> def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "7": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <DED>",
      "8": "<DED> def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "9": "<IND> def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "10": "<IND> def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "11": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n \n",
      "12": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n \n",
      "13": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size: \n 1,None \n ): \n <IND>",
      "14": "<IND> def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "15": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= <IND> 1,None \n ): \n <IND>",
      "16": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= <DED> 1,None \n ): \n <IND>",
      "17": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size: \n 1,None \n ): \n <IND>",
      "18": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n \n",
      "19": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= \n 1,None \n ): \n <IND>",
      "20": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= <IND> 1,None \n ): \n <IND>",
      "21": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= <DED> 1,None \n ): \n <IND>",
      "22": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len:int=None, size= \n 1,None \n ): \n <IND>",
      "23": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= \n 1,None \n ): \n <IND>",
      "24": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:int=None, size= \n 1,None \n ): \n <IND>",
      "25": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size: \n 1,None \n ): \n <IND>",
      "26": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= <IND> 1,None \n ): \n <IND>",
      "27": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= <DED> 1,None \n ): \n <IND>",
      "28": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None <DED> ): \n <IND>",
      "29": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:Optional[CardDF]=None, rec_len:int=None, size= \n 1,None \n ): \n <IND>",
      "30": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None <DED> ): \n <IND>",
      "31": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None <IND> ): \n <IND>",
      "32": "<DED> def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <DED>",
      "33": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None <IND> ): \n <IND>",
      "34": "<DED> def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <DED>",
      "35": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= { 1,None \n ): \n <IND>",
      "36": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None <DED> ): \n <IND>",
      "37": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent:CardDF=None, rec_len:int=None, size= \n 1,None \n ): \n <IND>",
      "38": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ) -> None: \n <IND>",
      "39": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "40": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent:CardDF=None, rec_len:int=None, size= \n 1,None \n ): \n <IND>",
      "41": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= { 1,None \n ): \n <IND>",
      "42": "\n def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ) -> None: \n <IND>",
      "43": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "44": "\n def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len:optional[int]=None, size= \n 1,None \n ): \n <IND>",
      "45": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None <IND> ): \n <IND>",
      "46": "<IND> def __init__(self, fid:str, sfid:str, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <DED>",
      "47": "\n def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent:CardDF, rec_len:int, size= \n 1,None \n ): \n <IND>",
      "48": "<IND> def __init__(self, fid:str, sfid:str=None, name:str=None, desc:str=None, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <DED>",
      "49": "<DED> def __init__(self, fid:str, sfid:str, name:str, desc:str, \n parent: Optional[CardDF]=None, rec_len: Optional[int]=None, size= \n 1,None \n ): \n <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_line": "        destination: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " destination is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 659,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/channel.py",
    "target_filename": "aiormq/channel.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "1": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, \n",
      "2": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = \"\", \n *, \n",
      "3": "self, <DED> destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "4": "self, \n destination: str = '', \n source: str = '', <IND> routing_key: str = '', \n *, \n",
      "5": "self, <IND> destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "6": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', <IND> *, \n",
      "7": "self, \n destination: str = '', \n source: str = '', <DED> routing_key: str = '', \n *, \n",
      "8": "self, \n destination: str = '', <IND> source: str = '', \n routing_key: str = '', \n *, \n",
      "9": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', <DED> *, \n",
      "10": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, <DED>",
      "11": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, <IND>",
      "12": "self, \n destination: str = '', <DED> source: str = '', \n routing_key: str = '', \n *, \n",
      "13": "self, \n destination: str = '', \n source: str = '', { routing_key: str = '', \n *, \n",
      "14": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', { *, \n",
      "15": "self, { destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "16": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, {",
      "17": "self, \n destination: str = '', { source: str = '', \n routing_key: str = '', \n *, \n",
      "18": "self, \n destination: str = \"\", \n source: str = \"\", \n routing_key: str = \"\", \n *, \n",
      "19": "self, \n destination: str = '', \n source: str = '', } routing_key: str = '', \n *, \n",
      "20": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', } *, \n",
      "21": "self, \n destination: str = '', } source: str = '', \n routing_key: str = '', \n *, \n",
      "22": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, }",
      "23": "self, } destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "24": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \\ *, \n",
      "25": "self, \n destination: str = '', \n source: str = '', \\ routing_key: str = '', \n *, \n",
      "26": "self, \n destination: str = '', \\ source: str = '', \n routing_key: str = '', \n *, \n",
      "27": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \\",
      "28": "self, \\ destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "29": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = ', \n *, \n",
      "30": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', *, \n",
      "31": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *,",
      "32": "self, \n destination: str = '', \n source: str = '', routing_key: str = '', \n *, \n",
      "33": "self, destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "34": "self, \n destination: str = '', source: str = '', \n routing_key: str = '', \n *, \n",
      "35": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', *, \n",
      "36": "self, \n destination: str = '', source: str = '', \n routing_key: str = '', \n *, \n",
      "37": "self, \n destination: str = '', \n source: str = '', routing_key: str = '', \n *, \n",
      "38": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *,",
      "39": "self, destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "40": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', *, \n",
      "41": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *,",
      "42": "self, \n destination: str = '', \n source: str = '', routing_key: str = '', \n *, \n",
      "43": "self, \n destination: str = '', source: str = '', \n routing_key: str = '', \n *, \n",
      "44": "self, \n destination: str = '', \n source: str = '', routing_key: str = '', \n *, \n",
      "45": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *,",
      "46": "self, \n destination: str = '', \n source: str = '', routing_key: str = '', \n *, \n",
      "47": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', *, \n",
      "48": "self, \n destination: str = '', source: str = '', \n routing_key: str = '', \n *, \n",
      "49": "self, destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None\n    ):\n",
    "target_code": "    <DED>async def async_instance_method(\n        self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\"\n    ):\n",
    "warning_line": "        self, arg1: str, arg2: str, kwarg1: str = None, kwarg2: str = None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " kwarg2 is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 47,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebook/TestSlide",
    "source_filename": "tests/mock_callable_testslide.py",
    "target_filename": "tests/mock_callable_testslide.py",
    "source_changeid": "97c39d89c2a047a3396be659645bd89dab01d859^",
    "target_changeid": "97c39d89c2a047a3396be659645bd89dab01d859",
    "predictions": [
      "\n async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "1": "<DED> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "2": "<IND> async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "3": "{ async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "4": "} async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "5": "\\ async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "6": "\n async def async_instance_method( <IND> self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "7": "\n async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" <IND> ): \n",
      "8": "\n async def async_instance_method( <DED> self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "9": "\n async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" <DED> ): \n",
      "10": "\n async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): <IND>",
      "11": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "12": "\n async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): <DED>",
      "13": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "14": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "15": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "16": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "17": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "18": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "19": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "20": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "21": "\n async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" { ): \n",
      "22": "\n async def async_instance_method( { self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "23": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "24": "\n async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): {",
      "25": "^ async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "26": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "27": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "28": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "29": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "30": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "31": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "32": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "33": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "34": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "35": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "36": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "37": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "38": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "39": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "40": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "41": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "42": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "43": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "44": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "45": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "46": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "47": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "48": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n",
      "49": "async def async_instance_method( \n self, arg1: str, arg2: str, kwarg1: str = \"\", kwarg2: str = \"\" \n ): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,\n",
    "target_code": "    <IND>def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_line": "               symbol_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " symbol_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 120,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/contexts/__init__.py",
    "target_filename": "volatility/framework/contexts/__init__.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "<DED> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "1": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "2": "\n def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "3": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "4": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "5": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "6": "{ def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "7": "} def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "8": "<DED> def object(self, \n symbol_name: Union[str, None] = None, \n type_name: Union[str, None] = None, \n offset: int = None, \n",
      "9": "\n def object(self, \n symbol_name: Union[str, None] = None, \n type_name: Union[str, None] = None, \n offset: int = None, \n",
      "10": "{ def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "11": "} def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "12": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "13": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "14": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "15": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "16": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "17": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "18": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "19": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "20": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, { offset: int = None, \n",
      "21": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, {",
      "22": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, { offset: int = None, \n",
      "23": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, {",
      "24": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "25": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "26": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "27": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "28": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "29": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "30": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, } offset: int = None, \n",
      "31": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, }",
      "32": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, } offset: int = None, \n",
      "33": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, }",
      "34": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, { offset: int = None, \n",
      "35": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, {",
      "36": "\\ def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "37": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Optional[int] = None, \n",
      "38": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Optional[int] = None, \n",
      "39": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "40": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, } offset: int = None, \n",
      "41": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, }",
      "42": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \\",
      "43": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \\ offset: int = None, \n",
      "44": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \\",
      "45": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \\ offset: int = None, \n",
      "46": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None,",
      "47": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, offset: int = None, \n",
      "48": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None,",
      "49": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, offset: int = None, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": true,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def start(self, caller_frame: types.FrameType = None):\n        <IND>",
    "target_code": "\n    <DED>def start(self, caller_frame: types.FrameType | None = None):\n        <IND>",
    "warning_line": "    def start(self, caller_frame: types.FrameType = None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " caller_frame is declared to have type `types.FrameType` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 101,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "joerick/pyinstrument",
    "source_filename": "pyinstrument/profiler.py",
    "target_filename": "pyinstrument/profiler.py",
    "source_changeid": "12b65ffb01e65c5fbcfb08abee26da56c745c919^",
    "target_changeid": "12b65ffb01e65c5fbcfb08abee26da56c745c919",
    "predictions": [
      "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "1": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "2": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "3": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <DED>",
      "4": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "5": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <DED>",
      "6": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n \n",
      "7": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> bool: \n <IND>",
      "8": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n \n",
      "9": "\n \n def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "10": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <DED>",
      "11": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> Tuple[str, Any]: \n <IND>",
      "12": "\n \n def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "13": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <DED>",
      "14": "<DED> <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "15": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> bool: \n <DED>",
      "16": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> bool: \n <IND>",
      "17": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n {",
      "18": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n \n",
      "19": "<IND> <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "20": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n }",
      "21": "\n { def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "22": "<DED> <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "23": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> Tuple[str, None]: \n <IND>",
      "24": "\n } def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "25": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> List[List[Types.FrameType]]: \n <IND>",
      "26": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n {",
      "27": "<IND> <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "28": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n }",
      "29": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> bool: \n \n",
      "30": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n \n",
      "31": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> Tuple[str, Any]: \n <IND>",
      "32": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> Tuple[str, Any]: \n <DED>",
      "33": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> Tuple[types.FrameType]: \n <IND>",
      "34": "\n \n def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <DED>",
      "35": "\n { def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "36": "\n } def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <IND>",
      "37": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> List[List[types.FrameType]]: \n <IND>",
      "38": "\n <DED> def start(self, caller_frame: types.FrameType): \n <IND>",
      "39": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n \\",
      "40": "\n \\ def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "41": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> Tuple[str, Any]: \n \n",
      "42": "\n \n def start(self, caller_frame: typing.Optional[types.FrameType] = None): \n <DED>",
      "43": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> List[List[str]]: \n <IND>",
      "44": "\n \n def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> bool: \n <IND>",
      "45": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> Tuple[default, None]: \n <IND>",
      "46": "{ <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "47": "<DED> <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> None: \n <IND>",
      "48": "\n <DED> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> Any: \n <IND>",
      "49": "\n <IND> def start(self, caller_frame: typing.Optional[types.FrameType] = None) -> bool: \n <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self, context_factory,\n        connect_timeout=10,\n        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n        crawler=None\n",
    "target_code": "        self, context_factory,\n        pool: H2ConnectionPool,\n        connect_timeout=10, bind_address: Optional[bytes] = None,\n        crawler=None\n",
    "warning_line": "        bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " pool is declared to have type `H2ConnectionPool` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 75,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "scrapy/scrapy",
    "source_filename": "scrapy/core/downloader/handlers/http2.py",
    "target_filename": "scrapy/core/downloader/handlers/http2.py",
    "source_changeid": "38d361792c02ae2b25323258d070c04d8906495a^",
    "target_changeid": "38d361792c02ae2b25323258d070c04d8906495a",
    "predictions": [
      "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "1": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None, \n crawler=None \n",
      "2": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler: Optional[None] = None \n",
      "3": "self, context_factory, <DED> connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "4": "self, context_factory, <IND> connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "5": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, <IND> crawler=None \n",
      "6": "self, context_factory, \n connect_timeout=10, <IND> bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "7": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, <DED> crawler=None \n",
      "8": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <IND>",
      "9": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None <DED>",
      "10": "self, context_factory, \n connect_timeout=10, <DED> bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "11": "self, context_factory, { connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "12": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None {",
      "13": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, { crawler=None \n",
      "14": "self, context_factory, \n connect_timeout=10, { bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "15": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None }",
      "16": "self, context_factory, } connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "17": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, } crawler=None \n",
      "18": "self, context_factory, \n connect_timeout=10, } bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "19": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "20": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \\",
      "21": "self, context_factory, \\ connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "22": "self, context_factory, \n connect_timeout=10, \\ bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "23": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \\ crawler=None \n",
      "24": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None",
      "25": "self, context_factory, connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "26": "self, context_factory, \n connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "27": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None \n",
      "28": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None",
      "29": "self, context_factory, connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "30": "self, context_factory, \n connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "31": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None \n",
      "32": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None",
      "33": "self, context_factory, \n connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "34": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None",
      "35": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None \n",
      "36": "self, context_factory, connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "37": "self, context_factory, connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "38": "self, context_factory, \n connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "39": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None \n",
      "40": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: H2ConnectionPool, \n crawler=None \n",
      "41": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None",
      "42": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None",
      "43": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None ^",
      "44": "self, context_factory, \n connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "45": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None \n",
      "46": "self, context_factory, connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "47": "self, context_factory, \n connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, crawler=None \n",
      "48": "self, context_factory, connect_timeout=10, \n bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n",
      "49": "self, context_factory, \n connect_timeout=10, bind_address: Optional[bytes] = None, pool: Optional[H2ConnectionPool] = None, \n crawler=None \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <IND>def __init__(self, rf_path: str=None):\n        <IND>super(Fonseca, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 3\n",
    "target_code": "\n    <IND>def __init__(self):\n        <IND>super(Fonseca, self).__init__()\n        self.number_of_variables = 3\n",
    "warning_line": "    def __init__(self, rf_path: str=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rf_path is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 53,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jMetal/jMetalPy",
    "source_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "target_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7^",
    "target_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "predictions": [
      "\n <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "1": "\n <DED> def __init__(self): \n <DED> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "2": "\n <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "3": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "4": "\n <DED> def __init__(self): \n \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "5": "\n <DED> def __init__(self) -> None: \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "6": "\n <DED> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "7": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <DED> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "8": "\n <IND> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "9": "\n <IND> def __init__(self): \n <DED> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "10": "\n \n def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "11": "<DED> <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "12": "<IND> <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "13": "\n <DED> def __init__(self): \n { super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "14": "\n <DED> def __init__(self): \n } super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "15": "\n { def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "16": "\n <DED> def __init__(self) -> None: \n <DED> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "17": "\n } def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "18": "\n <IND> def __init__(self) -> None: \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "19": "\n <IND> def __init__(self): \n \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "20": "\n <DED> def __init__(self, rf_path: str): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "21": "\n \n def __init__(self): \n <DED> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "22": "\n \\ def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "23": "\n <DED> def __init__(self): \n \\ super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "24": "<DED> <DED> def __init__(self): \n <DED> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "25": "\n <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() <IND> self.number_of_variables = 3 \n",
      "26": "\n <DED> def __init__(self) -> None: \n \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "27": "{ <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "28": "<DED> <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "29": "\n <DED> def __init__(self): <IND> <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "30": "\n <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() <DED> self.number_of_variables = 3 \n",
      "31": "\n <DED> def __init__(self): \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "32": "\n <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 <IND>",
      "33": "\n def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "34": "\n <DED> def __init__(self): \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "35": "\n <DED> def __init__(self): \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "36": "\n <DED> def __init__(self): <DED> <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "37": "\n <DED> def __init__(self): \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "38": "<IND> <DED> def __init__(self): \n <DED> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "39": "\n <DED> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 <DED>",
      "40": "\n def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "41": "\n <DED> def __init__(self): \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "42": "\n def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "43": "\n def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "44": "\n <DED> def __init__(self): \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "45": "<IND> <IND> def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "46": "\n <DED> def __init__(self): \n super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "47": "\n def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "48": "\n def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n",
      "49": "\n def __init__(self): \n <IND> super(Fonseca, self).__init__() \n self.number_of_variables = 3 \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        style_classes = reversed(style_classes)\n        for style_class in style_classes:\n            <IND>style_data = self.data.get(style_class, {})\n",
    "target_code": "\n        for style_class in reversed(style_classes):\n            <IND>style_data = self.data.get(style_class, {})\n",
    "warning_line": "        style_classes = reversed(style_classes)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " style_classes is declared to have type `List[str]` but is used as type `reversed[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pythonarcade/arcade",
    "source_filename": "arcade/gui/ui_style.py",
    "target_filename": "arcade/gui/ui_style.py",
    "source_changeid": "85b6424dc45469c45617e4c72aed8705ff54846b^",
    "target_changeid": "85b6424dc45469c45617e4c72aed8705ff54846b",
    "predictions": [
      "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <DED> ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <DED> ) \n",
      "1": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <IND> ) \n",
      "2": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n \n ) \n",
      "3": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, \n <DED> ) \n",
      "4": "<DED> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <DED> ) \n",
      "5": "<IND> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <DED> ) \n",
      "6": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, \n <IND> ) \n",
      "7": "<DED> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <IND> ) \n",
      "8": "<IND> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <IND> ) \n",
      "9": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n } ) \n",
      "10": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n { ) \n",
      "11": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n \n style_data = self.data.get(style_class, \n <DED> ) \n",
      "12": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, \n \n ) \n",
      "13": "<DED> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n \n ) \n",
      "14": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n \n style_data = self.data.get(style_class, \n <IND> ) \n",
      "15": "<IND> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n \n ) \n",
      "16": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, <DED> <DED> ) \n",
      "17": "<DED> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, \n <DED> ) \n",
      "18": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, <IND> <DED> ) \n",
      "19": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n \\ ) \n",
      "20": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, <DED> <IND> ) \n",
      "21": "<IND> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, \n <DED> ) \n",
      "22": "<DED> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, \n <IND> ) \n",
      "23": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, <IND> <IND> ) \n",
      "24": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n { style_data = self.data.get(style_class, \n <DED> ) \n",
      "25": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n } style_data = self.data.get(style_class, \n <DED> ) \n",
      "26": "<IND> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, \n <IND> ) \n",
      "27": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, { <DED> ) \n",
      "28": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n \n style_data = self.data.get(style_class, \n \n ) \n",
      "29": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "30": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "31": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "32": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, \n } ) \n",
      "33": "<DED> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n } ) \n",
      "34": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "35": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "36": "{ style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <DED> ) \n",
      "37": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "38": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <DED> style_data = self.data.get(style_class, \n { ) \n",
      "39": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n { style_data = self.data.get(style_class, \n <IND> ) \n",
      "40": "<DED> style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n { ) \n",
      "41": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "42": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "43": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n } style_data = self.data.get(style_class, \n <IND> ) \n",
      "44": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "45": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "46": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n ) \n",
      "47": "\n style_classes = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data[style_class, \n <DED> ] \n",
      "48": "\n reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <DED> ) \n",
      "49": "\n style_classes_list = reversed(style_classes) \n for style_class in style_classes: \n <IND> style_data = self.data.get(style_class, \n <DED> ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[Announcement] = None,\n    ) -> TransactionRecord:\n",
    "target_code": "        ignore_max_send_amount: bool = False,\n        announcements_to_consume: Set[bytes32] = None,\n    ) -> TransactionRecord:\n",
    "warning_line": "        announcements_to_consume: Set[Announcement] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " announcements_to_consume is declared to have type `Set[Announcement]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 387,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Chia-Network/chia-blockchain",
    "source_filename": "chia/wallet/wallet.py",
    "target_filename": "chia/wallet/wallet.py",
    "source_changeid": "05f67167fe26bc0fb539363976344e2fbc115f13^",
    "target_changeid": "05f67167fe26bc0fb539363976344e2fbc115f13",
    "predictions": [
      "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "1": "ignore_max_send_amount: bool = False, \n announceds_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "2": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = None, \n ) -> TransactionRecord: \n",
      "3": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = [], \n ) -> TransactionRecord: \n",
      "4": "ignore_max_send_amount: bool = False, <IND> announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "5": "ignore_max_send_amount: bool = False, <DED> announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "6": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, <IND> ) -> TransactionRecord: \n",
      "7": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: <IND>",
      "8": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, <DED> ) -> TransactionRecord: \n",
      "9": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: <DED>",
      "10": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: {",
      "11": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, { ) -> TransactionRecord: \n",
      "12": "ignore_max_send_amount: bool = False, { announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "13": "ignore_max_send_amount: bool = False, \n announces_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "14": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, } ) -> TransactionRecord: \n",
      "15": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: }",
      "16": "ignore_max_send_amount: bool = False, } announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "17": "ignore_max_send_amount: bool = False, \\ announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "18": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \\ ) -> TransactionRecord: \n",
      "19": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \\",
      "20": "ignored_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "21": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord:",
      "22": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "23": "ignore_max_send_amount: bool = False, \n notifications_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "24": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: \n",
      "25": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord:",
      "26": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "27": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: \n",
      "28": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord:",
      "29": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "30": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord:",
      "31": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: \n",
      "32": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "33": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: \n",
      "34": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord:",
      "35": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord:",
      "36": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord:",
      "37": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Union[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "38": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: \n",
      "39": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "40": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "41": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord:",
      "42": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Set[Announcement] = (), \n ) -> TransactionRecord: \n",
      "43": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: \n",
      "44": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: \n",
      "45": "ignore_max_send_amount: bool = False, announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "46": "ignore_max_send_amount: bool = False, ^ announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: \n",
      "47": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, ) -> TransactionRecord: \n",
      "48": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, ^ ) -> TransactionRecord: \n",
      "49": "ignore_max_send_amount: bool = False, \n announcements_to_consume: Optional[Set[Announcement]] = None, \n ) -> TransactionRecord: ^"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict=None):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "target_code": "        self.lines.append(line)\n    <DED>def message(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.message(target, message, tags))\n    <DED>def notice(self, target: str, message: str, tags: dict={}):\n        <IND>self._add_line(utils.irc.protocol.notice(target, message, tags))\n",
    "warning_line": "    def notice(self, target: str, message: str, tags: dict=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " tags is declared to have type `typing.Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 334,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/utils/irc/__init__.py",
    "target_filename": "src/utils/irc/__init__.py",
    "source_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd^",
    "target_changeid": "577fae7ceabfd2a43b798e02a67c518c23ed33bd",
    "predictions": [
      "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "1": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message",
      "2": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "3": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message",
      "4": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "5": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message",
      "6": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.",
      "7": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message",
      "8": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.",
      "9": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "10": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "11": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "12": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "13": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.",
      "14": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "15": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.",
      "16": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "17": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n <DED> ) \n",
      "18": "self.lines.append(line) \n \n def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "19": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n \n self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n \n ) \n",
      "20": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "21": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n <IND> ) \n",
      "22": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "23": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n <DED> ) \n",
      "24": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n <IND> ) \n",
      "25": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n <DED> ) \n",
      "26": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice",
      "27": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> None: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "28": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "29": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> None: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "30": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n <IND> ) \n",
      "31": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "32": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message, tags)) \n",
      "33": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "34": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice",
      "35": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n <DED> ) \n",
      "36": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ) -> Notify: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "37": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n <DED> ) \n",
      "38": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <DED> ) -> Notification: \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str]= \n ) \n",
      "39": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message, tags)) \n",
      "40": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n <IND> ) \n",
      "41": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n ) \n",
      "42": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.note(target, message",
      "43": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]]= \n <IND> ): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Optional[typing.Dict[str, str]= \n ) \n",
      "44": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice",
      "45": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.",
      "46": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.note(target, message",
      "47": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <DED> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice(target, message, tags)) \n",
      "48": "self.lines.append(line) \n <IND> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.notice",
      "49": "self.lines.append(line) \n <DED> def message(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc.protocol.message(target, message, tags)) \n <IND> def notice(self, target: str, message: str, tags: typing.Dict[str, str]): \n <IND> self._add_line(utils.irc."
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "target_code": "        ] = unspecified.UNSPECIFIED,\n        parent_category: type_hints.NullableNotRequired[_channels.GuildCategoryLikeT] = unspecified.UNSPECIFIED,\n        nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED,\n",
    "warning_line": "        parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " parent_category is declared to have type `typing.Union[_channels.GuildCategory, int, str, unspecified.Unspecified]` but is used as type `typing.Type[unspecified.Unspecified]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1140,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hikari-py/hikari",
    "source_filename": "hikari/orm/http/base_http_adapter.py",
    "target_filename": "hikari/orm/http/base_http_adapter.py",
    "source_changeid": "cf143052e1228280ed895c06da9177611d8ea088^",
    "target_changeid": "cf143052e1228280ed895c06da9177611d8ea088",
    "predictions": [
      "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "1": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "2": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: typing.Optional[type_hints.NotRequired[bool]] = unspecified.UNSPECIFIED, \n",
      "3": "] = unspecified.UNSPECIFIED, \n parent_category: Type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "4": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "5": "] = unspecified.UNSPECIFIED, \n parent_category: Type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: Type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "6": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.Nullable[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.Nullable[bool] = unspecified.UNSPECIFIED, \n",
      "7": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "8": "] = unspecified.UNSPECIFIED, \n parent_category: Type[hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "9": "] = unspecified.UNSPECIFIED, \n parent_category: Type.hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "10": "] = unspecified.UNSPECIFIED, \n parent_category: Typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "11": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT], \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "12": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, <IND> nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "13": "] = unspecified.UNSPECIFIED, <IND> parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "14": "] = unspecified.UNSPECIFIED, <DED> parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "15": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, <DED> nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "16": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, <IND>",
      "17": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, <DED>",
      "18": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[str, _channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "19": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, { nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "20": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, {",
      "21": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[str, unspecified.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "22": "] = unspecified.UNSPECIFIED, \n parent_category: Type[hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: Type[hints.NotRequired[bool]] = unspecified.UNSPECIFIED, \n",
      "23": "] = unspecified.UNSPECIFIED, { parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "24": "] = unspecified.UNSPECIFIED, \n parent_category: Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "25": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Union[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "26": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Instance[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "27": "] = unspecified.UNSPECIFIED, \n parent_category: Typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: Typing.Optional[type_hints.NotRequired[bool]] = unspecified.UNSPECIFIED, \n",
      "28": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[typing.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "29": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, } nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "30": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, }",
      "31": "] = unspecified.UNSPECIFIED, } parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "32": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NoRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NoRequired[bool] = unspecified.UNSPECIFIED, \n",
      "33": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: typing.Type[nsfw] = unspecified.UNSPECIFIED, \n",
      "34": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: typing.Type[nsfw.NotRequired[bool]] = unspecified.UNSPECIFIED, \n",
      "35": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "36": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[str, str], unspecified.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "37": "] = unspecified.UNSPECIFIED, \n parent_category: Typing.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "38": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: typing.Type[nsfw].NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "39": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[str, str, unspecified.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "40": "] = unspecified.UNSPECIFIED, \n parent_category: Type.hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: Type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "41": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, <IND>",
      "42": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Optional[type_hints.NotRequired[_channels.GuildCategoryLikeT]] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, <DED>",
      "43": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.Nullable[bool] = unspecified.UNSPECIFIED, \n",
      "44": "] = unspecified.UNSPECIFIED, \n parent_category: typing.Type[str, str] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "45": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.Required[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "46": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \\ nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "47": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \\",
      "48": "] = unspecified.UNSPECIFIED, \\ parent_category: type_hints.NotRequired[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n",
      "49": "] = unspecified.UNSPECIFIED, \n parent_category: type_hints.ForeignKey[_channels.GuildCategoryLikeT] = unspecified.Unspecified, \n nsfw: type_hints.NotRequired[bool] = unspecified.UNSPECIFIED, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        destination: str = None,\n        source: str = None,\n        routing_key: str = \"\",\n        *,\n",
    "target_code": "        self,\n        destination: str = '',\n        source: str = '',\n        routing_key: str = '',\n        *,\n",
    "warning_line": "        destination: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " destination is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 208,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/abc.py",
    "target_filename": "aiormq/abc.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "1": "self, \n destination: Optional[str] = None, \n source: Optional[str] = None, \n routing_key: str = \"\", \n *, \n",
      "2": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = \"\", \n *, \n",
      "3": "self, <DED> destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "4": "self, \n destination: str = '', \n source: str = '', <IND> routing_key: str = '', \n *, \n",
      "5": "self, <IND> destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "6": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', <IND> *, \n",
      "7": "self, \n destination: str = '', \n source: str = '', <DED> routing_key: str = '', \n *, \n",
      "8": "self, \n destination: str = '', <IND> source: str = '', \n routing_key: str = '', \n *, \n",
      "9": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', <DED> *, \n",
      "10": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, <DED>",
      "11": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, <IND>",
      "12": "self, \n destination: str = '', <DED> source: str = '', \n routing_key: str = '', \n *, \n",
      "13": "self, \n destination: str = '', \n source: str = '', { routing_key: str = '', \n *, \n",
      "14": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', { *, \n",
      "15": "self, { destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "16": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, {",
      "17": "self, \n destination: str = '', { source: str = '', \n routing_key: str = '', \n *, \n",
      "18": "self, \n destination: str = \"\", \n source: str = \"\", \n routing_key: str = \"\", \n *, \n",
      "19": "self, \n destination: str = '', \n source: str = '', } routing_key: str = '', \n *, \n",
      "20": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', } *, \n",
      "21": "self, \n destination: str = '', } source: str = '', \n routing_key: str = '', \n *, \n",
      "22": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, }",
      "23": "self, } destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "24": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \\ *, \n",
      "25": "self, \n destination: str = '', \n source: str = '', \\ routing_key: str = '', \n *, \n",
      "26": "self, \n destination: str = '', \\ source: str = '', \n routing_key: str = '', \n *, \n",
      "27": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \\",
      "28": "self, \\ destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "29": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = ', \n *, \n",
      "30": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', *, \n",
      "31": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *,",
      "32": "self, \n destination: str = '', \n source: str = '', routing_key: str = '', \n *, \n",
      "33": "self, destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "34": "self, \n destination: str = '', source: str = '', \n routing_key: str = '', \n *, \n",
      "35": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', *, \n",
      "36": "self, \n destination: str = '', source: str = '', \n routing_key: str = '', \n *, \n",
      "37": "self, \n destination: str = '', \n source: str = '', routing_key: str = '', \n *, \n",
      "38": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *,",
      "39": "self, destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n",
      "40": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', *, \n",
      "41": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *,",
      "42": "self, \n destination: str = '', \n source: str = '', routing_key: str = '', \n *, \n",
      "43": "self, \n destination: str = '', source: str = '', \n routing_key: str = '', \n *, \n",
      "44": "self, \n destination: str = '', \n source: str = '', routing_key: str = '', \n *, \n",
      "45": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', \n *,",
      "46": "self, \n destination: str = '', \n source: str = '', routing_key: str = '', \n *, \n",
      "47": "self, \n destination: str = '', \n source: str = '', \n routing_key: str = '', *, \n",
      "48": "self, \n destination: str = '', source: str = '', \n routing_key: str = '', \n *, \n",
      "49": "self, destination: str = '', \n source: str = '', \n routing_key: str = '', \n *, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        room_creator: str = None,\n        is_public: bool = True,\n        room_version: str = None,\n        tok: str = None,\n        expect_code: int = 200,\n",
    "target_code": "        self,\n        room_creator: Optional[str] = None,\n        is_public: bool = True,\n        room_version: Optional[str] = None,\n        tok: Optional[str] = None,\n        expect_code: int = 200,\n",
    "warning_line": "        room_creator: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " room_creator is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 50,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "matrix-org/synapse",
    "source_filename": "tests/rest/client/v1/utils.py",
    "target_filename": "tests/rest/client/v1/utils.py",
    "source_changeid": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945^",
    "target_changeid": "fab352ac2cb6a9d69a74be6d4255a9b71e0f7945",
    "predictions": [
      "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "1": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, <IND> room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "2": "self, <DED> room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "3": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, <IND> expect_code: int = 200, \n",
      "4": "self, <IND> room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "5": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, <DED> room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "6": "self, \n room_creator: str = '', \n is_public: bool = True, \n room_version: str = '', \n tok: str = '', \n expect_code: int = 200, \n",
      "7": "self, \n room_creator: Optional[str] = None, <IND> is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "8": "self, \n room_creator: Optional[str] = None, <DED> is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "9": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, <DED> expect_code: int = 200, \n",
      "10": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, <IND> tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "11": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, <DED> tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "12": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, <IND>",
      "13": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, <DED>",
      "14": "self, \n room_creator: Union[str, None] = None, \n is_public: bool = True, \n room_version: Union[str, None] = None, \n tok: Union[str, None] = None, \n expect_code: int = 200, \n",
      "15": "self, { room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "16": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, { tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "17": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, { room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "18": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, { expect_code: int = 200, \n",
      "19": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, {",
      "20": "self, \n room_creator: Optional[str] = None, { is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "21": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, } expect_code: int = 200, \n",
      "22": "self, \n room_creator: Optional[str] = None, } is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "23": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, } room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "24": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, } tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "25": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, }",
      "26": "self, } room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "27": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \\",
      "28": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \\ room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "29": "self, \n room_creator: Optional[str] = None, \\ is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "30": "self, \\ room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "31": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \\ expect_code: int = 200, \n",
      "32": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \\ tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "33": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200,",
      "34": "self, room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "35": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, expect_code: int = 200, \n",
      "36": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "37": "self, \n room_creator: str, \n is_public: bool = True, \n room_version: str, \n tok: str, \n expect_code: int = 200, \n",
      "38": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "39": "self, \n room_creator: Optional[str] = None, is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "40": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200,",
      "41": "self, \n room_creator: Optional[str] = None, is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "42": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, expect_code: int = 200, \n",
      "43": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "44": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "45": "self, room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200, \n",
      "46": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200,",
      "47": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, \n expect_code: int = 200,",
      "48": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, \n tok: Optional[str] = None, expect_code: int = 200, \n",
      "49": "self, \n room_creator: Optional[str] = None, \n is_public: bool = True, \n room_version: Optional[str] = None, tok: Optional[str] = None, \n expect_code: int = 200, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    y: int,\n    channel_id: str = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "target_code": "    y: int,\n    channel_id: Optional[str] = None,\n    xs: int = 100,  # TODO: are these defaults reasonable or should no defaults be specified?\n",
    "warning_line": "    channel_id: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " channel_id is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 80,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theislab/squidpy",
    "source_filename": "squidpy/im/crop.py",
    "target_filename": "squidpy/im/crop.py",
    "source_changeid": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed^",
    "target_changeid": "0a9fd7e4a3747db318e65a0a9fd3a31e87c06eed",
    "predictions": [
      "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n"
    ],
    "correct": true,
    "top_five": {
      "0": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "1": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? <IND>",
      "2": "y: int, <DED> channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "3": "y: int, <IND> channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "4": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? <DED>",
      "5": "y: int, \n channel_id: Optional[str] = None, <IND> xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "6": "y: int, \n channel_id: Optional[str] = None, <DED> xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "7": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? {",
      "8": "y: int, { channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "9": "y: int, \n channel_id: Optional[str] = None, { xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "10": "y: int, \n channel_id: Optional[str] = None, } xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "11": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? }",
      "12": "y: int, } channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "13": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \\",
      "14": "y: int, \n channel_id: Optional[str] = None, \\ xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "15": "y: int, \\ channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "16": "x: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "17": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "18": "y: int, channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "19": "y: int, \n channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "20": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: Are these defaults reasonable or should no defaults be specified? \n",
      "21": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "22": "y: int, \n channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "23": "y: int, channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "24": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "25": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "26": "y: int, \n channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "27": "y: int, channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "28": "y: int, channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "29": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "30": "y: int, \n channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "31": "y: int, \n channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "32": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "33": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? ^",
      "34": "y: int, \n channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "35": "y: int, \n channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "36": "y: int, \n channel_id: Optional[str] = None, ^ xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "37": "y: int, channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "38": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "39": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "40": "y: int, channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "41": "y: int, channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "42": "y: int, \n channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "43": "y: int, ^ channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "44": "y: int, channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "45": "y: int, channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "46": "y: int, channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "47": "y: int, \n channel_id: Optional[str] = None, \n xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified?",
      "48": "y: int, \n channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n",
      "49": "y: int, \n channel_id: Optional[str] = None, xs: int = 100, # TODO: are these defaults reasonable or should no defaults be specified? \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        user_id:      str,\n        display_name: str  = None,\n        avatar_url:   str  = None,\n        power_level:  int  = 0,\n",
    "target_code": "        user_id:      str,\n        display_name: Optional[str] = None,\n        avatar_url:   Optional[str] = None,\n        power_level:  int  = 0,\n",
    "warning_line": "        display_name: str  = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " display_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 501,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "poljar/matrix-nio",
    "source_filename": "nio/rooms.py",
    "target_filename": "nio/rooms.py",
    "source_changeid": "54370462a3691387e011912c8450ee062168198a^",
    "target_changeid": "54370462a3691387e011912c8450ee062168198a",
    "predictions": [
      "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "1": "user_id: str, \n display_name: str, \n avatar_url: str, \n power_level: int = 0, \n",
      "2": "user_id: str, \n display_name: Optional[str] = None, <DED> avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "3": "user_id: str, <DED> display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "4": "user_id: str, \n display_name: Optional[str] = None, <IND> avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "5": "user_id: str, <IND> display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "6": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, <IND>",
      "7": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, <IND> power_level: int = 0, \n",
      "8": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, <DED>",
      "9": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, <DED> power_level: int = 0, \n",
      "10": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, { power_level: int = 0, \n",
      "11": "user_id: str, \n display_name: Optional[str] = None, { avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "12": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, {",
      "13": "user_id: str, { display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "14": "user_id: str, \n display_name: Optional[str] = None, } avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "15": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, } power_level: int = 0, \n",
      "16": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, }",
      "17": "user_id: str, } display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "18": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \\",
      "19": "user_id: str, \n display_name: Optional[str] = None, \\ avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "20": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \\ power_level: int = 0, \n",
      "21": "user_id: str, \\ display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "22": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0,",
      "23": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, power_level: int = 0, \n",
      "24": "user_id: str, \n display_name: Optional[str] = None, avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "25": "user_id: str, display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "26": "user_id: str, \n display_name: Optional[str] = None, avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "27": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, power_level: int = 0, \n",
      "28": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0,",
      "29": "user_id: str, display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "30": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0,",
      "31": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, power_level: int = 0, \n",
      "32": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0,",
      "33": "user_id: str, \n display_name: Optional[str] = None, avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "34": "user_id: str, display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "35": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, power_level: int = 0, \n",
      "36": "user_id: str, display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "37": "user_id: str, \n display_name: Optional[str] = None, avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "38": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0,",
      "39": "user_id: str, \n displayed_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "40": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0,",
      "41": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, power_level: int = 0, \n",
      "42": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0,",
      "43": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, power_level: int = 0, \n",
      "44": "user_id: str, \n display_name: Optional[str] = None, avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "45": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, power_level: int = 0, \n",
      "46": "user_id: str, \n display_name: Optional[str] = None, avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "47": "user_id: str, display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "48": "user_id: str, \n display_name: Optional[str] = None, avatar_url: Optional[str] = None, \n power_level: int = 0, \n",
      "49": "user_id: str, \n display_name: Optional[str] = None, \n avatar_url: Optional[str] = None, \n power_level: int = 0, ^"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, chat: 'Chat' = None, *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "target_code": "\n    def __init__(self, chat: 'Chat', *,\n                 name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),\n",
    "warning_line": "    def __init__(self, chat: 'Chat' = None, *,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " chat is declared to have type `Chat` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 243,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ehForwarderBot/ehForwarderBot",
    "source_filename": "ehforwarderbot/chat.py",
    "target_filename": "ehforwarderbot/chat.py",
    "source_changeid": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b^",
    "target_changeid": "bf2ab0ae3113a7dd49f2d8fcea21af0cd0689f2b",
    "predictions": [
      "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "1": "<DED> def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "2": "<IND> def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "3": "{ def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "4": "\n def __init__(self, chat: Optional['Chat'] = None, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "5": "\n def __init__(self, chat: 'Chat', *, <IND> name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "6": "\n def __init__(self, chat: 'Chat', *, <DED> name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "7": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), <IND>",
      "8": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), <DED>",
      "9": "} def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "10": "\n def __init__(self, chat: 'Chat', *, { name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "11": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), {",
      "12": "\n def __init__(self, chat: 'Chat', *, } name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "13": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), }",
      "14": "\\ def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "15": "\n def __init__(self, chat, 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "16": "\n def __init__(self, chat: 'Chat', *, \n name: str = '', alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "17": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "18": "\n def __init__(self, chat: 'Chat', *, \\ name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "19": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \\",
      "20": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "21": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "22": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "23": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "24": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "25": "\n def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "26": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "27": "^ def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "28": "\n def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "29": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "30": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "31": "\n def __init__(self, chat: Chat, *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "32": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "33": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "34": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "35": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "36": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "37": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "38": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "39": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "40": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "41": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "42": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "43": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "44": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "45": "\n def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "46": "\n def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"),",
      "47": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "48": "def __init__(self, chat: 'Chat', *, \n name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n",
      "49": "\n def __init__(self, chat: 'Chat', *, name: str = \"\", alias: Optional[str] = None, id: ChatID = ChatID(\"\"), \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: int = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "target_code": "        value: bytes = cast(bytes, message.value)\n        timestamp: float = cast(float, message.timestamp)\n        logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)\n",
    "warning_line": "        timestamp: int = cast(float, message.timestamp)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " timestamp is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 345,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "robinhood/faust",
    "source_filename": "faust/topics.py",
    "target_filename": "faust/topics.py",
    "source_changeid": "08e3003188557cc18bfd085315892beb1d99584c^",
    "target_changeid": "08e3003188557cc18bfd085315892beb1d99584c",
    "predictions": [
      "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "1": "value: bytes = cast(bytes, message.value) \n timestamp: bytes = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "2": "value: bytes = cast(bytes, message.value) \n timestamp: cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "3": "value: bytes = cast(bytes, message.value) \n timestamp: int = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "4": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float), message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "5": "value: bytes = cast(bytes, message.value) <DED> timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "6": "value: bytes = cast(bytes, message.value) <IND> timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "7": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) <DED> logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "8": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) <IND>",
      "9": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) <DED>",
      "10": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) <IND> logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "11": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) {",
      "12": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) { logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "13": "value: bytes = cast(bytes, message.value) { timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "14": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "15": "value: bytes = cast(bytes, message.value) \n timestamp: floating = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "16": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) }",
      "17": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) } logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "18": "value: bytes = cast(bytes, message.value) } timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "19": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp).float) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "20": "value: bytes = cast(bytes, message.value) \\ timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "21": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \\",
      "22": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \\ logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "23": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "24": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "25": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "26": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "27": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "28": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "29": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "30": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "31": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "32": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "33": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "34": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "35": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "36": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "37": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "38": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "39": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "40": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "41": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) ^ logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "42": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "43": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) ^",
      "44": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "45": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "46": "value: bytes = cast(bytes, message.value) ^ timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "47": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp)",
      "48": "value: bytes = cast(bytes, message.value) \n timestamp: float = cast(float, message.timestamp) logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n",
      "49": "value: bytes = cast(bytes, message.value) timestamp: float = cast(float, message.timestamp) \n logger.debug('send: topic=%r key=%r value=%r timestamp=%r', topic, key, value, timestamp) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def get(self, key: str, default: Optional = None) -> Any:\n        <IND>try:\n",
    "target_code": "\n    <DED>def get(self, key: str, default: Optional[Any] = None) -> Any:\n        <IND>try:\n",
    "warning_line": "    def get(self, key: str, default: Optional = None) -> Any:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " default is declared to have type `Optional[typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 119,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ducdetronquito/scalpl",
    "source_filename": "scalpl/scalpl.py",
    "target_filename": "scalpl/scalpl.py",
    "source_changeid": "95ffc100f9d3d214cb259e772b4f99d4ca30d216^",
    "target_changeid": "95ffc100f9d3d214cb259e772b4f99d4ca30d216",
    "predictions": [
      "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "1": "\n <IND> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "2": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <DED> try: \n",
      "3": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n \n try: \n",
      "4": "\n \n def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "5": "\n <IND> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <DED> try: \n",
      "6": "<DED> <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "7": "<IND> <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "8": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n { try: \n",
      "9": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n } try: \n",
      "10": "\n { def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "11": "\n } def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "12": "\n <IND> def get(self, key: str, default: Optional[Any] = None) -> Any: \n \n try: \n",
      "13": "\n \n def get(self, key: str, default: Optional[Any] = None) -> Any: \n <DED> try: \n",
      "14": "\n <DED> def get(self, key: str, default: Optional[str] = None) -> Any: \n <IND> try: \n",
      "15": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n \\ try: \n",
      "16": "\n \\ def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "17": "\n <DED> def get(self, key: str, default: Optional[Optional[Any]] = None) -> Any: \n <IND> try: \n",
      "18": "<DED> <IND> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "19": "<DED> <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <DED> try: \n",
      "20": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: <IND>",
      "21": "{ <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "22": "\n <DED> def get(self, key: str, default: Optional[Str] = None) -> Any: \n <IND> try: \n",
      "23": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: <DED>",
      "24": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: <IND> <IND> try: \n",
      "25": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "26": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "27": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "28": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "29": "<IND> <IND> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "30": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "31": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: <DED> <IND> try: \n",
      "32": "\n def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "33": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "34": "<IND> <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <DED> try: \n",
      "35": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "36": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "37": "\n def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "38": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "39": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "40": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "41": "} <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "42": "\n def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "43": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "44": "\n <IND> def get(self, key: str, default: Optional[Any] = None) -> Any: \n { try: \n",
      "45": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "46": "\n def get(self, key: str, default: Optional[Any] = None) -> Any: \n <IND> try: \n",
      "47": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "48": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n",
      "49": "\n <DED> def get(self, key: str, default: Optional[Any] = None) -> Any: \n try: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        project_id: str,\n        region: str = None,\n        location: Optional[str] = None,\n",
    "target_code": "        project_id: str,\n        region: Optional[str] = None,\n        location: Optional[str] = None,\n",
    "warning_line": "        region: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " region is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 931,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "target_filename": "airflow/providers/google/cloud/hooks/dataproc.py",
    "source_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f^",
    "target_changeid": "174681911f96f17d41a4f560ca08d5e200944f7f",
    "predictions": [
      "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "1": "project_id: str, <DED> region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "2": "project_id: str, <IND> region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "3": "project_id: str, \n region: Optional[str] = None, <IND> location: Optional[str] = None, \n",
      "4": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <IND>",
      "5": "project_id: str, \n region: Optional[str] = None, <DED> location: Optional[str] = None, \n",
      "6": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, <DED>",
      "7": "project_id: str, \n region: Optional[str] = None, { location: Optional[str] = None, \n",
      "8": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, {",
      "9": "project_id: str, { region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "10": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, }",
      "11": "project_id: str, \n region: Optional[str] = None, } location: Optional[str] = None, \n",
      "12": "project_id: str, } region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "13": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, \\",
      "14": "project_id: str, \\ region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "15": "project_id: str, \n region: Optional[str] = None, \\ location: Optional[str] = None, \n",
      "16": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "17": "project_id: str, \n region: Optional[str] = None, location: Optional[str] = None, \n",
      "18": "project_id: str, region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "19": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "20": "project_id: str, \n region: Optional[str] = None, location: Optional[str] = None, \n",
      "21": "project_id: str, region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "22": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "23": "project_id: str, \n region: Optional[str] = None, location: Optional[str] = None, \n",
      "24": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "25": "project_id: str, region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "26": "project_id: str, \n region: Optional[str] = None, location: Optional[str] = None, \n",
      "27": "project_id: str, region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "28": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "29": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "30": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "31": "project_id: str, \n region: Optional[str] = None, location: Optional[str] = None, \n",
      "32": "project_id: str, \n region: Optional[str] = None, location: Optional[str] = None, \n",
      "33": "project_id: str, \n region: Optional[str] = None, location: Optional[str] = None, \n",
      "34": "project_id: str, \n region: Optional[str] = None, location: Optional[str] = None, \n",
      "35": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "36": "project_id: str, region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "37": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None, ^",
      "38": "project_id: str, \n region: Optional[str] = None, ^ location: Optional[str] = None, \n",
      "39": "project_id: str, region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "40": "project_id: str, region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "41": "project_id: str, ^ region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "42": "project_id: str, region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "43": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "44": "project_id: str, \n region: Optional[str] = None, location: Optional[str] = None, \n",
      "45": "project_id: str, \n region: Optional[str] = None, location: Optional[str] = None, \n",
      "46": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "47": "project_id: str, region: Optional[str] = None, \n location: Optional[str] = None, \n",
      "48": "project_id: str, \n region: Optional[str] = None, \n location: Optional[str] = None,",
      "49": "project_id: str, region: Optional[str] = None, \n location: Optional[str] = None, \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    persistence_store: BasePersistenceLayer,\n    config: IdempotencyConfig = None,\n) -> Any:\n",
    "target_code": "    persistence_store: BasePersistenceLayer,\n    config: Optional[IdempotencyConfig] = None,\n) -> Any:\n",
    "warning_line": "    config: IdempotencyConfig = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " config is declared to have type `IdempotencyConfig` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "awslabs/aws-lambda-powertools-python",
    "source_filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "target_filename": "aws_lambda_powertools/utilities/idempotency/idempotency.py",
    "source_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55^",
    "target_changeid": "5b87bb195fb154d2a112364a5d1d5c9513898e55",
    "predictions": [
      "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "1": "persistence_store: BasePersistenceLayer, <IND> config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "2": "persistence_store: BasePersistenceLayer, <DED> config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "3": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: <IND>",
      "4": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, <IND> ) -> Any: \n",
      "5": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, <DED> ) -> Any: \n",
      "6": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: <DED>",
      "7": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: {",
      "8": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, { ) -> Any: \n",
      "9": "persistence_store: BasePersistenceLayer, { config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "10": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: }",
      "11": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, } ) -> Any: \n",
      "12": "persistence_store: BasePersistenceLayer, } config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "13": "persistence_store: BasePersistenceLayer, \\ config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "14": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: \\",
      "15": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \\ ) -> Any: \n",
      "16": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "17": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "18": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, ) -> Any: \n",
      "19": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "20": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "21": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, ) -> Any: \n",
      "22": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "23": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "24": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, ) -> Any: \n",
      "25": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "26": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "27": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "28": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, ) -> Any: \n",
      "29": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "30": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "31": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, ) -> Any: \n",
      "32": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "33": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "34": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, ) -> Any: \n",
      "35": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any: ^",
      "36": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, ) -> Any: \n",
      "37": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "38": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, ) -> Any: \n",
      "39": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "40": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, ^ ) -> Any: \n",
      "41": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "42": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "43": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "44": "persistence_store: BasePersistenceLayer, ^ config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n",
      "45": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "46": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "47": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, ) -> Any: \n",
      "48": "persistence_store: BasePersistenceLayer, \n config: Optional[IdempotencyConfig] = None, \n ) -> Any:",
      "49": "persistence_store: BasePersistenceLayer, config: Optional[IdempotencyConfig] = None, \n ) -> Any: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "target_code": "\n    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[QuantizationParameters] = None,\n                 fusedActivationFunction=tflite.ActivationFunctionType.NONE):\n",
    "warning_line": "    def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " quantization is declared to have type `QuantizationParameters` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "alibaba/TinyNeuralNetwork",
    "source_filename": "tinynn/converter/operators/tflite/transformable.py",
    "target_filename": "tinynn/converter/operators/tflite/transformable.py",
    "source_changeid": "39f33e696c7d558fcac214ffdf58f436c10c1cd1^",
    "target_changeid": "39f33e696c7d558fcac214ffdf58f436c10c1cd1",
    "predictions": [
      "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "1": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "2": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "3": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "4": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters[''] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "5": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "6": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters'], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "7": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "8": "<DED> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "9": "<IND> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "10": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters'], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "11": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "12": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "13": "<DED> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "14": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "15": "<IND> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "16": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters'] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "17": "<DED> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "18": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "19": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "20": "<DED> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "21": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "22": "<IND> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "23": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "24": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters: typing.Union['Tensor'], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "25": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters(), \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "26": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters), \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "27": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters = None \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "28": "<IND> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "29": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters[type] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "30": "<DED> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters[''] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "31": "{ def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "32": "<IND> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters[''] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "33": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters]=None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "34": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Optional[typing.QuantizationParameters] = None \n ): \n",
      "35": "<DED> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters]] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "36": "<DED> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters'], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "37": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters]], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "38": "{ def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "39": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "40": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "41": "} def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "42": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE) -> None: \n",
      "43": "<IND> def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters'], \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "44": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters(), \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "45": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): <IND>",
      "46": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, <IND> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "47": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters() = None \n fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "48": "\n def __init__(self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.QuantizationParameters, <DED> fusedActivationFunction=tflite.ActivationFunctionType.NONE): \n",
      "49": "\n def __init__( \n self, inputs: typing.List['Tensor'], outputs: typing.List['Tensor'], eps: float, quantization: typing.Union[QuantizationParameters] = None \n ): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        exchange: str = None,\n        *,\n",
    "target_code": "        self,\n        exchange: str = '',\n        *,\n",
    "warning_line": "        exchange: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " exchange is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 184,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mosquito/aiormq",
    "source_filename": "aiormq/abc.py",
    "target_filename": "aiormq/abc.py",
    "source_changeid": "91909de532777c494df33a4843410b1981ca8794^",
    "target_changeid": "91909de532777c494df33a4843410b1981ca8794",
    "predictions": [
      "self, \n exchange: str = '', \n *, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "self, \n exchange: str = '', \n *, \n",
      "1": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "2": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "3": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None",
      "4": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "5": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "6": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "7": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "8": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "9": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "10": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "11": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "12": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "13": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "14": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "15": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "16": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "17": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "18": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "19": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "20": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "21": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "22": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "23": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "24": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "25": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "26": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "27": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "28": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # # # # # #",
      "29": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # # # # #",
      "30": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # # # #",
      "31": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4",
      "32": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # # #",
      "33": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # # # # # # #",
      "34": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # #",
      "35": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # # # # # # # #",
      "36": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # #",
      "37": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # # # # # # # # #",
      "38": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # #",
      "39": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #",
      "40": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # # # # # # # # # #",
      "41": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # #",
      "42": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # # # # # # # # # # #",
      "43": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # #",
      "44": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # #",
      "45": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # # # # # # # # # # # # # # # # # #",
      "46": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # # #",
      "47": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # # #",
      "48": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #4 # # # #",
      "49": "self, \n exchange: str | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | None | # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: int = 1.0,\n                 ):\n",
    "target_code": "                 num_latent: Optional[int] = None,\n                 noise_variance: float = 1.0,\n                 ):\n",
    "warning_line": "                 noise_variance: int = 1.0,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " noise_variance is declared to have type `int` but is used as type `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 120,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "GPflow/GPflow",
    "source_filename": "gpflow/models/sgpr.py",
    "target_filename": "gpflow/models/sgpr.py",
    "source_changeid": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb^",
    "target_changeid": "f4688ba9cb5d6ecd8cd712faeddd800e3ac18afb",
    "predictions": [
      "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ): \n"
    ],
    "correct": true,
    "top_five": {
      "0": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ): \n",
      "1": "num_latent: Optional[int] = None, \n noise_variance: int = 1.0, \n ): \n",
      "2": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, <IND> ): \n",
      "3": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, <DED> ): \n",
      "4": "num_latent: Optional[int] = None, <IND> noise_variance: float = 1.0, \n ): \n",
      "5": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ): <IND>",
      "6": "num_latent: Optional[int] = None, <DED> noise_variance: float = 1.0, \n ): \n",
      "7": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ): <DED>",
      "8": "num_latent: Optional[int] = None, \n noise_variance: float = (1.0), \n ): \n",
      "9": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ) -> None: \n",
      "10": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ): {",
      "11": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, { ): \n",
      "12": "num_latent: Optional[int] = None, { noise_variance: float = 1.0, \n ): \n",
      "13": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, } ): \n",
      "14": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ): }",
      "15": "num_latent: Optional[int] = None, } noise_variance: float = 1.0, \n ): \n",
      "16": "num_latent: Optional[int] = None, \n noise_variance: floating point = 1.0, \n ): \n",
      "17": "num_latent: Optional[int] = None, \n noise_variance = 1.0, \n ): \n",
      "18": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ): \\",
      "19": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \\ ): \n",
      "20": "num_latent: Optional[int] = None, \\ noise_variance: float = 1.0, \n ): \n",
      "21": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ):",
      "22": "num_latent: Optional[int] = None, noise_variance: float = 1.0, \n ): \n",
      "23": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, ): \n",
      "24": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ):",
      "25": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, ): \n",
      "26": "num_latent: Optional[int] = None, noise_variance: float = 1.0, \n ): \n",
      "27": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ):",
      "28": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, ): \n",
      "29": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ):",
      "30": "num_latent: Optional[int] = None, noise_variance: float = 1.0, \n ): \n",
      "31": "num_latent: Optional[int] = None, noise_variance: float = 1.0, \n ): \n",
      "32": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, ): \n",
      "33": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ):",
      "34": "num_latent: Optional[int] = None, \n noise_variance: floating = 1.0, \n ): \n",
      "35": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ):",
      "36": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, ): \n",
      "37": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, ^ ): \n",
      "38": "num_latent: Optional[int] = None, noise_variance: float = 1.0, \n ): \n",
      "39": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ):",
      "40": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ): ^",
      "41": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, ): \n",
      "42": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, \n ):",
      "43": "num_latent: Optional[int] = None, noise_variance: float = 1.0, \n ): \n",
      "44": "num_latent: Optional[int] = None, noise_variance: float = 1.0, \n ): \n",
      "45": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, ): \n",
      "46": "num_latent: Optional[int] = None, ^ noise_variance: float = 1.0, \n ): \n",
      "47": "num_latent: Optional[int] = None, \n noise_variance: float = 1, \n ): \n",
      "48": "num_latent: Optional[int] = None, \n noise_variance: float = 1.0, ): \n",
      "49": "num_latent: Optional[int] = None, noise_variance: float = 1.0, \n ): \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        entity_size: int,\n        organization_id: int = None,\n        file_type: FileType = \"zip\",\n",
    "target_code": "        entity_size: int,\n        organization_id: T.Optional[T.Union[str, int]] = None,\n        file_type: FileType = \"zip\",\n",
    "warning_line": "        organization_id: int = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " organization_id is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mapillary/mapillary_tools",
    "source_filename": "mapillary_tools/upload_api_v4.py",
    "target_filename": "mapillary_tools/upload_api_v4.py",
    "source_changeid": "79159001d365c75215f0c05ba3b7937180563026^",
    "target_changeid": "79159001d365c75215f0c05ba3b7937180563026",
    "predictions": [
      "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n"
    ],
    "correct": false,
    "top_five": {
      "0": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "1": "entity_size: int, \n organization_id: int, \n file_type: FileType = \"zip\", \n",
      "2": "entity_size: int, <DED> organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "3": "entity_size: int, <IND> organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "4": "entity_size: int, \n organization_id: Optional[int] = None, <IND> file_type: FileType = \"zip\", \n",
      "5": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", <IND>",
      "6": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", <DED>",
      "7": "entity_size: int, \n organization_id: Optional[int] = None, <DED> file_type: FileType = \"zip\", \n",
      "8": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", {",
      "9": "entity_size: int, \n organization_id: Optional[int] = None, { file_type: FileType = \"zip\", \n",
      "10": "entity_size: int, { organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "11": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", }",
      "12": "entity_size: int, \n organization_id: Optional[int] = None, } file_type: FileType = \"zip\", \n",
      "13": "entity_size: int, } organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "14": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \\",
      "15": "entity_size: int, \\ organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "16": "entity_size: int, \n organization_id: Optional[int] = None, \\ file_type: FileType = \"zip\", \n",
      "17": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "18": "entity_size: int, organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "19": "entity_size: int, \n organization_id: Optional[int] = None, file_type: FileType = \"zip\", \n",
      "20": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "21": "entity_size: int, organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "22": "entity_size: int, \n organization_id: Optional[int] = None, file_type: FileType = \"zip\", \n",
      "23": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "24": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "25": "entity_size: int, \n organization_id: Optional[int] = None, file_type: FileType = \"zip\", \n",
      "26": "entity_size: int, organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "27": "entity_size: int, organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "28": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "29": "entity_size: int, \n organization_id: Optional[int] = None, file_type: FileType = \"zip\", \n",
      "30": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "31": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "32": "entity_size: int, \n organization_id: Optional[int] = None, file_type: FileType = \"zip\", \n",
      "33": "entity_size: int, \n organization_id: Optional[int] = None, file_type: FileType = \"zip\", \n",
      "34": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", ^",
      "35": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "36": "entity_size: int, organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "37": "entity_size: int, organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "38": "entity_size: int, \n organization_id: Optional[int] = None, file_type: FileType = \"zip\", \n",
      "39": "entity_size: int, \n organization_id: Optional[int] = None, ^ file_type: FileType = \"zip\", \n",
      "40": "entity_size: int, organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "41": "entity_size: int, \n organization_id: Optional[int] = None, file_type: FileType = \"zip\", \n",
      "42": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "43": "entity_size: int, ^ organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "44": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "45": "entity_size: int, \n organizational_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "46": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "47": "entity_size: int, organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n",
      "48": "entity_size: int, \n organization_id: Optional[int] = None, \n file_type: FileType = \"zip\",",
      "49": "entity_size: int, organization_id: Optional[int] = None, \n file_type: FileType = \"zip\", \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:\n        <IND>result: Optional[typ] = self.properties.get(prop_name)\n        if result is not None:\n",
    "target_code": "\n    def _get_property(self, prop_name: str, typ: Type[P]) -> Optional[P]:\n        <IND>result = self.properties.get(prop_name)\n        if result is not None:\n",
    "warning_line": "    def _get_property(self, prop_name: str, typ: Type[P] = Type[Any]) -> Optional[P]:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " typ is declared to have type `Type[Variable[P]]` but is used as type `object`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 31,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "stac-utils/pystac",
    "source_filename": "pystac/extensions/base.py",
    "target_filename": "pystac/extensions/base.py",
    "source_changeid": "01c924a9de5dbef23ca82e6c9516b01351a6d752^",
    "target_changeid": "01c924a9de5dbef23ca82e6c9516b01351a6d752",
    "predictions": [
      "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "1": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "2": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <DED> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "3": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <DED> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "4": "\n def _get_property(self, prop_name: str, typ: Type[P] = Optional[Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "5": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "6": "\n def _get_property(self, prop_name: str, typ: Type[P], Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "7": "\n def _get_property(self, prop_name: str, typ: Optional[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "8": "<DED> def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "9": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n \n result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "10": "<DED> def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "11": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P]] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "12": "<IND> def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "13": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n \n result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "14": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "15": "<IND> def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "16": "\n def _get_property(self, prop_name: str, typ: Type[P] = [] \n ) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "17": "\n def _get_property(self, prop_name: str, typ: Type[P] = Optional[Any]) -> None: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "18": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "19": "\n def _get_property(self, prop_name: str, typ: Type[P] = Optional[P]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "20": "\n def _get_property(self, prop_name: str, typ: Type[P], Optional[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "21": "\n def _get_property(self, prop_name: str, typ: Type[P] = Optional[Any]) -> Optional[P]: \n <DED> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "22": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "23": "\n def _get_property(self, prop_name: str, typ: Optional[Type[P] = Any) -> Optional[P]: \n <DED> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "24": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n { result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "25": "\n def _get_property(self, prop_name: str, typ: Type[P], Any]) -> Optional[P]: \n <DED> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "26": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n } result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "27": "\n def _get_property(self, prop_name: str, typ: Any = Type[P]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "28": "\n def _get_property(self, prop_name: str, typ: Type[P] = []) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "29": "\n def _get_property(self, prop_name: str, typ: Type[P] = (Optional[P]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "30": "\n def _get_property(self, prop_name: str, typ: Type[P] = Anything) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "31": "\n def _get_property(self, prop_name: str, typ: Type[P] = ()) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "32": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n { result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "33": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n } result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "34": "\n def _get_property(self, prop_name: str, typ: Optional[P] = None) -> Optional[P]: \n <DED> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "35": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: typ = self.properties.get(prop_name) \n if result is not None: \n",
      "36": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[type] = self.properties.get(prop_name) \n if result is not None: \n",
      "37": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result: typ = self.properties.get(prop_name) \n if result is not None: \n",
      "38": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties[prop_name] \n if result is not None: \n",
      "39": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties[prop_name] \n if result is not None: \n",
      "40": "\n def _get_property(self, prop_name: str, typ: Type[P] = (Any)) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "41": "\n def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: 'prop_name' = self.properties.get(prop_name) \n if result is not None: \n",
      "42": "<DED> def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <DED> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "43": "\n def _get_property(self, prop_name: str, typ: Type[P] = None) -> Optional[P]: \n <IND> result: Optional[type] = self.properties.get(prop_name) \n if result is not None: \n",
      "44": "\n def _get_property(self, prop_name: str, typ: Type[P, Any]) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "45": "\n def _get_property(self, prop_name: str, typ: Type[P] = ANY) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "46": "{ def _get_property(self, prop_name: str, typ: Type[P] = Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "47": "\n def _get_property(self, prop_name: str, typ: Optional[P] = None) -> None: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n",
      "48": "\n def _get_property(self, prop_name: str, typ: Type[P], Any]) -> Optional[P]: \n <IND> result = self.properties.get(prop_name) \n if result is not None: \n",
      "49": "\n def _get_property(self, prop_name: str, typ: Any) -> Optional[P]: \n <IND> result: Optional[typ] = self.properties.get(prop_name) \n if result is not None: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (int, int) -> None\n        <IND>final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "target_code": "    <DED>def connect(self, network_timeout=None, network_max_retries=None):\n        # type: (Optional[int], Optional[int]) -> None\n        <IND>final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout\n",
    "warning_line": "    def connect(self, network_timeout=None, network_max_retries=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " network_max_retries is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 206,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nabla-c0d3/sslyze",
    "source_filename": "sslyze/utils/ssl_connection.py",
    "target_filename": "sslyze/utils/ssl_connection.py",
    "source_changeid": "761c458b2207abc530b430e56d26bced6e4b9714^",
    "target_changeid": "761c458b2207abc530b430e56d26bced6e4b9714",
    "predictions": [
      "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "1": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "2": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "3": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "4": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "5": "<IND> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "6": "<IND> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "7": "<DED> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "8": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n { final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "9": "<IND> def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "10": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n } final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "11": "\n def connect(self, network_timeout=None, network_max_retries=None) -> None: \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "12": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "13": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n \\ final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "14": "{ def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "15": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: Optional[int], Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "16": "{ def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "17": "} def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "18": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "19": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "20": "} def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "21": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "22": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "23": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "24": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "25": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "26": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "27": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "28": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "29": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "30": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "31": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "32": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "33": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "34": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "35": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "36": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None <IND> <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "37": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "38": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "39": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "40": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "41": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "42": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "43": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: Optional[int], Optional[int]) -> None \n \n final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "44": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout <IND>",
      "45": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout <DED>",
      "46": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout \n",
      "47": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout <IND>",
      "48": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <DED> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout <DED>",
      "49": "\n def connect(self, network_timeout=None, network_max_retries=None): \n # type: (Optional[int], Optional[int]) -> None \n <IND> final_timeout = self.NETWORK_TIMEOUT if network_timeout is None else network_timeout {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED><DED>_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: weakref.WeakValueDictionary({})))\n\n",
    "target_code": "<DED><DED>_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (\n    collections.defaultdict(lambda: {}))\n\n",
    "warning_line": "_intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = (",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " _intern_pool is declared to have type `Dict[TypingType[typing.Any], Dict[typing.Any, typing.Any]]` but is used as type `typing.DefaultDict[Variable[collections._KT], weakref.WeakValueDictionary[Variable[weakref._KT], Variable[weakref._VT]]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 309,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/federated",
    "source_filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "target_filename": "tensorflow_federated/python/core/impl/types/computation_types.py",
    "source_changeid": "83e2310074df01d2a3b446a8e1c508d79a549119^",
    "target_changeid": "83e2310074df01d2a3b446a8e1c508d79a549119",
    "predictions": [
      "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "1": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "2": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "3": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "4": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n \n ))) \n \n",
      "5": "\n <IND> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "6": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n \n ))) \n \n",
      "7": "\n <IND> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "8": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "9": "\n <IND> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "10": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "11": "\n <IND> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "12": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "13": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "14": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n } ))) \n \n",
      "15": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n { ))) \n \n",
      "16": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n } ))) \n \n",
      "17": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n { ))) \n \n",
      "18": "\n <IND> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n \n ))) \n \n",
      "19": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( <DED> <DED> ))) \n \n",
      "20": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( <IND> <DED> ))) \n \n",
      "21": "\n <IND> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n \n ))) \n \n",
      "22": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( \n \n ))) \n \n",
      "23": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( \n \n ))) \n \n",
      "24": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( <DED> <DED> ))) \n \n",
      "25": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( <IND> <DED> ))) \n \n",
      "26": "\n \n _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "27": "\n <IND> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "28": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( <DED> <IND> ))) \n \n",
      "29": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( <IND> <IND> ))) \n \n",
      "30": "\n <IND> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "31": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "32": "\n \n _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "33": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n \\ ))) \n \n",
      "34": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( <DED> <IND> ))) \n \n",
      "35": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( <IND> <IND> ))) \n \n",
      "36": "<DED> <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "37": "\n \n _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "38": "\n <DED> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n \\ ))) \n \n",
      "39": "<IND> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "40": "\n <IND> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "41": "\n <IND> _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda, weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "42": "<DED> <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "43": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( { <DED> ))) \n \n",
      "44": "\n <IND> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n } ))) \n \n",
      "45": "\n \n _intern_pool: Dict[TypingType[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <IND> ))) \n \n",
      "46": "\n <DED> _intern_pool: Dict[Any, Any] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "47": "\n <IND> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n { ))) \n \n",
      "48": "\n <DED> _intern_pool: Dict[TYPE[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n \n",
      "49": "\n <DED> _intern_pool: Dict[typing.Type[Any], Dict[Any, Any]] = ( \n collections.defaultdict(lambda: weakref.WeakValueDictionary( \n <DED> ))) \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    scale_factor: float,\n    fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit],\n    fold_method_args: Tuple[Any] = (),\n    **kwargs,\n",
    "target_code": "    scale_factor: float,\n    fold_method: Callable[..., Circuit],\n    fold_method_args: Optional[Tuple[Any]] = None,\n    **kwargs,\n",
    "warning_line": "    fold_method_args: Tuple[Any] = (),",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " fold_method_args is declared to have type `Tuple[typing.Any]` but is used as type `Tuple[]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 789,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unitaryfund/mitiq",
    "source_filename": "mitiq/zne/scaling.py",
    "target_filename": "mitiq/zne/scaling.py",
    "source_changeid": "bac97a396e5570f4884b62ba9094466a3bb881cc^",
    "target_changeid": "bac97a396e5570f4884b62ba9094466a3bb881cc",
    "predictions": [
      "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "1": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "2": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "3": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Tuple[Any]] = (), \n **kwargs, \n",
      "4": "scale_factor: float, \n fold_method: Optional[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "5": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "6": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), <DED> **kwargs, \n",
      "7": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), <IND> **kwargs, \n",
      "8": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "9": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, <DED>",
      "10": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, <IND>",
      "11": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], <IND> fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "12": "scale_factor: float, <DED> fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "13": "scale_factor: float, <IND> fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "14": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], <DED> fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "15": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, {",
      "16": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), { **kwargs, \n",
      "17": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], { fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "18": "scale_factor: float, { fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "19": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any], \n **kwargs, \n",
      "20": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Optional[Tuple[Any]] = None, \n **kwargs, \n",
      "21": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: tuple[Any] = (), \n **kwargs, \n",
      "22": "scale_factor: float, \n fold_method: Union[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "23": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, }",
      "24": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), } **kwargs, \n",
      "25": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], } fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "26": "scale_factor: float, } fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "27": "scale_factor: float, \n fold_method: Optional[Circuit, float, Tuple[Any], Circuit], \n fold_method_args: Optional[Tuple[Any]] = (), \n **kwargs, \n",
      "28": "scale_factor: float, \n fold_method: Tuple[Any, Any] = (), \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "29": "scale_factor: float, \n fold_method: Union[Circuit, float, Tuple[Any], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "30": "scale_factor: float, \n fold_method: Tuple[Any] = (), \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "31": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Union[Tuple[Any]] = (), \n **kwargs, \n",
      "32": "scale_factor: float, \n fold_method: Union[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Union[Tuple[Any]] = (), \n **kwargs, \n",
      "33": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any], Circuit], \n fold_method_args: Tuple[Any], \n **kwargs, \n",
      "34": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \\",
      "35": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \\ **kwargs, \n",
      "36": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \\ fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "37": "scale_factor: float, \\ fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "38": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: '' = (), \n **kwargs, \n",
      "39": "scale_factor: float, \n fold_method: Union[Circuit, float, Tuple[Any], Circuit], \n fold_method_args: Union[Tuple[Any]] = (), \n **kwargs, \n",
      "40": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs,",
      "41": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "42": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "43": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), **kwargs, \n",
      "44": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs,",
      "45": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "46": "scale_factor: float, fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), \n **kwargs, \n",
      "47": "scale_factor: float, \n fold_method: Callable[[Circuit, float, Tuple[Any]], Circuit], \n fold_method_args: Tuple[Any] = (), **kwargs, \n",
      "48": "scale_factor: float, \n fold_method: 'Circuit, float, Tuple[Any], Circuit], \n fold_method_args: 'Tuple[Any]] = (), \n **kwargs, \n",
      "49": "scale_factor: float, \n fold_method: 'Circuit, float, Tuple[Any], Circuit], \n fold_method_args: 'Tuple[Any]' = (), \n **kwargs, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        gw: \"Gateway\" = None,\n        dev_info: SubDeviceInfo = None,\n        model_info: Optional[Dict] = None,\n",
    "target_code": "        self,\n        gw: \"Gateway\",\n        dev_info: SubDeviceInfo,\n        model_info: Optional[Dict] = None,\n",
    "warning_line": "        gw: \"Gateway\" = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " gw is declared to have type `Gateway` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rytilahti/python-miio",
    "source_filename": "miio/gateway/devices/subdevice.py",
    "target_filename": "miio/gateway/devices/subdevice.py",
    "source_changeid": "6453bfee512150e3f062670e890533fcd67067ea^",
    "target_changeid": "6453bfee512150e3f062670e890533fcd67067ea",
    "predictions": [
      "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "1": "self, \n gw: \"Gateway\", \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "2": "self, \n gw: Optional[Gateway] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "3": "self, \n gw: Optional[\"Gateway\", \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "4": "self, \n gw: \"Gateway\", \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "5": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: SubDeviceInfo = None, \n model_info: Optional[Dict] = None, \n",
      "6": "self, \n gw: Optional[\"Gateway\", <DED> dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "7": "self, \n gw: Optional[\"Gateway\", <IND> dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "8": "self, \n gw: Optional[\"Gateway\", { dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "9": "self, \n gw = None, \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "10": "self, \n gw: Optional[\"Gateway\", } dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "11": "self, <DED> gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "12": "self, \n gw = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "13": "self, <IND> gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "14": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, <IND> model_info: Optional[Dict] = None, \n",
      "15": "self, \n gw: Optional['Gateway'] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "16": "self, \n gw: Optional[\"Gateway\"] = None, <IND> dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "17": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict[str, str]] = None, \n",
      "18": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, <DED> model_info: Optional[Dict] = None, \n",
      "19": "self, \n gw: Optional[\"Gateway\"] = None, <DED> dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "20": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, <IND>",
      "21": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, <DED>",
      "22": "self, \n gw: Union[Gateway, None] = None, \n dev_info: SubDeviceInfo = None, \n model_info: Optional[Dict] = None, \n",
      "23": "self, \n gw: Optional[\"Gateway,\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "24": "self, \n gw = None, \n dev_info: SubDeviceInfo = None, \n model_info: Optional[Dict] = None, \n",
      "25": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, { model_info: Optional[Dict] = None, \n",
      "26": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, {",
      "27": "self, \n gw: 'Gateway', \n dev_info: SubDeviceInfo, \n model_info: Optional[Dict] = None, \n",
      "28": "self, \n gw: Optional[\"Gateway\", \\ dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "29": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "30": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "31": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "32": "self, \n gw: Optional[\"Gateway\"] = None, \n dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, }",
      "33": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "34": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "35": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "36": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "37": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "38": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "39": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "40": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "41": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "42": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "43": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "44": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "45": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "46": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "47": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "48": "self, \n gw: Optional[\"Gateway\", ^ dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n",
      "49": "self, \n gw: Optional[\"Gateway\", dev_info: Optional[SubDeviceInfo] = None, \n model_info: Optional[Dict] = None, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        dev: FlairDataset = DataPairDataset(\n            dev_file,\n",
    "target_code": "\n        dev = DataPairDataset(\n            dev_file,\n",
    "warning_line": "        dev: FlairDataset = DataPairDataset(",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " dev is declared to have type `FlairDataset` but is used as type `typing.Optional[DataPairDataset]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 282,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/datasets/text_text.py",
    "target_filename": "flair/datasets/text_text.py",
    "source_changeid": "700f11ccd1f1c429daeab8512f42dad30a01401f^",
    "target_changeid": "700f11ccd1f1c429daeab8512f42dad30a01401f",
    "predictions": [
      "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "1": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "2": "\n dev: Union[FlairDataset and DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "3": "\n dev: Union[FlairDataset, DataPairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "4": "\n dev: DataPairDataset = DataPairDataset( \n dev_file, \n",
      "5": "\n dev: Union[DataPairDataset, FlairDataset] = DataPairDataset( \n dev_file, \n",
      "6": "<DED> dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "7": "<IND> dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "8": "<DED> dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "9": "\n dev: Union[FlairDataset, DataPairDataset) = DataPairDataset( \n dev_file, \n",
      "10": "<IND> dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "11": "\n dev: Set[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "12": "\n dev: Union[Flair, DataPairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "13": "\n dev: FAIR_DATASET = DataPairDataset( \n dev_file, \n",
      "14": "\n dev: typing.FlairDataset = DataPairDataset( \n dev_file, \n",
      "15": "\n dev: Union[FlairDataset, DataPairDataset( \n dev_file, \n",
      "16": "{ dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "17": "\n dev: Union[FlairDataset.DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "18": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( <IND> dev_file, \n",
      "19": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( <DED> dev_file, \n",
      "20": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, <IND>",
      "21": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, <DED>",
      "22": "} dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "23": "\n dev: Tuple[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "24": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, {",
      "25": "\n dev: Union[FlagDataset, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "26": "\n dev: Union[Flair, DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "27": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( { dev_file, \n",
      "28": "\n dev: FlairDataset = DataPairDataset( \n dev_file, \n",
      "29": "\n dev: List[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "30": "\n dev: 'FlairDataset' = DataPairDataset( \n dev_file, \n",
      "31": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, }",
      "32": "{ dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "33": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( } dev_file, \n",
      "34": "\n dev: bool = DataPairDataset( \n dev_file, \n",
      "35": "\n dev: Optional[FlairDataset] = DataPairDataset( <IND> dev_file, \n",
      "36": "\n dev: Optional[FlairDataset] = DataPairDataset( <DED> dev_file, \n",
      "37": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, <IND>",
      "38": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, <DED>",
      "39": "} dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, \n",
      "40": "\n dev: typing.FlairDataset = DataPairDataset( \n dev_file, \n",
      "41": "\n dev: Optional[FlairDataset] = DataPairDataset( \n dev_file, {",
      "42": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file, \\",
      "43": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \\ dev_file, \n",
      "44": "\n dev: Optional[FlairDataset] = DataPairDataset( { dev_file, \n",
      "45": "\n dev: File.FlairDataset = DataPairDataset( \n dev_file, \n",
      "46": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( \n dev_file,",
      "47": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset( dev_file, \n",
      "48": "\n dev: Set[DataPairDataset] = DataPairDataset( \n dev_file, \n",
      "49": "\n dev: Union[FlairDataset, DataPairDataset] = DataPairDataset() \n dev_file, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None\n    ) -> None:\n",
    "target_code": "        self,\n        potential_providers: Optional[Sequence[Union[Callable[..., BaseProvider],\n                                      Type[BaseProvider]]]] = None\n    ) -> None:\n",
    "warning_line": "        potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " potential_providers is declared to have type `Sequence[Union[typing.Callable[..., web3.providers.base.BaseProvider], Type[web3.providers.base.BaseProvider]]]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 77,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ethereum/web3.py",
    "source_filename": "web3/providers/auto.py",
    "target_filename": "web3/providers/auto.py",
    "source_changeid": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1^",
    "target_changeid": "aa30b3bf97d67b8434cb399c659d8b6425a9bec1",
    "predictions": [
      "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "1": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "2": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [0] \n ) -> None: \n",
      "3": "self, \n potential_providers: Sequence[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "4": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ( \n ) -> None: \n",
      "5": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = None \n ) -> None: \n",
      "6": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=[] \n ) -> None: \n",
      "7": "self, \n potential_providers: Sequence[Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "8": "self, \n potential_providers: Sequence[Union[Callable[...], BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "9": "self, \n potential_providers: Sequence[Union[Callable[...], BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "10": "self, <IND> potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "11": "self, <DED> potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "12": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None <IND> ) -> None: \n",
      "13": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = () \n ) -> None: \n",
      "14": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None <DED> ) -> None: \n",
      "15": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: <IND>",
      "16": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: <DED>",
      "17": "self, { potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "18": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None { ) -> None: \n",
      "19": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: {",
      "20": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ( <DED> ) -> None: \n",
      "21": "self, <IND> potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "22": "self, <DED> potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "23": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ( <IND> ) -> None: \n",
      "24": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] <IND> ) -> None: \n",
      "25": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: <IND>",
      "26": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] <DED> ) -> None: \n",
      "27": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None } ) -> None: \n",
      "28": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: <DED>",
      "29": "self, } potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "30": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: }",
      "31": "self, { potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "32": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ( { ) -> None: \n",
      "33": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] { ) -> None: \n",
      "34": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: {",
      "35": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [0], \n ) -> None: \n",
      "36": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [], \n ) -> None: \n",
      "37": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ( } ) -> None: \n",
      "38": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] } ) -> None: \n",
      "39": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]='' \n ) -> None: \n",
      "40": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: }",
      "41": "self, } potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "42": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=() \n ) -> None: \n",
      "43": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=False \n ) -> None: \n",
      "44": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \\ ) -> None: \n",
      "45": "self, \n potential_providers: Sequence[Callable[..., BaseProvider], Type[BaseProvider]]] = [] \n ) -> None: \n",
      "46": "self, \\ potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \n",
      "47": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=None \n ) -> None: \\",
      "48": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]] = ( \\ ) -> None: \n",
      "49": "self, \n potential_providers: Sequence[Union[Callable[..., BaseProvider], Type[BaseProvider]]]=\"\" \n ) -> None: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def __get__(self, instance: object, owner: type = None) -> Any:\n        <IND>if instance is None:\n            <IND>return self\n        <DED>result = instance.config[self.key]  # type: ignore\n        if self.converter is not None:\n",
    "target_code": "\n    <DED>def __get__(self, instance: Any, owner: Any = None) -> Any:\n        <IND>if instance is None:\n            <IND>return self\n        <DED>result = instance.config[self.key]\n        if self.converter is not None:\n",
    "warning_line": "    def __get__(self, instance: object, owner: type = None) -> Any:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " owner is declared to have type `typing.Type[typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 66,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pgjones/quart",
    "source_filename": "src/quart/config.py",
    "target_filename": "src/quart/config.py",
    "source_changeid": "c6905c0abe702031e79520c1474f2996657bd245^",
    "target_changeid": "c6905c0abe702031e79520c1474f2996657bd245",
    "predictions": [
      "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "1": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "2": "\n <DED> def __get__( \n self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "3": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n \n result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "4": "\n <DED> def __get__( \n self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "5": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <DED> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "6": "\n <IND> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "7": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "8": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <DED> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "9": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <DED> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "10": "\n <IND> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "11": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "12": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <DED> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "13": "\n <DED> def __get__( \n self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <IND> return self \n \n result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "14": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "15": "\n <DED> def __get__(self, instance: object, owner: Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "16": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "17": "\n <DED> def __get__( \n self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <DED> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "18": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n \n return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "19": "\n <IND> def __get__( \n self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "20": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <DED> return self \n \n result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "21": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n \n if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "22": "\n <IND> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n \n result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "23": "\n <DED> def __get__(self, instance: object, owner: type = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "24": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n \n return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "25": "\n <DED> def __get__( \n self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <DED> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "26": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <DED> if instance is None: \n <IND> return self \n \n result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "27": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n { result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "28": "\n <IND> def __get__( \n self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "29": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n \n if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "30": "\n <IND> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <DED> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "31": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> return self \n \n result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "32": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n } result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "33": "\n \n def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "34": "\n <DED> def __get__(self, instance: object, owner: Type[Any] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "35": "\n <DED> def __get__(self, instance: object, owner: type: Optional[Any]) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "36": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <DED> if instance is None: \n <DED> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "37": "\n <IND> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <DED> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "38": "\n <DED> def __get__(self, instance: object, owner: type: typing.Optional[Any]) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "39": "\n <IND> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <DED> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "40": "\n <IND> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "41": "\n <DED> def __get__(self, instance: object, owner: Type[Any] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "42": "\n <DED> def __get__(self, instance: object, owner: type: Optional[Any]) -> Any: \n <IND> if instance is None: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "43": "\n <DED> def __get__( <DED> self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "44": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <DED> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "45": "\n <DED> def __get__(self, instance: object, owner: type = []) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "46": "\n <DED> def __get__(self, instance: object, owner: type: typing.Optional[type] = None) -> Any: \n <IND> if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "47": "\n <DED> def __get__( <IND> self, instance: object, owner: typing.Optional[type] = None \n if instance is None: \n <IND> return self \n <DED> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "48": "\n <IND> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <IND> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n",
      "49": "\n <DED> def __get__(self, instance: object, owner: typing.Optional[type] = None) -> Any: \n <DED> return self \n <IND> result = instance.config[self.key] # type: ignore \n if self.converter is not None: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# These can just be looked up directly.\nSPECIAL = None  # type: Generator\nOVERLAYS = None  # type: Generator\n\n",
    "target_code": "# These can just be looked up directly.\nSPECIAL: 'Generator'\nOVERLAYS: 'Generator'\n\n",
    "warning_line": "OVERLAYS = None  # type: Generator",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " OVERLAYS is declared to have type `Generator` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "BEEmod/BEE2.4",
    "source_filename": "src/texturing.py",
    "target_filename": "src/texturing.py",
    "source_changeid": "9c954a1e1cff2055f39654d8495cca466e41c8a6^",
    "target_changeid": "9c954a1e1cff2055f39654d8495cca466e41c8a6",
    "predictions": [
      "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "1": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None \n \n",
      "2": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS = None # type: Optional[Generator] \n \n",
      "3": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "4": "# These can just be looked up directly. \n SPECIAL: Generator \n OVERLAYS: Generator \n \n",
      "5": "# They can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "6": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n <IND>",
      "7": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n <DED>",
      "8": "# These can just be looked up directly. \n SPECIAL: Generator \n OVERLAYS: Generator \n \n",
      "9": "# These can just be looked up directly. \n SPECIAL: 'Generator' <IND> OVERLAYS: 'Generator' \n \n",
      "10": "# These can just be looked up directly. \n SPECIAL: 'Generator' <DED> OVERLAYS: 'Generator' \n \n",
      "11": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' <IND> \n",
      "12": "# These can just be looked up directly. <IND> SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "13": "# These can just be looked up directly. <DED> SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "14": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' <DED> \n",
      "15": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS: Optional[Generator] \n \n",
      "16": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n {",
      "17": "# These can just be looked up directly. \n SPECIAL: 'Generator' { OVERLAYS: 'Generator' \n \n",
      "18": "# These can just be looked up directly. { SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "19": "# These can just be looked up directly. \n SPECIAL = None # type: 'Generator' \n OVERLAYS = None # type: 'Generator' \n \n",
      "20": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' { \n",
      "21": "# They can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None \n \n",
      "22": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n }",
      "23": "# These can just be looked up directly. \n SPECIAL: 'Generator' } OVERLAYS: 'Generator' \n \n",
      "24": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None <IND> OVERLAYS: Optional[Generator] = None \n \n",
      "25": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' } \n",
      "26": "# These can just be looked up directly. \n SPECIAL: \"Generator\" \n OVERLAYS: \"Generator\" \n \n",
      "27": "# These can just be looked up directly. } SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "28": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None <DED> OVERLAYS: Optional[Generator] = None \n \n",
      "29": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None <IND> \n",
      "30": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None \n <IND>",
      "31": "# These can just be looked up directly. \n SPECIAL: Optimal[Generator] \n OVERLAYS: Optimal[Generator] \n \n",
      "32": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS = None # type: Optional[Generator] \n <IND>",
      "33": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None \n <DED>",
      "34": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None <DED> \n",
      "35": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS = None # type: Optional[Generator] \n <DED>",
      "36": "# These can just be looked up directly. \n SPECIAL: Generator \n OVERLAYS: 'Generator' \n \n",
      "37": "# These can just be looked up directly. \n SPECIAL: 'Generator' \\ OVERLAYS: 'Generator' \n \n",
      "38": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \\",
      "39": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \\ \n",
      "40": "# These can just be looked up directly. \\ SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "41": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS = None # type: Optional[Generator] <IND> \n",
      "42": "# These can just be looked up directly. \n SPECIAL: Optional[Generator] = None \n OVERLAYS: Optional[Generator] = None { \n",
      "43": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS = None # type: Optional[Generator] <DED> \n",
      "44": "# These can just be looked up directly. \n SPECIAL: ___ \n OVERLAYS: ___ \n \n",
      "45": "# These can just be looked up directly. \n SPECIAL: 'Generator' OVERLAYS: 'Generator' \n \n",
      "46": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n",
      "47": "# These can just be looked up directly. \n SPECIAL = None # type: Optional[Generator] \n OVERLAYS = None # type: Optional[Generator] \n {",
      "48": "# These can just be looked up directly. SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n \n",
      "49": "# These can just be looked up directly. \n SPECIAL: 'Generator' \n OVERLAYS: 'Generator' \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>def object(self,\n               symbol_name: str = None,\n               type_name: str = None,\n               offset: int = None,\n",
    "target_code": "    <IND>def object(self,\n               symbol_name: str,\n               type_name: str,\n               offset: int = None,\n",
    "warning_line": "               type_name: str = None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " type_name is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 121,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/contexts/__init__.py",
    "target_filename": "volatility/framework/contexts/__init__.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "<DED> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "1": "\n def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "2": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "3": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "4": "<IND> def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "5": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "6": "{ def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "7": "} def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \n",
      "8": "{ def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "9": "} def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "10": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "11": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "12": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "13": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "14": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "15": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "16": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "17": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "18": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, { offset: int = None, \n",
      "19": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, {",
      "20": "\\ def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "21": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Optional[int] = None, \n",
      "22": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, { offset: int = None, \n",
      "23": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, {",
      "24": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <IND> offset: int = None, \n",
      "25": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, <DED> offset: int = None, \n",
      "26": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Optional[int] = None, \n",
      "27": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <DED>",
      "28": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, <IND>",
      "29": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "30": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, } offset: int = None, \n",
      "31": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, }",
      "32": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "33": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, } offset: int = None, \n",
      "34": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, }",
      "35": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, { offset: int = None, \n",
      "36": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, {",
      "37": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Optional[int] = None, \n",
      "38": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: Int = None, \n",
      "39": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, } offset: int = None, \n",
      "40": "<IND> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, }",
      "41": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \\",
      "42": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \\ offset: int = None, \n",
      "43": "def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "44": "def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "45": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None, \\",
      "46": "def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "47": "\n def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \\ offset: int = None, \n",
      "48": "def object(self, \n symbol_name: str, \n type_name: str, \n offset: int = None, \n",
      "49": "<DED> def object(self, \n symbol_name: Optional[str] = None, \n type_name: Optional[str] = None, \n offset: int = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    min_size=0,   # type: int\n    average_size=None,   # type: int\n    max_size=None  # type: int\n",
    "target_code": "    min_size=0,   # type: int\n    average_size=None,   # type: None\n    max_size=None  # type: int\n",
    "warning_line": "    average_size=None,   # type: int",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " average_size is declared to have type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 940,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "HypothesisWorks/hypothesis",
    "source_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "target_filename": "hypothesis-python/src/hypothesis/strategies.py",
    "source_changeid": "928e57554754bc780ee307835688cc752a386743^",
    "target_changeid": "928e57554754bc780ee307835688cc752a386743",
    "predictions": [
      "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int \n"
    ],
    "correct": true,
    "top_five": {
      "0": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int \n",
      "1": "min_size=0, # type: int \n average_size=None, # type: Optional[int] \n max_size=None # type: int \n",
      "2": "min_size=0, # type: int \n average_size=None, # type: None <IND> max_size=None # type: int \n",
      "3": "min_size=0, # type: int \n average_size=None, # type: None <DED> max_size=None # type: int \n",
      "4": "min_size=0, # type: int <IND> average_size=None, # type: None \n max_size=None # type: int \n",
      "5": "min_size=0, # type: int <DED> average_size=None, # type: None \n max_size=None # type: int \n",
      "6": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int <IND>",
      "7": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int <DED>",
      "8": "min_size=0, # type: int \n average_size=None, # type: none \n max_size=None # type: int \n",
      "9": "min_size=0, # type: int \n average_size=None, # type: None { max_size=None # type: int \n",
      "10": "min_size=0, # type: int { average_size=None, # type: None \n max_size=None # type: int \n",
      "11": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int {",
      "12": "min_size=0, # type: int \n average_size=None, # type: None } max_size=None # type: int \n",
      "13": "min_size=0, # type: int } average_size=None, # type: None \n max_size=None # type: int \n",
      "14": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int }",
      "15": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: Optional[int] \n",
      "16": "min_size=0, # type: int \n average_size=NONE, # type: None \n max_size=None # type: int \n",
      "17": "min_size=0, # type: int \n average_size=None, # type: int \n max_size=None # type: int \n",
      "18": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int \\",
      "19": "min_size=0, # type: int \\ average_size=None, # type: None \n max_size=None # type: int \n",
      "20": "min_size=0, # type: int \n average_size=None, # type: None \\ max_size=None # type: int \n",
      "21": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int",
      "22": "min_size=0, # type: int average_size=None, # type: None \n max_size=None # type: int \n",
      "23": "min_size=0, # type: int \n average_size=None, # type: None max_size=None # type: int \n",
      "24": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int",
      "25": "min_size=0, # type: int average_size=None, # type: None \n max_size=None # type: int \n",
      "26": "min_size=0, # type: int \n average_size=None, # type: None max_size=None # type: int \n",
      "27": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int",
      "28": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int",
      "29": "min_size=0, # type: int \n average_size=None, # type: None max_size=None # type: int \n",
      "30": "min_size=0, # type: int average_size=None, # type: None \n max_size=None # type: int \n",
      "31": "min_size=0, # type: int average_size=None, # type: None \n max_size=None # type: int \n",
      "32": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int",
      "33": "min_size=0, # type: int \n average_size=None, # type: None max_size=None # type: int \n",
      "34": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int",
      "35": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: Int \n",
      "36": "min_size=0, # type: int average_size=None, # type: None \n max_size=None # type: int \n",
      "37": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int",
      "38": "min_size=0, # type: int \n average_size=None, # type: None max_size=None # type: int \n",
      "39": "min_size=0, # type: int average_size=None, # type: None \n max_size=None # type: int \n",
      "40": "min_size=0, # type: int average_size=None, # type: None \n max_size=None # type: int \n",
      "41": "min_size=0, # type: int \n average_size=None, # type: None max_size=None # type: int \n",
      "42": "min_size=0, # type: int \n average_size=None, # type: None ^ max_size=None # type: int \n",
      "43": "min_size=0, # type: int ^ average_size=None, # type: None \n max_size=None # type: int \n",
      "44": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int ^",
      "45": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int",
      "46": "min_size=0, # type: int average_size=None, # type: None \n max_size=None # type: int \n",
      "47": "min_size=0, # type: int \n average_size=None, # type: None max_size=None # type: int \n",
      "48": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int",
      "49": "min_size=0, # type: int \n average_size=None, # type: None \n max_size=None # type: int"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            )\n            embeddings = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "target_code": "            )\n            embeddings_path = cached_path(\n                f\"{base_path}{embeddings}/{embeddings}_s{size}.zip\", cache_dir=cache_dir\n",
    "warning_line": "            embeddings = cached_path(",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " embeddings is declared to have type `str` but is used as type `Path`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 2082,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/embeddings/token.py",
    "target_filename": "flair/embeddings/token.py",
    "source_changeid": "0b834f5167d11f06037398fcbe1554f244167e18^",
    "target_changeid": "0b834f5167d11f06037398fcbe1554f244167e18",
    "predictions": [
      ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n"
    ],
    "correct": false,
    "top_five": {
      "0": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "1": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "2": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <IND> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "3": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / \n embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "4": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / \n embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "5": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings \n / \n embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "6": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings \n / \n embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "7": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / \n embeddings <IND> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "8": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / <DED> embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "9": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <IND> / \n embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "10": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / <DED> embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "11": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings \n / \n embeddings <IND> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "12": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <IND> / \n embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "13": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <DED> _s \n size <DED>.zip\", cache_dir=cache_dir \n",
      "14": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings \n _s \n size <DED>.zip\", cache_dir=cache_dir \n",
      "15": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <DED> _s <DED> size \n.zip\", cache_dir=cache_dir \n",
      "16": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings <DED> / \n embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "17": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings \n _s <DED> size \n.zip\", cache_dir=cache_dir \n",
      "18": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings <DED> / \n embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "19": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / <DED> embeddings <IND> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "20": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <DED> _s \n size <IND>.zip\", cache_dir=cache_dir \n",
      "21": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <IND> / \n embeddings <IND> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "22": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / <IND> embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "23": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings \n _s \n size <IND>.zip\", cache_dir=cache_dir \n",
      "24": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / <IND> embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "25": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <IND> _s \n size <DED>.zip\", cache_dir=cache_dir \n",
      "26": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / <DED> embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "27": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <DED> _s <IND> size \n.zip\", cache_dir=cache_dir \n",
      "28": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / <DED> embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "29": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <IND> _s <DED> size \n.zip\", cache_dir=cache_dir \n",
      "30": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings <DED> / \n embeddings <IND> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "31": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / \n embeddings <DED> _s \n size <DED>.zip\", cache_dir=cache_dir \n",
      "32": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings \n / <DED> embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "33": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings \n _s <IND> size \n.zip\", cache_dir=cache_dir \n",
      "34": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings <IND> / \n embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "35": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / \n embeddings <IND> _s \n size <IND>.zip\", cache_dir=cache_dir \n",
      "36": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings \n / <DED> embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "37": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / \n embeddings \n _s \n size <DED>.zip\", cache_dir=cache_dir \n",
      "38": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings \n / <IND> embeddings <IND> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "39": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings <IND> / \n embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "40": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / \n embeddings <DED> _s <DED> size \n.zip\", cache_dir=cache_dir \n",
      "41": ") \n embeddings_path = cached_path( \n f\" \n base_path \n \n embeddings \n / \n embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "42": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings \n / \n embeddings <DED> _s \n size <DED>.zip\", cache_dir=cache_dir \n",
      "43": ") \n embeddings_path = cached_path( \n f\" \n base_path \n \n embeddings \n / \n embeddings \n _s \n size \n.zip\", cache_dir=cache_dir \n",
      "44": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings \n / \n embeddings \n _s \n size <DED>.zip\", cache_dir=cache_dir \n",
      "45": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / \n embeddings \n _s <DED> size \n.zip\", cache_dir=cache_dir \n",
      "46": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / \n embeddings <DED> _s \n size <IND>.zip\", cache_dir=cache_dir \n",
      "47": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / <DED> embeddings <IND> _s \n size \n.zip\", cache_dir=cache_dir \n",
      "48": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <IND> embeddings \n / \n embeddings <DED> _s <DED> size \n.zip\", cache_dir=cache_dir \n",
      "49": ") \n embeddings_path = cached_path( \n f\" \n base_path \n <DED> embeddings <DED> / <IND> embeddings <DED> _s \n size \n.zip\", cache_dir=cache_dir \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n            usd_volume: float = [\n                (\n",
    "target_code": "\n            usd_volume: List[float] = [\n                (\n",
    "warning_line": "            usd_volume: float = [",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " usd_volume is declared to have type `float` but is used as type `List[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 97,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "hummingbot/hummingbot",
    "source_filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "target_filename": "hummingbot/market/kraken/kraken_api_order_book_data_source.py",
    "source_changeid": "c161d968c3dc1ebebef317a5a426906318adf3a1^",
    "target_changeid": "c161d968c3dc1ebebef317a5a426906318adf3a1",
    "predictions": [
      "\n usd_volume: List[float] = [ \n ( \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n usd_volume: List[float] = [ \n ( \n",
      "1": "\n usd_volume: float = [ \n ( \n",
      "2": "\n usd_volume: list = [ \n ( \n",
      "3": "\n usd_volume: list[float] = [ \n ( \n",
      "4": "<DED> usd_volume: List[float] = [ \n ( \n",
      "5": "<IND> usd_volume: List[float] = [ \n ( \n",
      "6": "<DED> usd_volume: float = [ \n ( \n",
      "7": "\n usd_volume: List = [ \n ( \n",
      "8": "<IND> usd_volume: float = [ \n ( \n",
      "9": "\n usd_volume: List[float] = [ \n ( <IND>",
      "10": "\n usd_volume: List[float] = [ \n ( <DED>",
      "11": "{ usd_volume: List[float] = [ \n ( \n",
      "12": "\n usd_volume: List[float] = [ <IND> ( \n",
      "13": "\n usd_volume: List[float] = [ <DED> ( \n",
      "14": "\n usd_volume: List[float] = [ \n ( {",
      "15": "} usd_volume: List[float] = [ \n ( \n",
      "16": "\n usd_volume: List[float] = [ { ( \n",
      "17": "\n usd_volume: lists[float] = [ \n ( \n",
      "18": "\n usd_volume: List[float] = [ \n ( }",
      "19": "\n usd_volume: List[float] = [ } ( \n",
      "20": "<DED> usd_volume: list = [ \n ( \n",
      "21": "\n usd_volume: Optional[float] = [ \n ( \n",
      "22": "<DED> usd_volume: list[float] = [ \n ( \n",
      "23": "\n usd_volume: List[float, [] = [ \n ( \n",
      "24": "\n usd_volume: float = [ \n ( <DED>",
      "25": "\n usd_volume: float = [ \n ( <IND>",
      "26": "\\ usd_volume: List[float] = [ \n ( \n",
      "27": "<IND> usd_volume: list = [ \n ( \n",
      "28": "<IND> usd_volume: list[float] = [ \n ( \n",
      "29": "{ usd_volume: float = [ \n ( \n",
      "30": "\n usd_volume: List[float] = [ \n ( \\",
      "31": "\n usd_volume: float = [ <IND> ( \n",
      "32": "\n usd_volume: List[float] = [ \\ ( \n",
      "33": "\n usd_volume: float = [ <DED> ( \n",
      "34": "usd_volume: List[float] = [ \n ( \n",
      "35": "\n usd_volume: float = [ \n ( {",
      "36": "\n usd_volume: List[float] = [ \n (",
      "37": "} usd_volume: float = [ \n ( \n",
      "38": "\n usd_volume: List[float] = [ ( \n",
      "39": "usd_volume: List[float] = [ \n ( \n",
      "40": "usd_volume: List[float] = [ \n ( \n",
      "41": "usd_volume: List[float] = [ \n ( \n",
      "42": "\n usd_volume: List[float] = [ ( \n",
      "43": "usd_volume: List[float] = [ \n ( \n",
      "44": "\n usd_volume: List[float] = [ \n (",
      "45": "\n usd_volume: float = [ { ( \n",
      "46": "^ usd_volume: List[float] = [ \n ( \n",
      "47": "usd_volume: List[float] = [ \n ( \n",
      "48": "usd_volume: List[float] = [ \n ( \n",
      "49": "\n usd_volume: List[float] = [ \n ("
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, reason: str = None) -> None:\n        <IND>super(CommandFailed, self).__init__(reason)\n",
    "target_code": "\n    def __init__(self, reason: Optional[str] = None) -> None:\n        <IND>super(CommandFailed, self).__init__(reason)\n",
    "warning_line": "    def __init__(self, reason: str = None) -> None:",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " reason is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 28,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theacodes/nox",
    "source_filename": "nox/command.py",
    "target_filename": "nox/command.py",
    "source_changeid": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62^",
    "target_changeid": "4ea20511bb6362bd4dd7a35e7943e9c1f67b2d62",
    "predictions": [
      "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "1": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "2": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <DED> super(CommandFailed, self).__init__() \n",
      "3": "\n def __init__(self, reason: Optional[str] = None) -> None: \n \n super(CommandFailed, self).__init__() \n",
      "4": "\n def __init__(self, reason: Union[str, None] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "5": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <DED> super(CommandFailed, self).__init__(reason) \n",
      "6": "\n def __init__(self, reason: str) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "7": "<DED> def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "8": "\n def __init__(self, reason: Union[str, None] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "9": "<IND> def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "10": "\n def __init__(self, reason: Optional[str] = None) -> None: \n } super(CommandFailed, self).__init__() \n",
      "11": "\n def __init__(self, reason: Optional[str] = None) -> None: \n { super(CommandFailed, self).__init__() \n",
      "12": "\n def __init__(self, reason: Optional[str] = None) -> None: \n \n super(CommandFailed, self).__init__(reason) \n",
      "13": "\n def __init__(self, reason: Union[str, None] = None) -> None: \n <DED> super(CommandFailed, self).__init__() \n",
      "14": "\n def __init__(self, reason: Optional[str] = None) -> None: \n \\ super(CommandFailed, self).__init__() \n",
      "15": "<DED> def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "16": "\n def __init__(self, reason: str) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "17": "<IND> def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__(reason) \n",
      "18": "{ def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "19": "<DED> def __init__(self, reason: Optional[str] = None) -> None: \n <DED> super(CommandFailed, self).__init__() \n",
      "20": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() <IND>",
      "21": "\n def __init__(self, reason: Optional[str] = None) -> None: <IND> <IND> super(CommandFailed, self).__init__() \n",
      "22": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "23": "\n def __init__(self, reason: Union[str, None] = None) -> None: \n \n super(CommandFailed, self).__init__() \n",
      "24": "\n def __init__(self, reason: str) -> None: \n <DED> super(CommandFailed, self).__init__() \n",
      "25": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "26": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "27": "\n def __init__(self, reason: Optional[str] = None) -> None: <DED> <IND> super(CommandFailed, self).__init__() \n",
      "28": "\n def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() <DED>",
      "29": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "30": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "31": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "32": "<IND> def __init__(self, reason: Optional[str] = None) -> None: \n <DED> super(CommandFailed, self).__init__() \n",
      "33": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "34": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "35": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "36": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "37": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "38": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "39": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "40": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "41": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "42": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "43": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "44": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "45": "} def __init__(self, reason: Optional[str] = None) -> None: \n <IND> super(CommandFailed, self).__init__() \n",
      "46": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "47": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "48": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n",
      "49": "\n def __init__(self, reason: Optional[str] = None) -> None: \n super(CommandFailed, self).__init__() \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        ir_set: irast.Set, *,\n        path_scope: irast.ScopeTreeNode=None,\n        optional: bool=False,\n",
    "target_code": "        ir_set: irast.Set, *,\n        path_scope: Optional[irast.ScopeTreeNode]=None,\n        optional: bool=False,\n",
    "warning_line": "        path_scope: irast.ScopeTreeNode=None,",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " path_scope is declared to have type `edb.ir.scopetree.ScopeTreeNode` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 85,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "edgedb/edgedb",
    "source_filename": "edb/edgeql/compiler/pathctx.py",
    "target_filename": "edb/edgeql/compiler/pathctx.py",
    "source_changeid": "b7b32545b78bacbf957e49615efbffa0667aa5fa^",
    "target_changeid": "b7b32545b78bacbf957e49615efbffa0667aa5fa",
    "predictions": [
      "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n"
    ],
    "correct": true,
    "top_five": {
      "0": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "1": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "2": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode=None, \n optional: bool=False, \n",
      "3": "ir_set: irast.Set, *, \n path_scope: irast.ScopeTreeNode, \n optional: bool=False, \n",
      "4": "ir_set: irast.Set, *, \n path_scope: Optional[Irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "5": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, <IND> optional: bool=False, \n",
      "6": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, <DED> optional: bool=False, \n",
      "7": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, <IND>",
      "8": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, <DED>",
      "9": "ir_set: irast.Set, *, <IND> path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "10": "ir_set: irast.Set, *, <DED> path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "11": "ir_set: irast.Set, *, \n edb.irast.ScopeTreeNode: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "12": "ir_set: irast.Set, *, \n if irast.ScopeTreeNode is None: \n <IND> path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "13": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, { optional: bool=False, \n",
      "14": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, {",
      "15": "ir_set: irast.Set, *, { path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "16": "ir_set: irast.Set, *, \n if irast.ScopeTreeNode is None: \n <IND> path_scope: Optional[irast.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "17": "ir_set: irast.Set, *, \n path_scope: optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "18": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, } optional: bool=False, \n",
      "19": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, }",
      "20": "ir_set: irast.Set, *, } path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "21": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode], \n optional: bool=False, \n",
      "22": "ir_set: irast.Set, *, \n path_scope: Optional[Irast.ScopeTreeNode] = None, \n optional: bool=False, \n",
      "23": "ir_set: irast.Set, *, \n _path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "24": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \\ optional: bool=False, \n",
      "25": "ir_set: irast.Set, *, \n path_scope=None, \n optional: bool=False, \n",
      "26": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \\",
      "27": "ir_set: irast.Set, *, \\ path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "28": "ir_set: irast.Set, *, \n path_scope: str = irast.ScopeTreeNode, \n optional: bool=False, \n",
      "29": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False,",
      "30": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False, \n",
      "31": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "32": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False, \n",
      "33": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "34": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False,",
      "35": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False,",
      "36": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False,",
      "37": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False, \n",
      "38": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "39": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False, \n",
      "40": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "41": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False,",
      "42": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False,",
      "43": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False,",
      "44": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False, \n",
      "45": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False, \n",
      "46": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, ^ optional: bool=False, \n",
      "47": "ir_set: irast.Set, *, path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False, \n",
      "48": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, optional: bool=False, \n",
      "49": "ir_set: irast.Set, *, \n path_scope: Optional[irast.ScopeTreeNode]=None, \n optional: bool=False,"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        signer_key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, signer_key, source)\n        return self.append_operation(op)\n",
    "target_code": "\n        key = SignerKey.ed25519_public_key(signer_key)\n        op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source)\n        return self.append_operation(op)\n",
    "warning_line": "        signer_key = SignerKey.ed25519_public_key(signer_key)",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " signer_key is declared to have type `str` but is used as type `SignerKey`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 912,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "StellarCN/py-stellar-base",
    "source_filename": "stellar_sdk/transaction_builder.py",
    "target_filename": "stellar_sdk/transaction_builder.py",
    "source_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6^",
    "target_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "predictions": [
      "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "1": "<DED> key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "2": "\n key = SignerKey.ed25519_public_key(key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "3": "<IND> key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "4": "{ key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "5": "<DED> key = SignerKey.ed25519_public_key(key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "6": "} key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "7": "\n public_key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "8": "<IND> key = SignerKey.ed25519_public_key(key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "9": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) <DED> return self.append_operation(op) \n",
      "10": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) <IND> return self.append_operation(op) \n",
      "11": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) <IND>",
      "12": "\n key = SignerKey.ed25519_public_key(signer_key) <DED> op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "13": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) <DED>",
      "14": "\n key = SignerKey.ed25519_public_key(signer_key) <IND> op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "15": "\n key = SignatureKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "16": "\n key = SignerKey.ed25519_public_key(signer_key) { op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "17": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) {",
      "18": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) { return self.append_operation(op) \n",
      "19": "\\ key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "20": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) }",
      "21": "\n key = SignerKey.ed25519_public_key(signer_key) } op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "22": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) } return self.append_operation(op) \n",
      "23": "\n key= SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "24": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "25": "\n key = KeyError.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "26": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "27": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "28": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "29": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "30": "^ key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "31": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "32": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "33": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "34": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "35": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "36": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "37": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "38": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "39": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "40": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "41": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "42": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "43": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "44": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \\",
      "45": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "46": "\n key = SignerKey.ed25519_public_key(signer_key) \\ op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "47": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "48": "key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \n return self.append_operation(op) \n",
      "49": "\n key = SignerKey.ed25519_public_key(signer_key) \n op = RevokeSponsorship.revoke_signer_sponsorship(account_id, key, source) \\ return self.append_operation(op) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def __init__(self, format: str = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
    "target_code": "\n    def __init__(self, format: typing.Optional[str] = None, **kwargs):\n        <IND>super().__init__(**kwargs)\n",
    "warning_line": "    def __init__(self, format: str = None, **kwargs):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " format is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1184,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "marshmallow-code/marshmallow",
    "source_filename": "src/marshmallow/fields.py",
    "target_filename": "src/marshmallow/fields.py",
    "source_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379^",
    "target_changeid": "43db1072f94ae6af40cbedc058f1c02f3cedb379",
    "predictions": [
      "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "1": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <DED> super().__init__(**kwargs) \n",
      "2": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <IND> super().__init__(**kwargs) \n",
      "3": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n \n super().__init__(**kwargs) \n",
      "4": "<DED> def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "5": "<IND> def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "6": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n { super().__init__(**kwargs) \n",
      "7": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n } super().__init__(**kwargs) \n",
      "8": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n <DED> super().__init__(**kwargs) \n",
      "9": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n \\ super().__init__(**kwargs) \n",
      "10": "{ def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "11": "<DED> def __init__(self, format: Optional[str] = None, **kwargs): \n <DED> super().__init__(**kwargs) \n",
      "12": "\n def __init__(self, format: Optional[str] = None, **kwargs) -> None: \n \n super().__init__(**kwargs) \n",
      "13": "\n def __init__(self, format: Optional[str] = None, **kwargs): <IND> <IND> super().__init__(**kwargs) \n",
      "14": "<IND> def __init__(self, format: Optional[str] = None, **kwargs): \n <DED> super().__init__(**kwargs) \n",
      "15": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "16": "\n def __init__(self, format: Optional[str] = None, **kwargs): <DED> <IND> super().__init__(**kwargs) \n",
      "17": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "18": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) <IND>",
      "19": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "20": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "21": "} def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) \n",
      "22": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) <DED>",
      "23": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "24": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "25": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "26": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "27": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "28": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "29": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "30": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "31": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "32": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "33": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "34": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "35": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "36": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "37": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "38": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "39": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "40": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "41": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "42": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "43": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "44": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "45": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "46": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "47": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n super().__init__(**kwargs) \n",
      "48": "\n def __init__(self, format: Optional[str] = None, **kwargs): { <IND> super().__init__(**kwargs) \n",
      "49": "\n def __init__(self, format: Optional[str] = None, **kwargs): \n <IND> super().__init__(**kwargs) {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <IND>def __init__(self, rf_path: str=None):\n        <IND>super(Schaffer, self).__init__(rf_path=rf_path)\n        self.number_of_variables = 1\n",
    "target_code": "\n    <IND>def __init__(self):\n        <IND>super(Schaffer, self).__init__()\n        self.number_of_variables = 1\n",
    "warning_line": "    def __init__(self, rf_path: str=None):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " rf_path is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 81,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jMetal/jMetalPy",
    "source_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "target_filename": "jmetal/problem/multiobjective/unconstrained.py",
    "source_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7^",
    "target_changeid": "4294b0e73edf66d94d52201d754d6c25999c9aa7",
    "predictions": [
      "\n <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "1": "\n <DED> def __init__(self): \n <DED> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "2": "\n <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "3": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "4": "\n <DED> def __init__(self) -> None: \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "5": "\n <DED> def __init__(self): \n \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "6": "\n <DED> def __init__(self, rf_path: Optional[str] = None): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "7": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <DED> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "8": "\n <IND> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "9": "\n <IND> def __init__(self): \n <DED> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "10": "\n \n def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "11": "<DED> <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "12": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "13": "\n <DED> def __init__(self, rf_path: str): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "14": "<IND> <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "15": "\n <DED> def __init__(self): \n { super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "16": "\n <DED> def __init__(self): \n } super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "17": "\n <DED> def __init__(self) -> None: \n <DED> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "18": "\n <IND> def __init__(self) -> None: \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "19": "\n { def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "20": "\n } def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "21": "\n <IND> def __init__(self): \n \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "22": "\n \n def __init__(self): \n <DED> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "23": "\n <DED> def __init__(self): \n \\ super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "24": "\n \\ def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "25": "\n <DED> def __init__(self) -> None: \n \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "26": "<DED> <DED> def __init__(self): \n <DED> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "27": "\n <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() <IND> self.number_of_variables = 1 \n",
      "28": "<DED> <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "29": "{ <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "30": "\n <DED> def __init__(self): <IND> <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "31": "\n <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() <DED> self.number_of_variables = 1 \n",
      "32": "\n <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 <IND>",
      "33": "\n <DED> def __init__(self): \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "34": "<IND> <DED> def __init__(self): \n <DED> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "35": "\n def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "36": "\n <DED> def __init__(self): \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "37": "\n <DED> def __init__(self): \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "38": "\n <DED> def __init__(self): \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "39": "\n <DED> def __init__(self): <DED> <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "40": "\n <DED> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 <DED>",
      "41": "<IND> <IND> def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "42": "\n def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "43": "\n <DED> def __init__(self): \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "44": "\n <DED> def __init__(self, rf_path: Optional[str]=None): \n <IND> super(Schaffer, self).__init__() <IND> self.number_of_variables = 1 \n",
      "45": "\n <DED> def __init__(self): \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "46": "\n def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "47": "\n <DED> def __init__(self): \n super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "48": "\n def __init__(self): \n <IND> super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n",
      "49": "\n <IND> def __init__(self): \n { super(Schaffer, self).__init__() \n self.number_of_variables = 1 \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED><DED>def run(self, host: str = None, port: int = None, *args, **kwargs):\n        <IND>host = host or self.config.HOST\n",
    "target_code": "\n    <DED><DED>def run(self, host: Optional[str] = None, port: Optional[int] = None,\n            *args, **kwargs) -> None:\n        <IND>host = host or self.config.HOST\n",
    "warning_line": "    def run(self, host: str = None, port: int = None, *args, **kwargs):",
    "linter_report": {
      "rule_id": "Incompatible variable type [9]",
      "message": " host is declared to have type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "nonebot/nonebot",
    "source_filename": "none/__init__.py",
    "target_filename": "none/__init__.py",
    "source_changeid": "0046ebacacb8205987a579d4c9c8681d89f081cd^",
    "target_changeid": "0046ebacacb8205987a579d4c9c8681d89f081cd",
    "predictions": [
      "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "1": "\n <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "2": "\n <IND> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "3": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <DED> host = host or self.config.HOST \n",
      "4": "\n <DED> \n def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "5": "\n \n <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "6": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n \n host = host or self.config.HOST \n",
      "7": "\n <IND> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "8": "\n <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <DED> host = host or self.config.HOST \n",
      "9": "\n <IND> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <DED> host = host or self.config.HOST \n",
      "10": "<DED> <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "11": "<IND> <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "12": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "13": "\n <DED> { def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "14": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n { host = host or self.config.HOST \n",
      "15": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n } host = host or self.config.HOST \n",
      "16": "\n <IND> \n def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "17": "\n { <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "18": "\n <DED> } def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "19": "\n } <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "20": "\n \n <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "21": "\n <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n \n host = host or self.config.HOST \n",
      "22": "\n <IND> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n \n host = host or self.config.HOST \n",
      "23": "\n <DED> \n def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <DED> host = host or self.config.HOST \n",
      "24": "\n \n <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <DED> host = host or self.config.HOST \n",
      "25": "\n <IND> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <DED> host = host or self.config.HOST \n",
      "26": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n \\ host = host or self.config.HOST \n",
      "27": "\n <DED> \\ def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "28": "\n \\ <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "29": "<DED> <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "30": "<DED> <IND> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "31": "{ <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "32": "\n \n \n def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "33": "<DED> <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <DED> host = host or self.config.HOST \n",
      "34": "<IND> <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "35": "<IND> <IND> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "36": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <IND> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "37": "\n <DED> \n def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n \n host = host or self.config.HOST \n",
      "38": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: <IND> <IND> host = host or self.config.HOST \n",
      "39": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, <DED> *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "40": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n host = host or self.config.HOST \n",
      "41": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n host = host or self.config.HOST \n",
      "42": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST <IND>",
      "43": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n host = host or self.config.HOST \n",
      "44": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n host = host or self.config.HOST \n",
      "45": "\n <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "46": "\n <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n { host = host or self.config.HOST \n",
      "47": "\n <DED> <IND> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs): \n <IND> host = host or self.config.HOST \n",
      "48": "\n <IND> { def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n <IND> host = host or self.config.HOST \n",
      "49": "\n <DED> <DED> def run(self, host: Optional[str] = None, port: Optional[int] = None, \n *args, **kwargs) -> None: \n host = host or self.config.HOST \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>return capability in self.agreed_capabilities\n    <DED>def available_capability(self, capability: utils.irc.Capability) -> bool:\n        <IND>return capability.available(self.agreed_capabilities)\n",
    "target_code": "        <IND>return capability in self.agreed_capabilities\n    <DED>def available_capability(self, capability: utils.irc.Capability) -> str:\n        <IND>return capability.available(self.agreed_capabilities)\n",
    "warning_line": "        return capability.available(self.agreed_capabilities)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 292,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jesopo/bitbot",
    "source_filename": "src/IRCServer.py",
    "target_filename": "src/IRCServer.py",
    "source_changeid": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd^",
    "target_changeid": "c3454f2bfe62d3ecd1a5f4c771ae60fa3addfafd",
    "predictions": [
      "<DED> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "1": "\n return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "2": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "3": "<DED> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "4": "\n return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "5": "<IND> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "6": "<DED> return capability in self.agreed_capabilities \n <DED> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "7": "\n return capability in self.agreed_capabilities \n <DED> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "8": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "9": "<DED> return capability in self.agreed_capabilities \n <IND> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "10": "<DED> return capability in self.agreed_capabilities \n \n def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "11": "\n return capability in self.agreed_capabilities \n <IND> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "12": "<IND> return capability in self.agreed_capabilities \n <IND> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "13": "<DED> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "14": "\n return capability in self.agreed_capabilities \n \n def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "15": "<IND> return capability in self.agreed_capabilities \n \n def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "16": "\n return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "17": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "18": "<DED> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "19": "\n return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "20": "<IND> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "21": "<DED> return capability in self.agreed_capabilities \n \n def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "22": "<DED> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n \n return capability.available(self.agreed_capabilities) \n",
      "23": "<DED> return capability in self.agreed_capabilities \n <DED> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "24": "\n return capability in self.agreed_capabilities \n \n def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "25": "\n return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n \n return capability.available(self.agreed_capabilities) \n",
      "26": "<IND> return capability in self.agreed_capabilities \n \n def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "27": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n \n return capability.available(self.agreed_capabilities) \n",
      "28": "<DED> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n \n return capability.available(self.agreed_capabilities) \n",
      "29": "{ return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "30": "\n return capability in self.agreed_capabilities \n <DED> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "31": "<DED> return capability in self.agreed_capabilities \n { def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "32": "<DED> return capability in self.agreed_capabilities \n } def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "33": "<IND> return capability in self.agreed_capabilities \n <DED> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "34": "} return capability in self.agreed_capabilities \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "35": "<DED> return capability in self.agreed_capabilities \n <IND> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "36": "\n return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n \n return capability.available(self.agreed_capabilities) \n",
      "37": "<DED> return capability.available(self.agreed_capabilities) \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "38": "<IND> return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n \n return capability.available(self.agreed_capabilities) \n",
      "39": "<DED> return capability in self.agreed_capabilities \n \n def available_capability(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "40": "\n return capability in self.agreed_capabilities \n { def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "41": "{ return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "42": "\n return capability in self.agreed_capabilities \n } def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "43": "\n return capability in self.agreed_capabilities \n <IND> def available_capabilities(self, capability: utils.irc.Capability) -> str: \n <DED> return capability.available(self.agreed_capabilities) \n",
      "44": "<IND> return capability in self.agreed_capabilities \n { def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "45": "<IND> return capability in self.agreed_capabilities \n } def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "46": "} return capability in self.agreed_capabilities \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "47": "\n return capability.available(self.agreed_capabilities) \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "48": "<IND> return capability.available(self.agreed_capabilities) \n <DED> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n",
      "49": "<DED> return capability.available(self.agreed_capabilities) \n <IND> def available_capability(self, capability: utils.irc.Capability) -> str: \n <IND> return capability.available(self.agreed_capabilities) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>\"\"\"Check if a plan already exists in the given directory\"\"\"\n        plans = os.listdir(project.plan_dir)\n\n        return plans and len(plans) > 0\n\n",
    "target_code": "        <IND>\"\"\"Check if a plan already exists in the given directory\"\"\"\n        return any(project.plan_dir.iterdir())  # False if it cannot iterate at least once\n\n",
    "warning_line": "        return plans and len(plans) > 0",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `typing.Union[List[str], bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 62,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "synek/git-plan",
    "source_filename": "git_plan/service/plan.py",
    "target_filename": "git_plan/service/plan.py",
    "source_changeid": "1861635f8013b5d622f253bb6d950a2b0a79eebc^",
    "target_changeid": "1861635f8013b5d622f253bb6d950a2b0a79eebc",
    "predictions": [
      "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "1": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "2": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n \n",
      "3": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "4": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n \n",
      "5": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n \n",
      "6": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "7": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "8": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "9": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return bool(plans) and len(plans) > 0 \n \n",
      "10": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return bool(plans) and len(plans) > 0 \n \n",
      "11": "{ \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "12": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n { return plans and len(plans) > 0 \n \n",
      "13": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n } return plans and len(plans) > 0 \n \n",
      "14": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return bool(plans) and len(plans) > 0 \n \n",
      "15": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return bool(plans) and len(plans) > 0 \n \n",
      "16": "} \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "17": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n { return plans and len(plans) > 0 \n \n",
      "18": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n } return plans and len(plans) > 0 \n \n",
      "19": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return bool(plans) and len(plans) > 0 \n \n",
      "20": "{ \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n \n",
      "21": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return bool(plans) and len(plans) > 0 \n \n",
      "22": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n { return plans and len(plans) > 0 \n \n",
      "23": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n } return plans and len(plans) > 0 \n \n",
      "24": "} \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n \n",
      "25": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \\ return plans and len(plans) > 0 \n \n",
      "26": "\\ \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "27": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \\ return plans and len(plans) > 0 \n \n",
      "28": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n <DED>",
      "29": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n <IND>",
      "30": "\\ \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n \n",
      "31": "<IND> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \\ return plans and len(plans) > 0 \n \n",
      "32": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n <DED>",
      "33": "<DED> \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n <IND>",
      "34": "{ \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n \n return plans and len(plans) > 0 \n \n",
      "35": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n return plans and len(plans) > 0 \n \n",
      "36": "\"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "37": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n return plans and len(plans) > 0 \n \n",
      "38": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n return plans and len(plans) > 0 \n \n",
      "39": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n <DED>",
      "40": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <IND> return plans and len(plans) > 0 \n <IND>",
      "41": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n return plans and len(plans) > 0 \n \n",
      "42": "\"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "43": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n return plans and len(plans) > 0 \n \n",
      "44": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n return plans and len(plans) > 0 \n \n",
      "45": "\"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "46": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" <IND> plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "47": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n return plans and len(plans) > 0 \n \n",
      "48": "\"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n <DED> return plans and len(plans) > 0 \n \n",
      "49": "\n \"\"\"Check if a plan already exists in the given directory\"\"\" \n plans = os.listdir(project.plan_dir) \n return plans and len(plans) > 0 \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>@classmethod\n    def all(cls) -> List[\"PostgresPartitioningMethod\"]:\n        <IND>return [choice for choice in cls]\n",
    "target_code": "    <IND>@classmethod\n    def all(cls) -> List[\"StrEnum\"]:\n        <IND>return [choice for choice in cls]\n",
    "warning_line": "        return [choice for choice in cls]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `List[PostgresPartitioningMethod]` but got `List[StrEnum]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 11,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "SectorLabs/django-postgres-extra",
    "source_filename": "psqlextra/types.py",
    "target_filename": "psqlextra/types.py",
    "source_changeid": "9a1ed82f7c65b5056795c21001fa69faf17d9813^",
    "target_changeid": "9a1ed82f7c65b5056795c21001fa69faf17d9813",
    "predictions": [
      "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "1": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "2": "\n @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "3": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <DED> return [choice for choice in cls] \n",
      "4": "<DED> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n <IND> return [choice for choice in cls] \n",
      "5": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <DED> return [choice for choice in cls] \n",
      "6": "<IND> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n <IND> return [choice for choice in cls] \n",
      "7": "\n @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <DED> return [choice for choice in cls] \n",
      "8": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n \n return [choice for choice in cls] \n",
      "9": "\n @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n <IND> return [choice for choice in cls] \n",
      "10": "{ @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "11": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n \n return [choice for choice in cls] \n",
      "12": "} @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "13": "<DED> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n <DED> return [choice for choice in cls] \n",
      "14": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n } return [choice for choice in cls] \n",
      "15": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n { return [choice for choice in cls] \n",
      "16": "\n @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n \n return [choice for choice in cls] \n",
      "17": "<IND> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n <DED> return [choice for choice in cls] \n",
      "18": "\\ @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "19": "<DED> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "20": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n } return [choice for choice in cls] \n",
      "21": "<IND> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n { return [choice for choice in cls] \n",
      "22": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"], List[StrEnum]]: \n <IND> return [choice for choice in cls] \n",
      "23": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> assert isinstance(cls, str) \n return [choice for choice in cls] \n",
      "24": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n \\ return [choice for choice in cls] \n",
      "25": "<DED> @classmethod <DED> def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "26": "\n @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n <DED> return [choice for choice in cls] \n",
      "27": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "28": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "29": "<DED> @classmethod <IND> def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "30": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "31": "<IND> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "32": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "33": "<DED> @classmethod \n def all(cls) -> List[PostgresPartitioningMethod]: \n \n return [choice for choice in cls] \n",
      "34": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "35": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "36": "\n @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n } return [choice for choice in cls] \n",
      "37": "\n @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n { return [choice for choice in cls] \n",
      "38": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "39": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "40": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "41": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "42": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: <IND> <IND> return [choice for choice in cls] \n",
      "43": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "44": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "45": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "46": "{ @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <DED> return [choice for choice in cls] \n",
      "47": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "48": "@classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] \n",
      "49": "<DED> @classmethod \n def all(cls) -> List[\"PostgresPartitioningMethod\"]: \n <IND> return [choice for choice in cls] <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>return {\"resistance\": voltage / current}\n\n",
    "target_code": "        <IND>return {\"resistance\": voltage / current}\n    <DED>else:\n        <IND>raise ValueError(\"Exactly one argument must be 0\")\n\n",
    "warning_line": "        return {\"resistance\": voltage / current}",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Dict[str, float]` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 34,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "electronics/ohms_law.py",
    "target_filename": "electronics/ohms_law.py",
    "source_changeid": "959507901ac8f10cd605c51c305d13b27d105536^",
    "target_changeid": "959507901ac8f10cd605c51c305d13b27d105536",
    "predictions": [
      "\n return \n \"resistance\": voltage / current \n \n <DED>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n return \n \"resistance\": voltage / current \n \n <DED>",
      "1": "\n return \n \"resistance\": voltage / current \n \n \n",
      "2": "\n return \n \"resistance\": voltage / current \n \n <IND>",
      "3": "<DED> return \n \"resistance\": voltage / current \n \n <DED>",
      "4": "<DED> return \n \"resistance\": voltage / current \n \n \n",
      "5": "<IND> return \n \"resistance\": voltage / current \n \n <DED>",
      "6": "<IND> return \n \"resistance\": voltage / current \n \n \n",
      "7": "<DED> return \n \"resistance\": voltage / current \n \n <IND>",
      "8": "\n return <DED> \"resistance\": voltage / current \n \n <DED>",
      "9": "\n return <DED> \"resistance\": voltage / current \n \n \n",
      "10": "<IND> return \n \"resistance\": voltage / current \n \n <IND>",
      "11": "\n return \n \"resistance\": voltage / current \n <IND> <DED>",
      "12": "\n return \n \"resistance\": voltage / current \n <DED> <DED>",
      "13": "\n return \n \"resistance\": voltage / current \n <DED> \n",
      "14": "\n return \n \"resistance\": voltage / current \n <IND> \n",
      "15": "\n return <DED> \"resistance\": voltage / current \n \n <IND>",
      "16": "<DED> return <DED> \"resistance\": voltage / current \n \n <DED>",
      "17": "<DED> return <DED> \"resistance\": voltage / current \n \n \n",
      "18": "\n return \n \"resistance\": voltage / current \n <IND> <IND>",
      "19": "\n return \n \"resistance\": voltage / current \n <DED> <IND>",
      "20": "<DED> return \n \"resistance\": voltage / current \n <IND> <DED>",
      "21": "<DED> return \n \"resistance\": voltage / current \n <DED> <DED>",
      "22": "<DED> return \n \"resistance\": voltage / current \n <DED> \n",
      "23": "<DED> return \n \"resistance\": voltage / current \n <IND> \n",
      "24": "<IND> return <DED> \"resistance\": voltage / current \n \n <DED>",
      "25": "<DED> return <DED> \"resistance\": voltage / current \n \n <IND>",
      "26": "<IND> return <DED> \"resistance\": voltage / current \n \n \n",
      "27": "\n return <IND> \"resistance\": voltage / current \n \n <DED>",
      "28": "\n return <IND> \"resistance\": voltage / current \n \n \n",
      "29": "\n return \n \"resistance\": voltage / current \n \n <DED> return \n",
      "30": "<IND> return \n \"resistance\": voltage / current \n <IND> <DED>",
      "31": "<DED> return \n \"resistance\": voltage / current \n <IND> <IND>",
      "32": "<IND> return \n \"resistance\": voltage / current \n <DED> <DED>",
      "33": "<IND> return \n \"resistance\": voltage / current \n <DED> \n",
      "34": "\n return \n \"resistance\": voltage / current \n \n \n return \n",
      "35": "<IND> return \n \"resistance\": voltage / current \n <IND> \n",
      "36": "<DED> return \n \"resistance\": voltage / current \n <DED> <IND>",
      "37": "<IND> return <DED> \"resistance\": voltage / current \n \n <IND>",
      "38": "\n return <IND> \"resistance\": voltage / current \n \n <IND>",
      "39": "<DED> return <IND> \"resistance\": voltage / current \n \n <DED>",
      "40": "<DED> return <IND> \"resistance\": voltage / current \n \n \n",
      "41": "\n return <DED> \"resistance\": voltage / current \n <IND> <DED>",
      "42": "\n return <DED> \"resistance\": voltage / current \n <DED> <DED>",
      "43": "\n return <DED> \"resistance\": voltage / current \n <DED> \n",
      "44": "\n return <DED> \"resistance\": voltage / current \n <IND> \n",
      "45": "\n return \n \"resistance\": voltage / current \n \n <IND> return \n",
      "46": "<DED> return \n \"resistance\": voltage / current \n \n <DED> return \n",
      "47": "<IND> return \n \"resistance\": voltage / current \n <IND> <IND>",
      "48": "<DED> return \n \"resistance\": voltage / current \n \n \n return \n",
      "49": "<IND> return \n \"resistance\": voltage / current \n <DED> <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>origin = extract_origin_collection(t)\n    return origin and issubclass(origin, Collection)\n\n",
    "target_code": "    <DED>origin = extract_origin_collection(t)\n    return bool(origin and issubclass(origin, Collection))\n\n",
    "warning_line": "    return origin and issubclass(origin, Collection)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `Union[Type[typing.Any], bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 71,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "konradhalas/dacite",
    "source_filename": "dacite/types.py",
    "target_filename": "dacite/types.py",
    "source_changeid": "76286b11cceb0088b9a9aefea37a09f1963b7708^",
    "target_changeid": "76286b11cceb0088b9a9aefea37a09f1963b7708",
    "predictions": [
      "\n origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "1": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "2": "<IND> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "3": "{ origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "4": "} origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "5": "\n origin = extract_origin_collection(t) \n return origin is not None and issubclass(origin, Collection) \n \n",
      "6": "\\ origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "7": "\n origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n <DED>",
      "8": "\n origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n <IND>",
      "9": "<DED> origin = extract_origin_collection(t) \n return origin is not None and issubclass(origin, Collection) \n \n",
      "10": "\n origin = extract_origin_collection(t) \n return origin and issubclass(origin, bool) \n \n",
      "11": "<IND> origin = extract_origin_collection(t) \n return origin is not None and issubclass(origin, Collection) \n \n",
      "12": "\n origin = extract_origin_collection(t) <DED> return origin and issubclass(origin, Collection) \n \n",
      "13": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "14": "\n origin = extract_origin_collection(t) <IND> return origin and issubclass(origin, Collection) \n \n",
      "15": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "16": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "17": "\n origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) <DED> \n",
      "18": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "19": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "20": "\n origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) <IND> \n",
      "21": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "22": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "23": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n <DED>",
      "24": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "25": "<DED> origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n <IND>",
      "26": "\n origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n {",
      "27": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "28": "^ origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "29": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "30": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "31": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "32": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "33": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "34": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "35": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "36": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "37": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "38": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "39": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "40": "\n origin = extract_origin_collection(t) { return origin and issubclass(origin, Collection) \n \n",
      "41": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "42": "\n origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) { \n",
      "43": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "44": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "45": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "46": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "47": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "48": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n",
      "49": "origin = extract_origin_collection(t) \n return origin and issubclass(origin, Collection) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return None\n\n",
    "target_code": "        <IND>click.secho('Failed to list classes with error: {0}'.format(response.error_reason), fg='red')\n        return []\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.List[typing.Any]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "sensepost/objection",
    "source_filename": "objection/commands/ios/hooking.py",
    "target_filename": "objection/commands/ios/hooking.py",
    "source_changeid": "7f1d70f4333c378e920f732f7b02fb4694bf68cf^",
    "target_changeid": "7f1d70f4333c378e920f732f7b02fb4694bf68cf",
    "predictions": [
      "<DED> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return None \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return None \n \n",
      "1": "\n click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return None \n \n",
      "2": "<IND> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return None \n \n",
      "3": "<DED> click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return None \n \n",
      "4": "<DED> click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return None \n \n",
      "5": "\n click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return None \n \n",
      "6": "<IND> click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return None \n \n",
      "7": "\n click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return None \n \n",
      "8": "<IND> click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return None \n \n",
      "9": "<DED> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return [0] \n \n",
      "10": "<DED> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return List(None) \n \n",
      "11": "<DED> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return 0 \n \n",
      "12": "\n click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return [0] \n \n",
      "13": "\n click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return List(None) \n \n",
      "14": "<IND> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return [0] \n \n",
      "15": "<IND> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return List(None) \n \n",
      "16": "<DED> click.secho('Failed to list classes with error: \n '.format(response.error_reason), fg='red') \n return None \n \n",
      "17": "\n click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return 0 \n \n",
      "18": "<IND> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return 0 \n \n",
      "19": "<DED> click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return List(None) \n \n",
      "20": "<DED> click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return [0] \n \n",
      "21": "\n click.secho('Failed to list classes with error: \n '.format(response.error_reason), fg='red') \n return None \n \n",
      "22": "<DED> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n",
      "23": "<DED> click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return List(None) \n \n",
      "24": "<DED> click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return [0] \n \n",
      "25": "<IND> click.secho('Failed to list classes with error: \n '.format(response.error_reason), fg='red') \n return None \n \n",
      "26": "\n click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return List(None) \n \n",
      "27": "\n click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return [0] \n \n",
      "28": "<DED> click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return 0 \n \n",
      "29": "\n click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n",
      "30": "<IND> click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return [0] \n \n",
      "31": "<IND> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n",
      "32": "<DED> click.secho('Failed to list classes with error: \n 0 { '.format(response.error_reason), fg='red') \n return None \n \n",
      "33": "\n click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return [0] \n \n",
      "34": "<DED> click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return 0 \n \n",
      "35": "<DED> click.secho('Failed to list classes with error: \n 0 } '.format(response.error_reason), fg='red') \n return None \n \n",
      "36": "\n click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return 0 \n \n",
      "37": "<IND> click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return [0] \n \n",
      "38": "<IND> click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return 0 \n \n",
      "39": "\n click.secho('Failed to list classes with error: \n 0 { '.format(response.error_reason), fg='red') \n return None \n \n",
      "40": "<DED> click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n",
      "41": "\n click.secho('Failed to list classes with error: \n 0 } '.format(response.error_reason), fg='red') \n return None \n \n",
      "42": "<DED> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return ['Unable to retrieve contents'] \n \n",
      "43": "<DED> click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n",
      "44": "\n click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n",
      "45": "<IND> click.secho('Failed to list classes with error: \n 0 <DED> '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n",
      "46": "\n click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return ['Unable to retrieve contents'] \n \n",
      "47": "\n click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n",
      "48": "<IND> click.secho('Failed to list classes with error: \n 0 \n '.format(response.error_reason), fg='red') \n return ['Unable to retrieve contents'] \n \n",
      "49": "<IND> click.secho('Failed to list classes with error: \n 0 <IND> '.format(response.error_reason), fg='red') \n return ['Unable to retrieve data'] \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                            <IND>return desc\n        <DED><DED><DED><DED><DED>return None\n\n",
    "target_code": "                            <IND>return desc\n        <DED><DED><DED><DED><DED>return \"\"\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 245,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/player.py",
    "target_filename": "tale/player.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "\n return desc \n <DED> <DED> <DED> <DED> return \"\" \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n return desc \n <DED> <DED> <DED> <DED> return \"\" \n \n",
      "1": "\n return desc \n <IND> <DED> <DED> <DED> return \"\" \n \n",
      "2": "<DED> return desc \n <DED> <DED> <DED> <DED> return \"\" \n \n",
      "3": "\n return desc \n \n <DED> <DED> <DED> return \"\" \n \n",
      "4": "\n return desc \n <DED> <IND> <DED> <DED> return \"\" \n \n",
      "5": "<IND> return desc \n <DED> <DED> <DED> <DED> return \"\" \n \n",
      "6": "<DED> return desc \n <IND> <DED> <DED> <DED> return \"\" \n \n",
      "7": "\n return desc \n <DED> <DED> <IND> <DED> return \"\" \n \n",
      "8": "\n return desc \n <DED> <DED> <DED> <IND> return \"\" \n \n",
      "9": "<DED> return desc \n \n <DED> <DED> <DED> return \"\" \n \n",
      "10": "\n return desc \n <IND> <IND> <DED> <DED> return \"\" \n \n",
      "11": "<IND> return desc \n <IND> <DED> <DED> <DED> return \"\" \n \n",
      "12": "<DED> return desc \n <DED> <IND> <DED> <DED> return \"\" \n \n",
      "13": "\n return desc \n <IND> <DED> <IND> <DED> return \"\" \n \n",
      "14": "\n return desc \n \n <IND> <DED> <DED> return \"\" \n \n",
      "15": "<DED> return desc \n <DED> <DED> <IND> <DED> return \"\" \n \n",
      "16": "<IND> return desc \n \n <DED> <DED> <DED> return \"\" \n \n",
      "17": "\n return desc \n <IND> <DED> <DED> <IND> return \"\" \n \n",
      "18": "\n return desc \n \n <DED> <IND> <DED> return \"\" \n \n",
      "19": "<DED> return desc \n <DED> <DED> <DED> <IND> return \"\" \n \n",
      "20": "\n return desc \n \n <DED> <DED> <IND> return \"\" \n \n",
      "21": "<IND> return desc \n <DED> <IND> <DED> <DED> return \"\" \n \n",
      "22": "<DED> return desc \n <IND> <IND> <DED> <DED> return \"\" \n \n",
      "23": "\n return desc \n <DED> <IND> <IND> <DED> return \"\" \n \n",
      "24": "\n return desc \n <DED> \n <DED> <DED> return \"\" \n \n",
      "25": "<IND> return desc \n <DED> <DED> <IND> <DED> return \"\" \n \n",
      "26": "<DED> return desc \n <IND> <DED> <IND> <DED> return \"\" \n \n",
      "27": "<DED> return desc \n \n <IND> <DED> <DED> return \"\" \n \n",
      "28": "\n return desc \n <DED> <IND> <DED> <IND> return \"\" \n \n",
      "29": "<IND> return desc \n <DED> <DED> <DED> <IND> return \"\" \n \n",
      "30": "<DED> return desc \n <IND> <DED> <DED> <IND> return \"\" \n \n",
      "31": "\n return desc \n <DED> <DED> <IND> <IND> return \"\" \n \n",
      "32": "<DED> return desc \n \n <DED> <IND> <DED> return \"\" \n \n",
      "33": "\n return desc \n <DED> <DED> \n <DED> return \"\" \n \n",
      "34": "<DED> return desc \n \n <DED> <DED> <IND> return \"\" \n \n",
      "35": "<IND> return desc \n <IND> <IND> <DED> <DED> return \"\" \n \n",
      "36": "\n return desc \n <IND> <IND> <IND> <DED> return \"\" \n \n",
      "37": "\n return desc \n <IND> \n <DED> <DED> return \"\" \n \n",
      "38": "<IND> return desc \n <IND> <DED> <IND> <DED> return \"\" \n \n",
      "39": "<DED> return desc \n <DED> <IND> <IND> <DED> return \"\" \n \n",
      "40": "<DED> return desc \n <DED> \n <DED> <DED> return \"\" \n \n",
      "41": "<IND> return desc \n \n <IND> <DED> <DED> return \"\" \n \n",
      "42": "\n return desc \n <IND> <IND> <DED> <IND> return \"\" \n \n",
      "43": "<IND> return desc \n <IND> <DED> <DED> <IND> return \"\" \n \n",
      "44": "\n return desc \n \n \n <DED> <DED> return \"\" \n \n",
      "45": "\n return desc \n \n <IND> <IND> <DED> return \"\" \n \n",
      "46": "<IND> return desc \n \n <DED> <IND> <DED> return \"\" \n \n",
      "47": "<DED> return desc \n <DED> <IND> <DED> <IND> return \"\" \n \n",
      "48": "\n return desc \n <IND> <DED> <IND> <IND> return \"\" \n \n",
      "49": "\n return desc \n <IND> <DED> \n <DED> return \"\" \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>if unit in units:\n        <IND>return int(amount[:-1]) * 100_000_000_000 / units[unit]\n    <DED>else:\n",
    "target_code": "    <DED>if unit in units:\n        <IND>return int(int(amount[:-1]) * 100_000_000_000 / units[unit])\n    <DED>else:\n",
    "warning_line": "        return int(amount[:-1]) * 100_000_000_000 / units[unit]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 144,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/bolt11.py",
    "target_filename": "lnbits/bolt11.py",
    "source_changeid": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2^",
    "target_changeid": "dc3d96c6a8fcb3925a5851ee66de4f6d92e6d0c2",
    "predictions": [
      "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "1": "\n if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "2": "<IND> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "3": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "4": "\n if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "5": "<DED> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "6": "\n if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "7": "<IND> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "8": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "9": "<IND> if unit in units: \n <IND> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "10": "\n if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "11": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "12": "<IND> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "13": "<DED> if unit in units: \n <DED> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "14": "\n if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "15": "\n if unit in units: \n <DED> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "16": "<DED> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "17": "\n if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "18": "<IND> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "19": "<IND> if unit in units: \n <DED> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "20": "<IND> if unit in units: \n <IND> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "21": "<DED> if unit in units: \n <IND> return value(int(amount[:-1])) * 100_000_000_000 / units[unit] \n \n else: \n",
      "22": "<DED> if unit in units: \n <DED> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "23": "<DED> if unit in units: \n <IND> return value(int(amount[:-1]) * 100_000_000_000 / units[unit]) \n \n else: \n",
      "24": "\n if unit in units: \n <IND> return value(int(amount[:-1])) * 100_000_000_000 / units[unit] \n \n else: \n",
      "25": "\n if unit in units: \n <DED> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "26": "<DED> if unit in units: \n <DED> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "27": "\n if unit in units: \n <IND> return value(int(amount[:-1]) * 100_000_000_000 / units[unit]) \n \n else: \n",
      "28": "<DED> if unit in units: \n <IND> return value(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "29": "<IND> if unit in units: \n <IND> return value(int(amount[:-1])) * 100_000_000_000 / units[unit] \n \n else: \n",
      "30": "\n if unit in units: \n <DED> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "31": "\n if unit in units: \n <IND> return value(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "32": "<IND> if unit in units: \n <DED> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "33": "<DED> if unit in units: \n <IND> return int(float) * 100_000_000_000 / units[unit] \n \n else: \n",
      "34": "<IND> if unit in units: \n <IND> return value(int(amount[:-1]) * 100_000_000_000 / units[unit]) \n \n else: \n",
      "35": "<DED> if unit in units: \n <IND> return value(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "36": "<DED> if unit in units: \n <DED> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "37": "\n if unit in units: \n <IND> return value(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "38": "\n if unit in units: \n <IND> return int(float) * 100_000_000_000 / units[unit] \n \n else: \n",
      "39": "<IND> if unit in units: \n <DED> return int(amount[:-1]) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "40": "<IND> if unit in units: \n <IND> return value(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "41": "\n if unit in units: \n <DED> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "42": "<IND> if unit in units: \n <IND> return value(int(amount[:-1])) * 100_000_000_000 / units[unit] \n <IND> else: \n",
      "43": "<IND> if unit in units: \n <IND> return int(float) * 100_000_000_000 / units[unit] \n \n else: \n",
      "44": "<DED> if unit in units: \n <DED> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "45": "<DED> if unit in units: \n \n return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "46": "<IND> if unit in units: \n <DED> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "47": "\n if unit in units: \n <DED> return float(amount[:-1]) * 100_000_000_000 / units[unit] \n <DED> else: \n",
      "48": "\n if unit in units: \n \n return int(amount[:-1]) * 100_000_000_000 / units[unit] \n \n else: \n",
      "49": "<DED> if unit in units: \n <IND> return int(amount[-1]) * 100_000_000_000 / units[unit] \n \n else: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>subdomain = await get_subdomain(payment_hash)\n    return subdomain\n\n",
    "target_code": "\n    <DED>new_subdomain = await get_subdomain(payment_hash)\n    assert new_subdomain, \"Newly paid subdomain couldn't be retrieved\"\n    return new_subdomain\n\n",
    "warning_line": "    return subdomain",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Subdomains` but got `Optional[Subdomains]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 74,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lnbits/lnbits-legend",
    "source_filename": "lnbits/extensions/subdomains/crud.py",
    "target_filename": "lnbits/extensions/subdomains/crud.py",
    "source_changeid": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d^",
    "target_changeid": "e38b945d5ca504ce46d7d58f6bbe034c68cbfd2d",
    "predictions": [
      "\n <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "1": "\n <IND> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "2": "<DED> <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "3": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert subdomain is not None \n return subdomain \n \n",
      "4": "<IND> <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "5": "\n <DED> subdomain = await get_subdomain(payment_hash).decode('utf-8') \n return subdomain \n \n",
      "6": "\n \n subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "7": "\n <DED> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('utf-8')) \n return subdomain \n \n",
      "8": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return Subdomain \n \n",
      "9": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return [] \n \n",
      "10": "\n <IND> subdomain = await get_subdomain(payment_hash) \n assert subdomain is not None \n return subdomain \n \n",
      "11": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, []) \n return subdomain \n \n",
      "12": "\n <IND> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('utf-8')) \n return subdomain \n \n",
      "13": "<DED> <IND> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "14": "\n <IND> subdomain = await get_subdomain(payment_hash).decode('utf-8') \n return subdomain \n \n",
      "15": "\n <DED> subdomain = wait get_subdomain(payment_hash) \n return subdomain \n \n",
      "16": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Optional[Subdomains]) \n return subdomain \n \n",
      "17": "\n <DED> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('utf-8').decode('utf-8')) \n return subdomain \n \n",
      "18": "<IND> <IND> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "19": "\n { subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "20": "\n } subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "21": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, subdomain) \n return subdomain \n \n",
      "22": "\n <DED> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('utf-8') \n return subdomain \n \n",
      "23": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return Optional[Subdomains] \n \n",
      "24": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return'subdomain' \n \n",
      "25": "\n <IND> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('utf-8').decode('utf-8')) \n return subdomain \n \n",
      "26": "\n <IND> subdomain = await get_subdomain(payment_hash) \n return Subdomain \n \n",
      "27": "\n <DED> subdomain = await get_subdomain(payment_hash) \n if not subdomain: \n <IND> return subdomain \n \n",
      "28": "\n <IND> subdomain = await get_subdomain(payment_hash) \n return [] \n \n",
      "29": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, \"paypal\") \n return subdomain \n \n",
      "30": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, \"PaymentHash\") \n return subdomain \n \n",
      "31": "\n <DED> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('utf-8')).decode('utf-8') \n return subdomain \n \n",
      "32": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, \"payment_hash\") \n return subdomain \n \n",
      "33": "{ <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "34": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n <DED>",
      "35": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return '' \n \n",
      "36": "\n <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n <IND>",
      "37": "\n <DED> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('utf-8')) \n assert subdomain is not None \n return subdomain \n \n",
      "38": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, Subdomain) \n return subdomain \n \n",
      "39": "\n <IND> subdomain = wait get_subdomain(payment_hash) \n return subdomain \n \n",
      "40": "\n \\ subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "41": "\n <DED> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('mypy').decode('utf-8')) \n return subdomain \n \n",
      "42": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, PaymentHash) \n return subdomain \n \n",
      "43": "\n <DED> subdomain = await get_subdomain(payment_hash) \n assert isinstance(subdomain, payment_hash) \n return subdomain \n \n",
      "44": "} <DED> subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "45": "\n <IND> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('utf-8') \n return subdomain \n \n",
      "46": "\n <DED> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('utf-8')) \n return Subdomain \n \n",
      "47": "\n <DED> subdomain = await get_subdomain(payment_hash).decode('utf-8') \n assert subdomain is not None \n return subdomain \n \n",
      "48": "\n <DED> get_subdomain = await get_subdomain(payment_hash) \n return subdomain \n \n",
      "49": "\n <DED> subdomain = await get_subdomain(payment_hash).decode('utf-8').decode('mfa_enabled') \n return subdomain \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return ImageData(self._dto[\"profileiconmax\"])\n\n",
    "target_code": "        <IND>\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\"\n        return self._dto[\"profileiconmax\"]\n\n",
    "warning_line": "        return ImageData(self._dto[\"profileiconmax\"])",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `ImageData`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "meraki-analytics/cassiopeia",
    "source_filename": "cassiopeia/core/staticdata/realms.py",
    "target_filename": "cassiopeia/core/staticdata/realms.py",
    "source_changeid": "a26127b190f398137c4cf92469c5de573ce2a018^",
    "target_changeid": "a26127b190f398137c4cf92469c5de573ce2a018",
    "predictions": [
      "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "1": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "2": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "3": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return int(self._dto[\"profileiconmax\"]) \n \n",
      "4": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "5": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return int(self._dto[\"profileiconmax\"]) \n \n",
      "6": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return int(self._dto[\"profileiconmax\"]) \n \n",
      "7": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "8": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "9": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return tuple(int(self._dto[\"profileiconmax\"])) \n \n",
      "10": "{ \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "11": "} \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "12": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return Int(self._dto[\"profileiconmax\"]) \n \n",
      "13": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return tuple(int(self._dto[\"profileiconmax\"])) \n \n",
      "14": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return tuple(int(self._dto[\"profileiconmax\"])) \n \n",
      "15": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return tuple(ImageData.int(self._dto[\"profileiconmax\"])) \n \n",
      "16": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return tuple(ImageData(self._dto[\"profileiconmax\"])) \n \n",
      "17": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "18": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n <IND>",
      "19": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return Int(self._dto[\"profileiconmax\"]) \n \n",
      "20": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n <DED>",
      "21": "\\ \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "22": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(Int(self._dto[\"profileiconmax\"])) \n \n",
      "23": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return Int(self._dto[\"profileiconmax\"]) \n \n",
      "24": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return tuple(ImageData.int(self._dto[\"profileiconmax\"])) \n \n",
      "25": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return tuple(int, profileiconmax)) \n \n",
      "26": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return File.ImageData(self._dto[\"profileiconmax\"]) \n \n",
      "27": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" <IND> return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "28": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" <DED> return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "29": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return tuple(ImageData(self._dto[\"profileiconmax\"])) \n \n",
      "30": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ProfileIconMax(int(self._dto[\"profileiconmax\"])) \n \n",
      "31": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return File.ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "32": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return File.int(self._dto[\"profileiconmax\"]) \n \n",
      "33": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "34": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "35": "<IND> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return tuple(ImageData(self._dto[\"profileiconmax\"])) \n \n",
      "36": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "37": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n <IND>",
      "38": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) <DED> \n",
      "39": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) <IND> \n",
      "40": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "41": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n <DED>",
      "42": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "43": "{ \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return int(self._dto[\"profileiconmax\"]) \n \n",
      "44": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "45": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "46": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n",
      "47": "<DED> \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(Int(self._dto[\"profileiconmax\"])) \n \n",
      "48": "\n \"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n {",
      "49": "\"\"\"Special behavior number identifying the largest profile icon ID that can be used under 500. Any profile icon that is requested between this number and 500 should be mapped to 0.\"\"\" \n return ImageData(int(self._dto[\"profileiconmax\"])) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        return self.parent and self.parent.left is self\n\n",
    "target_code": "        <IND>\"\"\"Returns true iff this node is the left child of its parent.\"\"\"\n        if self.parent is None:\n            <IND>return False\n        <DED>return self.parent.left is self.parent.left is self\n\n",
    "warning_line": "        return self.parent and self.parent.left is self",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `typing.Optional[bool]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 435,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "data_structures/binary_tree/red_black_tree.py",
    "target_filename": "data_structures/binary_tree/red_black_tree.py",
    "source_changeid": "7a605766fe7fe79a00ba1f30447877be4b77a6f2^",
    "target_changeid": "7a605766fe7fe79a00ba1f30447877be4b77a6f2",
    "predictions": [
      "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "1": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent is not None and self.parent.left is self \n \n",
      "2": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self) \n \n",
      "3": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and bool(self.parent.left is self)) \n \n",
      "4": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "5": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "6": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self) \n \n",
      "7": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent is not None and self.parent.left is self \n \n",
      "8": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return True if self.parent is not None and self.parent.left is self \n \n",
      "9": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self) \n \n",
      "10": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent is not None and self.parent.left is self \n \n",
      "11": "\n \"\"\"Returns true if this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "12": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and bool(self.parent.left is self)) \n \n",
      "13": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and bool(self.parent.left is self)) \n \n",
      "14": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return True if self.parent and self.parent.left is self \n \n",
      "15": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool(self.parent.left is self) \n \n",
      "16": "\n \"\"\"Returns true if this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self) \n \n",
      "17": "\n \"\"\"Returns true if this node is the left child of its parent.\"\"\" \n return self.parent is not None and self.parent.left is self \n \n",
      "18": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and bool(self.parent.left)) \n \n",
      "19": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return False and self.parent.left is self \n \n",
      "20": "\n \"\"\"Returns true if this node is the left child of its parent.\"\"\" \n return bool(self.parent and bool(self.parent.left is self)) \n \n",
      "21": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and left is self.parent.left) \n \n",
      "22": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return True if self.parent is not None and self.parent.left is self \n \n",
      "23": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool(self.parent.left) is self \n \n",
      "24": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent, left) and bool(self.parent.left) \n \n",
      "25": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return True if self.parent is not None and self.parent.left is self \n \n",
      "26": "<DED> \"\"\"Returns true if this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "27": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent is not None and self.parent.left is self) \n \n",
      "28": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return true if self.parent is not None and self.parent.left is self \n \n",
      "29": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n assert self.parent is not None and self.parent.left is self \n \n",
      "30": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent) and bool(self.parent.left is self) \n \n",
      "31": "{ \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "32": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and bool(self.parent.left) is self) \n \n",
      "33": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return True if self.parent and self.parent.left is self \n \n",
      "34": "<IND> \"\"\"Returns true if this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "35": "\n \"\"\"Returns true if this node is the left child of its parent.\"\"\" \n return True if self.parent is not None and self.parent.left is self \n \n",
      "36": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and left is self.parent.left is self) \n \n",
      "37": "<DED> \"\"\"Returns true if this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self) \n \n",
      "38": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return True if self.parent and self.parent.left is self \n \n",
      "39": "} \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n \n",
      "40": "<DED> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and bool(self.parent.left)) \n \n",
      "41": "{ \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self) \n \n",
      "42": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n <IND>",
      "43": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent and self.parent.left is self \n <DED>",
      "44": "<IND> \"\"\"Returns true if this node is the left child of its parent.\"\"\" \n return bool(self.parent and self.parent.left is self) \n \n",
      "45": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return Self.parent and self.parent.left is self \n \n",
      "46": "<DED> \"\"\"Returns true if this node is the left child of its parent.\"\"\" \n return self.parent is not None and self.parent.left is self \n \n",
      "47": "{ \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return self.parent is not None and self.parent.left is self \n \n",
      "48": "<IND> \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and bool(self.parent.left)) \n \n",
      "49": "\n \"\"\"Returns true iff this node is the left child of its parent.\"\"\" \n return bool(self.parent and left is self.parent) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def __str__(self) -> None:\n        <IND>return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]\n\n",
    "target_code": "\n    <DED>def __str__(self) -> str:\n        <IND>return str([self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)])\n\n",
    "warning_line": "        return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)]",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `None` but got `typing.List[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 122,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "target_filename": "data_structures/binary_tree/lazy_segment_tree.py",
    "source_changeid": "2595cf059d677c39513a9d75f1736bc5b84d6298^",
    "target_changeid": "2595cf059d677c39513a9d75f1736bc5b84d6298",
    "predictions": [
      "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "1": "\n <IND> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "2": "\n <DED> def __str__(self) -> typing.List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "3": "<DED> <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "4": "<IND> <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "5": "\n <DED> def __str__(self) -> typing.List[int]: \n \n return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "6": "\n <DED> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "7": "\n \n def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "8": "\n <IND> def __str__(self) -> typing.List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "9": "<DED> <IND> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "10": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "11": "\n <DED> def __str__(self) -> typing.Optional[]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "12": "\n <DED> def __str__(self) -> None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "13": "\n <DED> def __str__(self) -> Typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "14": "<DED> <DED> def __str__(self) -> typing.List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "15": "<IND> <IND> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "16": "<IND> <DED> def __str__(self) -> typing.List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "17": "\n <DED> def __str__(self) -> typing.List[int]: \n { return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "18": "\n <DED> def __str__(self) -> typing.List[int]: \n } return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "19": "\n { def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "20": "\n } def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "21": "\n <DED> def __str__(self) -> typing.List: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "22": "\n <IND> def __str__(self) -> typing.List[int]: \n \n return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "23": "{ <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "24": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n <IND>",
      "25": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n <DED>",
      "26": "<DED> <DED> def __str__(self) -> typing.List[int]: \n \n return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "27": "} <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "28": "\n <DED> def __str__(self) -> typing.Optional[\"None\"]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "29": "\n <IND> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "30": "\n <DED> def __str__(self) -> List[None]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "31": "\n <IND> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "32": "<IND> <DED> def __str__(self) -> typing.List[int]: \n \n return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "33": "\n \\ def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "34": "\n <IND> def __str__(self) -> typing.Optional[]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "35": "\n <DED> def __str__(self) -> typing.List[int]: \n \\ return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "36": "\n <IND> def __str__(self) -> Typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "37": "\n \n def __str__(self) -> typing.List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "38": "<DED> \n def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "39": "\n <DED> def __str__(self) -> List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "40": "<DED> <DED> def __str__(self) -> List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "41": "<DED> <IND> def __str__(self) -> typing.List[int]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "42": "\n <IND> def __str__(self) -> None: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "43": "\n <DED> def __str__(self) -> typing.Optional[]: \n <DED> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "44": "\n <DED> def __str__(self) -> typing.List[int]: \n <DED> return [self.query(1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "45": "<DED> <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "46": "\n <DED> def __str__(self): \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "47": "<DED> <DED> def __str__(self) -> typing.Optional[]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] \n \n",
      "48": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] <DED> \n",
      "49": "\n <DED> def __str__(self) -> typing.List[int]: \n <IND> return [self.query(1, 1, self.size, i, i) for i in range(1, self.size + 1)] <IND> \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if file_hash == \"\":\n            <IND>return False\n        <DED>try:\n",
    "target_code": "        if file_hash == \"\":\n            <IND>return \"\"\n        <DED>try:\n",
    "warning_line": "            return False",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Uranium",
    "source_filename": "UM/Trust.py",
    "target_filename": "UM/Trust.py",
    "source_changeid": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41^",
    "target_changeid": "3c1fbd5f5c58a4461762c6b3023b34b33b523e41",
    "predictions": [
      "if file_hash == \"\": \n <IND> return None \n <DED> try: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if file_hash == \"\": \n <IND> return None \n <DED> try: \n",
      "1": "if file_hash == \"\": \n <IND> return None \n <IND> try: \n",
      "2": "if file_hash == \"\": \n <IND> return None \n \n try: \n",
      "3": "if file_hash == \"\": \n <IND> return False \n <DED> try: \n",
      "4": "if file_hash == \"\": \n <IND> return False \n <IND> try: \n",
      "5": "if file_hash == \"\": \n <DED> return None \n <DED> try: \n",
      "6": "if file_hash == \"\": \n <DED> return None \n <IND> try: \n",
      "7": "if file_hash == \"\": \n <IND> return True, but not None \n <DED> try: \n",
      "8": "if file_hash == \"\": \n <IND> return True, but not None \n <IND> try: \n",
      "9": "if file_hash == \"\": \n <IND> return False \n \n try: \n",
      "10": "if file_hash == \"\": \n <DED> return None \n \n try: \n",
      "11": "if file_hash == \"\": \n <IND> return str(false) \n \n try: \n",
      "12": "if file_hash == \"\": \n <IND> return str(false) \n <DED> try: \n",
      "13": "if file_hash == \"\": \n <IND> assert isinstance(false, str) \n return False \n \n try: \n",
      "14": "if file_hash == \"\": \n <IND> raise ValueError(\"Expected a file, got int/str(\"Expected a file, got int\") \n \n try: \n",
      "15": "if file_hash == \"\": \n \n return None \n <DED> try: \n",
      "16": "if file_hash == \"\": \n <IND> return str(false) \n <IND> try: \n",
      "17": "if file_hash == \"\": \n <IND> assert isinstance(false, str) \n return False \n <DED> try: \n",
      "18": "if file_hash == \"\": \n <IND> return True, but not None \n \n try: \n",
      "19": "if file_hash == \"\": \n <DED> return False \n <DED> try: \n",
      "20": "if file_hash == \"\": \n \n return None \n <IND> try: \n",
      "21": "if file_hash == \"\": \n <IND> bool = False \n <DED> try: \n",
      "22": "if file_hash == \"\": \n <IND> assert isinstance(false, str) \n return False \n <IND> try: \n",
      "23": "if file_hash == \"\": \n <IND> raise RuntimeError(\"False\") \n \n try: \n",
      "24": "if file_hash == \"\": \n <IND> raise ValueError(\"Expected a file, got int/list instead\") \n \n try: \n",
      "25": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, str) \n return False \n \n try: \n",
      "26": "if file_hash == \"\": \n <IND> return True, but returned False \n <DED> try: \n",
      "27": "if file_hash == \"\": \n <DED> return False \n <IND> try: \n",
      "28": "if file_hash == \"\": \n <IND> return True, but returned False \n \n try: \n",
      "29": "if file_hash == \"\": \n <IND> return True, but returned False \n <IND> try: \n",
      "30": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, str) \n return False \n <DED> try: \n",
      "31": "if file_hash == \"\": \n <IND> return \"\" \n \n try: \n",
      "32": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, str) \n return None \n \n try: \n",
      "33": "if file_hash == \"\": \n <IND> raise ValueError(\"Expected a file with a string) \n \n try: \n",
      "34": "if file_hash == \"\": \n <IND> return bool(False) \n \n try: \n",
      "35": "if file_hash == \"\": \n <IND> assert isinstance(false, str) \n <DED> try: \n",
      "36": "if file_hash == \"\": \n <IND> raise ValueError(\"Expected a file, got int/false\") \n \n try: \n",
      "37": "if file_hash == \"\": \n <IND> bool = False \n <IND> try: \n",
      "38": "if file_hash == \"\": \n <IND> assert isinstance(file_hash, str) \n return False \n <IND> try: \n",
      "39": "if file_hash == \"\": \n <IND> return True, but returned None \n <DED> try: \n",
      "40": "if file_hash == \"\": \n <IND> raise ValueError(\"Expected a file, got int/float instead\") \n \n try: \n",
      "41": "if file_hash == \"\": \n <IND> return bool(False) \n <DED> try: \n",
      "42": "if file_hash == \"\": \n <IND> return True, but returned None \n \n try: \n",
      "43": "if file_hash == \"\": \n <IND> return True, but returned None \n <IND> try: \n",
      "44": "if file_hash == \"\": \n <DED> raise ValueError(\"Expected a file, got int/str(\"Expected a file, got int\") \n \n try: \n",
      "45": "if file_hash == \"\": \n <IND> return None \n { try: \n",
      "46": "if file_hash == \"\": \n <DED> return True, but not None \n <DED> try: \n",
      "47": "if file_hash == \"\": \n <IND> raise ValueError(\"Expected a file, got int/str instead\") \n \n try: \n",
      "48": "if file_hash == \"\": \n \n return None \n \n try: \n",
      "49": "if file_hash == \"\": \n <IND> return bool(False) \n <IND> try: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            <DED>if target.is_ammo_depot:\n                <IND>yield target\n",
    "target_code": "            <DED>if target.is_ammo_depot:\n                <IND>assert isinstance(target, BuildingGroundObject)\n                yield target\n",
    "warning_line": "                yield target",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.Iterator[BuildingGroundObject]` but got `typing.Generator[TheaterGroundObject[], None, None]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 100,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "dcs-liberation/dcs_liberation",
    "source_filename": "game/commander/theaterstate.py",
    "target_filename": "game/commander/theaterstate.py",
    "source_changeid": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3^",
    "target_changeid": "5f8be5fa910a1191ea4da7b400b172bc5ae183d3",
    "predictions": [
      "<DED> if target.is_ammo_depot: \n <IND> yield target \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> if target.is_ammo_depot: \n <IND> yield target \n",
      "1": "\n if target.is_ammo_depot: \n <IND> yield target \n",
      "2": "<IND> if target.is_ammo_depot: \n <IND> yield target \n",
      "3": "<DED> if target.is_ammo_depot: \n <IND> if not target.is_ammo_depot: \n <IND> yield target \n",
      "4": "\n if target.is_ammo_depot: \n <IND> if not target.is_ammo_depot: \n <IND> yield target \n",
      "5": "<IND> if target.is_ammo_depot: \n <IND> if not target.is_ammo_depot: \n <IND> yield target \n",
      "6": "<DED> if target.is_ammo_depot: \n <DED> yield target \n",
      "7": "<DED> if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot): \n <IND> yield target \n",
      "8": "<DED> if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot, None): \n <IND> yield target \n",
      "9": "<DED> if target.is_ammo_depot: \n <IND> assert isinstance(target.is_ammo_depot, []) \n yield target \n",
      "10": "<DED> if target.is_ammo_depot: \n <IND> if not target.is_ammo_depot: \n <DED> yield target \n",
      "11": "<DED> if target.is_ammo_depot: \n <DED> if not target.is_ammo_depot: \n <IND> yield target \n",
      "12": "\n if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot): \n <IND> yield target \n",
      "13": "\n if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot, None): \n <IND> yield target \n",
      "14": "<IND> if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot): \n <IND> yield target \n",
      "15": "\n if target.is_ammo_depot: \n <DED> yield target \n",
      "16": "<IND> if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot, None): \n <IND> yield target \n",
      "17": "<IND> if target.is_ammo_depot: \n <DED> yield target \n",
      "18": "\n if target.is_ammo_depot: \n <IND> if not target.is_ammo_depot: \n <DED> yield target \n",
      "19": "<DED> if target.is_ammo_depot: \n <IND> if isinstance(target.is_ammo_depot, None): \n <IND> yield target \n",
      "20": "<IND> if target.is_ammo_depot: \n <IND> if not target.is_ammo_depot: \n <DED> yield target \n",
      "21": "\n if target.is_ammo_depot: \n <DED> if not target.is_ammo_depot: \n <IND> yield target \n",
      "22": "<IND> if target.is_ammo_depot: \n <DED> if not target.is_ammo_depot: \n <IND> yield target \n",
      "23": "\n if target.is_ammo_depot: \n <IND> if isinstance(target.is_ammo_depot, None): \n <IND> yield target \n",
      "24": "<IND> if target.is_ammo_depot: \n <IND> if isinstance(target.is_ammo_depot, None): \n <IND> yield target \n",
      "25": "<DED> if target.is_ammo_depot: \n <IND> builder.Generator(target.is_ammo_depot) \n yield target \n",
      "26": "\n if target.is_ammo_depot: \n <IND> builder.Generator(target.is_ammo_depot) \n yield target \n",
      "27": "<IND> if target.is_ammo_depot: \n <IND> builder.Generator(target.is_ammo_depot) \n yield target \n",
      "28": "<DED> if target.is_ammo_depot: \n <IND> if isinstance(target.is_ammo_depot): \n <IND> yield target \n",
      "29": "<DED> if target.is_ammo_depot: \n <IND> if not target.is_ammo_depot: \n \n yield target \n",
      "30": "\n if target.is_ammo_depot: \n <IND> if isinstance(target.is_ammo_depot): \n <IND> yield target \n",
      "31": "<IND> if target.is_ammo_depot: \n <IND> if isinstance(target.is_ammo_depot): \n <IND> yield target \n",
      "32": "<DED> if target.is_ammo_depot: \n <IND> return yield target \n",
      "33": "<DED> if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot, None): \n <DED> yield target \n",
      "34": "<DED> if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot): \n <DED> yield target \n",
      "35": "\n if target.is_ammo_depot: \n <IND> if not target.is_ammo_depot: \n \n yield target \n",
      "36": "<DED> if target.is_ammo_depot: \n <DED> if not isinstance(target.is_ammo_depot, None): \n <IND> yield target \n",
      "37": "<DED> if target.is_ammo_depot: \n <DED> if not isinstance(target.is_ammo_depot): \n <IND> yield target \n",
      "38": "<IND> if target.is_ammo_depot: \n <IND> if not target.is_ammo_depot: \n \n yield target \n",
      "39": "\n if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot, None): \n <DED> yield target \n",
      "40": "<IND> if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot, None): \n <DED> yield target \n",
      "41": "\n if target.is_ammo_depot: \n <DED> if not isinstance(target.is_ammo_depot, None): \n <IND> yield target \n",
      "42": "\n if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot): \n <DED> yield target \n",
      "43": "\n if target.is_ammo_depot: \n <DED> if not isinstance(target.is_ammo_depot): \n <IND> yield target \n",
      "44": "<IND> if target.is_ammo_depot: \n <DED> if not isinstance(target.is_ammo_depot, None): \n <IND> yield target \n",
      "45": "<IND> if target.is_ammo_depot: \n <IND> if not isinstance(target.is_ammo_depot): \n <DED> yield target \n",
      "46": "<IND> if target.is_ammo_depot: \n <DED> if not isinstance(target.is_ammo_depot): \n <IND> yield target \n",
      "47": "\n if target.is_ammo_depot: \n <IND> return yield target \n",
      "48": "<IND> if target.is_ammo_depot: \n <IND> return yield target \n",
      "49": "<DED> if target.is_ammo_depot: \n <IND> if isinstance(target.is_ammo_depot, None): \n <DED> yield target \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        <DED>elif self.error_source == ErrorSource.FRAMEWORK_ERROR:\n            <IND>return self.error.to_string()\n        <DED>else:\n            <IND>check.failed(f\"Unexpected error setting: {self.error_source}\")\n\n",
    "target_code": "            return self.error.message.strip() + \":\\n\\n\" + user_code_error.to_string()\n        <DED>else:\n            <IND>return self.error.to_string()\n\n",
    "warning_line": "            check.failed(f\"Unexpected error setting: {self.error_source}\")",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 107,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "dagster-io/dagster",
    "source_filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "target_filename": "python_modules/dagster/dagster/core/execution/plan/objects.py",
    "source_changeid": "b57b91ea7666da41a3dbc610116aed500c647d84^",
    "target_changeid": "b57b91ea7666da41a3dbc610116aed500c647d84",
    "predictions": [
      "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "1": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "2": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "3": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "4": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "5": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "6": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "7": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "8": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "9": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "10": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "11": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "12": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "13": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "14": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <IND> self.error_source \n \") \n \n",
      "15": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <IND> self.error_source \n \") \n \n",
      "16": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "17": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "18": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "19": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "20": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source <DED> \") \n \n",
      "21": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source <DED> \") \n \n",
      "22": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <IND> self.error_source \n \") \n \n",
      "23": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <IND> self.error_source \n \") \n \n",
      "24": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <IND> self.error_source \n \") \n \n",
      "25": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: <IND> self.error_source \n \") \n \n",
      "26": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "27": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "28": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return tuple(str(self.error.to_string())) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "29": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return tuple(str(self.error.to_string())) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "30": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: <IND> self.error_source \n \") \n \n",
      "31": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: <IND> self.error_source \n \") \n \n",
      "32": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source <DED> \") \n \n",
      "33": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source <DED> \") \n \n",
      "34": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source <DED> \") \n \n",
      "35": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source <DED> \") \n \n",
      "36": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source <IND> \") \n \n",
      "37": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "38": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "39": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source <IND> \") \n \n",
      "40": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "41": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <IND> else: \n <IND> check.failed(f\"Unexpected error setting: <DED> self.error_source \n \") \n \n",
      "42": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return self.error.to_string() \n <DED> else: \n <DED> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "43": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return tuple(str(self.error.to_string())) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "44": "return self.error.message.strip() + \": \n n \n n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return tuple(str(self.error.to_string())) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "45": "return self.error.message.strip() + \": \n n <IND> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return tuple(str(self.error.to_string())) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "46": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return tuple(self.error.to_string()) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "47": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return tuple(self.error.to_string()) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "48": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <IND> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return str(self.error.to_string()) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n",
      "49": "return self.error.message.strip() + \": \n n <DED> n\" + user_code_error.to_string() \n <DED> elif self.error_source == ErrorSource.FRAMEWORK_ERROR: \n <IND> return str(self.error.to_string()) \n <DED> else: \n <IND> check.failed(f\"Unexpected error setting: \n self.error_source \n \") \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            # threading library\n            <IND>return None\n        <DED>frames: List[Tuple[FrameType, int]] = [\n",
    "target_code": "            # threading library\n            <IND>return []\n        <DED>frames: List[Tuple[FrameType, int]] = [\n",
    "warning_line": "            return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `List[Tuple[FrameType, int, FrameType]]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 796,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "plasma-umass/scalene",
    "source_filename": "scalene/scalene_profiler.py",
    "target_filename": "scalene/scalene_profiler.py",
    "source_changeid": "be32bf042a868c3731dab570b0014b9dc8879e58^",
    "target_changeid": "be32bf042a868c3731dab570b0014b9dc8879e58",
    "predictions": [
      "# threading library \n <DED> return [] \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# threading library \n <DED> return [] \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "1": "# threading library \n <DED> return [] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "2": "# threading library \n <IND> return [] \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "3": "# threading library \n <DED> return [] \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "4": "# threading library \n <IND> return [] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "5": "# threading library \n <IND> return [] \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "6": "# threading library \n \n return [] \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "7": "# threading library \n <DED> return None \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "8": "# threading library \n \n return [] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "9": "# threading library \n <DED> return None \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "10": "# threading library \n \n return [] \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "11": "# threading library \n <IND> return None \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "12": "# threading library \n <IND> return None \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "13": "# threading library \n <DED> return Tuple[FrameType, int, FrameType] \n <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "14": "# threading library \n <IND> return Tuple[FrameType, int, FrameType] \n <DED> frames: List[Tuple[FrameType, int]] = [ \n",
      "15": "# threading library \n <DED> return [] \n \n frames: List[Tuple[FrameType, int], FrameType]] = [ \n",
      "16": "# threading library \n <DED> return [] \n <DED> frames: List[Tuple[FrameType, int], FrameType]] = [ \n",
      "17": "# threading library \n <DED> return None \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "18": "# threading library \n <DED> return [] \n <IND> frames: List[Tuple[FrameType, int], FrameType]] = [ \n",
      "19": "# threading library \n <IND> return [] \n \n frames: List[Tuple[FrameType, int], FrameType]] = [ \n",
      "20": "# threading library \n <DED> return [] \n { frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "21": "# threading library \n <IND> return [] \n <DED> frames: List[Tuple[FrameType, int], FrameType]] = [ \n",
      "22": "# threading library \n <IND> return None \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "23": "# threading library \n <DED> return [] \n } frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "24": "# threading library \n <IND> return [] \n <IND> frames: List[Tuple[FrameType, int], FrameType]] = [ \n",
      "25": "# threading library \n <DED> return [] \n \n frames: List[Tuple[FrameType, int], FrameType] = [ \n",
      "26": "# threading library \n <IND> return [] \n { frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "27": "# threading library \n { return [] \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "28": "# threading library \n } return [] \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "29": "# threading library \n <IND> return [] \n } frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "30": "# threading library \n <DED> return [] \n <DED> frames: List[Tuple[FrameType, int], FrameType] = [ \n",
      "31": "# threading library \n { return [] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "32": "# threading library \n <IND> return [] \n \n frames: List[Tuple[FrameType, int], FrameType] = [ \n",
      "33": "# threading library \n } return [] \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "34": "# threading library \n <DED> return [] \n <IND> frames: List[Tuple[FrameType, int], FrameType] = [ \n",
      "35": "# threading library \n { return [] \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "36": "# threading library \n } return [] \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "37": "# threading library \n \n return None \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "38": "# threading library \n <IND> return [] \n <DED> frames: List[Tuple[FrameType, int], FrameType] = [ \n",
      "39": "# threading library \n <DED> return \"\" \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "40": "# threading library \n \n return None \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "41": "# threading library \n <DED> return \"\" \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "42": "# threading library \n <IND> return [] \n <IND> frames: List[Tuple[FrameType, int], FrameType] = [ \n",
      "43": "# threading library \n <DED> return \"\" \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "44": "# threading library \n <IND> return \"\" \n <DED> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "45": "# threading library \n <IND> return \"\" \n <IND> frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "46": "# threading library \n <IND> return \"\" \n \n frames: List[Tuple[FrameType, int, FrameType]] = [ \n",
      "47": "# threading library \n <DED> return None \n <DED> frames: List[Tuple[FrameType, int], FrameType] = [ \n",
      "48": "# threading library \n <DED> return [] \n \n frames: List[Tuple[FrameType, int]] = [ \n",
      "49": "# threading library \n <DED> return [] \n <DED> frames: List[Tuple[FrameType, int]] = [ \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>\"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self._mem_slot\n\n",
    "target_code": "        <IND>\"\"\"The classical memory slot which will store the classified readout result.\"\"\"\n        return self.operands[2]\n\n",
    "warning_line": "        return self._mem_slot",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `MemorySlot` but got `Optional[MemorySlot]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 112,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Qiskit/qiskit-terra",
    "source_filename": "qiskit/pulse/instructions/acquire.py",
    "target_filename": "qiskit/pulse/instructions/acquire.py",
    "source_changeid": "1687c30fd63344f1ea50cb7b1774e26928678b23^",
    "target_changeid": "1687c30fd63344f1ea50cb7b1774e26928678b23",
    "predictions": [
      "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "1": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n \n",
      "2": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "3": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "4": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n \n",
      "5": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n \n",
      "6": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self.mem_slot \n \n",
      "7": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n \n",
      "8": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n \n",
      "9": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self._mem_slot is not None \n return self._mem_slot \n \n",
      "10": "{ \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "11": "} \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "12": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self.mem_slot = self._mem_slot \n \n",
      "13": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self.mem_slot = self.mem_slot \n \n",
      "14": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return self._mem_slot \n \n",
      "15": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return Self.mem_slot \n \n",
      "16": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n <IND>",
      "17": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n <DED>",
      "18": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert Self.mem_slot is not None \n return self._mem_slot \n \n",
      "19": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self._mem_slot is not None \n return self._mem_slot \n \n",
      "20": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None <IND> return self._mem_slot \n \n",
      "21": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self._mem_slot is not None \n return self._mem_slot \n \n",
      "22": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None <DED> return self._mem_slot \n \n",
      "23": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" <IND> assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "24": "\\ \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "25": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" <DED> assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "26": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n return Self.mem_slot \n \n",
      "27": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot <IND> \n",
      "28": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot <DED> \n",
      "29": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None { return self._mem_slot \n \n",
      "30": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is None \n return self._mem_slot \n \n",
      "31": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n {",
      "32": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n if not self.mem_slot: \n <IND> return self._mem_slot \n \n",
      "33": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "34": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" { assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "35": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self.mem_slot = self.memory_slot \n \n",
      "36": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot { \n",
      "37": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "38": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return Self.mem_slot \n \n",
      "39": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self.mem_slot = self._mem_slot \n \n",
      "40": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "41": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "42": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "43": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None } return self._mem_slot \n \n",
      "44": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n self.mem_slot = self.mem_slot \n \n",
      "45": "\"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n \n",
      "46": "<DED> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n <IND>",
      "47": "\n \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self._mem_slot \n }",
      "48": "<IND> \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return Self.mem_slot \n \n",
      "49": "{ \"\"\"The classical memory slot which will store the classified readout result.\"\"\" \n assert self.mem_slot is not None \n return self.mem_slot \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>self._confidence_hi.update(conf_hi)\n            <DED>return None\n        <DED>else:\n",
    "target_code": "                <IND>self._confidence_hi.update(conf_hi)\n            <DED>return self\n        <DED>else:\n",
    "warning_line": "            return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `TimeSeries` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 548,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unit8co/darts",
    "source_filename": "u8timeseries/timeseries.py",
    "target_filename": "u8timeseries/timeseries.py",
    "source_changeid": "2139a0f40d032b936c76158b01f6f48656567a0c^",
    "target_changeid": "2139a0f40d032b936c76158b01f6f48656567a0c",
    "predictions": [
      "<DED> self._confidence_hi.update(conf_hi) \n <DED> return 0 \n \n else: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return 0 \n \n else: \n",
      "1": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return 0 \n \n else: \n",
      "2": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return 0 \n \n else: \n",
      "3": "\n self._confidence_hi.update(conf_hi) \n <DED> return 0 \n \n else: \n",
      "4": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n \n else: \n",
      "5": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n \n else: \n",
      "6": "<IND> self._confidence_hi.update(conf_hi) \n <IND> return 0 \n \n else: \n",
      "7": "\n self._confidence_hi.update(conf_hi) \n <IND> return 0 \n \n else: \n",
      "8": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return \"\" \n \n else: \n",
      "9": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return 'TimeSeries' \n \n else: \n",
      "10": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n \n else: \n",
      "11": "\n self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n \n else: \n",
      "12": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n \n else: \n",
      "13": "\n self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n \n else: \n",
      "14": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n <DED> else: \n",
      "15": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <DED> else: \n",
      "16": "\n self._confidence_hi.update(conf_hi) \n <IND> return 'TimeSeries' \n \n else: \n",
      "17": "<IND> self._confidence_hi.update(conf_hi) \n <IND> return 'TimeSeries' \n \n else: \n",
      "18": "<IND> self._confidence_hi.update(conf_hi) \n <IND> return \"\" \n \n else: \n",
      "19": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n <IND> else: \n",
      "20": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <IND> else: \n",
      "21": "\n self._confidence_hi.update(conf_hi) \n <IND> return \"\" \n \n else: \n",
      "22": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(\"TimeSeries\") \n <DED> else: \n",
      "23": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return 'TimeSeries' \n <DED> else: \n",
      "24": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return 0 \n <DED> else: \n",
      "25": "\n self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n <DED> else: \n",
      "26": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return \"\" \n <DED> else: \n",
      "27": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n <DED> else: \n",
      "28": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <DED> else: \n",
      "29": "\n self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <DED> else: \n",
      "30": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return 'TimeSeries' \n <IND> else: \n",
      "31": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(\"TimeSeries\") \n <IND> else: \n",
      "32": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return 0 \n <IND> else: \n",
      "33": "\n self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n <IND> else: \n",
      "34": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return \"\" \n <IND> else: \n",
      "35": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return TimeSeries(\"TimeSeries\") \n <DED> else: \n",
      "36": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return 'TimeSeries' \n <IND> else: \n",
      "37": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(\"TimeSeries\") \n <DED> else: \n",
      "38": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <IND> else: \n",
      "39": "\n self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(\"TimeSeries\") \n <DED> else: \n",
      "40": "\n self._confidence_hi.update(conf_hi) \n <DED> return \"\" \n <IND> else: \n",
      "41": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(\"TimeSeries\") \n <DED> else: \n",
      "42": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(\"Time Series\") \n <DED> else: \n",
      "43": "\n self._confidence_hi.update(conf_hi) \n <IND> return 'TimeSeries' \n <DED> else: \n",
      "44": "<DED> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(\"TimeSeries\") \n \n else: \n",
      "45": "<IND> self._confidence_hi.update(conf_hi) \n <IND> return 'TimeSeries' \n <DED> else: \n",
      "46": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return 0 \n <DED> else: \n",
      "47": "<DED> self._confidence_hi.update(conf_hi) \n <IND> return TimeSeries(\"TimeSeries\") \n <IND> else: \n",
      "48": "<IND> self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(\"TimeSeries\") \n <IND> else: \n",
      "49": "\n self._confidence_hi.update(conf_hi) \n <DED> return TimeSeries(\"TimeSeries\") \n <IND> else: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>def _get_params(self, **kwargs) -> dict:\n        <IND>return None\n\n",
    "target_code": "    <DED>def _get_params(self, **kwargs) -> dict:\n        <IND>return {}\n\n",
    "warning_line": "        return None",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.Dict[typing.Any, typing.Any]` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 62,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "operatorai/modelstore",
    "source_filename": "tests/models/test_modelmanager.py",
    "target_filename": "tests/models/test_modelmanager.py",
    "source_changeid": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb^",
    "target_changeid": "d98e647ddaa3227bed8d4b5d4c5c3453ec1dabbb",
    "predictions": [
      "\n def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "1": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "2": "<IND> def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "3": "\n def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return False \n \n",
      "4": "\n def _get_params(self, **kwargs) -> dict: \n <IND> return False \n \n",
      "5": "<DED> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return False \n \n",
      "6": "\n def _get_params(self, **kwargs) -> dict: \n <IND> return 0 \n \n",
      "7": "\n def _get_params(self, **kwargs) -> dict: \n <IND> return None \n \n",
      "8": "\n def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return None \n \n",
      "9": "\n def _get_params(self, **kwargs) -> dict: \n <IND> return \"\" \n \n",
      "10": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return False \n \n",
      "11": "\n def _get_params(self, **kwargs) -> dict: \n <DED> return [] \n \n",
      "12": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return 0 \n \n",
      "13": "<IND> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return False \n \n",
      "14": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return None \n \n",
      "15": "<DED> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return None \n \n",
      "16": "<DED> def _get_params(self, **kwargs) -> dict: \n <IND> return \"\" \n \n",
      "17": "\n def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return [] \n \n",
      "18": "<DED> def _get_params(self, **kwargs) -> dict: \n <DED> return [] \n \n",
      "19": "\n def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return 0 \n \n",
      "20": "<IND> def _get_params(self, **kwargs) -> dict: \n <IND> return False \n \n",
      "21": "<IND> def _get_params(self, **kwargs) -> dict: \n <IND> return 0 \n \n",
      "22": "\n def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return \"\" \n \n",
      "23": "<IND> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return None \n \n",
      "24": "<DED> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return [] \n \n",
      "25": "<IND> def _get_params(self, **kwargs) -> dict: \n <IND> return None \n \n",
      "26": "<DED> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return 0 \n \n",
      "27": "<IND> def _get_params(self, **kwargs) -> dict: \n <IND> return \"\" \n \n",
      "28": "<IND> def _get_params(self, **kwargs) -> dict: \n <DED> return [] \n \n",
      "29": "<DED> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return \"\" \n \n",
      "30": "\n def _get_params(self, **kwargs): \n <IND> return [] \n \n",
      "31": "<IND> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return [] \n \n",
      "32": "\n def _get_params(self, **kwargs) -> typing.Dict: \n <DED> return False \n \n",
      "33": "<IND> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return 0 \n \n",
      "34": "\n def _get_params(self, **kwargs) -> dict: \n \n return [] \n \n",
      "35": "<IND> def _get_params(self, **kwargs) -> typing.Dict: \n <IND> return \"\" \n \n",
      "36": "<DED> def _get_params(self, **kwargs): \n <IND> return [] \n \n",
      "37": "<DED> def _get_params(self, **kwargs) -> typing.Dict: \n <DED> return False \n \n",
      "38": "\n def _get_params(self, **kwargs) -> dict: \n <DED> return False \n \n",
      "39": "<DED> def _get_params(self, **kwargs) -> dict: \n \n return [] \n \n",
      "40": "\n def _get_params(self, **kwargs) -> dict: \n <DED> return 0 \n \n",
      "41": "\n def _get_params(self, **kwargs) -> typing.Dict: \n <DED> return None \n \n",
      "42": "\n def _get_params(self, **kwargs) -> dict: \n <DED> return None \n \n",
      "43": "<DED> def _get_params(self, **kwargs) -> dict: \n <DED> return False \n \n",
      "44": "\n def _get_params(self, **kwargs) -> dict: \n <DED> return \"\" \n \n",
      "45": "{ def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n",
      "46": "<DED> def _get_params(self, **kwargs) -> dict: \n <DED> return 0 \n \n",
      "47": "<DED> def _get_params(self, **kwargs) -> typing.Dict: \n <DED> return None \n \n",
      "48": "<IND> def _get_params(self, **kwargs): \n <IND> return [] \n \n",
      "49": "} def _get_params(self, **kwargs) -> dict: \n <IND> return [] \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        text = render(text, style, emoji=emoji)\n        text.justify = justify\n        return text\n\n",
    "target_code": "\n        rendered_text = render(text, style, emoji=emoji)\n        rendered_text.justify = justify\n        return rendered_text\n\n",
    "warning_line": "        return text",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Text` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 169,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "willmcgugan/rich",
    "source_filename": "rich/text.py",
    "target_filename": "rich/text.py",
    "source_changeid": "a168ed4129dc1b122477146cbd3d2f93b82adc06^",
    "target_changeid": "a168ed4129dc1b122477146cbd3d2f93b82adc06",
    "predictions": [
      "\n render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "1": "<DED> render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "2": "<IND> render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "3": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n return rendered_text \n \n",
      "4": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n <DED> return rendered_text \n \n",
      "5": "\n render(text, style, emoji=emoji) \n text.justify = justify \n return text \n \n",
      "6": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n <IND> return rendered_text \n \n",
      "7": "<DED> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n return rendered_text \n \n",
      "8": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n \n return rendered_text \n \n",
      "9": "<IND> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n return rendered_text \n \n",
      "10": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n returned rendered_text \n \n",
      "11": "\n render = render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "12": "<DED> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n <DED> return rendered_text \n \n",
      "13": "<IND> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n <DED> return rendered_text \n \n",
      "14": "<DED> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n <IND> return rendered_text \n \n",
      "15": "<IND> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n <IND> return rendered_text \n \n",
      "16": "<DED> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n \n return rendered_text \n \n",
      "17": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <DED> <DED> return rendered_text \n \n",
      "18": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <IND> <DED> return rendered_text \n \n",
      "19": "<DED> render(text, style, emoji=emoji) \n text.justify = justify \n return text \n \n",
      "20": "<IND> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n \n return rendered_text \n \n",
      "21": "\n render(text, style, emoji=emoji) \n justify = justify \n return Text \n \n",
      "22": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <DED> <IND> return rendered_text \n \n",
      "23": "<DED> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n returned rendered_text \n \n",
      "24": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <IND> <IND> return rendered_text \n \n",
      "25": "<IND> render(text, style, emoji=emoji) \n text.justify = justify \n return text \n \n",
      "26": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <DED> \n return rendered_text \n \n",
      "27": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n { return rendered_text \n \n",
      "28": "<IND> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n returned rendered_text \n \n",
      "29": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text \n } return rendered_text \n \n",
      "30": "<DED> render = render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "31": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <IND> \n return rendered_text \n \n",
      "32": "\n render(text, style, emoji=emoji) \n justify = justify \n return justify \n \n",
      "33": "{ render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "34": "<IND> render = render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "35": "<DED> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <DED> <DED> return rendered_text \n \n",
      "36": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text { <DED> return rendered_text \n \n",
      "37": "\n rendering = render(text, style, emoji=emoji) \n rendering.justify = justify \n return rendering \n \n",
      "38": "<DED> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <IND> <DED> return rendered_text \n \n",
      "39": "\n rendering = render(text, style, emoji=emoji) \n text.justify = justify \n return rendering \n \n",
      "40": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text } <DED> return rendered_text \n \n",
      "41": "} render(text, style, emoji=emoji) \n text.justify = justify \n return Text \n \n",
      "42": "<IND> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <DED> <DED> return rendered_text \n \n",
      "43": "<IND> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <IND> <DED> return rendered_text \n \n",
      "44": "<DED> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <DED> <IND> return rendered_text \n \n",
      "45": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text { <IND> return rendered_text \n \n",
      "46": "\n render(text, style, emoji=emoji) \n justify = justify \n return Text \n \n",
      "47": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n render_text \n \n",
      "48": "<DED> rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text <IND> <IND> return rendered_text \n \n",
      "49": "\n rendered_text = render(text, style, emoji=emoji) \n rendered_text.justify = justify \n rendered_text } <IND> return rendered_text \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        <IND>return matrix1, matrix2\n\n",
    "target_code": "    if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]:\n        <IND>return [matrix1, matrix2]\n\n",
    "warning_line": "        return matrix1, matrix2",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `typing.List[typing.Any]` but got `typing.Tuple[typing.List[typing.Any], typing.List[typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 124,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "target_filename": "divide_and_conquer/strassen_matrix_multiplication.py",
    "source_changeid": "959507901ac8f10cd605c51c305d13b27d105536^",
    "target_changeid": "959507901ac8f10cd605c51c305d13b27d105536",
    "predictions": [
      "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n \n",
      "1": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <DED> return matrix1, matrix2 \n \n",
      "2": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n \n return matrix1, matrix2 \n \n",
      "3": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n { return matrix1, matrix2 \n \n",
      "4": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n } return matrix1, matrix2 \n \n",
      "5": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n <IND>",
      "6": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n <DED>",
      "7": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n \\ return matrix1, matrix2 \n \n",
      "8": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: <IND> <IND> return matrix1, matrix2 \n \n",
      "9": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 <IND> \n",
      "10": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 <DED> \n",
      "11": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "12": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "13": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: <DED> <IND> return matrix1, matrix2 \n \n",
      "14": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "15": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "16": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "17": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "18": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 \n {",
      "19": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "20": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "21": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "22": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "23": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "24": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "25": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "26": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "27": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "28": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "29": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "30": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "31": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "32": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "33": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "34": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "35": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "36": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "37": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n <IND> return matrix1, matrix2 { \n",
      "38": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "39": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "40": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "41": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "42": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "43": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "44": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "45": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "46": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "47": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: { <IND> return matrix1, matrix2 \n \n",
      "48": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n",
      "49": "if dimension1[0] == dimension1[1] and dimension2[0] == dimension2[1]: \n return matrix1, matrix2 \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>return count_label + short_label\n",
    "target_code": "        <IND>return count_label + short_label\n\n  <DED><DED><DED>raise ValueError('BUG: value should always be divisible by a unit (%s)' % str(units))\n",
    "warning_line": "        return count_label + short_label",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 582,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "torproject/stem",
    "source_filename": "stem/util/str_tools.py",
    "target_filename": "stem/util/str_tools.py",
    "source_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8^",
    "target_changeid": "076f89dfb4fd4a156ae32fde8c78c531385162e8",
    "predictions": [
      "\n return count_label + short_label \n <DED> raise ValueError(\"Expected an empty label, got int/list instead\") \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n return count_label + short_label \n <DED> raise ValueError(\"Expected an empty label, got int/list instead\") \n",
      "1": "\n return count_label + short_label \n <IND> raise ValueError(\"Expected an empty label, got int/list instead\") \n",
      "2": "\n return count_label + short_label \n <DED> return 0 \n \n",
      "3": "\n return count_label + short_label \n <IND> return 0 \n \n",
      "4": "\n return count_label + short_label \n <DED> return '' \n \n",
      "5": "\n return count_label + short_label \n <IND> return '' \n \n",
      "6": "\n return count_label + short_label \n <IND> raise RuntimeError(\"Expected an error, got int/list instead\") \n",
      "7": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Expected an error, got int/list instead\") \n",
      "8": "\n return count_label + short_label \n \n raise ValueError(\"Expected an empty label, got int/list instead\") \n",
      "9": "\n return count_label + short_label \n <DED> raise ValueError(\"Expected an array of labels, got int/list instead\") \n",
      "10": "\n return count_label + short_label \n <IND> raise ValueError(\"Expected an array of labels, got int/list instead\") \n",
      "11": "\n return count_label + short_label \n <DED> raise ValueError(\"Expected an error, got int/list instead\") \n",
      "12": "\n return count_label + short_label \n <DED> raise ValueError(\"Expected a short_label, got int/list instead\") \n",
      "13": "\n return count_label + short_label \n <IND> raise ValueError(\"Expected an error, got int/list instead\") \n",
      "14": "\n return count_label + short_label \n <IND> raise ValueError(\"Expected a short_label, got int/list instead\") \n",
      "15": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Cannot get label of \n \n \".format(name)) \n",
      "16": "\n return count_label + short_label \n <IND> raise RuntimeError(\"Cannot get label of \n \n \".format(name)) \n",
      "17": "<DED> return count_label + short_label \n <DED> raise ValueError(\"Expected an empty label, got int/list instead\") \n",
      "18": "<DED> return count_label + short_label \n <IND> raise ValueError(\"Expected an empty label, got int/list instead\") \n",
      "19": "\n return count_label + short_label \n \n raise RuntimeError(\"Expected an error, got int/list instead\") \n",
      "20": "\n return count_label + short_label \n \n return 0 \n \n",
      "21": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Expected an array of labels, got int/list instead\") \n",
      "22": "\n return count_label + short_label \n <IND> raise RuntimeError(\"Expected an array of labels, got int/list instead\") \n",
      "23": "\n return count_label + short_label \n \n return '' \n \n",
      "24": "\n return count_label + short_label \n \n raise ValueError(\"Expected a short_label, got int/list instead\") \n",
      "25": "\n return count_label + short_label \n <DED> return \"\" \n \n",
      "26": "\n return count_label + short_label \n \n raise RuntimeError(\"Cannot get label of \n \n \".format(name)) \n",
      "27": "\n return count_label + short_label \n <IND> return \"\" \n \n",
      "28": "\n return count_label + short_label \n <DED> raise ValueError(\"Expected a short_label but got int/list instead\") \n",
      "29": "\n return count_label + short_label \n <IND> raise ValueError(\"Expected a short_label but got int/list instead\") \n",
      "30": "\n return count_label + short_label \n <DED> raise ValueError(\"Expected a short_label but received \n return count_label \n",
      "31": "\n return count_label + short_label \n <IND> raise ValueError(\"Expected a short_label but received \n return count_label \n",
      "32": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Cannot get label of \n \n \".format(handle)) \n",
      "33": "\n return count_label + short_label \n <IND> raise RuntimeError(\"Cannot get label of \n \n \".format(handle)) \n",
      "34": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Cannot get label of \n \n \".format(str)) \n",
      "35": "\n return count_label + short_label \n <IND> raise RuntimeError(\"Cannot get label of \n \n \".format(str)) \n",
      "36": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Cannot get label of \n \n \".format(short_label)) \n",
      "37": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Expected an error, got int/label \n \".format(name)) \n",
      "38": "\n return count_label + short_label \n <IND> raise RuntimeError(\"Cannot get label of \n \n \".format(short_label)) \n",
      "39": "\n return count_label + short_label \n <IND> raise RuntimeError(\"Expected an error, got int/label \n \".format(name)) \n",
      "40": "\n return count_label + short_label \n <DED> return str(count_label + short_label) \n",
      "41": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Cannot get label of \n \n \".format(url)) \n",
      "42": "\n return count_label + short_label \n <IND> return str(count_label + short_label) \n",
      "43": "\n return count_label + short_label \n <IND> raise RuntimeError(\"Cannot get label of \n \n \".format(url)) \n",
      "44": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Cannot get label of \n \n \".format(str, \"short_label\")) \n",
      "45": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Cannot get count_label in mypy\") \n",
      "46": "\n return count_label + short_label \n <IND> raise RuntimeError(\"Cannot get label of \n \n \".format(str, \"short_label\")) \n",
      "47": "\n return count_label + short_label \n <IND> raise RuntimeError(\"Cannot get count_label in mypy\") \n",
      "48": "<DED> return count_label + short_label \n <DED> return 0 \n \n",
      "49": "\n return count_label + short_label \n <DED> raise RuntimeError(\"Label not found!\").rstrip() \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# extmod/modtrezorconfig/modtrezorconfig.c\n<DED>def get(app: int, key: int, public: bool = False) -> bytes:\n    <IND>",
    "target_code": "# extmod/modtrezorconfig/modtrezorconfig.c\n<DED>def get(app: int, key: int, public: bool = False) -> Optional[bytes]:\n    <IND>",
    "warning_line": "    \"\"\"",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bytes` but got implicit return value of `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 59,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "trezor/trezor-firmware",
    "source_filename": "core/mocks/generated/trezorconfig.pyi",
    "target_filename": "core/mocks/generated/trezorconfig.pyi",
    "source_changeid": "0f6f05e4b7e2881dc681db5fbead2723411c9058^",
    "target_changeid": "0f6f05e4b7e2881dc681db5fbead2723411c9058",
    "predictions": [
      "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( \n app: int, key: int, public: bool = False) -> None: \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( \n app: int, key: int, public: bool = False) -> None: \n <IND>",
      "1": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( \n app: int, key: int, public: bool = False) -> None: \n <IND>",
      "2": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n def get( \n app: int, key: int, public: bool = False) -> None: \n <IND>",
      "3": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( \n app: int, key: int, public: bool = False) -> None: \n <DED>",
      "4": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( \n app: int, key: int, public: bool = False) -> None: \n <DED>",
      "5": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( <IND> app: int, key: int, public: bool = False) -> None: \n <IND>",
      "6": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( <DED> app: int, key: int, public: bool = False) -> None: \n <IND>",
      "7": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( \n app: int, key: int, public: bool = False) -> None: \n \n",
      "8": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( <IND> app: int, key: int, public: bool = False) -> None: \n <IND>",
      "9": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( <DED> app: int, key: int, public: bool = False) -> None: \n <IND>",
      "10": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( \n app: int, key: int, public: bool = False) -> None: \n \n",
      "11": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( { app: int, key: int, public: bool = False) -> None: \n <IND>",
      "12": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( { app: int, key: int, public: bool = False) -> None: \n <IND>",
      "13": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( } app: int, key: int, public: bool = False) -> None: \n <IND>",
      "14": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n def get( \n app: int, key: int, public: bool = False) -> None: \n <DED>",
      "15": "# extmod/modtrezorconfig/modtrezorconfig.c \n { def get( \n app: int, key: int, public: bool = False) -> None: \n <IND>",
      "16": "# extmod/modtrezorconfig/modtrezorconfig.c \n } def get( \n app: int, key: int, public: bool = False) -> None: \n <IND>",
      "17": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( } app: int, key: int, public: bool = False) -> None: \n <IND>",
      "18": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n def get( <IND> app: int, key: int, public: bool = False) -> None: \n <IND>",
      "19": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n def get( <DED> app: int, key: int, public: bool = False) -> None: \n <IND>",
      "20": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( <IND> app: int, key: int, public: bool = False) -> None: \n <DED>",
      "21": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( <DED> app: int, key: int, public: bool = False) -> None: \n <DED>",
      "22": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( \\ app: int, key: int, public: bool = False) -> None: \n <IND>",
      "23": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n def get( \n app: int, key: int, public: bool = False) -> None: \n \n",
      "24": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( <IND> app: int, key: int, public: bool = False) -> None: \n <DED>",
      "25": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( <DED> app: int, key: int, public: bool = False) -> None: \n <DED>",
      "26": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( \\ app: int, key: int, public: bool = False) -> None: \n <IND>",
      "27": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( \n app: int, key: int, public: bool = False) -> None: \n {",
      "28": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( \n app: int, key: int, public: bool = False) -> None: \n }",
      "29": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( \n app: int, key: int, public: bool = False \n ) -> None: \n <IND>",
      "30": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "31": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "32": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "33": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "34": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "35": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "36": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "37": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "38": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "39": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "40": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "41": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "42": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "43": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "44": "# extmod/modtrezorconfig/modtrezorconfig.c \n \n def get( { app: int, key: int, public: bool = False) -> None: \n <IND>",
      "45": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "46": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "47": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "48": "# extmod/modtrezorconfig/modtrezorconfig.c \n <DED> def get( app: int, key: int, public: bool = False) -> None: \n <IND>",
      "49": "# extmod/modtrezorconfig/modtrezorconfig.c \n <IND> def get( \n app: int, key: int, public: bool = False) -> None: \n {"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        print()\n        return\n    <DED>for i in range(len(board)):\n",
    "target_code": "        print()\n        return True\n    <DED>for i in range(len(board)):\n",
    "warning_line": "        return",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `bool` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 56,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "backtracking/n_queens.py",
    "target_filename": "backtracking/n_queens.py",
    "source_changeid": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1^",
    "target_changeid": "25164bb6380ae760bed5fe3efc5f2fc3ec5c38a1",
    "predictions": [
      "print() \n return False \n \n for i in range(len(board)): \n <IND> return False \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "print() \n return False \n \n for i in range(len(board)): \n <IND> return False \n \n",
      "1": "print() \n return False \n \n for i in range(len(board)): \n <DED> return False \n \n",
      "2": "print() \n return False \n <DED> for i in range(len(board)): \n <IND> return False \n \n",
      "3": "print() \n return False \n \n for i in range(len(board)): \n <IND>",
      "4": "print() \n return False \n <IND> for i in range(len(board)): \n <IND> return False \n \n",
      "5": "print() \n return False \n \n for i in range(len(board)): \n \n return False \n \n",
      "6": "print() \n return False \n <DED> for i in range(len(board)): \n <DED> return False \n \n",
      "7": "print() \n return False \n <IND> for i in range(len(board)): \n <DED> return False \n \n",
      "8": "print() \n return False \n \n for i in range(len(board)): \n <IND> raise ValueError(\"Cannot get value for i in range(len(board)) \n \n",
      "9": "print() \n return False \n \n for i in range(len(board)): \n } return False \n \n",
      "10": "print() \n return False \n \n for i in range(len(board)): \n { return False \n \n",
      "11": "print() \n return False \n \n for i in range(len(board)): \n <DED>",
      "12": "print() \n return False \n \n for i in range(len(board)): \n <IND> raise ValueError(\"Expected a board, got int/list instead\") \n \n",
      "13": "print() \n return False \n { for i in range(len(board)): \n <IND> return False \n \n",
      "14": "print() \n return False \n <DED> for i in range(len(board)): \n <IND>",
      "15": "print() \n return False \n } for i in range(len(board)): \n <IND> return False \n \n",
      "16": "print() \n return True \n \n for i in range(len(board)): \n <IND> return False \n \n",
      "17": "print() \n return False \n \n for i in range(len(board)): \n <IND> return False \n \n return False \n \n",
      "18": "print() \n return False \n \n for i in range(len(board)): \n <IND> raise ValueError(\"Cannot get i in range(len(board)) \n \n",
      "19": "print() \n return False \n <DED> for i in range(len(board)): \n \n return False \n \n",
      "20": "print() \n return False \n <IND> for i in range(len(board)): \n <IND>",
      "21": "print() \n return False \n \n for i in range(len(board)): \n \\ return False \n \n",
      "22": "print() \n return False \n \n for i in range(len(board)): \n <IND> raise ValueError(\"Cannot get value for i in range(len(board)) \n \n return False \n \n",
      "23": "print() \n return False \n \n for i in range(len(board)): \n <DED> raise ValueError(\"Cannot get value for i in range(len(board)) \n \n",
      "24": "print() \n return False \n \n for i in range(len(board)): \n <IND> return False \n <IND>",
      "25": "print() \n return False \n <IND> for i in range(len(board)): \n \n return False \n \n",
      "26": "print() \n return False \n <DED> for i in range(len(board)): \n <IND> raise ValueError(\"Cannot get value for i in range(len(board)) \n \n",
      "27": "print() \n return False \n \n for i in range(len(board)): \n <IND> return False \n <DED>",
      "28": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "29": "print() \n return False \n <IND> for i in range(len(board)): \n <IND> raise ValueError(\"Cannot get value for i in range(len(board)) \n \n",
      "30": "print() \n return False \n \n for i in range(len(board)): \n <IND> raise RuntimeError(\"Cannot get i in range(len(board)) \n \n",
      "31": "print() \n return False \n \n for i in range(len(board)): \n <IND> raise ValueError(\"Cannot get value for what is in range(len(board)) \n \n",
      "32": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "33": "print() \n return False \n \n for i in range(len(board)): \n <DED> raise ValueError(\"Expected a board, got int/list instead\") \n \n",
      "34": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "35": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "36": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "37": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "38": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "39": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "40": "print() \n return True \n <DED> for i in range(len(board)): \n <IND> return False \n \n",
      "41": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "42": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "43": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "44": "print() \n return False \n \n for i in range(len(board)): \n <IND> return False <IND> \n",
      "45": "print() \n return False \n \n for i in range(len(board)): \n <IND> return False <DED> \n",
      "46": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "47": "print() \n return False \n \n for i in range(len(board)): \n \n",
      "48": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n",
      "49": "print() \n return False \n \n for i in range(len(board)): \n return False \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    return unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore')\n\n",
    "target_code": "\n    normalized_string = unicodedata.normalize(\n        'NFKD', python_utils.UNICODE(input_string))\n    return normalized_string.encode('ascii', 'ignore').decode('ascii')\n\n",
    "warning_line": "    return unicodedata.normalize(",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 213,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "oppia/oppia",
    "source_filename": "utils.py",
    "target_filename": "utils.py",
    "source_changeid": "72937725a323b0cc1ccec150c81b041abeacb575^",
    "target_changeid": "72937725a323b0cc1ccec150c81b041abeacb575",
    "predictions": [
      "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "1": "<DED> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "2": "<IND> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "3": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n",
      "4": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "5": "<DED> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n",
      "6": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore').decode('ascii') \n \n",
      "7": "<IND> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n",
      "8": "<DED> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "9": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii') \n \n",
      "10": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('ascii') \n \n",
      "11": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "12": "<IND> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "13": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)) \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "14": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('utf-8') \n \n",
      "15": "\n normalized_string = unicodedata.normalize( \n 'NFKD'), python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "16": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('utf-8').decode('utf-8') \n \n",
      "17": "{ normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "18": "} normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "19": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n <IND>",
      "20": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n <DED>",
      "21": "<DED> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore').decode('ascii') \n \n",
      "22": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('ascii') \n \n",
      "23": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)) \n return normalized_string.encode('ascii', 'ignore').decode('ascii') \n \n",
      "24": "<DED> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('ascii') \n \n",
      "25": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii') \n \n",
      "26": "<DED> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii') \n \n",
      "27": "<DED> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "28": "<IND> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore').decode('ascii') \n \n",
      "29": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore').decode('ascii') \n \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "30": "<IND> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('ascii') \n \n",
      "31": "<DED> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('utf-8') \n \n",
      "32": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('utf-8') \n \n",
      "33": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii'), 'ignore') \n \n",
      "34": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii').decode('ascii') \n \n",
      "35": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore').decode('ascii') \n \n return normalized_string.decode('utf-8').decode('utf-8') \n \n",
      "36": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii').decode('utf-8') \n \n",
      "37": "<IND> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n return normalized_string.encode('ascii', 'ignore') \n \n",
      "38": "<IND> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii') \n \n",
      "39": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n return normalized_string.encode('ascii') \n \n",
      "40": "\n normalized_string = unicodedata.normalize( <DED> 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "41": "<DED> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('utf-8').decode('utf-8') \n \n",
      "42": "<IND> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('utf-8') \n \n",
      "43": "\n normalized_string = unicodedata.normalize( <IND> 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n",
      "44": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii'), 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('utf-8').decode('utf-8') \n \n",
      "45": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'input_string') \n \n",
      "46": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii').decode('utf-8').decode('utf-8') \n \n",
      "47": "\n normalized_string = unicodedata.normalize( \n 'NFKD').encode('ascii', 'ignore').decode('ascii') \n \n",
      "48": "\n normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('ascii').decode('utf-8') \n \n",
      "49": "<IND> normalized_string = unicodedata.normalize( \n 'NFKD', python_utils.UNICODE(input_string)).encode('ascii', 'ignore') \n \n return normalized_string.encode('ascii', 'ignore').decode('utf-8').decode('utf-8') \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": true,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <IND>def __iter__(self) -> \"SuperclassesIterator\":\n        <IND>return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "target_code": "\n    <IND>def __iter__(self) -> \"SuperpropertiesIterator\":\n        <IND>return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)\n",
    "warning_line": "        return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self)",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `SuperclassesIterator` but got `SuperpropertiesIterator`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 197,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "althonos/pronto",
    "source_filename": "pronto/logic/lineage.py",
    "target_filename": "pronto/logic/lineage.py",
    "source_changeid": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327^",
    "target_changeid": "7cafbe2e6864d747faa1b9e2cea87064ab3ea327",
    "predictions": [
      "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "1": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "2": "<DED> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "3": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "4": "<IND> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "5": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "6": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.distance=self.distance, with_self=self.with_self) \n",
      "7": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "8": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "9": "<DED> <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "10": "\n \n def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "11": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "12": "<DED> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "13": "<IND> <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "14": "<IND> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "15": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.distance=self.distance, with_self=self.with_self) \n",
      "16": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "17": "<DED> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "18": "<DED> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.distance=self.distance, with_self=self.with_self) \n",
      "19": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "20": "<DED> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "21": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> assert self.entity is not None \n return SuperpropertiesIterator(self.distance=self.distance, with_self=self.with_self) \n",
      "22": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n { return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "23": "\n { def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "24": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n } return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "25": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "26": "\n } def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "27": "<IND> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.distance=self.distance, with_self=self.with_self) \n",
      "28": "{ <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "29": "<IND> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "30": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> assert self.entity is not None \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "31": "<IND> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> assert self.entity is not None \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "32": "\n <IND> def __iter__(self) -> \"SuperclassesIterator\": \n \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "33": "<DED> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "34": "} <DED> def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "35": "\n <DED> def __iter__(self) -> superclassesIterator: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "36": "\n <DED> def __iter__(self) -> SuperclassesIterator: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "37": "<DED> \n def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "38": "<IND> <DED> def __iter__(self) -> \"SuperclassesIterator\": \n \n return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "39": "<DED> <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "40": "\n \\ def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "41": "\n \n def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "42": "\n <DED> def __iter__(self) -> superclassesIterator: \n <IND> return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "43": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n \\ return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "44": "<IND> \n def __iter__(self) -> \"SuperclassesIterator\": \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "45": "\n <DED> def __iter__(self) -> List[SuperclassesIterator]: \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "46": "<IND> <IND> def __iter__(self) -> \"SuperclassesIterator\": \n <DED> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "47": "\n <DED> def __iter__(self): \n <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "48": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": \n \n return superpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n",
      "49": "\n <DED> def __iter__(self) -> \"SuperclassesIterator\": <IND> <IND> return SuperpropertiesIterator(self.entity, distance=self.distance, with_self=self.with_self) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": ") -> JsonSchema:\n    <IND>if schema is False:\n        <IND>return False\n    <DED>if \"anyOf\" in schema:\n",
    "target_code": ") -> JsonSchema:\n    <IND>if is_true_schema(schema) or is_false_schema(schema):\n        <IND>return schema\n    <DED>if \"anyOf\" in schema:\n",
    "warning_line": "        return False",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `Dict[str, typing.Any]` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 988,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "IBM/lale",
    "source_filename": "lale/schema_simplifier.py",
    "target_filename": "lale/schema_simplifier.py",
    "source_changeid": "b38267abe490e869338f212179b03521e89013ee^",
    "target_changeid": "b38267abe490e869338f212179b03521e89013ee",
    "predictions": [
      ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n"
    ],
    "correct": false,
    "top_five": {
      "0": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "1": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "2": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n \n if \"anyOf\" in schema: \n",
      "3": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "4": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "5": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "6": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return False \n <IND> if \"anyOf\" in schema: \n",
      "7": ") -> JsonSchema: \n <IND> if schema is None: \n <DED> return None \n <DED> if \"anyOf\" in schema: \n",
      "8": ") -> JsonSchema: \n <DED> if schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "9": ") -> JsonSchema: \n <IND> if schema is None: \n <DED> return None \n <IND> if \"anyOf\" in schema: \n",
      "10": ") -> JsonSchema: \n <DED> if schema is None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "11": ") -> JsonSchema: \n <IND> if schema is None and schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "12": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return None \n \n if \"anyOf\" in schema: \n",
      "13": ") -> JsonSchema: \n <IND> if schema is None and schema is None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "14": ") -> JsonSchema: \n <IND> if schema is False: \n <IND> return False \n \n if \"anyOf\" in schema: \n",
      "15": ") -> JsonSchema: \n <IND> if schema is None or \"anyOf\" in schema: \n <IND> return None \n \n if \"anyOf\" in schema: \n",
      "16": ") -> JsonSchema: \n <IND> if schema is False: \n <DED> return None \n <DED> if \"anyOf\" in schema: \n",
      "17": ") -> JsonSchema: \n <IND> if schema is None and schema is None: \n <IND> return None \n \n if \"anyOf\" in schema: \n",
      "18": ") -> JsonSchema: \n <IND> if schema is None: \n <DED> return None \n \n if \"anyOf\" in schema: \n",
      "19": ") -> JsonSchema: \n <DED> if schema is False: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "20": ") -> JsonSchema: \n <IND> if schema is False: \n <DED> return False \n <DED> if \"anyOf\" in schema: \n",
      "21": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "22": ") -> JsonSchema: \n <DED> if schema is None: \n <IND> return None \n \n if \"anyOf\" in schema: \n",
      "23": ") -> JsonSchema: \n <DED> if schema is False: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n",
      "24": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return False \n <IND> if \"anyOf\" in schema: \n",
      "25": ") -> JsonSchema: \n <IND> if schema is False: \n <DED> return None \n <IND> if \"anyOf\" in schema: \n",
      "26": ") -> JsonSchema: \n <IND> if schema is False: \n <DED> return False \n <IND> if \"anyOf\" in schema: \n",
      "27": ") -> JsonSchema: \n <IND> if schema is None: \n \n return None \n <DED> if \"anyOf\" in schema: \n",
      "28": ") -> JsonSchema: \n <DED> if schema is False: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "29": ") -> JsonSchema: \n <DED> if schema is False: \n <IND> return False \n <IND> if \"anyOf\" in schema: \n",
      "30": ") -> JsonSchema: \n \n if schema is None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "31": ") -> JsonSchema: \n <IND> if schema is None: \n \n return None \n <IND> if \"anyOf\" in schema: \n",
      "32": ") -> JsonSchema: \n \n if schema is None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "33": ") -> JsonSchema: \n <DED> if schema is None: \n <DED> return None \n <DED> if \"anyOf\" in schema: \n",
      "34": ") -> JsonSchema: \n <IND> if schema is None and schema is None: \n <DED> return None \n <DED> if \"anyOf\" in schema: \n",
      "35": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n } if \"anyOf\" in schema: \n",
      "36": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return None \n { if \"anyOf\" in schema: \n",
      "37": ") -> JsonSchema: \n <IND> if schema is None or \"anyOf\" in schema: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "38": ") -> JsonSchema: \n <DED> if schema is None: \n <DED> return None \n <IND> if \"anyOf\" in schema: \n",
      "39": ") -> JsonSchema: \n <IND> if schema is False: \n <DED> return None \n \n if \"anyOf\" in schema: \n",
      "40": ") -> JsonSchema: \n <IND> if schema is None: \n <IND> return False \n \n if \"anyOf\" in schema: \n",
      "41": ") -> JsonSchema: \n <DED> if schema is False: \n <IND> return None \n \n if \"anyOf\" in schema: \n",
      "42": ") -> JsonSchema: \n <IND> if schema is None else None \n return None \n <DED> if \"anyOf\" in schema: \n",
      "43": ") -> JsonSchema: \n <IND> if schema is None or \"anyOf\" in schema: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "44": ") -> JsonSchema: \n <IND> if schema is not None: \n <IND> return None \n <DED> if \"anyOf\" in schema: \n",
      "45": ") -> JsonSchema: \n <IND> if schema is None else None \n return None \n <IND> if \"anyOf\" in schema: \n",
      "46": ") -> JsonSchema: \n <IND> if schema is None: \n \n return None \n \n if \"anyOf\" in schema: \n",
      "47": ") -> JsonSchema: \n <IND> if schema is not None: \n <IND> return None \n <IND> if \"anyOf\" in schema: \n",
      "48": ") -> JsonSchema: \n \n if schema is None: \n <IND> return None \n \n if \"anyOf\" in schema: \n",
      "49": ") -> JsonSchema: \n <IND> return False \n <DED> if \"anyOf\" in schema: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\t\t\t<IND>se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n   return se.InvalidSeEbookException\n\n",
    "target_code": "\t\t\t<IND>se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\")\n   return se.InvalidSeEbookException.code\n\n",
    "warning_line": "\t\t\treturn se.InvalidSeEbookException",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `int` but got `typing.Type[se.InvalidSeEbookException]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 738,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "standardebooks/tools",
    "source_filename": "se/executables.py",
    "target_filename": "se/executables.py",
    "source_changeid": "ecc8a99c92471116de414b814c29c1fac31b2dc0^",
    "target_changeid": "ecc8a99c92471116de414b814c29c1fac31b2dc0",
    "predictions": [
      "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.code \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.code \n \n",
      "1": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.code \n \n",
      "2": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.code \n \n",
      "3": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\") \n \n",
      "4": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\") \n \n",
      "5": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\") \n \n",
      "6": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int(se.InvalidSeEbookException)) \n \n",
      "7": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int(se.InvalidSeEbookException)) \n \n",
      "8": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.name \n \n",
      "9": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.name \n \n",
      "10": "{ se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.code \n \n",
      "11": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(int(se.InvalidSeEbookException)) \n \n",
      "12": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.format(int) \n \n",
      "13": "} se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.code \n \n",
      "14": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.format(int) \n \n",
      "15": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(str, int) \n \n",
      "16": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.name \n \n",
      "17": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.decode(\"utf-8\") \n \n",
      "18": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.format(int(str, int)) \n \n",
      "19": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(str, int) \n \n",
      "20": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.decode(\"utf-8\") \n \n",
      "21": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.format(int(str, int)) \n \n",
      "22": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find\" endnotes.xhtml file.\") \n \n",
      "23": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.format(int) \n \n",
      "24": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\") \n \n",
      "25": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find\" endnotes.xhtml file.\") \n \n",
      "26": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(str, int) \n \n",
      "27": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\") \n \n",
      "28": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.decode(\"utf-8\") \n \n",
      "29": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.format(int(str, int)) \n \n",
      "30": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn't find endnotes.xhtml file.\") \n \n",
      "31": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find\" endnotes.xhtml file.\") \n \n",
      "32": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(str(str)) \n \n",
      "33": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn't find endnotes.xhtml file.\") \n \n",
      "34": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\") \n \n",
      "35": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(str(str)) \n \n",
      "36": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.error \n \n",
      "37": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn't find endnotes.xhtml file.\") \n \n",
      "38": "\\ se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.code \n \n",
      "39": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.error \n \n",
      "40": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\"\") \n \n",
      "41": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Could not find endnotes.xhtml file.\") \n \n",
      "42": "<IND> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(str(str)) \n \n",
      "43": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.exception \n \n",
      "44": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\") \n <IND>",
      "45": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\") \n <DED>",
      "46": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\"\") \n \n",
      "47": "\n se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException() \n \n",
      "48": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException(\"Couldn\u2019t find endnotes.xhtml file.\") \n <IND>",
      "49": "<DED> se.print_error(\"Couldn\u2019t find endnotes.xhtml file.\") \n return se.InvalidSeEbookException.exception \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>@property\n    def layer_name(self) -> str:\n        <IND>return self._layer_name\n",
    "target_code": "    <DED>@property\n    def layer_name(self) -> typing.Optional[str]:\n        <IND>return self._layer_name\n",
    "warning_line": "        return self._layer_name",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `str` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 74,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/interfaces/layers.py",
    "target_filename": "volatility/framework/interfaces/layers.py",
    "source_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1^",
    "target_changeid": "7a52ac9debc6e0463a52ecc1c5cacc5dbb40a0d1",
    "predictions": [
      "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n"
    ],
    "correct": true,
    "top_five": {
      "0": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "1": "<IND> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "2": "\n @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "3": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <DED> return self._layer_name \n",
      "4": "<IND> @property \n def layer_name(self) -> typing.Optional[str]: \n <DED> return self._layer_name \n",
      "5": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n \n return self._layer_name \n",
      "6": "\n @property \n def layer_name(self) -> typing.Optional[str]: \n <DED> return self._layer_name \n",
      "7": "<IND> @property \n def layer_name(self) -> typing.Optional[str]: \n \n return self._layer_name \n",
      "8": "{ @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "9": "} @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "10": "\n @property \n def layer_name(self) -> typing.Optional[str]: \n \n return self._layer_name \n",
      "11": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n { return self._layer_name \n",
      "12": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n } return self._layer_name \n",
      "13": "\\ @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "14": "<IND> @property \n def layer_name(self) -> typing.Optional[str]: \n { return self._layer_name \n",
      "15": "<IND> @property \n def layer_name(self) -> typing.Optional[str]: \n } return self._layer_name \n",
      "16": "<DED> @property \n def layer_name(self): \n <IND> return self._layer_name \n",
      "17": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n \\ return self._layer_name \n",
      "18": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "19": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "20": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "21": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "22": "<DED> @property <DED> def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "23": "<DED> @property <IND> def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "24": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "25": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "26": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "27": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "28": "\n @property \n def layer_name(self) -> typing.Optional[str]: \n { return self._layer_name \n",
      "29": "\n @property \n def layer_name(self) -> typing.Optional[str]: \n } return self._layer_name \n",
      "30": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: <IND> <IND> return self._layer_name \n",
      "31": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "32": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "33": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name <IND>",
      "34": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "35": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "36": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "37": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "38": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "39": "^ @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "40": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "41": "{ @property \n def layer_name(self) -> typing.Optional[str]: \n <DED> return self._layer_name \n",
      "42": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: <DED> <IND> return self._layer_name \n",
      "43": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name <DED>",
      "44": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "45": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "46": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n return self._layer_name \n",
      "47": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "48": "@property \n def layer_name(self) -> typing.Optional[str]: \n <IND> return self._layer_name \n",
      "49": "<DED> @property \n def layer_name(self) -> typing.Optional[str]: \n return self._layer_name \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def escape(expr: str) -> None:\n    <IND>return expr.replace(\"'\", \"''\")\n",
    "target_code": "\n<DED>def escape(expr: str) -> str:\n    <IND>return expr.replace(\"'\", \"''\")\n",
    "warning_line": "    return expr.replace(\"'\", \"''\")",
    "linter_report": {
      "rule_id": "Incompatible return type [7]",
      "message": " Expected `None` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 118,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Shougo/deoplete.nvim",
    "source_filename": "rplugin/python3/deoplete/util.py",
    "target_filename": "rplugin/python3/deoplete/util.py",
    "source_changeid": "48fa59ab938c7d76c4697e90c05edd3472ba13b7^",
    "target_changeid": "48fa59ab938c7d76c4697e90c05edd3472ba13b7",
    "predictions": [
      "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "1": "\n <IND> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "2": "\n <DED> def escape(expr: str) -> str: \n <DED> return expr.replace(\"'\", \"''\") \n",
      "3": "<DED> <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "4": "<IND> <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "5": "\n \n def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "6": "\n <DED> def escape(expr: str) -> str: \n \n return expr.replace(\"'\", \"''\") \n",
      "7": "\n <IND> def escape(expr: str) -> str: \n <DED> return expr.replace(\"'\", \"''\") \n",
      "8": "<DED> <IND> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "9": "\n { def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "10": "\n <DED> def escape(expr: str) -> str: \n { return expr.replace(\"'\", \"''\") \n",
      "11": "\n <DED> def escape(expr: str) -> str: \n } return expr.replace(\"'\", \"''\") \n",
      "12": "\n } def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "13": "<IND> <IND> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "14": "<DED> <DED> def escape(expr: str) -> str: \n <DED> return expr.replace(\"'\", \"''\") \n",
      "15": "\n <IND> def escape(expr: str) -> str: \n \n return expr.replace(\"'\", \"''\") \n",
      "16": "<IND> <DED> def escape(expr: str) -> str: \n <DED> return expr.replace(\"'\", \"''\") \n",
      "17": "{ <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "18": "\n \n def escape(expr: str) -> str: \n <DED> return expr.replace(\"'\", \"''\") \n",
      "19": "\n <DED> def escape(expr: str): \n <IND> return expr.replace(\"'\", \"''\") \n",
      "20": "\n \\ def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "21": "\n <DED> def escape(expr: str) -> str: \n \\ return expr.replace(\"'\", \"''\") \n",
      "22": "} <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "23": "\n <DED> def escape(expr: str) -> str: <IND> <IND> return expr.replace(\"'\", \"''\") \n",
      "24": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") <IND>",
      "25": "\n <DED> def escape(expr: str) -> str: <DED> <IND> return expr.replace(\"'\", \"''\") \n",
      "26": "\n <DED> def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") <DED>",
      "27": "\n def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "28": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "29": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "30": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "31": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "32": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "33": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "34": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "35": "\n <DED> def escape(expr: str) -> None: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "36": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "37": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "38": "<DED> \n def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "39": "\n def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "40": "\n def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "41": "\n def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "42": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "43": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "44": "\n def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "45": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "46": "\n <IND> def escape(expr: str) -> str: \n { return expr.replace(\"'\", \"''\") \n",
      "47": "\n def escape(expr: str) -> str: \n <IND> return expr.replace(\"'\", \"''\") \n",
      "48": "\n <DED> def escape(expr: str) -> str: \n return expr.replace(\"'\", \"''\") \n",
      "49": "<DED> <DED> def escape(expr: str) -> str: \n \n return expr.replace(\"'\", \"''\") \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>k.typecheck(kty)\n            <DED>if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):\n                <IND>vty = v.type\n",
    "target_code": "                <IND>k.typecheck(kty)\n            <DED>if vty is None or vty == T.Array(T.Any()) or vty == T.Map((T.Any(), T.Any())):\n                <IND>vty = v.type\n",
    "warning_line": "            if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None):",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 445,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "chanzuckerberg/miniwdl",
    "source_filename": "WDL/Expr.py",
    "target_filename": "WDL/Expr.py",
    "source_changeid": "1b3f26c69b306c12226eaa02145072af0de12839^",
    "target_changeid": "1b3f26c69b306c12226eaa02145072af0de12839",
    "predictions": [
      "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "1": "\n k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "2": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "3": "<DED> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "4": "\n k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "5": "<IND> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "6": "<DED> k.typecheck(kty) \n \n if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "7": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "8": "\n k.typecheck(kty) \n \n if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "9": "<IND> k.typecheck(kty) \n \n if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "10": "\n k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "11": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "12": "<DED> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "13": "\n k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "14": "<IND> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "15": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n \n vty = v.type \n",
      "16": "<DED> k.typecheck(kty) \n { if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "17": "<DED> k.typecheck(kty) \n } if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "18": "{ k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "19": "\n k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n \n vty = v.type \n",
      "20": "\n k.typecheck(kty) \n { if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "21": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n \n vty = v.type \n",
      "22": "<IND> k.typecheck(kty) \n { if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "23": "<DED> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n \n vty = v.type \n",
      "24": "<DED> k.typecheck(kty) \n \n if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "25": "\n k.typecheck(kty) \n } if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "26": "} k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "27": "<IND> k.typecheck(kty) \n } if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "28": "{ k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "29": "\n k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n \n vty = v.type \n",
      "30": "\n k.typecheck(kty) \n \n if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "31": "<IND> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n \n vty = v.type \n",
      "32": "<IND> k.typecheck(kty) \n \n if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <DED> vty = v.type \n",
      "33": "} k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "34": "<DED> k.typecheck(kty) \n \\ if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "35": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n { vty = v.type \n",
      "36": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n } vty = v.type \n",
      "37": "\\ k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "38": "\n k.typecheck(kty) \n \\ if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "39": "<IND> k.typecheck(kty) \n \\ if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type \n",
      "40": "\n k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n { vty = v.type \n",
      "41": "\n k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n } vty = v.type \n",
      "42": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n { vty = v.type \n",
      "43": "<IND> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n } vty = v.type \n",
      "44": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map() or vty == T.Map(): \n <IND> vty = v.type \n",
      "45": "<DED> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n { vty = v.type \n",
      "46": "<DED> k.typecheck(kty) \n <IND> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n } vty = v.type \n",
      "47": "<DED> k.typecheck(kty) \n <DED> assert vty is not None or vty == T.Array(T.Any()) or vty == T.Map(None) \n vty = v.type \n",
      "48": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.typ \n",
      "49": "<DED> k.typecheck(kty) \n <DED> if vty is None or vty == T.Array(T.Any()) or vty == T.Map(None): \n <IND> vty = v.type <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []\n                )\n",
    "target_code": "                <IND>selected_peers = GossipSub.select_from_minus(\n                    num_mesh_peers_in_topic - self.degree, list(self.mesh[topic]), []\n                )\n",
    "warning_line": "                    num_mesh_peers_in_topic - self.degree, self.mesh[topic], []",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Sequence[typing.Any]` for 2nd positional only parameter to call `GossipSub.select_from_minus` but got `Set[ID]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 433,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "libp2p/py-libp2p",
    "source_filename": "libp2p/pubsub/gossipsub.py",
    "target_filename": "libp2p/pubsub/gossipsub.py",
    "source_changeid": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397^",
    "target_changeid": "b4bd997932ff5ee78a7f4f3c63e7e5cf1dddc397",
    "predictions": [
      "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "1": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "2": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "3": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "4": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "5": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "6": "\n selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - list(self.degree), list(self.mesh[topic], [])) \n",
      "7": "<DED> selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - list(self.degree), list(self.mesh[topic], [])) \n",
      "8": "<IND> selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - list(self.degree), list(self.mesh[topic], [])) \n",
      "9": "{ selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "10": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree,'mesh[topic'], [] \n ) \n",
      "11": "} selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "12": "\n selected_peers = GossipSub.select_from_minus( \n self.mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "13": "{ selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "14": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) <DED> ) \n",
      "15": "\n selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], [])) \n",
      "16": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []), \n ) \n",
      "17": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) <IND> ) \n",
      "18": "\n selected_peers = gossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "19": "\n selected_peers = GossipSub.select_from_minus( \n list(no_mesh_peers_in_topic) - self.degree, list(self.mesh[topic], []) \n ) \n",
      "20": "\n selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic) - self.degree, list(self.mesh[topic], []) \n ) \n",
      "21": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree,'mesh[topic'], [] \n ) \n",
      "22": "\n selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - list(self.degree), list(self.mesh[topic], [])) \n ) \n",
      "23": "} selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "24": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree,'self.mesh[topic'], [] \n ) \n",
      "25": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) { ) \n",
      "26": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree,'mesh[topic'], [] \n ) \n",
      "27": "\\ selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "28": "\n selected_peers = GossipSub.select_from_minus( \n list(nombre_mesh_peers_in_topic - self.degree, list(self.mesh[topic], [])) \n",
      "29": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic]), [] \n ) \n",
      "30": "\n selected_peers = GossipSub.select_from_minus( \n list(no_mesh_peers_in_topic - self.degree, list(self.mesh[topic], [])) \n",
      "31": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) } ) \n",
      "32": "<DED> selected_peers = GossipSub.select_from_minus( \n self.mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "33": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) <DED> ) \n",
      "34": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - list(self.degree), list(self.mesh[topic], []) \n ) \n",
      "35": "<DED> selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], [])) \n",
      "36": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []), \n ) \n",
      "37": "<DED> selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - list(self.degree), list(self.mesh[topic], [])) \n ) \n",
      "38": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) <IND> ) \n",
      "39": "\n selected_peers = GossipSub.select_from_minus( <IND> num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "40": "<DED> selected_peers = gossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "41": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) <DED> ) \n",
      "42": "\n selected_peers = GossipSub.select_from_minus( <DED> num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "43": "<IND> selected_peers = GossipSub.select_from_minus( \n self.mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "44": "\n selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree,'mesh', [] \n ) \n",
      "45": "<DED> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree,'self.mesh[topic'], [] \n ) \n",
      "46": "selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []) \n ) \n",
      "47": "\n selected_peers = gossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, self.mesh[topic], [] \n ) \n",
      "48": "<IND> selected_peers = GossipSub.select_from_minus( \n list(num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], [])) \n",
      "49": "<IND> selected_peers = GossipSub.select_from_minus( \n num_mesh_peers_in_topic - self.degree, list(self.mesh[topic], []), \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>restored = cls(\n            expiration=int(data['expiration']),\n            balance_proof=data['balance_proof'],\n",
    "target_code": "        <IND>restored = cls(\n            expiration=BlockExpiration(int(data['expiration'])),\n            balance_proof=data['balance_proof'],\n",
    "warning_line": "            expiration=int(data['expiration']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `BlockExpiration` for 1st parameter `expiration` to call `ContractSendChannelUpdateTransfer.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 231,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "<DED> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "1": "<IND> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "2": "\n restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "3": "<DED> restored = cls( \n block_expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "4": "<DED> restored = cls( \n LockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "5": "<IND> restored = cls( \n block_expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "6": "<IND> restored = cls( \n LockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "7": "\n restored = cls( \n block_expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "8": "\n restored = cls( \n LockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "9": "<DED> restored = cls( \n BlockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "10": "<IND> restored = cls( \n BlockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "11": "\n restored = cls( \n BlockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "12": "{ restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "13": "} restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "14": "{ restored = cls( \n block_expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "15": "} restored = cls( \n block_expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "16": "\\ restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "17": "<DED> restored = cls( \n lockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "18": "<DED> restored = cls( \n exit=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "19": "{ restored = cls( \n LockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "20": "<DED> restored = cls( \n lock_expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "21": "} restored = cls( \n LockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "22": "<IND> restored = cls( \n lockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "23": "<IND> restored = cls( \n exit=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "24": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "25": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "26": "<IND> restored = cls( \n lock_expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "27": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "28": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "29": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "30": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "31": "<DED> restored = cls( \n duration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "32": "\n restored = cls( \n lockExpiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "33": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "34": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "35": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "36": "\n restored = cls( \n exit=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "37": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "38": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "39": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "40": "^ restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "41": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "42": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "43": "restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "44": "<DED> restored = cls( \n execution=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "45": "<IND> restored = cls( \n duration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], \n",
      "46": "<DED> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), <DED> balance_proof=data['balance_proof'], \n",
      "47": "<DED> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), <IND> balance_proof=data['balance_proof'], \n",
      "48": "<DED> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <DED>",
      "49": "<DED> restored = cls( \n expiration=BlockExpiration(int(data['expiration'])), \n balance_proof=data['balance_proof'], <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data={}, shared=annotation[\"inputs\"])\n    )\n",
    "target_code": "    assignment.write_assignment_data(\n        InitializationData(unit_data=[{}], shared=annotation[\"inputs\"])\n    )\n",
    "warning_line": "        InitializationData(unit_data={}, shared=annotation[\"inputs\"])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.List[typing.Dict[str, typing.Any]]` for 1st parameter `unit_data` to call `InitializationData.__init__` but got `typing.Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 128,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebookresearch/Mephisto",
    "source_filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "target_filename": "mephisto/scripts/local_db/load_data_to_mephisto_db.py",
    "source_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238^",
    "target_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "predictions": [
      "assignment.write_assignment_data( \n InitializationData(unit_data= \n <DED>, shared=annotation[\"inputs\"]) \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "assignment.write_assignment_data( \n InitializationData(unit_data= \n <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "1": "assignment.write_assignment_data( \n InitializationData(unit_data= \n <IND>, shared=annotation[\"inputs\"]) \n ) \n",
      "2": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED> <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "3": "assignment.write_assignment_data( \n InitializationData(unit_data= <IND> <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "4": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED> <IND>, shared=annotation[\"inputs\"]) \n ) \n",
      "5": "assignment.write_assignment_data( \n InitializationData(unit_data= <IND> <IND>, shared=annotation[\"inputs\"]) \n ) \n",
      "6": "assignment.write_assignment_data( \n InitializationData(unit_data= { <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "7": "assignment.write_assignment_data( \n InitializationData(unit_data= \n \n, shared=annotation[\"inputs\"]) \n ) \n",
      "8": "assignment.write_assignment_data( \n InitializationData(unit_data= } <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "9": "assignment.write_assignment_data( \n InitializationData(unit_data= { <IND>, shared=annotation[\"inputs\"]) \n ) \n",
      "10": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED> \n, shared=annotation[\"inputs\"]) \n ) \n",
      "11": "assignment.write_assignment_data( \n InitializationData(unit_data= } <IND>, shared=annotation[\"inputs\"]) \n ) \n",
      "12": "assignment.write_assignment_data( \n InitializationData(unit_data= <IND> \n, shared=annotation[\"inputs\"]) \n ) \n",
      "13": "assignment.write_assignment_data( \n InitializationData(unit_data= \n }, shared=annotation[\"inputs\"]) \n ) \n",
      "14": "assignment.write_assignment_data( \n InitializationData(unit_data= \n {, shared=annotation[\"inputs\"]) \n ) \n",
      "15": "assignment.write_assignment_data( \n InitializationData(unit_data= \\ <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "16": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED> }, shared=annotation[\"inputs\"]) \n ) \n",
      "17": "assignment.write_assignment_data( \n InitializationData(unit_data= \\ <IND>, shared=annotation[\"inputs\"]) \n ) \n",
      "18": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED> {, shared=annotation[\"inputs\"]) \n ) \n",
      "19": "assignment.write_assignment_data( \n InitializationData(unit_data= <IND> }, shared=annotation[\"inputs\"]) \n ) \n",
      "20": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "21": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "22": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "23": "assignment.write_assignment_data( \n InitializationData(unit_data= { \n, shared=annotation[\"inputs\"]) \n ) \n",
      "24": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "25": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "26": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "27": "assignment.write_assignment_data( \n InitializationData(unit_data= <IND> {, shared=annotation[\"inputs\"]) \n ) \n",
      "28": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "29": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "30": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "31": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "32": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "33": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "34": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "35": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "36": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "37": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "38": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "39": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "40": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "41": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "42": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "43": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "44": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "45": "assignment.write_assignment_data( \n InitializationData(unit_data= <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "46": "assignment.write_assignment_data( \n InitializationData(unit_data= <IND>, shared=annotation[\"inputs\"]) \n ) \n",
      "47": "assignment.write_assignment_data( \n initialization_data(unit_data= \n <DED>, shared=annotation[\"inputs\"]) \n ) \n",
      "48": "assignment.write_assignment_data( \n initialization_data(unit_data= \n <IND>, shared=annotation[\"inputs\"]) \n ) \n",
      "49": "assignment.write_assignment_data( \n initialization_data(unit_data= <DED> <DED>, shared=annotation[\"inputs\"]) \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    <IND>physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "target_code": "                    <IND>physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path)\n                    if not isinstance(physical_layer, str):\n                        <IND>raise TypeError(\"Physical layer name is not a string: {}\".format(sub_config_path))\n                    <DED>hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)\n",
    "warning_line": "                    hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `interfaces.layers.Memory.__getitem__` but got `typing.Union[typing.List[typing.Union[bool, bytes, int, str]], bool, bytes, int, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 267,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/automagic/windows.py",
    "target_filename": "volatility/framework/automagic/windows.py",
    "source_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446^",
    "target_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "predictions": [
      "\n physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "1": "<DED> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "2": "<IND> physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "3": "{ physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "4": "} physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "5": "\\ physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "6": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "7": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "8": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "9": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "10": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "11": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "12": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "13": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "14": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "15": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "16": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "17": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "18": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "19": "^ physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "20": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "21": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "22": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "23": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "24": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "25": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "26": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "27": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "28": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "29": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "30": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "31": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "32": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "33": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "34": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "35": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "36": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "37": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "38": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "39": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "40": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "41": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "42": "Its physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "43": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "44": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "45": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "46": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "47": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "48": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n",
      "49": "physical_layer = requirement.requirements[\"memory_layer\"].config_value(context, sub_config_path) \n hits = context.memory[physical_layer].scan(context, PageMapScanner(useful), progress_callback) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    return bool(name) and name != '_' and len(name) < min_length\n",
    "target_code": "\n    return name is not None and name != '_' and len(name) < min_length\n",
    "warning_line": "    return bool(name) and name != '_' and len(name) < min_length",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Sized` for 1st positional only parameter to call `len` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 38,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wemake-services/wemake-python-styleguide",
    "source_filename": "wemake_python_styleguide/helpers/variables.py",
    "target_filename": "wemake_python_styleguide/helpers/variables.py",
    "source_changeid": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9^",
    "target_changeid": "5eff6965cb33502c4aa38841ae8db3f45d7ee6f9",
    "predictions": [
      "\n return bool(name) and name!= '_' and len(name)  min_length \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n return bool(name) and name!= '_' and len(name)  min_length \n",
      "1": "<DED> return bool(name) and name!= '_' and len(name)  min_length \n",
      "2": "<IND> return bool(name) and name!= '_' and len(name)  min_length \n",
      "3": "{ return bool(name) and name!= '_' and len(name)  min_length \n",
      "4": "} return bool(name) and name!= '_' and len(name)  min_length \n",
      "5": "\n return bool(name) and name!= \"_\" and len(name)  min_length \n",
      "6": "\n return bool(name) and name!= '_' and len(name)  min_length <IND>",
      "7": "\n return bool(name) and name!= '_' and len(name)  min_length <DED>",
      "8": "\n return bool(name) and name!= '_' and len(name)  min_length {",
      "9": "\\ return bool(name) and name!= '_' and len(name)  min_length \n",
      "10": "\n bool(name) and name!= '_' and len(name)  min_length \n",
      "11": "\n return bool(name) and name!= '_' and len(name)  min_length }",
      "12": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "13": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "14": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "15": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "16": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "17": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "18": "^ return bool(name) and name!= '_' and len(name)  min_length \n",
      "19": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "20": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "21": "\n return bool(name) and name!= '_' and len(name)  min_length \\",
      "22": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "23": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "24": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "25": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "26": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "27": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "28": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "29": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "30": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "31": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "32": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "33": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "34": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "35": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "36": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "37": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "38": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "39": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "40": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "41": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "42": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "43": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "44": "\n return bool(name) and name!= '_' and len(name)  min_length",
      "45": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "46": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "47": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "48": "return bool(name) and name!= '_' and len(name)  min_length \n",
      "49": "\n return bool(name) and name!= '_' and len(name)  min_length"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        results = self.fit(model)\n        self._set_running_stage(None, model)\n\n",
    "target_code": "        results = self.fit(model)\n        self._running_stage = None\n\n",
    "warning_line": "        self._set_running_stage(None, model)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `LightningEnum` for 1st positional only parameter to call `Trainer._set_running_stage` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1036,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "PyTorchLightning/pytorch-lightning",
    "source_filename": "pytorch_lightning/trainer/trainer.py",
    "target_filename": "pytorch_lightning/trainer/trainer.py",
    "source_changeid": "0456b4598f5f7eaebf626bca45d563562a15887b^",
    "target_changeid": "0456b4598f5f7eaebf626bca45d563562a15887b",
    "predictions": [
      "results = self.fit(model) \n self._running_stage = None \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "results = self.fit(model) \n self._running_stage = None \n \n",
      "1": "results = self.fit(model) \n assert model is not None \n self._running_stage = None \n \n",
      "2": "results = self.fit(model) \n self._running_stage = none \n \n",
      "3": "results = self.fit(model) \n self._running_stage = None \n <IND>",
      "4": "results = self.fit(model) \n self._running_stage = None \n <DED>",
      "5": "results = self.fit(model) \n # self._running_stage = None \n \n",
      "6": "results = self.fit(model) \n self._running_stage = None <IND> \n",
      "7": "results = self.fit(model) \n if model is None: \n <IND> self._running_stage = None \n \n",
      "8": "results = self.fit(model) \n self._running_stage = None <DED> \n",
      "9": "results = self.fit(model) <IND> self._running_stage = None \n \n",
      "10": "results = self.fit(model) <DED> self._running_stage = None \n \n",
      "11": "results = self.fit(model) \n self._running_stage = None \n {",
      "12": "results = self.fit(model) \n self._running_stage = None { \n",
      "13": "results = self.fit(model) { self._running_stage = None \n \n",
      "14": "results = self.fit(model) \n if model is None: \n <IND> self._running_stage = self._fit(model) \n \n",
      "15": "results = self.fit(model) \n self._running_stage = None \n }",
      "16": "results = self.fit(model) \n self._running_stage = None } \n",
      "17": "results = self.fit(model) \n assert model is not None \n self._running_stage.set(LightningEnum(None, model)) \n \n",
      "18": "results = self.fit(model) } self._running_stage = None \n \n",
      "19": "result = self.fit(model) \n self._running_stage = None \n \n",
      "20": "results = self.fit(model) \n if model is None: \n <IND> self._running_stage = self._running_stage(None, model) \n \n",
      "21": "results = self.fit(model) \n self._running_stage = None \n \\",
      "22": "results = self.fit(model) \n if model is None: \n <IND> self._running_stage = self._set_running_stage(None, model) \n \n",
      "23": "results = self.fit(model) \n self._running_stage = None \\ \n",
      "24": "results = self.fit(model) \\ self._running_stage = None \n \n",
      "25": "results = self.fit(model) self._running_stage = None \n \n",
      "26": "results = self.fit(model) \n assert model is not None \n self._running_stage(LightningEnum(None, model)) \n \n",
      "27": "results = self.fit(model) \n self._running_stage = None \n",
      "28": "results = self.fit(model) \n self._running_stage = None \n",
      "29": "results = self.fit(model) \n self._running_stage = None \n",
      "30": "results = self.fit(model) self._running_stage = None \n \n",
      "31": "results = self.fit(model) \n self._running_stage = None \n",
      "32": "results = self.fit(model) \n self._running_stage = None \n",
      "33": "results = self.fit(model) \n self._running_stage = None \n",
      "34": "results = self.fit(model) self._running_stage = None \n \n",
      "35": "results = self.fit(model) self._running_stage = None \n \n",
      "36": "results = self.fit(model) \n self._running_stage = None \n",
      "37": "results = self.fit(model) \n self._running_stage = None \n",
      "38": "results = self.fit(model) \n self._running_stage = None \n",
      "39": "results = self.fit(model) \n self._running_stage = None \n",
      "40": "results = self.fit(model) \n self._running_stage = None \n",
      "41": "results = self.fit(model) self._running_stage = None \n \n",
      "42": "results = self.fit(model) \n self._running_stage = None \n",
      "43": "results = self.fit(model) \n self._running_stage = None \n",
      "44": "results = self.fit(model) \n self._running_stage = None \n",
      "45": "results = self.fit(model) self._running_stage = None \n \n",
      "46": "results = self.fit(model) \n self._running_stage = None ^ \n",
      "47": "results = self.fit(model) ^ self._running_stage = None \n \n",
      "48": "results = self.fit(model) \n self._running_stage = None \n",
      "49": "results = self.fit(model) self._running_stage = None \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <DED>self.owned_eth_tokens.extend(tokens)\n        self.query_ethereum_tokens(tokens, self.balances[S_ETH])\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "target_code": "        <DED>self.owned_eth_tokens.extend(tokens)\n        eth_balances = cast(EthBalances, self.balances[S_ETH])\n        self.query_ethereum_tokens(tokens, eth_balances)\n        return {'per_account': self.balances, 'totals': self.totals}\n",
    "warning_line": "        self.query_ethereum_tokens(tokens, self.balances[S_ETH])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.EthAddress, Dict[Union[str, typing.EthToken, typing.NonEthTokenBlockchainAsset], FVal]]` for 2nd positional only parameter to call `Blockchain.query_ethereum_tokens` but got `Dict[Union[typing.BTCAddress, typing.EthAddress], Dict[Union[str, typing.EthToken, typing.FiatAsset, typing.NonEthTokenBlockchainAsset], FVal]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 131,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rotki/rotki",
    "source_filename": "rotkehlchen/blockchain.py",
    "target_filename": "rotkehlchen/blockchain.py",
    "source_changeid": "b763072c34b7f9d444fc042c460c93b458c8c282^",
    "target_changeid": "b763072c34b7f9d444fc042c460c93b458c8c282",
    "predictions": [
      "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances[S_ETH] \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "1": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "2": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "3": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <DED> 'per_account': self.balances, 'totals': self.totals \n \n",
      "4": "<DED> self.owned_eth_tokens.extend(tokens) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "5": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <IND> 'per_account': self.balances, 'totals': self.totals \n \n",
      "6": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.tokens \n \n",
      "7": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens,'self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "8": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, typing.EthAddress, typing.FiatAsset, typing.NonEthTokenBlockchainAsset) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "9": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, list(self.balances[S_ETH])) \n return \n 'per_account': self.balances, 'totals': list(self.totals) \n \n",
      "10": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <DED> 'per_account': self.balances, 'totals': self.totals \n \n",
      "11": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <IND> 'per_account': self.balances, 'totals': self.totals \n \n",
      "12": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <DED> 'per_account': self.balances, 'totals': self.totals \n \n",
      "13": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <IND> 'per_account': self.balances, 'totals': self.totals \n \n",
      "14": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, typing.EthAddress, typing.FiatAsset, typing.NonEthTokenBlockchainAsset) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "15": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.tokens \n \n",
      "16": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens,'self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "17": "<IND> self.owned_eth_tokens.extend(tokens) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "18": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, typing.EthAddress, typing.FiatAsset, typing.NonEthTokenBlockchainAsset) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "19": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.tokens \n \n",
      "20": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens,'self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "21": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, list(self.balances[S_ETH])) \n return \n 'per_account': self.balances, 'totals': list(self.totals) \n \n",
      "22": "\n self.owned_eth_tokens.extend(tokens) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "23": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, cast(typing.EthAddress), cast(typing.FiatAsset, casting.NonEthTokenBlockchainAsset), FVal) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "24": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, list(self.balances[S_ETH])) \n return \n 'per_account': self.balances, 'totals': list(self.totals) \n \n",
      "25": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, cast(typing.EthAddress), cast(typing.FiatAsset, casting.NonEthTokenBlockchainAsset), FVal) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "26": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, cast(typing.EthAddress), cast(typing.FiatAsset, casting.NonEthTokenBlockchainAsset), FVal]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "27": "<DED> self.owned_eth_tokens.extend(tokens) \n assert self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "28": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, cast(typing.EthAddress), cast(typing.FiatAsset), FVal]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "29": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <DED> 'per_account': self.balances, 'totals': self.tokens \n \n",
      "30": "<IND> self.owned_eth_tokens.extend(tokens) \n assert self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "31": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, list(self.balances[S_ETH])) \n return <DED> 'per_account': self.balances, 'totals': list(self.totals) \n \n",
      "32": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <IND> 'per_account': self.balances, 'totals': self.tokens \n \n",
      "33": "\n self.owned_eth_tokens.extend(tokens) \n assert self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': self.totals \n \n",
      "34": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, list(self.balances[S_ETH])) \n return <IND> 'per_account': self.balances, 'totals': list(self.totals) \n \n",
      "35": "<DED> self.owned_eth_tokens.extend(tokens) \n return <DED> 'per_account': self.balances, 'totals': self.totals \n \n",
      "36": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return { 'per_account': self.balances, 'totals': self.totals \n \n",
      "37": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens,'self.balances[S_ETH]) \n return <DED> 'per_account': self.balances, 'totals': self.totals \n \n",
      "38": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens,'self.balances[S_ETH]) \n return <IND> 'per_account': self.balances, 'totals': self.totals \n \n",
      "39": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': tokens \n \n",
      "40": "<DED> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return } 'per_account': self.balances, 'totals': self.totals \n \n",
      "41": "<DED> self.owned_eth_tokens.extend(tokens) \n return <IND> 'per_account': self.balances, 'totals': self.totals \n \n",
      "42": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <DED> 'per_account': self.balances, 'totals': self.tokens \n \n",
      "43": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <DED> 'per_account': self.balances, 'totals': self.tokens \n \n",
      "44": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <IND> 'per_account': self.balances, 'totals': self.tokens \n \n",
      "45": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens,'self.balances[S_ETH]) \n return <DED> 'per_account': self.balances, 'totals': self.totals \n \n",
      "46": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return <IND> 'per_account': self.balances, 'totals': self.tokens \n \n",
      "47": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens,'self.balances[S_ETH]) \n return <IND> 'per_account': self.balances, 'totals': self.totals \n \n",
      "48": "<IND> self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens, self.balances[S_ETH]) \n return \n 'per_account': self.balances, 'totals': tokens \n \n",
      "49": "\n self.owned_eth_tokens.extend(tokens) \n self.query_ethereum_tokens(tokens,'self.balances[S_ETH]) \n return <DED> 'per_account': self.balances, 'totals': self.totals \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>assert {} == load_data(\n        datadir='',\n        pairs=[],\n",
    "target_code": "    <IND>assert {} == load_data(\n        datadir=Path(''),\n        pairs=[],\n",
    "warning_line": "        datadir='',",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Path` for 1st parameter `datadir` to call `load_data` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 373,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "freqtrade/freqtrade",
    "source_filename": "tests/data/test_history.py",
    "target_filename": "tests/data/test_history.py",
    "source_changeid": "83644ce5d8502ddc99c5d24a46a33750cf7745bf^",
    "target_changeid": "83644ce5d8502ddc99c5d24a46a33750cf7745bf",
    "predictions": [
      "\n assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "1": "<DED> assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "2": "<IND> assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "3": "\n assert \n <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "4": "<DED> assert \n <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "5": "<IND> assert \n <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "6": "\n assert <DED> <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "7": "<DED> assert <DED> <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "8": "\n assert \n \n == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "9": "\n assert \n <DED> == load_data( \n python_path=Path(''), \n pairs=[], \n",
      "10": "<DED> assert \n <DED> == load_data( \n python_path=Path(''), \n pairs=[], \n",
      "11": "<DED> assert \n \n == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "12": "<IND> assert <DED> <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "13": "\n assert <IND> <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "14": "\n assert <DED> <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "15": "<IND> assert \n <DED> == load_data( \n python_path=Path(''), \n pairs=[], \n",
      "16": "<DED> assert <IND> <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "17": "<IND> assert \n \n == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "18": "\n assert \n <IND> == load_data( \n python_path=Path(''), \n pairs=[], \n",
      "19": "<DED> assert <DED> <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "20": "<IND> assert <IND> <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "21": "<DED> assert \n <IND> == load_data( \n python_path=Path(''), \n pairs=[], \n",
      "22": "\n assert <IND> <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "23": "<IND> assert <DED> <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "24": "<IND> assert \n <IND> == load_data( \n python_path=Path(''), \n pairs=[], \n",
      "25": "<DED> assert <IND> <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "26": "{ assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "27": "\n assert \n <DED> == load_data( \n python_datadir=Path(''), \n pairs=[], \n",
      "28": "} assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "29": "\n assert <DED> <DED> == load_data( \n python_path=Path(''), \n pairs=[], \n",
      "30": "\n assert \n } == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "31": "\n assert \n { == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "32": "<IND> assert <IND> <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "33": "<DED> assert \n <DED> == load_data( \n python_datadir=Path(''), \n pairs=[], \n",
      "34": "<DED> assert <DED> <DED> == load_data( \n python_path=Path(''), \n pairs=[], \n",
      "35": "\n assert \n \n == load_data( \n python_path=Path(''), \n pairs=[], \n",
      "36": "\n assert <DED> \n == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "37": "<DED> assert \n } == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "38": "<DED> assert \n { == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "39": "\n assert { <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "40": "<DED> assert <DED> \n == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "41": "{ assert \n <IND> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "42": "<DED> assert { <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "43": "\n assert } <DED> == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "44": "<IND> assert \n } == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "45": "<IND> assert \n { == load_data( \n datadir=Path(''), \n pairs=[], \n",
      "46": "\n assert \n <DED> == load_data( \n datadir=Path(''), <IND> pairs=[], \n",
      "47": "\n assert \n <DED> == load_data( \n datadir=Path(''), <DED> pairs=[], \n",
      "48": "\n assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], <IND>",
      "49": "\n assert \n <DED> == load_data( \n datadir=Path(''), \n pairs=[], <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <DED>rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())\n        print(output)\n",
    "target_code": "        <DED>rows = [d.values() for d in data]\n        output = tabulate(rows, tablefmt=\"plain\", headers=list(data[0].keys()))\n        print(output)\n",
    "warning_line": "        output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys())",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Union[Dict[str, str], typing.Sequence[str], str]` for 3rd parameter `headers` to call `tabulate` but got `typing.KeysView[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 73,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/cli/simple_table.py",
    "target_filename": "airflow/cli/simple_table.py",
    "source_changeid": "f7a9fd757454e4e6e9686b765cb088caccaba8c3^",
    "target_changeid": "f7a9fd757454e4e6e9686b765cb088caccaba8c3",
    "predictions": [
      "\n rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "1": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "2": "<IND> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "3": "\n rows = [d.values() for d in data] \n output = dict(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "4": "<DED> rows = [d.values() for d in data] \n output = dict(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "5": "<IND> rows = [d.values() for d in data] \n output = dict(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "6": "\n rows = [d.values() for d in data] \n output = d.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "7": "<DED> rows = [d.values() for d in data] \n output = d.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "8": "<IND> rows = [d.values() for d in data] \n output = d.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "9": "\n rows = [d.values() for d in data] \n output = d.sequence(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "10": "<DED> rows = [d.values() for d in data] \n output = d.sequence(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "11": "<IND> rows = [d.values() for d in data] \n output = d.sequence(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "12": "\n rows = [d.values() for d in data] \n output = Tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "13": "{ rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "14": "<DED> rows = [d.values() for d in data] \n output = Tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "15": "} rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "16": "\n rows = [d.values() for d in data] \n output = tuple(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "17": "<DED> rows = [d.values() for d in data] \n output = tuple(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "18": "<IND> rows = [d.values() for d in data] \n output = Tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "19": "\n rows = [d.values() for d in data] \n output = dict[rows, tablefmt=\"plain\", headers=data[0].keys()] \n print(output) \n",
      "20": "<IND> rows = [d.values() for d in data] \n output = tuple(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "21": "<DED> rows = [d.values() for d in data] \n output = dict[rows, tablefmt=\"plain\", headers=data[0].keys()] \n print(output) \n",
      "22": "\n rows = [d.values() for d in data] \n output = cls.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "23": "<DED> rows = [d.values() for d in data] \n output = cls.tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "24": "{ rows = [d.values() for d in data] \n output = dict(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "25": "\n rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()]) \n print(output) \n",
      "26": "} rows = [d.values() for d in data] \n output = dict(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "27": "<IND> rows = [d.values() for d in data] \n output = dict[rows, tablefmt=\"plain\", headers=data[0].keys()] \n print(output) \n",
      "28": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()]) \n print(output) \n",
      "29": "\n rows = [d.values() for d in data] \n output = output(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "30": "<DED> rows = [d.values() for d in data] \n output = output(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "31": "<IND> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()]) \n print(output) \n",
      "32": "\n rows = [d.values() for d in data] \n output = doc_format(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "33": "\n rows = [d.values() for d in data] \n output = '', tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "34": "<DED> rows = [d.values() for d in data] \n output = doc_format(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "35": "<DED> rows = [d.values() for d in data] \n output = '', tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "36": "\n rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()).decode('utf-8')) \n print(output) \n",
      "37": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()).decode('utf-8')) \n print(output) \n",
      "38": "\n rows = [d.values() for d in data] \n output = dict(array(rows, tablefmt=\"plain\", headers=data[0].keys())) \n print(output) \n",
      "39": "<DED> rows = [d.values() for d in data] \n output = dict(array(rows, tablefmt=\"plain\", headers=data[0].keys())) \n print(output) \n",
      "40": "<IND> rows = [d.values() for d in data] \n output = doc_format(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "41": "<IND> rows = [d.values() for d in data] \n output = '', tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "42": "\n rows = [d.values() for d in data] \n output = dict[rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "43": "<DED> rows = [d.values() for d in data] \n output = dict[rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "44": "<IND> rows = [d.values() for d in data] \n output = dict[rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) \n",
      "45": "\n rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) <IND>",
      "46": "\n rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) <DED>",
      "47": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) <IND>",
      "48": "<DED> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) <DED>",
      "49": "<IND> rows = [d.values() for d in data] \n output = tabulate(rows, tablefmt=\"plain\", headers=data[0].keys()) \n print(output) <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>r, t = item\n                intersection_of.append(ont.get_relationship(r), ont.get_term(t))\n            <DED>except TypeError:\n                <IND>intersection_of.append(ont.get_term(item))\n        <DED><DED>return frozenset(intersection_of)\n",
    "target_code": "                <IND>r, t = item\n                intersection_of.append((ont.get_relationship(r), ont.get_term(t)))\n            <DED>except TypeError:\n                <IND>intersection_of.append(ont.get_term(typing.cast(str, item)))\n        <DED><DED>return frozenset(intersection_of)\n",
    "warning_line": "                intersection_of.append(ont.get_term(item))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `Ontology.get_term` but got `Union[Tuple[str, str], str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 441,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "althonos/pronto",
    "source_filename": "pronto/term.py",
    "target_filename": "pronto/term.py",
    "source_changeid": "f23c3362ed3a16e70c4238675d7543835aac1cc8^",
    "target_changeid": "f23c3362ed3a16e70c4238675d7543835aac1cc8",
    "predictions": [
      "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "1": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "2": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "3": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "4": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "5": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "6": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "7": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "8": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "9": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <IND> return frozenset(intersection_of) \n",
      "10": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <IND> return frozenset(intersection_of) \n",
      "11": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "12": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "13": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "14": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "15": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <IND> return frozenset(intersection_of) \n",
      "16": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <IND> return frozenset(intersection_of) \n",
      "17": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "18": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "19": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "20": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "21": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "22": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <IND> return frozenset(intersection_of) \n",
      "23": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "24": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <IND> return frozenset(intersection_of) \n",
      "25": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "26": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "27": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "28": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <IND> return frozenset(intersection_of) \n",
      "29": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <IND> return frozenset(intersection_of) \n",
      "30": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <DED> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "31": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "32": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <DED> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "33": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "34": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "35": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <IND> return frozenset(intersection_of) \n",
      "36": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <IND> return frozenset(intersection_of) \n",
      "37": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n",
      "38": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "39": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <DED> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "40": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <DED> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "41": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <IND> return frozenset(intersection_of) \n",
      "42": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <DED> return frozenset(intersection_of) \n",
      "43": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n <IND> return frozenset(intersection_of) \n",
      "44": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <IND> return frozenset(intersection_of) \n",
      "45": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n \n return frozenset(intersection_of) \n",
      "46": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <IND> <IND> return frozenset(intersection_of) \n",
      "47": "<DED> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <IND> except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n \n \n return frozenset(intersection_of) \n",
      "48": "\n r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n <DED> except TypeError: \n <DED> intersection_of.append(ont.get_term(item)) \n \n <DED> return frozenset(intersection_of) \n",
      "49": "<IND> r, t = item \n intersection_of.append(ont.get_relationship(r), ont.get_term(t)) \n \n except TypeError: \n <IND> intersection_of.append(ont.get_term(item)) \n <DED> <DED> return frozenset(intersection_of) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>target1, target2 = _get_targets(var, get_players(var), player)\n\n",
    "target_code": "\n    <DED>target1, target2 = _get_targets(var, get_all_players(var), player)\n\n",
    "warning_line": "    target1, target2 = _get_targets(var, get_players(var), player)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Set[User]` for 2nd positional only parameter to call `_get_targets` but got `typing.List[User]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 53,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/roles/madscientist.py",
    "target_filename": "src/roles/madscientist.py",
    "source_changeid": "3b3870c9f365944134225c5b7364430c5bce0158^",
    "target_changeid": "3b3870c9f365944134225c5b7364430c5bce0158",
    "predictions": [
      "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "1": "\n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "2": "\n <DED> if not target: \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "3": "\n <DED> _get_targets(var, get_players(var), player) \n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "4": "\n <DED> if not isinstance(var, get_players(var), player): \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "5": "<DED> <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "6": "\n <DED> player = _get_targets(var, get_players(var), player) \n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "7": "\n \n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "8": "<IND> <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "9": "\n <DED> if not player: \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "10": "\n <IND> if not target: \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "11": "\n } target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "12": "\n { target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "13": "\n <DED> if not target: \n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "14": "\n <DED> if not target: \n <IND> return \n \n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "15": "\n <DED> get_targets(var, get_players(var), player) \n target1, get_targets(var, get_players(var), player) \n \n",
      "16": "<DED> <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "17": "<IND> <IND> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "18": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n <IND>",
      "19": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n <DED>",
      "20": "\n <DED> target1, target2 = typing.get_targets(var, get_players(var), player) \n \n",
      "21": "\n \\ target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "22": "{ <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "23": "} <DED> target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "24": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "25": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "26": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "27": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) <DED> \n",
      "28": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) <IND> \n",
      "29": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "30": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "31": "\n <DED> get_targets(var, get_players(var), player) \n target1, get_targets(var) \n \n",
      "32": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "33": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "34": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "35": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "36": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "37": "\n <DED> target1, target2 = _get_targets(var, get_players(var), player) \n {",
      "38": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "39": "\n <DED> if not isinstance(var, get_players(var), player): \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n <IND>",
      "40": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "41": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "42": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "43": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "44": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "45": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "46": "\n target1, target2 = _get_targets(var, get_players(var), player) \n \n",
      "47": "\n <DED> if not isinstance(var, get_players(var), player): \n <IND> target1, target2 = set(_get_targets(var, get_players(var), player) \n \n",
      "48": "\n <DED> if not isinstance(var, get_players(var), player): \n <IND> target1, target2 = _get_targets(var, get_players(var), player) \n <DED>",
      "49": "\n <DED> if not isinstance(var, get_players(var), player): \n <IND> target1, target2 = _get_targets(var, get_players(var)) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED><DED>binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "target_code": "    <DED><DED>binary = MachoParser(compiled_code_bin_path).get_arm64_slice()\n    assert binary is not None\n    analyzer = MachoAnalyzer.get_analyzer(binary)\n",
    "warning_line": "    analyzer = MachoAnalyzer.get_analyzer(binary)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `strongarm.macho.macho_binary.MachoBinary` for 1st positional only parameter to call `strongarm.macho.macho_analyzer.MachoAnalyzer.get_analyzer` but got `typing.Optional[strongarm.macho.macho_binary.MachoBinary]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 115,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "datatheorem/strongarm",
    "source_filename": "tests/utils.py",
    "target_filename": "tests/utils.py",
    "source_changeid": "72ab23d73cbfe454b802f4a5371502dec2f1fb36^",
    "target_changeid": "72ab23d73cbfe454b802f4a5371502dec2f1fb36",
    "predictions": [
      "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "1": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "2": "\n <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "3": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "4": "\n <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "5": "<IND> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "6": "<DED> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "7": "\n \n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "8": "<IND> <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "9": "<DED> <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "10": "<IND> <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "11": "\n \n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "12": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n if not binary: \n <IND> return \n \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "13": "\n { binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "14": "\n } binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "15": "<DED> <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "16": "\n <DED> return binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "17": "<IND> <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "18": "{ <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "19": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyser = MachoAnalyzer.get_analyzer(binary) \n",
      "20": "\n <DED> assert binary is not None \n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "21": "\n { binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "22": "\n } binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "23": "} <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "24": "\n <DED> bb = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "25": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyst = MachoAnalyzer.get_analyzer(binary) \n",
      "26": "\n \\ binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "27": "\n <DED> binary_path = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "28": "\n <IND> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n if not binary: \n <IND> return \n \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "29": "\n <DED> db = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "30": "\n <DED> bool = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "31": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n if not binary: \n <IND> return <IND> \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "32": "<DED> \n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "33": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n if not binary: \n <DED> return \n \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "34": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() <IND> analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "35": "\n <DED> slice = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "36": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() <DED> analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "37": "\n <DED> b = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "38": "\n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "39": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) <IND>",
      "40": "\n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "41": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) <DED>",
      "42": "<IND> \n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "43": "\n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "44": "\n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "45": "\n binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) \n",
      "46": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) {",
      "47": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) <IND>",
      "48": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n assert binary is not None \n analyzer = MachoAnalyzer.get_analyzer(binary) <DED>",
      "49": "\n <DED> binary = MachoParser(compiled_code_bin_path).get_arm64_slice() \n analyzer = MachoAnalyzer.get_analyzer(binary) }"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": true,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>continue\n            <DED>self.__check_destination_memo(account_resp, index, destination)\n",
    "target_code": "                <IND>continue\n            <DED>assert isinstance(account_resp, dict)\n            self.__check_destination_memo(account_resp, index, destination)\n",
    "warning_line": "            self.__check_destination_memo(account_resp, index, destination)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `Server._Server__check_destination_memo` but got `Union[Coroutine[typing.Any, typing.Any, Dict[str, typing.Any]], Dict[str, typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 410,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "StellarCN/py-stellar-base",
    "source_filename": "stellar_sdk/server.py",
    "target_filename": "stellar_sdk/server.py",
    "source_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6^",
    "target_changeid": "fb330563ff2269540bfbfd662fa535080d1cc1f6",
    "predictions": [
      "\n continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "1": "\n continue \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "2": "\n continue <DED> <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "3": "\n continue <DED> <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "4": "\n continue <IND> <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "5": "<DED> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "6": "\n continue <IND> <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "7": "<IND> continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "8": "<DED> continue \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "9": "\n continue \n \n self.__check_destination_memo(account_resp, index, destination) \n",
      "10": "<IND> continue \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "11": "<DED> continue <DED> <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "12": "\n continue \n <DED> assert isinstance(destination, dict) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "13": "\n continue \n <DED> assert account_resp is not None \n self.__check_destination_memo(account_resp, index, destination) \n",
      "14": "<IND> continue <DED> <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "15": "\n continue \n <IND> assert isinstance(destination, dict) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "16": "<DED> continue <DED> <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "17": "\n continue <DED> \n self.__check_destination_memo(account_resp, index, destination) \n",
      "18": "<DED> continue <IND> <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "19": "\n continue \n <IND> assert account_resp is not None \n self.__check_destination_memo(account_resp, index, destination) \n",
      "20": "\n continue \n <DED> if not isinstance(destination, Dict): \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "21": "<IND> continue <DED> <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "22": "\n continue <DED> <DED> assert isinstance(destination, dict) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "23": "<IND> continue <IND> <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "24": "<DED> continue <IND> <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "25": "\n continue <DED> <DED> assert account_resp is not None \n self.__check_destination_memo(account_resp, index, destination) \n",
      "26": "\n continue <IND> \n self.__check_destination_memo(account_resp, index, destination) \n",
      "27": "<DED> continue \n \n self.__check_destination_memo(account_resp, index, destination) \n",
      "28": "\n continue { <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "29": "<IND> continue <IND> <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "30": "\n continue \n { self.__check_destination_memo(account_resp, index, destination) \n",
      "31": "\n continue \n } self.__check_destination_memo(account_resp, index, destination) \n",
      "32": "\n continue } <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "33": "<IND> continue \n \n self.__check_destination_memo(account_resp, index, destination) \n",
      "34": "\n continue { <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "35": "\n continue } <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "36": "{ continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "37": "<DED> continue <DED> \n self.__check_destination_memo(account_resp, index, destination) \n",
      "38": "\n continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "39": "\n continue <DED> { self.__check_destination_memo(account_resp, index, destination) \n",
      "40": "} continue \n <DED> self.__check_destination_memo(account_resp, index, destination) \n",
      "41": "\n continue <DED> } self.__check_destination_memo(account_resp, index, destination) \n",
      "42": "<IND> continue <DED> \n self.__check_destination_memo(account_resp, index, destination) \n",
      "43": "\n continue \n \\ self.__check_destination_memo(account_resp, index, destination) \n",
      "44": "{ continue \n <IND> self.__check_destination_memo(account_resp, index, destination) \n",
      "45": "\n continue \n <IND> self.__check_destination_memo(account_resp, index, destination) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "46": "\n continue <DED> <DED> self.__check_destination_memo(account_resp, index, destination) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "47": "\n continue <DED> <IND> self.__check_destination_memo(account_resp, index, destination) \n self.__check_destination_memo(account_resp, index, destination) \n",
      "48": "\n continue \n <DED> self.__check_destination_memo(account_resp, index, Destination) \n",
      "49": "\n continue \n <DED> if not isinstance(destination, Dict): \n <IND> self.__check_destination_memo(account_resp, index, destination) \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    if type(condition) == bool\n                    else is_true(simplify(condition))\n                )\n",
    "target_code": "                    if type(condition) == bool\n                    else is_true(simplify(cast(Bool, condition)))\n                )\n",
    "warning_line": "                    else is_true(simplify(condition))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `mythril.laser.smt.expression.Expression` for 1st positional only parameter to call `mythril.laser.smt.expression.simplify` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1357,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474^",
    "target_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "predictions": [
      "if type(condition) == bool \n else is_true(simplify(condition)) \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if type(condition) == bool \n else is_true(simplify(condition)) \n ) \n",
      "1": "if condition == bool \n else is_true(simplify(condition)) \n ) \n",
      "2": "if type(condition) == bool \n else simple(is_true(simplify(condition))) \n ) \n",
      "3": "if condition(condition) == bool \n else is_true(simplify(condition)) \n ) \n",
      "4": "if condition is not None and type(condition) == bool \n else is_true(simplify(condition)) \n ) \n",
      "5": "if condition is not None and is_type(condition) == bool \n else is_true(simplify(condition)) \n ) \n",
      "6": "if type(condition) == bool <IND> else is_true(simplify(condition)) \n ) \n",
      "7": "if type(condition) == bool <DED> else is_true(simplify(condition)) \n ) \n",
      "8": "if type(condition) == bool \n else is_true(simplify(condition)) \n ) <IND>",
      "9": "if type(condition) == bool \n else is_true(simplify(condition)) \n ) <DED>",
      "10": "if type(condition) == bool \n else simple().Expression(simplify(condition)) \n ) \n",
      "11": "if type(condition) == bool \n else is_true(simplify(condition)) <DED> ) \n",
      "12": "if type(condition) == bool \n else is_true(simplify(condition)) <IND> ) \n",
      "13": "if isinstance(condition) == bool \n else is_true(simplify(condition)) \n ) \n",
      "14": "if condition_type == bool \n else is_true(simplify(condition)) \n ) \n",
      "15": "if type(condition) == bool \n else is_true(simplify(condition)) { ) \n",
      "16": "if type(condition) == bool \n else is_true(simplify()) \n ) \n",
      "17": "if type(condition) == bool { else is_true(simplify(condition)) \n ) \n",
      "18": "if type(condition) == bool \n else is_true(simplify(condition)) \n ) {",
      "19": "if isinstance(condition, expression.Expression) == bool \n else is_true(simplify(condition)) \n ) \n",
      "20": "if type(condition) == bool \n else is_true(simplify(condition)) } ) \n",
      "21": "if type(condition) == bool } else is_true(simplify(condition)) \n ) \n",
      "22": "if type(condition) == bool \n else is_true(simplify(condition)) \n ) }",
      "23": "if type(condition) == bool \n else simple().Expression(condition) \n ) \n",
      "24": "if condition== bool \n else is_true(simplify(condition)) \n ) \n",
      "25": "if condition.value == bool \n else is_true(simplify(condition)) \n ) \n",
      "26": "if type(condition) == bool \n else is_true(simplify(condition)) \\ ) \n",
      "27": "if type(condition) == bool \\ else is_true(simplify(condition)) \n ) \n",
      "28": "if type(condition) == bool \n else is_true(simplify(condition)) \n ) \\",
      "29": "if type(condition) == bool \n else is_true(simplify(condition)) ) \n",
      "30": "if type(condition) == bool \n else is_true(simplify(condition)) \n )",
      "31": "if type(condition) == bool else is_true(simplify(condition)) \n ) \n",
      "32": "if type(condition) == bool \n else is_true(simplify(condition)) ) \n",
      "33": "if type(condition) == bool else is_true(simplify(condition)) \n ) \n",
      "34": "if condition. == bool \n else is_true(simplify(condition)) \n ) \n",
      "35": "if type(condition) == bool \n else is_true(simplify(condition)) \n )",
      "36": "if kind(condition) == bool \n else is_true(simplify(condition)) \n ) \n",
      "37": "if type(condition) == bool \n else is_true(simplify(condition)) ) \n",
      "38": "if type(condition) == bool \n else is_true(simplify(condition)) ) \n",
      "39": "if type(condition) == bool else is_true(simplify(condition)) \n ) \n",
      "40": "if type(condition) == bool \n else is_true(simplify(condition)) ) \n",
      "41": "if type(condition) == bool \n else is_true(simplify(condition)) ) \n",
      "42": "if type(condition) == bool \n else is_true(simplify(condition)) \n )",
      "43": "if type(condition) == bool \n else is_true(simplify(condition)) ^ ) \n",
      "44": "if type(condition) == bool else is_true(simplify(condition)) \n ) \n",
      "45": "if type(condition) == bool \n else is_true(simplify(condition)) \n )",
      "46": "if type(condition) == bool \n else is_true(simplify(condition)) ) \n",
      "47": "if type(condition) == bool else is_true(simplify(condition)) \n ) \n",
      "48": "if type(condition) == bool \n else is_true(simplify(condition)) ) \n",
      "49": "if type(condition) == bool else is_true(simplify(condition)) \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                        <IND>name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    <DED>cmd [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "target_code": "                        <IND>name = \"{}.sif\".format(dockerRequirement[\"dockerLoad\"])\n                    <DED>cmd = [\"singularity\", \"build\", name,\n                         \"docker-archive://{}\".format(dockerRequirement[\"dockerLoad\"])]\n",
    "warning_line": "                    cmd [\"singularity\", \"build\", name,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing_extensions.SupportsIndex` for 1st positional only parameter to call `list.__getitem__` but got `Tuple[str, str, str, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 182,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "common-workflow-language/cwltool",
    "source_filename": "cwltool/singularity.py",
    "target_filename": "cwltool/singularity.py",
    "source_changeid": "1923638b59caf3ff4080e1faaaa64c68119c5c61^",
    "target_changeid": "1923638b59caf3ff4080e1faaaa64c68119c5c61",
    "predictions": [
      "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "1": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "2": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "3": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "4": "<IND> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "5": "<DED> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "6": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "7": "<IND> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "8": "<DED> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "9": "\n name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "10": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "11": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "12": "\n name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "13": "<IND> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "14": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "15": "<IND> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "16": "<DED> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "17": "<IND> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "18": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "19": "<IND> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "20": "<DED> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "21": "\n name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "22": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "23": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "24": "\n name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "25": "<IND> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "26": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "27": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "28": "<IND> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "29": "<DED> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "30": "<IND> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd [\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "31": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "32": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "33": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "34": "<IND> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "35": "<DED> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "36": "\n name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "37": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "38": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "39": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "40": "<IND> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "41": "<DED> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "42": "\n name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "43": "<IND> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "44": "\n name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "45": "<DED> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "46": "<IND> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "47": "<IND> name = \" \n <DED>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <IND> \".format(dockerRequirement[\"dockerLoad\"])] \n",
      "48": "\n name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <DED> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])) \n",
      "49": "<DED> name = \" \n <IND>.sif\".format(dockerRequirement[\"dockerLoad\"]) \n <IND> cmd[\"singularity\", \"build\", name, \n \"docker-archive:// \n <DED> \".format(dockerRequirement[\"dockerLoad\"])) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if '--out' in sys.argv:\n        <IND>outfile.write(order.encode('utf8')+'\\n')\n    <DED>elif not order+'\\n' in target:\n",
    "target_code": "    if '--out' in sys.argv:\n        <IND>outfile.write(order+'\\n')\n    <DED>elif not order+'\\n' in target:\n",
    "warning_line": "        outfile.write(order.encode('utf8')+'\\n')",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `io.TextIOBase.write` but got `bytes`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 82,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "psychopy/psychopy",
    "source_filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "target_filename": "psychopy/tests/test_app/test_builder/genComponsTemplate.py",
    "source_changeid": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3^",
    "target_changeid": "f120e91f49d9f6b0d7fe7f4de0e42f4fbf9295a3",
    "predictions": [
      "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <IND> elif not order+' \n n' in target: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <IND> elif not order+' \n n' in target: \n",
      "1": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <IND> elif not order+' \n n' in target: \n",
      "2": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <DED> elif not order+' \n n' in target: \n",
      "3": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <IND> n') \n <IND> elif not order+' \n n' in target: \n",
      "4": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <DED> elif not order+' \n n' in target: \n",
      "5": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <IND> n') \n <DED> elif not order+' \n n' in target: \n",
      "6": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <IND> elif not order+' <DED> n' in target: \n",
      "7": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <IND> elif not order+' <IND> n' in target: \n",
      "8": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <IND> elif not order+' <DED> n' in target: \n",
      "9": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <DED> elif not order+' <DED> n' in target: \n",
      "10": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <IND> n') \n <IND> elif not order+' <DED> n' in target: \n",
      "11": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <IND> elif not order+' <IND> n' in target: \n",
      "12": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <DED> elif not order+' <IND> n' in target: \n",
      "13": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <DED> elif not order+' <DED> n' in target: \n",
      "14": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <IND> n') \n <IND> elif not order+' <IND> n' in target: \n",
      "15": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <IND> n') \n <DED> elif not order+' <DED> n' in target: \n",
      "16": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <DED> elif not order+' <IND> n' in target: \n",
      "17": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <IND> n') \n <DED> elif not order+' <IND> n' in target: \n",
      "18": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n \n elif not order+' \n n' in target: \n",
      "19": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n \n elif not order+' \n n' in target: \n",
      "20": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <IND> n') \n \n elif not order+' \n n' in target: \n",
      "21": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' { n') \n <IND> elif not order+' \n n' in target: \n",
      "22": "if '--out' in sys.argv: \n <DED> outfile.write(order.encode('utf8')+' \n n') \n <IND> elif not order+' \n n' in target: \n",
      "23": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <IND> elif not order+' { n' in target: \n",
      "24": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' } n') \n <IND> elif not order+' \n n' in target: \n",
      "25": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' { n') \n <DED> elif not order+' \n n' in target: \n",
      "26": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n \n elif not order+' <DED> n' in target: \n",
      "27": "if '--out' in sys.argv: \n <DED> outfile.write(order.encode('utf8')+' <DED> n') \n <IND> elif not order+' \n n' in target: \n",
      "28": "if '--out' in sys.argv: \n <DED> outfile.write(order.encode('utf8')+' \n n') \n <DED> elif not order+' \n n' in target: \n",
      "29": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <IND> elif not order+' { n' in target: \n",
      "30": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <DED> elif not order+' { n' in target: \n",
      "31": "if '--out' in sys.argv: \n <DED> outfile.write(order.encode('utf8')+' <IND> n') \n <IND> elif not order+' \n n' in target: \n",
      "32": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' } n') \n <DED> elif not order+' \n n' in target: \n",
      "33": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <IND> elif not order+' } n' in target: \n",
      "34": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n \n elif not order+' <IND> n' in target: \n",
      "35": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <IND> n') \n <IND> elif not order+' { n' in target: \n",
      "36": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n \n elif not order+' <DED> n' in target: \n",
      "37": "if '--out' in sys.argv: \n <DED> outfile.write(order.encode('utf8')+' <DED> n') \n <DED> elif not order+' \n n' in target: \n",
      "38": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <DED> elif not order+' { n' in target: \n",
      "39": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <IND> n') \n \n elif not order+' <DED> n' in target: \n",
      "40": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' { n') \n <IND> elif not order+' <DED> n' in target: \n",
      "41": "if '--out' in sys.argv: \n <DED> outfile.write(order.encode('utf8')+' <IND> n') \n <DED> elif not order+' \n n' in target: \n",
      "42": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' <DED> n') \n <IND> elif not order+' } n' in target: \n",
      "43": "if '--out' in sys.argv: \n <IND> outfile.write(order.encode('utf8')+' \n n') \n <DED> elif not order+' } n' in target: \n",
      "44": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \n n') \n <IND> elif not order+' \n n' in target: \n",
      "45": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' \n n') \n <DED> elif not order+' \n n' in target: \n",
      "46": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' <DED> n') \n <IND> elif not order+' \n n' in target: \n",
      "47": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' <DED> n') \n <DED> elif not order+' \n n' in target: \n",
      "48": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' <IND> n') \n <IND> elif not order+' \n n' in target: \n",
      "49": "if '--out' in sys.argv: \n <IND> outfile.write(str(order.encode('utf8')+' <IND> n') \n <DED> elif not order+' \n n' in target: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        last_index = since_id\n        state[config.url_id] = scrapper_stat\n\n",
    "target_code": "        last_index = since_id\n        if config.url_id:\n            <IND>state[config.url_id] = scrapper_stat\n\n",
    "warning_line": "        state[config.url_id] = scrapper_stat",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 69,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "obsei/obsei",
    "source_filename": "obsei/source/reddit_scrapper.py",
    "target_filename": "obsei/source/reddit_scrapper.py",
    "source_changeid": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c^",
    "target_changeid": "f668a90b1ac8cebbbd72d4f02184bba3fa0ecd3c",
    "predictions": [
      "last_index = since_id \n state[config.url_id] = scrapper_stat \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "last_index = since_id \n state[config.url_id] = scrapper_stat \n \n",
      "1": "last_index = since_id \n assert isinstance(scrapper_stat, str) \n state[config.url_id] = scrapper_stat \n \n",
      "2": "last_index = since_id \n assert scrapper_stat is not None \n state[config.url_id] = scrapper_stat \n \n",
      "3": "last_index = since_id \n assert isinstance(str, since_id) \n state[config.url_id] = scrapper_stat \n \n",
      "4": "last_index = since_id \n assert scrapper_stat is not None \n last_index = since_id \n state[config.url_id] = scrapper_stat \n \n",
      "5": "last_index = since_id \n last_index = since_id \n state[config.url_id] = scrapper_stat \n \n",
      "6": "last_index = since_id \n assert since_id is not None \n state[config.url_id] = scrapper_stat \n \n",
      "7": "last_index = since_id \n assert isinstance(scrapper_stat, str) \n assert isinstance(scrapper_stat, str) \n \n",
      "8": "last_index = since_id \n assert isinstance(scrapper_stat, str) \n last_index = since_id \n assert isinstance(scrapper_stat, str) \n \n",
      "9": "last_index = since_id \n assert isinstance(str(since_id)) \n state[config.url_id] = scrapper_stat \n \n",
      "10": "last_index = since_id \n assert isinstance(scrapper_stat, str) \n last_index = since_id \n state[config.url_id] = scrapper_stat \n \n",
      "11": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n state[config.url_id] = scrapper_stat \n \n",
      "12": "last_index = since_id \n assert scrapper_stat is not None \n last_index = since_id \n assert scrapper_stat is not None \n state[config.url_id] = scrapper_stat \n \n",
      "13": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n last_index = since_id \n state[config.url_id] = scrapper_stat \n \n",
      "14": "last_index = since_id \n assert isinstance(str, dict) \n state[config.url_id] = scrapper_stat \n \n",
      "15": "last_index = since_id \n assert isinstance(str, config.url_id) \n state[config.url_id] = scrapper_stat \n \n",
      "16": "last_index = since_id \n assert isinstance(str, \"scrapper_stat\") \n state[config.url_id] = scrapper_stat \n \n",
      "17": "last_index = since_id \n assert isinstance(str, str) \n state[config.url_id] = scrapper_stat \n \n",
      "18": "last_index = since_id \n assert isinstance(scraper_stat, str) \n state[config.url_id] = scrapper_stat \n \n",
      "19": "last_index = since_id \n assert scrapper_stat is not None \n assert state[config.url_id] = scrapper_stat \n \n",
      "20": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n assert isinstance(str, dict) \n \n",
      "21": "last_index = since_id \n assert has_policy_id(str(since_id)) \n state[config.url_id] = scrapper_stat \n \n",
      "22": "last_index = since_id \n last_index = str(since_id) \n state[config.url_id] = scrapper_stat \n \n",
      "23": "last_index = since_id \n assert isinstance(str, _) \n state[config.url_id] = scrapper_stat \n \n",
      "24": "last_index = since_id \n assert has_policy_id = scrapper_stat \n last_index = since_id \n state[config.url_id] = scrapper_stat \n \n",
      "25": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n last_index = since_id \n assert isinstance(str, since_id) \n state[config.url_id] = scrapper_stat \n \n",
      "26": "last_index = since_id \n assert has_policy_id = scrapper_stat \n assert has_policy_id \n state[config.url_id] = scrapper_stat \n \n",
      "27": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n last_index = since_id \n assert isinstance(str, id) \n state[config.url_id] = scrapper_stat \n \n",
      "28": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n last_index = since_id \n assert isinstance(str, scrapper_stat) \n \n",
      "29": "last_index = since_id \n assert has_policy_id = scrapper_stat \n last_index = since_id \n assert has_policy_id = scrapper_stat \n \n",
      "30": "last_index = since_id \n assert isinstance(str, scrapper_stat, str) \n assert isinstance(str, str) \n \n",
      "31": "last_index = since_id \n assert isinstance(scrapper_stat, str) \n assert isinstance(str(since_id) \n state[config.url_id] = scrapper_stat \n \n",
      "32": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n assert isinstance(str, if not isinstance(str)) \n \n",
      "33": "last_index = since_id \n assert scrapper_stat is not None \n assert last_index is not None \n state[config.url_id] = scrapper_stat \n \n",
      "34": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n last_index = since_id \n assert isinstance(str, dict) \n",
      "35": "last_index = since_id \n assert isinstance(str, scrapper_stat, str) \n last_index = since_id \n assert isinstance(str, str) \n",
      "36": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n assert isinstance(str, 'utf-8') \n \n",
      "37": "last_index = since_id \n assert isinstance(scrapper_stat, str) \n state[config.url_id] = scrapper_stat \n \n",
      "38": "last_index = since_id \n assert wasinstance(str, since_id) \n state[config.url_id] = scrapper_stat \n \n",
      "39": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n assert isinstance(str,'verified') \n \n",
      "40": "last_index = since_id \n assert isinstance(str, if not scrapper_stat) \n state[config.url_id] = scrapper_stat \n \n",
      "41": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n assert isinstance(str, dict) \n <DED>",
      "42": "last_index = since_id \n assert isinstance(str, []) \n state[config.url_id] = scrapper_stat \n \n",
      "43": "last_index = since_id \n assert isinstance(stapper_stat, str) \n state[config.url_id] = scrapper_stat \n \n",
      "44": "last_index = since_id \n assert isinstance(str, ever_url) \n state[config.url_id] = scrapper_stat \n \n",
      "45": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n assert isinstance(str, config.url_id) \n",
      "46": "last_index = since_id \n assert isinstance(since_id, str) \n state[config.url_id] = scrapper_stat \n \n",
      "47": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n last_index = since_id \n assert isinstance(str, since_id) \n assert isinstance(str, scrapper_stat) \n \n",
      "48": "last_index = since_id \n assert isinstance(str, scrapper_stat) \n last_index = since_id \n assert isinstance(str, if not isinstance(str)) \n \n",
      "49": "last_index = since_id \n assert isinstance(scrapper_stat, str) \n last_index = since_id \n assert isinstance(scrapper_stat, str) \n <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            data,\n            1337,\n            'promote',\n",
    "target_code": "            data,\n            UserID(1337),\n            'promote',\n",
    "warning_line": "            1337,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `UserID` for 2nd positional only parameter to call `JubeatProp._modify_profile` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 345,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "DragonMinded/bemaniutils",
    "source_filename": "bemani/tests/test_JubeatProp.py",
    "target_filename": "bemani/tests/test_JubeatProp.py",
    "source_changeid": "fa0b2bd6cde5361dce438fba1f47d384b91040e7^",
    "target_changeid": "fa0b2bd6cde5361dce438fba1f47d384b91040e7",
    "predictions": [
      "data, \n UserID(1337), \n 'promote', \n"
    ],
    "correct": true,
    "top_five": {
      "0": "data, \n UserID(1337), \n 'promote', \n",
      "1": "data, <DED> UserID(1337), \n 'promote', \n",
      "2": "data, \n UserID(1337), <IND> 'promote', \n",
      "3": "data, \n UserID(1337), \n 'promote', <IND>",
      "4": "data, <IND> UserID(1337), \n 'promote', \n",
      "5": "data, \n UserID(1337), <DED> 'promote', \n",
      "6": "data, \n UserID(1337), \n 'promote', <DED>",
      "7": "data, { UserID(1337), \n 'promote', \n",
      "8": "data, \n UserID(1337), \n 'promote', {",
      "9": "data, \n UserID(1337), { 'promote', \n",
      "10": "data, \n UserID(1337), \n 'promote', }",
      "11": "data, \n UserID(1337), } 'promote', \n",
      "12": "data, } UserID(1337), \n 'promote', \n",
      "13": "data, \n userID(1337), \n 'promote', \n",
      "14": "data, \n UserID(1337), \n 'promote', \\",
      "15": "data, \\ UserID(1337), \n 'promote', \n",
      "16": "data, \n UserID(1337), \\ 'promote', \n",
      "17": "data, \n UserID(1337), \n 'promote',",
      "18": "data, UserID(1337), \n 'promote', \n",
      "19": "data, \n UserID(1337), 'promote', \n",
      "20": "data, \n UserID(1337), \n 'promote',",
      "21": "data, UserID(1337), \n 'promote', \n",
      "22": "data, \n UserID(1337), 'promote', \n",
      "23": "data, \n UserID(1337), \n 'promote',",
      "24": "data, \n UserID(1337), \n 'promote',",
      "25": "data, UserID(1337), \n 'promote', \n",
      "26": "data, \n UserID(1337), 'promote', \n",
      "27": "data, \n UserID(1337), 'promote', \n",
      "28": "data, UserID(1337), \n 'promote', \n",
      "29": "data, \n UserID(1337), \n 'promote',",
      "30": "data, \n UserID(1337), \n 'promote',",
      "31": "data, \n UserID(1337), \n 'promote',",
      "32": "data, UserID(1337), \n 'promote', \n",
      "33": "data, \n UserID(1337), \n 'promote', ^",
      "34": "data, \n UserID(1337), ^ 'promote', \n",
      "35": "data, \n UserID(1337), 'promote', \n",
      "36": "data, \n UserID(1337), 'promote', \n",
      "37": "data, ^ UserID(1337), \n 'promote', \n",
      "38": "data, UserID(1337), \n 'promote', \n",
      "39": "data, UserID(1337), \n 'promote', \n",
      "40": "data, \n UsersID(1337), \n 'promote', \n",
      "41": "data, \n UserID(1337), \n 'promote',",
      "42": "data, \n UserID(1337), 'promote', \n",
      "43": "data, \n UserID(1337), 'promote', \n",
      "44": "data, \n UserID(1337), \n 'promote',",
      "45": "data, \n UserID(1337), \n 'promote',",
      "46": "data, UserID(1337), \n 'promote', \n",
      "47": "data, UserID(1337), \n 'promote', \n",
      "48": "data, \n UserID(1377), \n 'promote', \n",
      "49": "data, \n UserID(1337), \n 'promote',"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    <IND>derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "target_code": "                <IND>for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count):\n                    <IND>assert key.derivation_data2 is not None\n                    derivation_path = unpack_derivation_path(key.derivation_data2)\n",
    "warning_line": "                    derivation_path = unpack_derivation_path(key.derivation_data2)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 1st positional only parameter to call `unpack_derivation_path` but got `Optional[bytes]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 547,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "electrumsv/electrumsv",
    "source_filename": "examples/applications/restapi/handler_utils.py",
    "target_filename": "examples/applications/restapi/handler_utils.py",
    "source_changeid": "2132e0922ed952c7eb61f639b57182657532a757^",
    "target_changeid": "2132e0922ed952c7eb61f639b57182657532a757",
    "predictions": [
      "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "1": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "2": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "3": "\n for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "4": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "5": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "6": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "7": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "8": "\n for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "9": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "10": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "11": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "12": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "13": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "14": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_path \n",
      "15": "\n for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "16": "\n for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "17": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "18": "\n for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "19": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2).derivation_path \n",
      "20": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_path \n",
      "21": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> if key.derivation_data2 is None: \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "22": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2) \n",
      "23": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2) \n",
      "24": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "25": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2).derivation_path \n",
      "26": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "27": "{ for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "28": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "29": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> if key.derivation_data2 is None: \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "30": "\n for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "31": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n \n assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "32": "} for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "33": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2) \n",
      "34": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2) \n",
      "35": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "36": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> key.derivation_data2 = unpack_derivation_path(key.derivation_data2) \n",
      "37": "{ for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "38": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <DED> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "39": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> if key.derivation_data2 is None: \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "40": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> key = derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "41": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> key.derivation_data2 = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "42": "\n for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_path \n",
      "43": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n { derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "44": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n } derivation_path = unpack_derivation_path(key.derivation_data2) \n",
      "45": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> if key.derivation_data2 is None: \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "46": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> key = derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2 \n",
      "47": "\n for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> assert key.derivation_data2 is not None \n derivation_path = unpack_derivation_path(key.derivation_data2).derivation_path \n",
      "48": "<DED> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> derivation_path = unpack_derivation_path(key.derivation_data2).derivation_data2).derivation_path \n",
      "49": "<IND> for key in account.get_fresh_keys(CHANGE_SUBPATH, count=split_count): \n <IND> key.derivation_data2 = unpack_derivation_path(key.derivation_data2) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": true,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        <DED><DED>return Interpreter(self.pipeline, context=init_context, config=self.config)\n\n",
    "target_code": "\n        <DED><DED>return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict())\n\n",
    "warning_line": "        return Interpreter(self.pipeline, context=init_context, config=self.config)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[str, typing.Any]` for 3rd parameter `config` to call `Interpreter.__init__` but got `RasaNLUConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 190,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "crownpku/Rasa_NLU_Chi",
    "source_filename": "rasa_nlu/model.py",
    "target_filename": "rasa_nlu/model.py",
    "source_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12^",
    "target_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "predictions": [
      "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "1": "\n <DED> <IND> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "2": "\n <IND> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "3": "\n <DED> <DED> assert self.pipeline is not None \n return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "4": "<DED> <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "5": "\n <IND> <IND> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "6": "\n <DED> \n return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "7": "\n \n <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "8": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "9": "\n <DED> <DED> return Interpreter(self.pipeline=self.context, context=init_context, config=self.config.as_dict()) \n \n",
      "10": "<IND> <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "11": "\n <DED> <DED> return Interpreter(self.pipeline=pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "12": "\n <DED> <IND> assert self.pipeline is not None \n return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "13": "\n <DED> <DED> return Interpreter(self.pipeline_context, context=init_context, config=self.config.as_dict()) \n \n",
      "14": "\n <IND> <DED> assert self.pipeline is not None \n return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "15": "\n <DED> <DED> return Interpreter(self.pipeline=self.context, contextual=init_context, config=self.config.as_dict()) \n \n",
      "16": "\n <DED> { return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "17": "\n <DED> } return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "18": "\n <DED> <DED> assert self.pipeline is not None \n return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "19": "<DED> <DED> <IND> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "20": "\n <DED> <IND> return Interpreter(self.pipeline=self.context, context=init_context, config=self.config.as_dict()) \n \n",
      "21": "\n } <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "22": "\n { <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "23": "\n \n <IND> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "24": "\n <IND> <DED> return Interpreter(self.pipeline=self.context, context=init_context, config=self.config.as_dict()) \n \n",
      "25": "<DED> <IND> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "26": "\n <DED> <DED> return Interpreter(self.pipeline_config, context=init_context, config=self.config.as_dict()) \n \n",
      "27": "\n <IND> \n return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "28": "\n <DED> <DED> return Interpreter(self.pipeline=text, context=init_context, config=self.config.as_dict()) \n \n",
      "29": "<IND> <DED> <IND> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "30": "\n <DED> <DED> return Interpreter(self.pipeline_text, context=init_context, config=self.config.as_dict()) \n \n",
      "31": "\n <DED> <IND> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "32": "\n <DED> <IND> return Interpreter(self.pipeline=pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "33": "<IND> <IND> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "34": "\n <IND> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "35": "\n <IND> <DED> return Interpreter(self.pipeline=pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "36": "\n <DED> <IND> return Interpreter(self.pipeline_context, context=init_context, config=self.config.as_dict()) \n \n",
      "37": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n <IND>",
      "38": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n <DED>",
      "39": "\n <DED> <DED> return Interpreter(self.pipeline=self.context, context=init_context, config=self.config) \n \n",
      "40": "\n <IND> <DED> return Interpreter(self.pipeline_context, context=init_context, config=self.config.as_dict()) \n \n",
      "41": "{ <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "42": "\n <DED> <DED> return Interpreter(self.pipeline=1, context=init_context, config=self.config.as_dict()) \n \n",
      "43": "\n \\ <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "44": "\n <DED> \\ return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) \n \n",
      "45": "\n <DED> <DED> return Interpreter(self.pipeline=init_context, config=self.config.as_dict()) \n \n",
      "46": "\n <DED> <IND> assert self.pipeline is not None \n return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "47": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config).as_dict() \n \n",
      "48": "\n <IND> <DED> assert self.pipeline is not None \n return Interpreter(self.pipeline, context=init_context, config=self.config) \n \n",
      "49": "\n <DED> <DED> return Interpreter(self.pipeline, context=init_context, config=self.config.as_dict()) <DED> \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    draw_texture_rectangle(center_x, center_y,\n                           scale,\n                           texture,\n                           angle=angle, alpha=alpha)\n",
    "target_code": "    draw_texture_rectangle(center_x, center_y,\n                           texture,\n                           scale,\n                           angle=angle, alpha=alpha)\n",
    "warning_line": "                           scale,",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `arcade.drawing_support.Texture` for 3rd positional only parameter to call `draw_texture_rectangle` but got `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 883,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pythonarcade/arcade",
    "source_filename": "arcade/draw_commands.py",
    "target_filename": "arcade/draw_commands.py",
    "source_changeid": "29972977db9e56010cd8b2e533eaa001f77114cd^",
    "target_changeid": "29972977db9e56010cd8b2e533eaa001f77114cd",
    "predictions": [
      "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) \n",
      "1": "draw_texture_rectangle(center_x, center_y, \n texture, \n texture, \n angle=angle, alpha=alpha) \n",
      "2": "draw_texture_rectangle(center_x, center_y, \n texture, \n scale, \n angle=angle, alpha=alpha) \n",
      "3": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture, \n angle=angle, alpha=alpha) \n",
      "4": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle, \n texture, \n angle=angle, alpha=alpha) \n",
      "5": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle, \n scale, \n angle=angle, alpha=alpha) \n",
      "6": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle(angle=angle, alpha=alpha) \n",
      "7": "draw_texture_rectangle(center_x, center_y, \n texture, \n texture=arcade.drawing_support.Texture, \n angle=angle, alpha=alpha) \n",
      "8": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle, \n angle=angle, alpha=alpha) \n",
      "9": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(angle=angle), \n alpha=alpha) \n",
      "10": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(angle, alpha=alpha) \n",
      "11": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(float), \n angle=angle, alpha=alpha) \n",
      "12": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(angle=angle, alpha=alpha) \n",
      "13": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle(), \n texture, \n angle=angle, alpha=alpha) \n",
      "14": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(), \n angle=angle, alpha=alpha) \n",
      "15": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(angle), \n angle=angle, alpha=alpha) \n",
      "16": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle, \n texture_support.Texture, \n angle=angle, alpha=alpha) \n",
      "17": "draw_texture_rectangle(center_x, center_y, \n scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "18": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(center_x, center_y), \n texture=angle, \n alpha=alpha) \n",
      "19": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(center_x, center_y), \n texture, \n angle=angle, alpha=alpha) \n",
      "20": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(center_x, center_y), \n scale, \n angle=angle, alpha=alpha) \n",
      "21": "draw_texture_rectangle(center_x, center_y, \n texture, \n gradient, \n angle=angle, alpha=alpha) \n",
      "22": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle, \n texture_support.Texture(angle=angle, alpha=alpha) \n",
      "23": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle, \n texture_position, \n angle=angle, alpha=alpha) \n",
      "24": "draw_texture_rectangle(center_x, center_y, \n texture, \n texture_rectangle, \n angle=angle, alpha=alpha) \n",
      "25": "draw_texture_rectangle(center_x, center_y, \n texture(), \n texture, \n angle=angle, alpha=alpha) \n",
      "26": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(center_x, center_y), \n texture_rectangle, \n angle=angle, alpha=alpha) \n",
      "27": "draw_texture_rectangle(center_x, center_y, \n texture.rectangle(center_x, center_y), \n texture, \n angle=angle, alpha=alpha) \n",
      "28": "draw_texture_rectangle(center_x, center_y, \n texture, \n scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "29": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle(), \n scale, \n angle=angle, alpha=alpha) \n",
      "30": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) \n",
      "31": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle, \n texture.append(angle=angle), alpha=alpha) \n",
      "32": "draw_texture_rectangle(center_x, center_y, \n texture_rectangle, \n texture.append(angle=angle, alpha=alpha) \n",
      "33": "draw_texture_rectangle(center_x, center_y, \n Texture, \n scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "34": "draw_texture_rectangle(center_x, center_y, \n texture, \n angles=angle, alpha=alpha) \n",
      "35": "draw_texture_rectangle(center_x, center_y, \n texture, <DED> angle=angle, alpha=alpha) \n",
      "36": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(center_x, center_y), \n scale, \n texture, \n angle=angle, alpha=alpha) \n",
      "37": "draw_texture_rectangle(center_x, center_y, \n texture, \n depth, \n angle=angle, alpha=alpha) \n",
      "38": "draw_texture_rectangle(center_x, center_y, \n texture, <IND> angle=angle, alpha=alpha) \n",
      "39": "draw_texture_rectangle(center_x, center_y, \n texture(), \n scale, \n angle=angle, alpha=alpha) \n",
      "40": "draw_texture_rectangle(center_x, center_y, \n texture, \n texture_position, \n angle=angle, alpha=alpha) \n",
      "41": "draw_texture_rectangle(center_x, center_y, <DED> texture, \n angle=angle, alpha=alpha) \n",
      "42": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <DED>",
      "43": "draw_texture_rectangle(center_x, center_y, \n texture, \n angle=angle, alpha=alpha) <IND>",
      "44": "draw_texture_rectangle(center_x, center_y, <IND> texture, \n angle=angle, alpha=alpha) \n",
      "45": "draw_texture_rectangle(center_x, center_y, \n texture=arcade.drawing_support.Texture(center_x, center_y, \n texture=angle, alpha=alpha) \n",
      "46": "draw_texture_rectangle(center_x, center_y, \n Texture, \n texture, \n angle=angle, alpha=alpha) \n",
      "47": "draw_texture_rectangle(center_x, center_y, \n texture, \n texture.append(angle=angle), alpha=alpha) \n",
      "48": "draw_texture_rectangle(center_x, center_y, \n texture, \n ratio, \n angle=angle, alpha=alpha) \n",
      "49": "draw_texture_rectangle(center_x, center_y, \n texture, { angle=angle, alpha=alpha) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            block_number=typing.BlockNumber(int(data['block_number'])),\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelSettled.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 542,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state_change.py",
    "target_filename": "raiden/transfer/state_change.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number']))), \n",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <IND> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <IND> block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <DED> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <DED> block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), <IND>",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), <DED>",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), { block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), {",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), { channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), } channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), } block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), }",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \\",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \\ channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \\ block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier']))), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), ^",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), ^ channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ^ block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])), \n",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n block_number=typing.BlockNumber(int(data['block_number'])),"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    )\n                <DED>result = json_loads(serialized)\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "target_code": "                    )\n                <DED>result = json_loads(bytes(serialized))\n                self.simplemonitor.update_remote_monitor(result, addr[0])\n",
    "warning_line": "                result = json_loads(serialized)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 1st positional only parameter to call `json_loads` but got `bytearray`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 189,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jamesoff/simplemonitor",
    "source_filename": "simplemonitor/Loggers/network.py",
    "target_filename": "simplemonitor/Loggers/network.py",
    "source_changeid": "ebf14585452f9ca5db63aad3fb5c88bf313732bd^",
    "target_changeid": "ebf14585452f9ca5db63aad3fb5c88bf313732bd",
    "predictions": [
      ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n"
    ],
    "correct": true,
    "top_five": {
      "0": ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "1": ") \n <IND> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "2": ") \n \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "3": ") \n { result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "4": ") \n } result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "5": ") \n <DED> result_bytes = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "6": ") \n \\ result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "7": ") <DED> <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "8": ") \n <IND> result_bytes = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "9": ") <IND> <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "10": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "11": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "12": ") \n <DED> result = bb_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "13": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "14": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "15": ") <DED> <IND> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "16": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "17": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "18": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "19": ") { <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "20": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "21": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "22": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "23": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "24": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "25": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "26": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "27": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "28": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "29": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "30": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "31": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "32": ") <IND> <IND> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "33": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "34": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "35": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "36": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "37": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "38": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "39": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "40": ") \n ^ result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "41": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "42": ") \n <DED> result = json_loads(bytes(serialized)) <DED> self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "43": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "44": ") \n result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "45": ") \n <DED> result = json_loads(bytes(serialized)) <IND> self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "46": ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) <IND>",
      "47": ") \n <DED> result = json_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) <DED>",
      "48": ") \n <DED> result = byte_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n",
      "49": ") \n <IND> result = bb_loads(bytes(serialized)) \n self.simplemonitor.update_remote_monitor(result, addr[0]) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            target_state=data['target_state'],\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            target_state=data['target_state'],\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `TargetTask.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 223,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state.py",
    "target_filename": "raiden/transfer/state.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <IND> target_state=data['target_state'], \n",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <IND> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <DED> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], <IND>",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <DED> target_state=data['target_state'], \n",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], <DED>",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], {",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), { target_state=data['target_state'], \n",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), { channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), } target_state=data['target_state'], \n",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), } channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], }",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \\",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \\ channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \\ target_state=data['target_state'], \n",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], \n",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], \n",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], \n",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], \n",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], \n",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], \n",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], \n",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], ^",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), ^ channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ^ target_state=data['target_state'], \n",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], \n",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), target_state=data['target_state'], \n",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'],",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n target_state=data['target_state'], \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n\n        <IND>super().__init__(vocab, regularizer)\n\n",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n\n        <IND>super().__init__(vocab, **kwargs)\n\n",
    "warning_line": "        super().__init__(vocab, regularizer)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 59,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "target_filename": "allennlp/models/encoder_decoders/composed_seq2seq.py",
    "source_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772^",
    "target_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "predictions": [
      "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "1": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, **kwargs) \n \n",
      "2": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n super().__init__(vocab, **kwargs) \n \n",
      "3": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, *, **kwargs) \n \n",
      "4": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "5": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, ****, **kwargs) \n \n",
      "6": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n } super().__init__(vocab, **kwargs) \n \n",
      "7": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n { super().__init__(vocab, **kwargs) \n \n",
      "8": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, *, **kwargs) \n \n",
      "9": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n <IND>",
      "10": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n <DED>",
      "11": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \\ super().__init__(vocab, **kwargs) \n \n",
      "12": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n super().__init__(vocab, *, **kwargs) \n \n",
      "13": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, ****, **kwargs) \n \n",
      "14": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, regularizer) \n \n",
      "15": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: <IND> <IND> super().__init__(vocab, **kwargs) \n \n",
      "16": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "17": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "18": "initializer: InitializerApplicator = InitializerApplicator(), <IND> regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "19": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "20": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "21": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "22": "initializer: InitializerApplicator = InitializerApplicator(), <DED> regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "23": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <IND> ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "24": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) <IND> \n",
      "25": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "26": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) <DED> \n",
      "27": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: <DED> <IND> super().__init__(vocab, **kwargs) \n \n",
      "28": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n {",
      "29": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "30": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <DED> ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "31": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "32": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "33": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "34": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "35": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "36": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "37": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "38": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "39": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "40": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "41": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "42": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "43": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "44": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "45": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "46": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "47": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "48": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "49": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        regularizer: Optional[RegularizerApplicator] = None,\n    ) -> None:\n        <IND>super().__init__(vocab, regularizer)\n\n",
    "target_code": "        initializer: InitializerApplicator = InitializerApplicator(),\n        **kwargs,\n    ) -> None:\n        <IND>super().__init__(vocab, **kwargs)\n\n",
    "warning_line": "        super().__init__(vocab, regularizer)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator` for 2nd positional only parameter to call `Model.__init__` but got `Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 79,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/models/graph_parser.py",
    "target_filename": "allennlp/models/graph_parser.py",
    "source_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772^",
    "target_changeid": "700abc65fd2172a2c6809dd9b72cf50fc2407772",
    "predictions": [
      "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "1": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, **kwargs) \n \n",
      "2": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n super().__init__(vocab, **kwargs) \n \n",
      "3": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, *, **kwargs) \n \n",
      "4": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n } super().__init__(vocab, **kwargs) \n \n",
      "5": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n { super().__init__(vocab, **kwargs) \n \n",
      "6": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, ****, **kwargs) \n \n",
      "7": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, regularizer) \n \n",
      "8": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <DED> super().__init__(vocab, *, **kwargs) \n \n",
      "9": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n <IND>",
      "10": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n <DED>",
      "11": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \\ super().__init__(vocab, **kwargs) \n \n",
      "12": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n \n super().__init__(vocab, *, **kwargs) \n \n",
      "13": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: <IND> <IND> super().__init__(vocab, **kwargs) \n \n",
      "14": "initializer: InitializerApplicator = InitializerApplicator(), <IND> regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "15": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "16": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "17": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "18": "initializer: InitializerApplicator = InitializerApplicator(), <DED> regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "19": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "20": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <IND> ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "21": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) <IND> \n",
      "22": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "23": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "24": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n {",
      "25": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n <IND> super().__init__(vocab, **kwargs) <DED> \n",
      "26": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: <DED> <IND> super().__init__(vocab, **kwargs) \n \n",
      "27": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, <DED> ) -> None: \n <IND> super().__init__(vocab, **kwargs) \n \n",
      "28": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "29": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "30": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "31": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "32": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "33": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "34": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "35": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "36": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "37": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "38": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "39": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "40": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "41": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "42": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "43": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "44": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "45": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "46": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "47": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "48": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n",
      "49": "initializer: InitializerApplicator = InitializerApplicator(), \n regularizer: Optional[RegularizerApplicator] = None, \n ) -> None: \n super().__init__(vocab, **kwargs) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>else:\n        <IND>level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "target_code": "    <DED>else:\n        <IND>level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\", \"INFO\")\n        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)\n",
    "warning_line": "        LEVEL = logging._nameToLevel.get(level_name, logging.INFO)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `typing.Mapping.get` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 103,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "allenai/allennlp",
    "source_filename": "allennlp/common/logging.py",
    "target_filename": "allennlp/common/logging.py",
    "source_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d^",
    "target_changeid": "71a98c2a5fd014867188b8d81a05129cbc64268d",
    "predictions": [
      "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "1": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "2": "<IND> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "3": "<IND> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "4": "\n else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "5": "\n else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "6": "<DED> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "7": "<DED> else: \n <DED> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "8": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO] \n",
      "9": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "10": "<IND> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "11": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "12": "<IND> else: \n <DED> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "13": "<IND> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO] \n",
      "14": "<IND> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "15": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO) \n",
      "16": "<IND> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "17": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n level_name = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "18": "\n else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "19": "\n else: \n <DED> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "20": "<IND> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO) \n",
      "21": "\n else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO] \n",
      "22": "<IND> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n level_name = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "23": "\n else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "24": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "25": "<DED> else: \n \n level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "26": "<DED> else: \n \n level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "27": "<DED> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n level_name = logging._nameToLevel[level_name], logging.INFO) \n",
      "28": "\n else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "29": "<DED> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO] \n",
      "30": "<DED> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "31": "<IND> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "32": "<IND> else: \n \n level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "33": "<IND> else: \n \n level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "34": "<IND> else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n level_name = logging._nameToLevel[level_name], logging.INFO) \n",
      "35": "\n else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO) \n",
      "36": "<DED> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "37": "\n else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n level_name = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "38": "{ else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "39": "{ else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "40": "} else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "41": "} else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "42": "<IND> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO] \n",
      "43": "<IND> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel.get(level_name, logging.INFO) \n",
      "44": "<DED> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO) \n",
      "45": "<IND> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name, logging.INFO] \n",
      "46": "\n else: \n <IND> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n level_name = logging._nameToLevel[level_name], logging.INFO) \n",
      "47": "<DED> else: \n <IND> level_name = os.environ.get(\"ALLENNLP_LOG_LEVEL\") \n LEVEL = logging._nameToLevel[level_name], logging.INFO) \n",
      "48": "<IND> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n LEVEL = logging._nameToLevel[level_name], logging.INFO) \n",
      "49": "<DED> else: \n <DED> level_name = os.environ[\"ALLENNLP_LOG_LEVEL\"] \n level_name = logging._nameToLevel[level_name], logging.INFO) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, Transporter, InsightsConfig) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client._transporter,\n            user_token\n",
    "target_code": "    <IND>def __init__(self, insights_client, user_token):\n        # type: (InsightsClient, str) -> None\n\n        <IND>super(UserInsightsClientAsync, self).__init__(\n            insights_client,\n            user_token\n",
    "warning_line": "            user_token",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 2nd positional only parameter to call `UserInsightsClient.__init__` but got `InsightsConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 32,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "algolia/algoliasearch-client-python",
    "source_filename": "algoliasearch/insights_client_async.py",
    "target_filename": "algoliasearch/insights_client_async.py",
    "source_changeid": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395^",
    "target_changeid": "3178aab6a5fc643bf05d473b3f5e19f3e2bce395",
    "predictions": [
      "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "1": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "2": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "3": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "4": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "5": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "6": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "7": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "8": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "9": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "10": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "11": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "12": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "13": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "14": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "15": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "16": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "17": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "18": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "19": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "20": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n \n super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "21": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "22": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "23": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "24": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "25": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "26": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "27": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "28": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "29": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "30": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "31": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "32": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "33": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n \n super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "34": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, { user_token \n",
      "35": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "36": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "37": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "38": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n \n super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "39": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "40": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "41": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "42": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <IND> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "43": "\n def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <DED> user_token \n",
      "44": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, } user_token \n",
      "45": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "46": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n \n <DED> super(UserInsightsClientAsync, self).__init__() \n",
      "47": "<IND> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> <DED> super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, <IND> user_token \n",
      "48": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <IND> \n super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n",
      "49": "<DED> def __init__(self, insights_client, user_token): \n # type: (InsightsClient, Transporter, InsightsConfig) -> None \n <DED> \n super(UserInsightsClientAsync, self).__init__( \n insights_client._transporter, \n user_token \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "target_code": "FAKE_MANIFEST = \"unknown_tag\"\nFAKE_DIGEST = \"sha256:\" + hashlib.sha256(b\"fake\").hexdigest()\nFAKE_IMAGE_ID = \"fake-image\"\n",
    "warning_line": "FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest()",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Union[array.array[typing.Any], bytearray, bytes, memoryview, mmap.mmap]` for 1st positional only parameter to call `hashlib.sha256` but got `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 29,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "quay/quay",
    "source_filename": "test/specs.py",
    "target_filename": "test/specs.py",
    "source_changeid": "38be6d05d08bc72cc13a89073bb5364b8adf6c04^",
    "target_changeid": "38be6d05d08bc72cc13a89073bb5364b8adf6c04",
    "predictions": [
      "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n"
    ],
    "correct": false,
    "top_five": {
      "0": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "1": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "2": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "3": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"fake\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "4": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST ='sha256' + hashlib.sha256('fake').hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "5": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "6": "FAKE_MANIFEST = \"unknown_tag\" \n fAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "7": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"hashlib.sha256\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "8": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [\"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "9": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = (\"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "10": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [sha256: Union[bytes, bytearray, memoryview, mmap.mmap]] \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "11": "FAKE_MANIFEST = \"unknown_tag\" <IND> FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "12": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [sha256: 256] + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "13": "FAKE_MANIFEST = \"unknown_tag\" <DED> FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "14": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() <IND> FAKE_IMAGE_ID = \"fake-image\" \n",
      "15": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() <DED> FAKE_IMAGE_ID = \"fake-image\" \n",
      "16": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" <IND>",
      "17": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256: 256\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "18": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" <DED>",
      "19": "FAKE_MANIFEST = \"unknown_tag\" \n assert isinstance(sha256, \"fake\") \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "20": "FAKE_MANIFEST = \"unknown_tag\" { FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "21": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" {",
      "22": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() { FAKE_IMAGE_ID = \"fake-image\" \n",
      "23": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = (sha256: 256) + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "24": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "25": "FAKE_MANIFEST = \"unknown_tag\" } FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "26": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" }",
      "27": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() } FAKE_IMAGE_ID = \"fake-image\" \n",
      "28": "FAKE_MANIFEST = \"unknown_tag\" \n # FAKE_DIGEST + hashlib.sha256(\"fake\").hexdigest() \n # FAKE_IMAGE_ID = \"fake-image\" \n",
      "29": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = Hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "30": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST ='sha256' + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "31": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = (sha256) + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "32": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [sha256: bytes] + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "33": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [sha256: Union[bytes, bytearray], hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "34": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [sha256] + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "35": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256: \" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "36": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256\", + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "37": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = (hashlib.sha256(\"fake\").hexdigest()) \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "38": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \\",
      "39": "FAKE_MANIFEST = \"unknown_tag\" \\ FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "40": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \\ FAKE_IMAGE_ID = \"fake-image\" \n",
      "41": "FAKE_MANIFEST = \"unknown_tag\" \n # FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n # FAKE_IMAGE_ID = \"fake-image\" \n",
      "42": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\"",
      "43": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "44": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\" \n",
      "45": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\"",
      "46": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = [sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "47": "FAKE_MANIFEST = \"unknown_tag\" FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\" \n",
      "48": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() FAKE_IMAGE_ID = \"fake-image\" \n",
      "49": "FAKE_MANIFEST = \"unknown_tag\" \n FAKE_DIGEST = \"sha256:\" + hashlib.sha256(\"fake\").hexdigest() \n FAKE_IMAGE_ID = \"fake-image\""
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict\n        )\n",
    "target_code": "        <IND>cycle_error, max_rot_error, max_trans_error = compute_cycle_error(\n            i2Ri1_dict, (i0, i1, i2), two_view_reports_dict\n        )\n",
    "warning_line": "            i2Ri1_dict, [i0, i1, i2], two_view_reports_dict",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[int, int, int]` for 2nd positional only parameter to call `compute_cycle_error` but got `List[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 201,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "borglab/gtsfm",
    "source_filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "target_filename": "gtsfm/averaging/rotation/cycle_consistency.py",
    "source_changeid": "26f76a40e21bd082123f275404efca964faa59b9^",
    "target_changeid": "26f76a40e21bd082123f275404efca964faa59b9",
    "predictions": [
      "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "1": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "2": "\n cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "3": "} cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "4": "{ cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "5": "\\ cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "6": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict <DED> ) \n",
      "7": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict <IND> ) \n",
      "8": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "9": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict <DED> ) \n",
      "10": "<IND> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict <IND> ) \n",
      "11": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "12": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "13": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict { ) \n",
      "14": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2, two_view_reports_dict \n ) \n",
      "15": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "16": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "17": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "18": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "19": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "20": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "21": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "22": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "23": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "24": "^ cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "25": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "26": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "27": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "28": "\n cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict <DED> ) \n",
      "29": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "30": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "31": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "32": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "33": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "34": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "35": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "36": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "37": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "38": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "39": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "40": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "41": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "42": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "43": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "44": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "45": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict } ) \n",
      "46": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "47": "cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) \n",
      "48": "\n cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict <IND> ) \n",
      "49": "<DED> cycle_error, max_rot_error, max_trans_error = compute_cycle_error( \n i2Ri1_dict, [i0, i1, i2], two_view_reports_dict \n ) <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>@classmethod\n    def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\":\n        <IND>minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "target_code": "    <DED>@classmethod\n    def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\":\n        <IND>minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\")\n        maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\")\n        return cls(minimum=minimum, maximum=maximum)\n",
    "warning_line": "        return cls(minimum=minimum, maximum=maximum)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Variable[T]` for 2nd parameter `maximum` to call `RangeSummary.__init__` but got `Optional[Variable[T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 437,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "stac-utils/pystac",
    "source_filename": "pystac/collection.py",
    "target_filename": "pystac/collection.py",
    "source_changeid": "acaf0e023be27409aa4d159ed84910ff34103f93^",
    "target_changeid": "acaf0e023be27409aa4d159ed84910ff34103f93",
    "predictions": [
      "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "1": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "2": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "3": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "4": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "5": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "6": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "7": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "8": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <DED> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "9": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "10": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "11": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <DED> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "12": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "13": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "14": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <DED> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "15": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "16": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "17": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "18": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "19": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <DED> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "20": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "21": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n \n minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "22": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=minimum)",
      "23": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <DED> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "24": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") <DED> return cls(minimum=minimum,",
      "25": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "26": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") <IND> return cls(minimum=minimum,",
      "27": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <DED> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "28": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n \n minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "29": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=maximum) \n",
      "30": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "31": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "32": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[Variable[T]] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[Variable[T]] = get_required(d.get(\"maximum\")) \n return cls(minimum=minimum,",
      "33": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "34": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n \n minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "35": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=minimum)",
      "36": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "37": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=maximum)",
      "38": "\n @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <DED> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "39": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <DED> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "40": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "41": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") <DED> return cls(minimum=minimum,",
      "42": "{ @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "43": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[Variable[T]] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[Variable[T]] = get_required(d.get(\"maximum\")",
      "44": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[Variable[T]] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[Variable[T]] = get_required(d.get(\"maximum\") \n return cls(minimum=minimum,",
      "45": "} @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "46": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <DED> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum,",
      "47": "<IND> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: Optional[T] = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: Optional[T] = get_required(d.get(\"maximum\") <IND> return cls(minimum=minimum,",
      "48": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any], typ: Type[T] = Any) -> \"RangeSummary[T]\": \n <IND> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum),",
      "49": "<DED> @classmethod \n def from_dict(cls, d: Dict[str, Any]) -> \"RangeSummary[T]\": \n <DED> minimum: T = get_required(d.get(\"minimum\"), \"RangeSummary\", \"minimum\") \n maximum: T = get_required(d.get(\"maximum\"), \"RangeSummary\", \"maximum\") \n return cls(minimum=minimum, maximum=maximum)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=[\"gui\"])\n\n",
    "target_code": "        <IND>maestral_dist = pkg_resources.get_distribution(\"maestral\")\n        requirements = maestral_dist.requires(extras=(\"gui\",))\n\n",
    "warning_line": "        requirements = maestral_dist.requires(extras=[\"gui\"])",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Tuple[str, ...]` for 1st parameter `extras` to call `pkg_resources.Distribution.requires` but got `List[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 550,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "samschott/maestral",
    "source_filename": "maestral/cli.py",
    "target_filename": "maestral/cli.py",
    "source_changeid": "79e5f46885de75b022513de6598e8baf4ea66f97^",
    "target_changeid": "79e5f46885de75b022513de6598e8baf4ea66f97",
    "predictions": [
      "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n",
      "1": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n",
      "2": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n",
      "3": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "4": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=typing.Tuple[str,...]) \n \n",
      "5": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "6": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "7": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "8": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=typing.Tuple[str,...]) \n \n",
      "9": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=typing.Tuple[str,...]) \n \n",
      "10": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "11": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "12": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=types.Tuple[str,...]) \n \n",
      "13": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "14": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "15": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "16": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(typing.Tuple[str,...]) \n \n",
      "17": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras= typing.Tuple[str,...]) \n \n",
      "18": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "19": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "20": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n required_dist = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "21": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras= typing.Tuple[str,...]) \n \n",
      "22": "\n dist = pkg_resources.get_distribution(\"maestral\") \n requirements = dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "23": "{ maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n",
      "24": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n required_dist = maestral_dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "25": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras=typing.Tuple[str,...]) \n \n",
      "26": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"], []) \n \n",
      "27": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=types.Tuple[str,...]) \n \n",
      "28": "} maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n",
      "29": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n \n",
      "30": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=types.Tuple[str,...]) \n \n",
      "31": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]).get(\"maestral\") \n \n",
      "32": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "33": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n required_requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "34": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "35": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=typing.Tuple[\"gui\"], []) \n \n",
      "36": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=type.Tuple[str,...]) \n \n",
      "37": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.distribution.requires(extras=[\"gui\"]) \n \n",
      "38": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=types.Tuple[str,...]) \n \n",
      "39": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n <IND>",
      "40": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "41": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=typing.Tuple[\"gui\"],...]) \n \n",
      "42": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=[\"gui\"]) \n <DED>",
      "43": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "44": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(extras=typing.Tuple[\"gui\"],...]) \n \n",
      "45": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = tuple(maestral_dist.requires(extras=[\"gui\"])) \n \n",
      "46": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras=[\"gui\"]) \n \n",
      "47": "<IND> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = pkg_resources.Distribution.requires(extras=typing.Tuple[\"gui\"]) \n \n",
      "48": "<DED> maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requirements = maestral_dist.requires(typing.Tuple[str,...]) \n \n",
      "49": "\n maestral_dist = pkg_resources.get_distribution(\"maestral\") \n requires = maestral_dist.requires(extras= typing.Tuple[str,...]) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>restored = cls(\n            payment_identifier=int(data['payment_identifier']),\n            reason=data['reason'],\n",
    "target_code": "        <IND>restored = cls(\n            payment_identifier=PaymentID(int(data['payment_identifier'])),\n            reason=data['reason'],\n",
    "warning_line": "            payment_identifier=int(data['payment_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `PaymentID` for 1st parameter `payment_identifier` to call `EventInvalidReceivedLockedTransfer.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 739,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "<DED> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "1": "<IND> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "2": "\n restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "3": "{ restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "4": "} restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "5": "\\ restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "6": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "7": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "8": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "9": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "10": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "11": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "12": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "13": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "14": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "15": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "16": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "17": "^ restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "18": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "19": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "20": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "21": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "22": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "23": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "24": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "25": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "26": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "27": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "28": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "29": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "30": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "31": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "32": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "33": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "34": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "35": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "36": "<DED> restored = cls( <IND> payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "37": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "38": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "39": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "40": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "41": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "42": "<DED> restored = cls( <DED> payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "43": "<DED> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), <IND> reason=data['reason'], \n",
      "44": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "45": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "46": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "47": "restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], \n",
      "48": "<DED> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), <DED> reason=data['reason'], \n",
      "49": "<DED> restored = cls( \n payment_identifier=PaymentID(int(data['payment_identifier'])), \n reason=data['reason'], <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    if expected_failure is not None:\n        <IND>assert_code_snippet_fails(after, state, expected_failure)\n",
    "target_code": "    if expected_failure is not None:\n        <IND>assert after is not None\n        assert_code_snippet_fails(after, state, expected_failure)\n",
    "warning_line": "        assert_code_snippet_fails(after, state, expected_failure)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `assert_code_snippet_fails` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "quantumlib/Cirq",
    "source_filename": "cirq/docs/snippets_test.py",
    "target_filename": "cirq/docs/snippets_test.py",
    "source_changeid": "d358f5cb9a77916f85f5090966c0ebce5c055995^",
    "target_changeid": "d358f5cb9a77916f85f5090966c0ebce5c055995",
    "predictions": [
      "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "1": "if expected_failure is not None: \n <DED> assert_code_snippet_fails(after, state, expected_failure) \n",
      "2": "if expected_failure is not None: \n \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "3": "if expected_failure is not None: \n { assert_code_snippet_fails(after, state, expected_failure) \n",
      "4": "if expected_failure is not None: \n } assert_code_snippet_fails(after, state, expected_failure) \n",
      "5": "if expected_failure is not None: \n \\ assert_code_snippet_fails(after, state, expected_failure) \n",
      "6": "if expected_failure is not None: <IND> <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "7": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "8": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "9": "if expected_failure is not None: <DED> <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "10": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "11": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "12": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "13": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) <IND>",
      "14": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "15": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) <DED>",
      "16": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "17": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "18": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "19": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "20": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "21": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "22": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "23": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "24": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "25": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "26": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "27": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "28": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "29": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "30": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "31": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "32": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "33": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "34": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "35": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "36": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "37": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "38": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "39": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "40": "if expected_failure is not None: \n ^ assert_code_snippet_fails(after, state, expected_failure) \n",
      "41": "if expected_failure is not None: { <IND> assert_code_snippet_fails(after, state, expected_failure) \n",
      "42": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "43": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "44": "if expected_failure is not None: \n <IND> assert_code_snippet_fails(after, state, expected_failure) {",
      "45": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "46": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "47": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "48": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n",
      "49": "if expected_failure is not None: \n assert_code_snippet_fails(after, state, expected_failure) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        log.info(f\"Saving model to {self.save_path}\")\n        self.save_path.parent.mkdir(parents=True, exist_ok=True)\n        save_pickle(self.ec_data, self.save_path)\n\n",
    "target_code": "        log.info(f\"Saving model to {self.save_path}\")\n        save_pickle(self.ec_data, self.save_path)\n\n\n",
    "warning_line": "        save_pickle(self.ec_data, self.save_path)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[typing.Any, typing.Any]` for 1st positional only parameter to call `save_pickle` but got `List[typing.Any]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "deepmipt/DeepPavlov",
    "source_filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "target_filename": "deeppavlov/skills/ecommerce_bot/bot.py",
    "source_changeid": "1de404c11bc5f40b766e966573506921980ff524^",
    "target_changeid": "1de404c11bc5f40b766e966573506921980ff524",
    "predictions": [
      "log.info(f\"Saving model to \n self.save_path \n \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "log.info(f\"Saving model to \n self.save_path \n \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "1": "log.info(f\"Saving model to \n self.save_path <DED> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "2": "log.info(f\"Saving model to <DED> self.save_path \n \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "3": "log.info(f\"Saving model to <IND> self.save_path \n \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "4": "log.info(f\"Saving model to \n self.save_path <IND> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "5": "log.info(f\"Saving model to <DED> self.save_path <DED> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "6": "log.info(f\"Saving model to <IND> self.save_path <DED> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "7": "log.info(f\"Saving model to <DED> self.save_path <IND> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "8": "log.info(f\"Saving model to <IND> self.save_path <IND> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "9": "log.info(f\"Saving model to \n self.save_path { \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "10": "log.info(f\"Saving model to \n self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "11": "log.info(f\"Saving model to { self.save_path \n \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "12": "log.info(f\"Saving model to } self.save_path \n \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "13": "log.info(f\"Saving model to <DED> self.save_path { \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "14": "log.info(f\"Saving model to { self.save_path <DED> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "15": "log.info(f\"Saving model to <DED> self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "16": "log.info(f\"Saving model to <IND> self.save_path { \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "17": "log.info(f\"Saving model to } self.save_path <DED> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "18": "log.info(f\"Saving model to <IND> self.save_path } \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "19": "log.info(f\"Saving model to { self.save_path <IND> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "20": "log.info(f\"Saving model to \n self.save_path \\ \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "21": "log.info(f\"Saving model to } self.save_path <IND> \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "22": "log.info(f\"Saving model to \\ self.save_path \n \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "23": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "24": "log.info(f\"Saving model to <DED> self.save_path \\ \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "25": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "26": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "27": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "28": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "29": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "30": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "31": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "32": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "33": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "34": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "35": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "36": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "37": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "38": "log.info(f\"Saving model to \n self.save_path ^ \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "39": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "40": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "41": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "42": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "43": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "44": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "45": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "46": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "47": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "48": "log.info(f\"Saving model to \n self.save_path Its \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n",
      "49": "log.info(f\"Saving model to \n self.save_path \") \n self.save_path.parent.mkdir(parents=True, exist_ok=True) \n save_pickle(self.ec_data, self.save_path) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <DED>obj = self._construct_class(context, config_path, args)\n        if obj is not None:\n            <IND>context.add_layer(obj)\n",
    "target_code": "        <DED>obj = self._construct_class(context, config_path, args)\n        if obj is not None and isinstance(obj, interfaces.layers.DataLayerInterface):\n            <IND>context.add_layer(obj)\n",
    "warning_line": "            context.add_layer(obj)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `interfaces.layers.DataLayerInterface` for 1st positional only parameter to call `ContextInterface.add_layer` but got `interfaces.objects.ObjectInterface`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 635,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "volatilityfoundation/volatility3",
    "source_filename": "volatility/framework/interfaces/configuration.py",
    "target_filename": "volatility/framework/interfaces/configuration.py",
    "source_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446^",
    "target_changeid": "623180ddbda404addc5d46b5e29f93ae233ae446",
    "predictions": [
      "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "1": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "2": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "3": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <DED> context.add_layer(obj) \n",
      "4": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <DED> context.add_layer(obj) \n",
      "5": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <DED> context.add_layer(obj) \n",
      "6": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n \n context.add_layer(obj) \n",
      "7": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None: \n \n context.add_layer(obj) \n",
      "8": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n \n context.add_layer(obj) \n",
      "9": "{ obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "10": "} obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "11": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None and obj is not None: \n <IND> context.add_layer(obj) \n",
      "12": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None and obj is not None: \n <IND> context.add_layer(obj) \n",
      "13": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n { context.add_layer(obj) \n",
      "14": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n } context.add_layer(obj) \n",
      "15": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None: \n { context.add_layer(obj) \n",
      "16": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None and obj is not None: \n <IND> context.add_layer(obj) \n",
      "17": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None: \n } context.add_layer(obj) \n",
      "18": "\\ obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "19": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n { context.add_layer(obj) \n",
      "20": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n } context.add_layer(obj) \n",
      "21": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "22": "<DED> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n \\ context.add_layer(obj) \n",
      "23": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "24": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "25": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "26": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "27": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "28": "{ obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <DED> context.add_layer(obj) \n",
      "29": "\n obj = self._construct_class(context, config_path, args) \n if obj is not None: \n \\ context.add_layer(obj) \n",
      "30": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "31": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "32": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "33": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "34": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "35": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "36": "^ obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "37": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "38": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "39": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "40": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "41": "} obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <DED> context.add_layer(obj) \n",
      "42": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "43": "<IND> obj = self._construct_class(context, config_path, args) \n if obj is not None: \n \\ context.add_layer(obj) \n",
      "44": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "45": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "46": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "47": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "48": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n",
      "49": "obj = self._construct_class(context, config_path, args) \n if obj is not None: \n <IND> context.add_layer(obj) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if delegator.delegations is None:\n            <IND>delegator.delegations = Delegations({}, {})\n        # put delegation last by default\n",
    "target_code": "        if delegator.delegations is None:\n            <IND>delegator.delegations = Delegations({}, OrderedDict())\n        # put delegation last by default\n",
    "warning_line": "            delegator.delegations = Delegations({}, {})",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `OrderedDict[str, DelegatedRole]` for 2nd positional only parameter to call `Delegations.__init__` but got `Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 354,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "theupdateframework/python-tuf",
    "source_filename": "tests/repository_simulator.py",
    "target_filename": "tests/repository_simulator.py",
    "source_changeid": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3^",
    "target_changeid": "e2deff3148514ceee7d9b3b1bc4ea3886e8b72b3",
    "predictions": [
      "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, OrderedDict[str, DelegatedRole]) \n # put delegation last by default \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, OrderedDict[str, DelegatedRole]) \n # put delegation last by default \n",
      "1": "if delegator.delegations is None: \n <IND> assert Delegations.get(\"OrderedDict[str, DelegatedRole]) \n # put delegation last by default \n",
      "2": "if delegator.delegations is None: \n <IND> assert Delegations.OrderedDict[str, DelegatedRole]) \n # put delegation last by default \n",
      "3": "if delegator.delegations is None: \n <DED> assert isinstance(Delegations, OrderedDict[str, DelegatedRole]) \n # put delegation last by default \n",
      "4": "if delegator.delegations is None: \n <IND> assert Delegations.get(\"OrderedDict[str, DelegatedRole]]) \n # put delegation last by default \n",
      "5": "if delegator.delegations is None: \n <IND> assert Delegations.add(\"OrderedDict[str, DelegatedRole\") \n # put delegation last by default \n",
      "6": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <DED>, \n <DED> ) \n # put delegation last by default \n",
      "7": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <IND>, \n <DED> ) \n # put delegation last by default \n",
      "8": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( \n <DED>, \n <DED> ) \n # put delegation last by default \n",
      "9": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <DED>, \n <IND> ) \n # put delegation last by default \n",
      "10": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, Organization[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <DED>, \n <DED> ) \n # put delegation last by default \n",
      "11": "if delegator.delegations is None: \n <IND> assert Delegation is not None \n delegator.delegations = Delegations( \n <DED>, \n <DED> ) \n # put delegation last by default \n",
      "12": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, Organization[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <IND>, \n <DED> ) \n # put delegation last by default \n",
      "13": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, Organization[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <DED>, \n <IND> ) \n # put delegation last by default \n",
      "14": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <IND>, \n <IND> ) \n # put delegation last by default \n",
      "15": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, OrderedDict[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <DED>, \n <DED> ) \n # put delegation last by default \n",
      "16": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( \n <IND>, \n <DED> ) \n # put delegation last by default \n",
      "17": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, OrderedDict(str, DelegatedRole)) \n # put delegation last by default \n",
      "18": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( \n <DED>, \n <IND> ) \n # put delegation last by default \n",
      "19": "if delegator.delegations is None: \n <IND> assert Delegation is not None \n delegator.delegations = Delegations( \n <IND>, \n <DED> ) \n # put delegation last by default \n",
      "20": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, OrderedDict[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <IND>, \n <DED> ) \n # put delegation last by default \n",
      "21": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, Organization[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <IND>, \n <IND> ) \n # put delegation last by default \n",
      "22": "if delegator.delegations is None: \n <IND> assert isinstance(Delegation[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <DED>, \n <DED> ) \n # put delegation last by default \n",
      "23": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, OrderedDict[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <DED>, \n <IND> ) \n # put delegation last by default \n",
      "24": "if delegator.delegations is None: \n <IND> assert Delegation is not None \n delegator.delegations = Delegations( \n <DED>, \n <IND> ) \n # put delegation last by default \n",
      "25": "if delegator.delegations is None: \n <IND> assert Delegations.get(\"OrderedDict[str, DelegatedRole\") \n # put delegation last by default \n",
      "26": "if delegator.delegations is None: \n <DED> assert Delegations.OrderedDict[str, DelegatedRole]) \n # put delegation last by default \n",
      "27": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, OrderedDict[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <IND>, \n <IND> ) \n # put delegation last by default \n",
      "28": "if delegator.delegations is None: \n <IND> assert isinstance(Delegation[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <IND>, \n <DED> ) \n # put delegation last by default \n",
      "29": "if delegator.delegations is None: \n <IND> delegator.delegations = Delegations( \n <IND>, \n <IND> ) \n # put delegation last by default \n",
      "30": "if delegator.delegations is None: \n <IND> assert Delegations.add(\"OrderedDict[str, DelegatedRole]) \n # put delegation last by default \n",
      "31": "if delegator.delegations is None: \n <IND> assert isinstance(Delegation[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <DED>, \n <IND> ) \n # put delegation last by default \n",
      "32": "if delegator.delegations is None: \n <IND> assert Delegation is not None \n delegator.delegations = Delegations( \n <IND>, \n <IND> ) \n # put delegation last by default \n",
      "33": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n \n, \n <DED> ) \n # put delegation last by default \n",
      "34": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, Organization[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <DED>, \n \n ) \n # put delegation last by default \n",
      "35": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <DED>, \n \n ) \n # put delegation last by default \n",
      "36": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, Organization[str, DelegatedRole]) \n delegator.delegations = Delegations( \n \n, \n <DED> ) \n # put delegation last by default \n",
      "37": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <DED>, <DED> <DED> ) \n # put delegation last by default \n",
      "38": "if delegator.delegations is None: \n <IND> assert isinstance(Delegation[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <IND>, \n <IND> ) \n # put delegation last by default \n",
      "39": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, OrderedDict[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <DED>, \n \n ) \n # put delegation last by default \n",
      "40": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( <IND> <DED>, \n <DED> ) \n # put delegation last by default \n",
      "41": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, Organization[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <IND>, \n \n ) \n # put delegation last by default \n",
      "42": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, OrderedDict[str, DelegatedRole]) \n delegator.delegations = Delegations( \n \n, \n <DED> ) \n # put delegation last by default \n",
      "43": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <DED>, <IND> <DED> ) \n # put delegation last by default \n",
      "44": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( <DED> <DED>, \n <DED> ) \n # put delegation last by default \n",
      "45": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <IND>, \n \n ) \n # put delegation last by default \n",
      "46": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, Organization[str, DelegatedRole]) \n delegator.delegations = Delegations( \n \n, \n <IND> ) \n # put delegation last by default \n",
      "47": "if delegator.delegations is None: \n <IND> assert isinstance(Delegations, Organization[str, DelegatedRole]) \n delegator.delegations = Delegations( \n <DED>, <DED> <DED> ) \n # put delegation last by default \n",
      "48": "if delegator.delegations is None: \n <IND> assert Delegations is not None \n delegator.delegations = Delegations( \n <IND>, <DED> <DED> ) \n # put delegation last by default \n",
      "49": "if delegator.delegations is None: \n <DED> assert Delegations is not None \n delegator.delegations = Delegations( \n <DED>, \n <DED> ) \n # put delegation last by default \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n                        if isinstance(loss, Tuple):\n                            <IND>average_over += loss[1]\n",
    "target_code": "\n                        if isinstance(loss, tuple):\n                            <IND>average_over += loss[1]\n",
    "warning_line": "                        if isinstance(loss, Tuple):",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Union[typing.Type[typing.Any], typing.Tuple[typing.Type[typing.Any], ...]]` for 2nd positional only parameter to call `isinstance` but got `typing._SpecialForm`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 472,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/trainers/trainer.py",
    "target_filename": "flair/trainers/trainer.py",
    "source_changeid": "61d62a046c45382bc4a016e1acd88959c95f3054^",
    "target_changeid": "61d62a046c45382bc4a016e1acd88959c95f3054",
    "predictions": [
      "\n if isinstance(loss, tuple): \n <IND> average_over += loss[1] \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n if isinstance(loss, tuple): \n <IND> average_over += loss[1] \n",
      "1": "\n if isinstance(loss, tuple): \n <DED> average_over += loss[1] \n",
      "2": "<DED> if isinstance(loss, tuple): \n <IND> average_over += loss[1] \n",
      "3": "<IND> if isinstance(loss, tuple): \n <IND> average_over += loss[1] \n",
      "4": "\n if isinstance(loss, Tuple): \n <IND> average_over += loss[1] \n",
      "5": "\n if isinstance(loss, tuple): \n \n average_over += loss[1] \n",
      "6": "<DED> if isinstance(loss, tuple): \n <DED> average_over += loss[1] \n",
      "7": "\n if isinstance(loss, tuple): \n { average_over += loss[1] \n",
      "8": "\n if isinstance(loss, tuple): \n } average_over += loss[1] \n",
      "9": "<IND> if isinstance(loss, tuple): \n <DED> average_over += loss[1] \n",
      "10": "{ if isinstance(loss, tuple): \n <IND> average_over += loss[1] \n",
      "11": "\n if isinstance(loss, Tuple): \n <DED> average_over += loss[1] \n",
      "12": "} if isinstance(loss, tuple): \n <IND> average_over += loss[1] \n",
      "13": "\n if isinstance(loss, tuple): \n \\ average_over += loss[1] \n",
      "14": "<DED> if isinstance(loss, tuple): \n \n average_over += loss[1] \n",
      "15": "<DED> if isinstance(loss, Tuple): \n <IND> average_over += loss[1] \n",
      "16": "\n if isinstance(loss,...): \n <IND> average_over += loss[1] \n",
      "17": "\n if isinstance(loss, tuple): <IND> <IND> average_over += loss[1] \n",
      "18": "<IND> if isinstance(loss, tuple): \n \n average_over += loss[1] \n",
      "19": "\n if isinstance(loss, tuple): \n <IND> average_over += loss[1] <IND>",
      "20": "\n if isinstance(loss, tuple): <DED> <IND> average_over += loss[1] \n",
      "21": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "22": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "23": "\n if isinstance(loss, tuple): \n <IND> average_over += loss[1] <DED>",
      "24": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "25": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "26": "\n if isinstance(loss, Single[Tuple]): \n <IND> average_over += loss[1] \n",
      "27": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "28": "<IND> if isinstance(loss, Tuple): \n <IND> average_over += loss[1] \n",
      "29": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "30": "\n if isinstance(loss, True): \n <IND> average_over += loss[1] \n",
      "31": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "32": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "33": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "34": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "35": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "36": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "37": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "38": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "39": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "40": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "41": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "42": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "43": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "44": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "45": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "46": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "47": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "48": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n",
      "49": "\n if isinstance(loss, tuple): \n average_over += loss[1] \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=int(data['channel_identifier']),\n            deposit_transaction=data['deposit_transaction'],\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n            deposit_transaction=data['deposit_transaction'],\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 3rd parameter `channel_identifier` to call `ContractReceiveChannelNewBalance.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 488,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state_change.py",
    "target_filename": "raiden/transfer/state_change.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n"
    ],
    "correct": true,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <IND> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <IND> deposit_transaction=data['deposit_transaction'], \n",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <DED> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], <IND>",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <DED> deposit_transaction=data['deposit_transaction'], \n",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], <DED>",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], {",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), { deposit_transaction=data['deposit_transaction'], \n",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), { channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), } channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), } deposit_transaction=data['deposit_transaction'], \n",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], }",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \\",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \\ channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \\ deposit_transaction=data['deposit_transaction'], \n",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], \n",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], \n",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], \n",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], \n",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], \n",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], \n",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], \n",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], ^",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), ^ channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ^ deposit_transaction=data['deposit_transaction'], \n",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], \n",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'], \n",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), deposit_transaction=data['deposit_transaction'], \n",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n deposit_transaction=data['deposit_transaction'],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        for idx, conf in enumerate(softmax):\n            <IND>label_probs.append(Label(idx, conf.item()))\n        <DED>return label_probs\n",
    "target_code": "        for idx, conf in enumerate(softmax):\n            <IND>label_probs.append(Label(str(idx), conf.item()))\n        <DED>return label_probs\n",
    "warning_line": "            label_probs.append(Label(idx, conf.item()))",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `Label.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 488,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "flairNLP/flair",
    "source_filename": "flair/models/diagnosis/distance_prediction_model.py",
    "target_filename": "flair/models/diagnosis/distance_prediction_model.py",
    "source_changeid": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402^",
    "target_changeid": "4ac18961c3c85b54f0fb5c4f2ea82fc0a4471402",
    "predictions": [
      "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n"
    ],
    "correct": false,
    "top_five": {
      "0": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "1": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n <IND> return label_probs \n",
      "2": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n \n return label_probs \n",
      "3": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "4": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n <IND> return label_probs \n",
      "5": "for idx, conf in enumerate(softmax): \n <DED> label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "6": "for idx, conf in enumerate(softmax): \n <DED> label_probs.append(Label(idx, conf.item())) \n <IND> return label_probs \n",
      "7": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n \n return label_probs \n",
      "8": "for idx, conf in enumerate(softmax): \n \n label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "9": "for idx, conf in enumerate(softmax): \n <DED> label_probs.append(Label(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "10": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Str(Label(idx, conf.item()))) \n <DED> return label_probs \n",
      "11": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n { return label_probs \n",
      "12": "for idx, conf in enumerate(softmax): \n <DED> label_probs.append(Label(idx, conf.item())) \n \n return label_probs \n",
      "13": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n } return label_probs \n",
      "14": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Str(Label(idx, conf.item()))) \n <IND> return label_probs \n",
      "15": "for idx, conf in enumerate(softmax): \n \n label_probs.append(Label(idx, conf.item())) \n <IND> return label_probs \n",
      "16": "for idx, conf in enumerate(softmax): \n <DED> label_probs.append(Label(idx, str(conf.item()))) \n <IND> return label_probs \n",
      "17": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Str(Label(idx), conf.item()))) \n <DED> return label_probs \n",
      "18": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, str) \n label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "19": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Str(Label(idx), conf.item()))) \n <IND> return label_probs \n",
      "20": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, str) \n label_probs.append(Label(idx, conf.item())) \n <IND> return label_probs \n",
      "21": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx), str(conf.item()))) \n <DED> return label_probs \n",
      "22": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx), str(conf.item()))) \n <IND> return label_probs \n",
      "23": "for idx, conf in enumerate(softmax): \n } label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "24": "for idx, conf in enumerate(softmax): \n { label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "25": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Str(Label(idx, conf.item()))) \n \n return label_probs \n",
      "26": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx), conf.item())) \n <DED> return label_probs \n",
      "27": "for idx, conf in enumerate(softmax): \n <DED> label_probs.append(Label(idx, str(conf.item()))) \n \n return label_probs \n",
      "28": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n \\ return label_probs \n",
      "29": "for idx, conf in enumerate(softmax): \n \n label_probs.append(Label(idx, str(conf.item()))) \n <DED> return label_probs \n",
      "30": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx), conf.item())) \n <IND> return label_probs \n",
      "31": "for idx, conf in enumerate(softmax): \n } label_probs.append(Label(idx, conf.item())) \n <IND> return label_probs \n",
      "32": "for idx, conf in enumerate(softmax): \n \n label_probs.append(Label(idx, conf.item())) \n \n return label_probs \n",
      "33": "for idx, conf in enumerate(softmax): \n { label_probs.append(Label(idx, conf.item())) \n <IND> return label_probs \n",
      "34": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n { return label_probs \n",
      "35": "for idx, conf in enumerate(softmax): \n \n label_probs.append(Label(idx, str(conf.item()))) \n <IND> return label_probs \n",
      "36": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, str(conf.item()))) \n } return label_probs \n",
      "37": "for idx, conf in enumerate(softmax): \n <IND> assert isinstance(idx, str) \n label_probs.append(Label(idx, conf.item())) \n \n return label_probs \n",
      "38": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(List(idx, list(conf.item()))) \n <DED> return label_probs \n",
      "39": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n return label_probs \n",
      "40": "for idx, conf in enumerate(softmax): \n \\ label_probs.append(Label(idx, conf.item())) \n <DED> return label_probs \n",
      "41": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n return label_probs \n",
      "42": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n return label_probs \n",
      "43": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n return label_probs \n",
      "44": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n return label_probs \n",
      "45": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n return label_probs \n",
      "46": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n return label_probs \n",
      "47": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n return label_probs \n",
      "48": "for idx, conf in enumerate(softmax): \n <IND> label_probs.append(Label(idx, conf.item())) \n return label_probs \n",
      "49": "for idx, conf in enumerate(softmax): \n <DED> label_probs.append(Label(idx, conf.item())) \n { return label_probs \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=int(data['channel_identifier']),\n        )\n",
    "target_code": "            node_address=to_canonical_address(data['node_address']),\n            channel_identifier=typing.ChannelID(int(data['channel_identifier'])),\n        )\n",
    "warning_line": "            channel_identifier=int(data['channel_identifier']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.ChannelID` for 2nd parameter `channel_identifier` to call `RouteState.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 679,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/state.py",
    "target_filename": "raiden/transfer/state.py",
    "source_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82^",
    "target_changeid": "fa631411cdd181edf375f603d1ecec3d025f1c82",
    "predictions": [
      "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "1": "node_address=to_canonical_address(data['node_address']), <DED> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "2": "node_address=to_canonical_address(data['node_address']), <IND> channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "3": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <IND> ) \n",
      "4": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) <IND>",
      "5": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) <DED>",
      "6": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), <DED> ) \n",
      "7": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) {",
      "8": "node_address=to_canonical_address(data['node_address']), { channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "9": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), { ) \n",
      "10": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) }",
      "11": "node_address=to_canonical_address(data['node_address']), } channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "12": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), } ) \n",
      "13": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \\",
      "14": "node_address=to_canonical_address(data['node_address']), \\ channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "15": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \\ ) \n",
      "16": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )",
      "17": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "18": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "19": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )",
      "20": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "21": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "22": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )",
      "23": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )",
      "24": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "25": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "26": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "27": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "28": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )",
      "29": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "30": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )",
      "31": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )",
      "32": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "33": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "34": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) ^",
      "35": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "36": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "37": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ^ ) \n",
      "38": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "39": "node_address=to_canonical_address(data['node_address']), ^ channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "40": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )",
      "41": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )",
      "42": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )",
      "43": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "44": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "45": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "46": "node_address=to_canonical_address(data['node_address']), channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n ) \n",
      "47": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "48": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), ) \n",
      "49": "node_address=to_canonical_address(data['node_address']), \n channel_identifier=typing.ChannelID(int(data['channel_identifier'])), \n )"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                <IND>new_value = self._handle_NameOrAttribute(value)\n            <DED>elif isinstance(base.value, cst.Subscript):\n                <IND>new_value = self._handle_Subscript(value)\n",
    "target_code": "                <IND>new_value = self._handle_NameOrAttribute(value)\n            <DED>elif isinstance(value, cst.Subscript):\n                <IND>new_value = self._handle_Subscript(value)\n",
    "warning_line": "                new_value = self._handle_Subscript(value)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `cst._nodes.expression.Subscript` for 1st positional only parameter to call `TypeCollector._handle_Subscript` but got `cst._nodes.expression.BaseExpression`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 80,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Instagram/LibCST",
    "source_filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "target_filename": "libcst/codemod/visitors/_apply_type_annotations.py",
    "source_changeid": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8^",
    "target_changeid": "3ccfc4adc82b8354c1c998b0abd1ded3d690a1e8",
    "predictions": [
      "\n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "1": "\n new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "2": "\n new_value = self._handle_NameOrAttribute(value) \n \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "3": "<DED> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "4": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "5": "<DED> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "6": "\n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "7": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "8": "\n new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "9": "<DED> new_value = self._handle_NameOrAttribute(value) \n \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "10": "\n new_value = self._handle_NameOrAttribute(value) \n } elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "11": "\n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n \n new_value = self._handle_Subscript(value) \n",
      "12": "\n new_value = self._handle_NameOrAttribute(value) \n { elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "13": "<IND> new_value = self._handle_NameOrAttribute(value) \n \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "14": "\n new_value = self._handle_NameOrAttribute(value) \n \n elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "15": "<DED> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "16": "\n new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n \n new_value = self._handle_Subscript(value) \n",
      "17": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "18": "<DED> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "19": "<IND> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "20": "\n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n { new_value = self._handle_Subscript(value) \n",
      "21": "\n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n } new_value = self._handle_Subscript(value) \n",
      "22": "\n new_value = self._handle_NameOrAttribute(value) \n \\ elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "23": "{ new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "24": "} new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "25": "\n new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n { new_value = self._handle_Subscript(value) \n",
      "26": "\n new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n } new_value = self._handle_Subscript(value) \n",
      "27": "\n new_value = self._handle_NameOrAttribute(value) \n \n elif isinstance(base.value, cst.Subscript): \n \n new_value = self._handle_Subscript(value) \n",
      "28": "{ new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "29": "<DED> new_value = self._handle_NameOrAttribute(value) \n } elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "30": "<DED> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n \n new_value = self._handle_Subscript(value) \n",
      "31": "<DED> new_value = self._handle_NameOrAttribute(value) \n { elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "32": "} new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "33": "\n new_value = self._handle_NameOrAttribute(value) \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "34": "<DED> new_value = self._handle_NameOrAttribute(value) \n \n elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "35": "\n new_value = self._handle_NameOrAttribute(value) \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "36": "\n new_value = self._handle_NameOrAttribute(value) \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "37": "<IND> new_value = self._handle_NameOrAttribute(value) \n } elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "38": "<IND> new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n \n new_value = self._handle_Subscript(value) \n",
      "39": "<IND> new_value = self._handle_NameOrAttribute(value) \n { elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "40": "\n new_value = self._handle_NameOrAttribute(value) \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "41": "<DED> new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n \n new_value = self._handle_Subscript(value) \n",
      "42": "\n new_value = self._handle_NameOrAttribute(value) \n } elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "43": "\n new_value = self._handle_NameOrAttribute(value) \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "44": "\n new_value = self._handle_NameOrAttribute(value) \n { elif isinstance(base.value, cst.Subscript): \n <DED> new_value = self._handle_Subscript(value) \n",
      "45": "\n new_value = self._handle_NameOrAttribute(value) \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "46": "\n new_value = self._handle_NameOrAttribute(value) \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "47": "\n new_value = self._handle_NameOrAttribute(value) \n elif isinstance(base.value, cst.Subscript): \n <IND> new_value = self._handle_Subscript(value) \n",
      "48": "\n new_value = self._handle_NameOrAttribute(value) \n <DED> elif isinstance(base.value, cst.Subscript): \n <IND> self._handle_Subscript(value) \n",
      "49": "\n new_value = self._handle_NameOrAttribute(value) \n <IND> elif isinstance(base.value, cst.Subscript): \n <IND> self._handle_Subscript(value) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                <IND>json_data = json.loads(json_fp)\n            <DED>for jd in json_data:\n",
    "target_code": "            with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp:\n                <IND>json_data = json.load(json_fp)\n            <DED>for jd in json_data:\n",
    "warning_line": "                json_data = json.loads(json_fp)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `typing.Union[bytes, str]` for 1st positional only parameter to call `json.loads` but got `io.TextIOWrapper`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "facebookresearch/Mephisto",
    "source_filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "target_filename": "mephisto/abstractions/blueprints/abstract/static_task/static_blueprint.py",
    "source_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238^",
    "target_changeid": "4937db1184a2a8d9b30f0d20bef0bc0f098a5238",
    "predictions": [
      "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "1": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "2": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n \n for jd in json_data: \n",
      "3": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <DED> json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "4": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <DED> json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "5": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper.load(json_fp) \n <DED> for jd in json_data: \n",
      "6": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper.load(json_fp) \n <IND> for jd in json_data: \n",
      "7": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n \n json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "8": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n { for jd in json_data: \n",
      "9": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n } for jd in json_data: \n",
      "10": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(io.TextIOWrapper) \n <DED> for jd in json_data: \n",
      "11": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n \n json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "12": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(io.TextIOWrapper) \n <IND> for jd in json_data: \n",
      "13": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper.loads(json_fp) \n <DED> for jd in json_data: \n",
      "14": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <DED> json_data = json.loads(json_fp) \n \n for jd in json_data: \n",
      "15": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper.loads(json_fp) \n <IND> for jd in json_data: \n",
      "16": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper.load(json_fp) \n \n for jd in json_data: \n",
      "17": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n { json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "18": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n } json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "19": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n \\ for jd in json_data: \n",
      "20": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str] \n <DED> for jd in json_data: \n",
      "21": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n { json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "22": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n } json_data = json.loads(json_fp) \n <IND> for jd in json_data: \n",
      "23": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> for jd in json_data: \n <IND> json_data = json.loads(json_fp) \n \n for jd in json_data: \n",
      "24": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper(json.loads(json_fp)) \n <DED> for jd in json_data: \n",
      "25": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n \n json_data = json.loads(json_fp) \n \n for jd in json_data: \n",
      "26": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = io.TextIOWrapper(json.loads(json_fp)) \n <IND> for jd in json_data: \n",
      "27": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(io.TextIOWrapper) \n \n for jd in json_data: \n",
      "28": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(fp) \n <DED> for jd in json_data: \n",
      "29": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = typing.Union[bytes, str] \n <IND> for jd in json_data: \n",
      "30": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp).decode('utf-8-sig')) \n <DED> for jd in json_data: \n",
      "31": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> for json in json_data: \n <IND> json_data = json.loads(json_fp) \n \n for jd in json_data: \n",
      "32": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "33": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = bytes(json_fp) \n <DED> for jd in json_data: \n",
      "34": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(fp) \n <IND> for jd in json_data: \n",
      "35": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "36": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "37": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n \\ json_data = json.loads(json_fp) \n <DED> for jd in json_data: \n",
      "38": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp).decode('utf-8-sig')) \n <IND> for jd in json_data: \n",
      "39": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "40": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "41": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> for jd in json_data: \n",
      "42": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "43": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "44": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "45": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "46": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "47": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "48": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n",
      "49": "with open(json_file, \"r\", encoding=\"utf-8-sig\") as json_fp: \n <IND> json_data = json.loads(json_fp) \n for jd in json_data: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            features_dim[name] = table.dim\n            if table.name not in tables:\n                <IND>tables[table.name] = table\n\n",
    "target_code": "            features_dim[name] = table.dim\n            if name not in tables:\n                <IND>tables[name] = table\n\n",
    "warning_line": "                tables[table.name] = table",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `dict.__setitem__` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 76,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "NVIDIA-Merlin/Transformers4Rec",
    "source_filename": "transformers4rec/torch/features/embedding.py",
    "target_filename": "transformers4rec/torch/features/embedding.py",
    "source_changeid": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7^",
    "target_changeid": "538fc54bb8f2e3dc79224e497bebee15b00e4ab7",
    "predictions": [
      "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = table \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "1": "features_dim[name] = table.dim \n if not in tables: \n <IND> tables[table.name] = table \n \n",
      "2": "features_dim[name] = table.dim \n if not table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "3": "features_dim[name] = table.dim \n if table.name not in tables: \n <DED> tables[table.name] = table \n \n",
      "4": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> assert isinstance(table.name, str) \n tables[table.name] = table \n \n",
      "5": "features_dim[name] = table.dim \n if table.name not in tables: \n \n tables[table.name] = table \n \n",
      "6": "features_dim[name] = table.dim \n if not table.name in tables: \n <IND> assert isinstance(table.name, str) \n tables[table.name] = table \n \n",
      "7": "features_dim[name] = table.dim \n if table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "8": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> assert table.name is not None \n tables[table.name] = table \n \n",
      "9": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if not table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "10": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "11": "features_dim[name] = table.dim \n if table.name not in tables: \n <DED> assert isinstance(table.name, str) \n tables[table.name] = table \n \n",
      "12": "features_dim[name] = table.dim \n if not in tables: \n <DED> tables[table.name] = table \n \n",
      "13": "features_dim[name] = table.dim \n if table.name in tables: \n <IND> assert isinstance(table.name, str) \n tables[table.name] = table \n \n",
      "14": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if not table.name: \n <IND> tables[table.name] = table \n \n",
      "15": "features_dim[name] = table.dim \n if not table.name in tables: \n <IND> if not table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "16": "features_dim[name] = table.dim \n if not table.name in tables: \n <DED> tables[table.name] = table \n \n",
      "17": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = [] \n \n",
      "18": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> assert isinstance(table.name, str) \n",
      "19": "features_dim[name] = table.dim \n if table.name in tables other than str: \n <IND> tables[table.name] = table \n \n",
      "20": "features_dim[name] = table.dim \n if name not in tables: \n <IND> tables[table.name] = table \n \n",
      "21": "features_dim[name] = table.dim \n if not in tables: \n <IND> assert isinstance(table.name, str) \n tables[table.name] = table \n \n",
      "22": "features_dim[name] = table.dim \n if not in tables: \n <IND> tables[table.name] = [] \n \n",
      "23": "features_dim[name] = table.dim \n if table.name is not in tables: \n <IND> tables[table.name] = table \n \n",
      "24": "features_dim[name] = table.dim \n if table.name not in tables: \n \n assert isinstance(table.name, str) \n tables[table.name] = table \n \n",
      "25": "features_dim[name] = table.dim \n if not table.name in tables: \n <IND> assert table.name is not None \n tables[table.name] = table \n \n",
      "26": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = tuple(table.name) \n \n",
      "27": "features_dim[name] = table.dim \n if not table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "28": "features_dim[name] = table.dim \n if table.name in tables else str(table.name) \n \n",
      "29": "features_dim[name] = table.dim \n if table.name not in tables: \n { tables[table.name] = table \n \n",
      "30": "features_dim[name] = table.dim \n if table.name not in tables: \n } tables[table.name] = table \n \n",
      "31": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "32": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> assert isinstance(table, str) \n tables[table.name] = table \n \n",
      "33": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name is not None: \n <IND> tables[table.name] = table \n \n",
      "34": "features_dim[name] = table.dim \n if not in tables: \n <IND> if not table.name in tables: \n <IND> tables[table.name] = table \n \n",
      "35": "features_dim[name] = table.dim \n if not in tables: \n \n tables[table.name] = table \n \n",
      "36": "features_dim[name] = table.dim \n if table.name in tables is not None: \n <IND> tables[table.name] = table \n \n",
      "37": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if not table.name in tables: \n <DED> tables[table.name] = table \n \n",
      "38": "features_dim[name] = table.dim \n if not table.name in tables: \n \n tables[table.name] = table \n \n",
      "39": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> assert isinstance(table.name, str) \n assert isinstance(table.name) \n",
      "40": "features_dim[name] = table.dim \n if name in table.name not in tables: \n <IND> tables[table.name] = table \n \n",
      "41": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name not in tables: \n <DED> tables[table.name] = table \n \n",
      "42": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = dict.__setitem__ \n \n",
      "43": "features_dim[name] = table.dim \n if not in tables: \n <IND> tables[table.name] = tuple(table.name) \n \n",
      "44": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if not table.name: \n <DED> tables[table.name] = table \n \n",
      "45": "features_dim[name] = table.dim \n if not table.name in tables: \n <IND> if not table.name in tables: \n <DED> tables[table.name] = table \n \n",
      "46": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> if table.name in tables.name: \n <IND> tables[table.name] = table \n \n",
      "47": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = str \n \n",
      "48": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = table \n <IND>",
      "49": "features_dim[name] = table.dim \n if table.name not in tables: \n <IND> tables[table.name] = table \n <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            current_commitment_signature=None,\n            current_htlc_signatures=[],\n        )\n",
    "target_code": "            current_commitment_signature=None,\n            current_htlc_signatures=b'',\n        )\n",
    "warning_line": "            current_htlc_signatures=[],",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `bytes` for 16th parameter `current_htlc_signatures` to call `LocalConfig.__init__` but got `List[Variable[_T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 477,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "spesmilo/electrum",
    "source_filename": "electrum/lnpeer.py",
    "target_filename": "electrum/lnpeer.py",
    "source_changeid": "7b18c91b74bbebfe56ba547080ab29775e42feb2^",
    "target_changeid": "7b18c91b74bbebfe56ba547080ab29775e42feb2",
    "predictions": [
      "current_commitment_signature=None, \n current_htlc_signatures=bytes, \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "current_commitment_signature=None, \n current_htlc_signatures=bytes, \n ) \n",
      "1": "current_commitment_signature=None, \n current_htlc_signatures=[], \n ) \n",
      "2": "current_commitment_signature=None, \n current_htlc_signatures=bytes(), \n ) \n",
      "3": "current_commitment_signature=None, \n current_htlc_signatures=bytes(), \n ) \n",
      "4": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], [], \n ) \n",
      "5": "current_commitment_signature=None, \n current_htlc_signatures=bytes()), \n ) \n",
      "6": "current_commitment_signature=None, \n current_htlc_signatures=bytes(\")) \n ) \n",
      "7": "current_commitment_signature=None, \n current_htlc_signatures=bytes((), \n ) \n",
      "8": "current_commitment_signature=None, \n current_htlc_signatures=bytes()], \n ) \n",
      "9": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], []) \n ) \n",
      "10": "current_commitment_signature=None, \n current_htlc_signatures=bytes(\"\")) \n ) \n",
      "11": "current_commitment_signature=None, \n current_htlc_signatures=[] \n ) \n",
      "12": "current_commitment_signature=None, \n current_htlc_signatures=bytes(*), \n ) \n",
      "13": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], [], <DED> ) \n",
      "14": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], [],) \n ) \n",
      "15": "current_commitment_signature=None, \n current_htlc_signatures=bytes([]), \n ) \n",
      "16": "current_commitment_signature=None, \n current_htlc_signatures=bytes(\")), \n ) \n",
      "17": "current_commitment_signature=None, \n current_htlc_signatures=bytes (), \n ) \n",
      "18": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], [], <IND> ) \n",
      "19": "current_commitment_signature=None, \n current_htlc_signatures=bytes(()), \n ) \n",
      "20": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], [], { ) \n",
      "21": "current_commitment_signature=None, \n current_htlc_signatures=bytes((), [], \n ) \n",
      "22": "current_commitment_signature=None, \n current_htlc_signatures=bytes(]), \n ) \n",
      "23": "current_commitment_signature=None, \n current_htlc_signatures=bytes(...)) \n ) \n",
      "24": "current_commitment_signature=None, \n current_htlc_signatures=bytes([],]) \n ) \n",
      "25": "current_commitment_signature=None, \n current_htlc_signatures=bytes(0), \n ) \n",
      "26": "current_commitment_signature=None, \n current_htlc_signatures=bytes[], \n ) \n",
      "27": "current_commitment_signature=None, \n current_htlc_signatures=bytes((), <DED> ) \n",
      "28": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], [], } ) \n",
      "29": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], []), \n ) \n",
      "30": "current_commitment_signature=None, \n current_htlc_signatures='', \n ) \n",
      "31": "current_commitment_signature=None, \n current_htlc_signatures=bytes([],) \n ) \n",
      "32": "current_commitment_signature=None, \n current_htlc_signatures=bytes((), <IND> ) \n",
      "33": "current_commitment_signature=None, \n current_htlc_signatures=bytes().decode(), \n ) \n",
      "34": "current_commitment_signature=None, \n current_htlc_signatures=bytes(\"\")), \n ) \n",
      "35": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], ) \n ) \n",
      "36": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], ]), \n ) \n",
      "37": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], ]) \n ) \n",
      "38": "current_commitment_signature=None, \n current_htlc_signatures=bytes(\"), \n ) \n",
      "39": "current_commitment_signature=None, <IND> current_htlc_signatures=bytes, \n ) \n",
      "40": "current_commitment_signature=None, \n current_htlc_signatures=bytes, \n ) <IND>",
      "41": "current_commitment_signature=None, \n current_htlc_signatures=bytes((), { ) \n",
      "42": "current_commitment_signature=None, \n current_htlc_signatures=bytes, <IND> ) \n",
      "43": "current_commitment_signature=None, <DED> current_htlc_signatures=bytes, \n ) \n",
      "44": "current_commitment_signature=None, \n current_htlc_signatures=bytes, \n ) <DED>",
      "45": "current_commitment_signature=None, \n current_htlc_signatures=bytes([], [], \\ ) \n",
      "46": "current_commitment_signature=None, \n current_htlc_signatures=bytes, <DED> ) \n",
      "47": "current_commitment_signature=None, \n current_htlc_signatures=bytes([],]), \n ) \n",
      "48": "current_commitment_signature=None, \n current_htlc_signatures=bytes()) \n ) \n",
      "49": "current_commitment_signature=None, \n current_htlc_signatures=bytes((), } ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    with proc as nix_env:\n        <IND>return parse_packages_xml(nix_env.stdout)\n",
    "target_code": "    with proc as nix_env:\n        <IND>assert nix_env.stdout\n        return parse_packages_xml(nix_env.stdout)\n",
    "warning_line": "        return parse_packages_xml(nix_env.stdout)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `IO[bytes]` for 1st positional only parameter to call `parse_packages_xml` but got `Optional[IO[typing.Any]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 258,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Mic92/nixpkgs-review",
    "source_filename": "nixpkgs_review/review.py",
    "target_filename": "nixpkgs_review/review.py",
    "source_changeid": "27cba6e4ff24dd074fa0e030db49f9f0656f264a^",
    "target_changeid": "27cba6e4ff24dd074fa0e030db49f9f0656f264a",
    "predictions": [
      "with proc as nix_env: \n <IND> return IO[bytes](parse_packages_xml(nix_env.stdout)) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "with proc as nix_env: \n <IND> return IO[bytes](parse_packages_xml(nix_env.stdout)) \n",
      "1": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "2": "with proc as nix_env: \n <IND> return parse_packages_xml(IO[bytes]) \n",
      "3": "with proc as nix_env: \n <IND> assert nix_env.stdout is not None \n return parse_packages_xml(nix_env.stdout) \n",
      "4": "with proc as nix_env: \n <IND> assert nix_env is not None \n return parse_packages_xml(nix_env.stdout) \n",
      "5": "with proc as nix_env: \n <DED> return IO[bytes](parse_packages_xml(nix_env.stdout)) \n",
      "6": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, []) \n return parse_packages_xml(nix_env.stdout) \n",
      "7": "with proc as nix_env: \n <IND> return xml(parse_packages_xml(nix_env.stdout)) \n",
      "8": "with proc as nix_env: \n <IND> assert isinstance(str, IO[bytes]) \n return parse_packages_xml(str(nix_env.stdout)) \n",
      "9": "with proc as nix_env: \n <IND> assert nix_env is not None \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "10": "with proc as nix_env: \n <IND> assert isinstance(nix_env, IO[bytes]) \n return parse_packages_xml(nix_env.stdout) \n",
      "11": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout) \n return parse_packages_xml(nix_env.stdout) \n",
      "12": "with proc as nix_env: \n \n return IO[bytes](parse_packages_xml(nix_env.stdout)) \n",
      "13": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, IO[bytes]) \n return parse_packages_xml(nix_env.stdout) \n",
      "14": "with proc as nix_env: \n <DED> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "15": "with proc as nix_env: \n <IND> assert isinstance(str, IO[bytes]) \n return parse_packages_xml(str, nix_env.stdout) \n",
      "16": "with proc as nix_env: \n <IND> return nix_packages_xml(stdout, []) \n",
      "17": "with proc as nix_env: \n <DED> assert nix_env.stdout is not None \n return parse_packages_xml(nix_env.stdout) \n",
      "18": "with proc as nix_env: \n <IND> return nix_packages_xml(nix_env.stdout) \n",
      "19": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes=parse_packages_xml(nix_env.stdout)) \n",
      "20": "with proc as nix_env: \n <IND> return IO(parse_packages_xml(nix_env.stdout)) \n",
      "21": "with proc as nix_env: \n <DED> assert isinstance(nix_env.stdout, []) \n return parse_packages_xml(nix_env.stdout) \n",
      "22": "with proc as nix_env: \n <DED> assert nix_env is not None \n return parse_packages_xml(nix_env.stdout) \n",
      "23": "with proc as nix_env: \n <IND> assert isinstance(stdout, IO) \n return parse_packages_xml(nix_env.stdout) \n",
      "24": "with proc as nix_env: \n <IND> if not isinstance(nix_env.stdout): \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "25": "with proc as nix_env: \n <IND> assert isinstance(str, IO[bytes]) \n return parse_packages_xml(nix_env.stdout) \n",
      "26": "with proc as nix_env: \n <DED> return parse_packages_xml(IO[bytes]) \n",
      "27": "with proc as nix_env: \n <IND> return nix_env_bytes(parse_packages_xml(nix_env.stdout)) \n",
      "28": "with proc as nix_env: \n <IND> assert isinstance(stdout, IO[bytes]) \n return parse_packages_xml(nix_env.stdout) \n",
      "29": "with proc as nix_env: \n <IND> return tuple(parse_packages_xml(nix_env.stdout)) \n",
      "30": "with proc as nix_env: \n <IND> parse_packages_xml(IO[bytes]) \n return parse_packages_xml(nix_env.stdout) \n",
      "31": "with proc as nix_env: \n <IND> assert nix_env is not None \n return parse_packages_xml(stdout, IO[bytes]) \n",
      "32": "with proc as nix_env: \n <DED> assert nix_env is not None \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "33": "with proc as nix_env: \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "34": "with proc as nix_env: \n <IND> if not nix_env: \n <IND> return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "35": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes[nix_env.stdout]) \n",
      "36": "with proc as nix_env: \n <IND> return bytes(parse_packages_xml(nix_env.stdout)) \n",
      "37": "with proc as nix_env: \n <DED> return xml(parse_packages_xml(nix_env.stdout)) \n",
      "38": "with proc as nix_env: \n <IND> assert isinstance(nix_env.stdout, []) \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "39": "with proc as nix_env: \n \n return parse_packages_xml(bytes(nix_env.stdout)) \n",
      "40": "with proc as nix_env: \n <IND> assert nix_env.stdout is not None \n return nix_packages_xml(nix_env.stdout) \n",
      "41": "with proc as nix_env: \n <IND> assert isinstance(str, IO[bytes]) \n return nix_packages_xml(str, IO[bytes]) \n",
      "42": "with proc as nix_env: \n <IND> if not nix_env: \n <IND> return parse_packages_xml(nix_env.stdout) \n",
      "43": "with proc as nix_env: \n <IND> return nix_packages_xml(bytes(nix_env.stdout)) \n",
      "44": "with proc as nix_env: \n <IND> assert isinstance(nix_env, IO[bytes]) \n return parse_packages_xml(stdout) \n",
      "45": "with proc as nix_env: \n <IND> assert nix_env is not None \n return nix_packages_xml(nix_env.stdout) \n",
      "46": "with proc as nix_env: \n <IND> assert isinstance(stdout, IO[bytes]) \n return parse_packages_xml(stdout) \n",
      "47": "with proc as nix_env: \n <IND> assert nix_env is not None \n return parse_packages_xml(IO[bytes]) \n",
      "48": "with proc as nix_env: \n <IND> return IO[bytes](parse_packages_xml(stdout)) \n",
      "49": "with proc as nix_env: \n <IND> return parse_packages_xml(bytes.decode(nix_env.stdout)) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        player.init_gender(self.gender)\n        title = None if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "target_code": "        player.init_gender(self.gender)\n        title = \"\" if self.title == self._name else self.title\n        player.init_names(self._name, title, self.description, self.short_description)\n",
    "warning_line": "        player.init_names(self._name, title, self.description, self.short_description)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 2nd positional only parameter to call `Player.init_names` but got `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/charbuilder.py",
    "target_filename": "tale/charbuilder.py",
    "source_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe^",
    "target_changeid": "0a78d4a821d7da405bf5335ba3741757f0b593fe",
    "predictions": [
      "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "1": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, short_description) \n",
      "2": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title <IND> player.init_names(self._name, title, self.description, self.short_description) \n",
      "3": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title <DED> player.init_names(self._name, title, self.description, self.short_description) \n",
      "4": "player.init_gender(self.gender) <IND> title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "5": "player.init_gender(self.gender) <DED> title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "6": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) <IND>",
      "7": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) <DED>",
      "8": "player.init_gender(self.gender) { title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "9": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title { player.init_names(self._name, title, self.description, self.short_description) \n",
      "10": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) {",
      "11": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title } player.init_names(self._name, title, self.description, self.short_description) \n",
      "12": "player.init_gender(self.gender) } title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "13": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) }",
      "14": "player.init_gender(self.gender) \n title = None if self.title is not None if self.name == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "15": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n self.init_names(self._name, title, self.description, self.short_description) \n",
      "16": "player.init_gender(self.gender) \\ title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "17": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \\",
      "18": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \\ player.init_names(self._name, title, self.description, self.short_description) \n",
      "19": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description)",
      "20": "player.init_gender(self.gender) title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "21": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) \n",
      "22": "player.init_gender(self.gender) title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "23": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description)",
      "24": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) \n",
      "25": "player.init_gender(self.gender) \n name = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "26": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description)",
      "27": "player.init_gender(self.gender) title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "28": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description)",
      "29": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) \n",
      "30": "player.init_gender(self.gender) title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "31": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) \n",
      "32": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description)",
      "33": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description)",
      "34": "player.init_gender(self.gender) title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "35": "player.init_gender(self.gender) title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "36": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) ^",
      "37": "player.init_gender(self.gender) ^ title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "38": "player.init_gender(self.gender) title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "39": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) \n",
      "40": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description)",
      "41": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description)",
      "42": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title ^ player.init_names(self._name, title, self.description, self.short_description) \n",
      "43": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) \n",
      "44": "player.init_gender(self.gender) title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "45": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description)",
      "46": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) \n",
      "47": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title player.init_names(self._name, title, self.description, self.short_description) \n",
      "48": "player.init_gender(self.gender) title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description) \n",
      "49": "player.init_gender(self.gender) \n title = None if self.title == self._name else self.title \n player.init_names(self._name, title, self.description, self.short_description)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "def compile_IsOp(\n        expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "target_code": "def compile_IsOp(\n        expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set:\n    <IND>op_node = compile_type_check_op(expr, ctx=ctx)\n",
    "warning_line": "    op_node = compile_type_check_op(expr, ctx=ctx)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `qlast.IsOp` for 1st positional only parameter to call `compile_type_check_op` but got `qlast.Base`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 91,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "edgedb/edgedb",
    "source_filename": "edb/edgeql/compiler/expr.py",
    "target_filename": "edb/edgeql/compiler/expr.py",
    "source_changeid": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb^",
    "target_changeid": "e7b95b8a233ef94da244ffd74c4abfbe6d7548bb",
    "predictions": [
      "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "1": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <DED> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "2": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert expr is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "3": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> expr = expr \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "4": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "5": "def compile_IsOp( \n expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "6": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> assert isinstance(expr, ctx=ctx) \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "7": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n } op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "8": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n { op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "9": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <DED> assert expr is not None \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "10": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <DED> expr = expr \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "11": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> expr = expr \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "12": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n \\ op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "13": "def compile_IsOp( \n expr: qlast.IsOp, *, ctx: context.ContextLevel) -> irast.Set: \n <DED> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "14": "def compile_IsOp( <IND> expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "15": "def compile_IsOp( <DED> expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "16": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "17": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "18": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: <IND> <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "19": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "20": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "21": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "22": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "23": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) <DED>",
      "24": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> op_node = compile_type_check_op(expr, ctx=ctx) <IND>",
      "25": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n <IND> expr = op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "26": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: <DED> <IND> op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "27": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "28": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "29": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "30": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "31": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "32": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "33": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "34": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "35": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "36": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "37": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "38": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "39": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "40": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "41": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "42": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "43": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "44": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "45": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "46": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "47": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "48": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n",
      "49": "def compile_IsOp( \n expr: qlast.Base, *, ctx: context.ContextLevel) -> irast.Set: \n op_node = compile_type_check_op(expr, ctx=ctx) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": true,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        for component in self.pipeline:\n            <IND>args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)\n            updates = component.pipeline_init(*args)\n",
    "target_code": "        for component in self.pipeline:\n            <IND>args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict())\n            updates = component.pipeline_init(*args)\n",
    "warning_line": "            args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Dict[str, typing.Any]` for 3rd positional only parameter to call `rasa_nlu.components.fill_args` but got `RasaNLUConfig`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 175,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa_nlu/model.py",
    "target_filename": "rasa_nlu/model.py",
    "source_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12^",
    "target_changeid": "f55804e5cc46f21d73e82374a57f71a48a24fb12",
    "predictions": [
      "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "1": "for component in self.pipeline: \n <DED> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "2": "for component in self.pipeline: \n \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "3": "for component in self.pipeline: \n <IND> assert component.pipeline_init_args(), context, self.config.as_dict() \n updates = component.pipeline_init(*args) \n",
      "4": "for component in self.pipeline: \n <IND> assert component.pipeline_init_args() is not None \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "5": "for component in self.pipeline: \n <IND> assert component.pipeline_init_args() is not None \n assert updates are not None \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "6": "for component in self.pipeline: \n { args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "7": "for component in self.pipeline: \n <IND> assert isinstance(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "8": "for component in self.pipeline: \n } args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "9": "for component in self.pipeline: \n <IND> assert isinstance(component.pipeline_init_args(), context, self.config.as_dict()) \n assert isinstance(component.pipeline_init_args(), self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "10": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config) \n updates = component.pipeline_init(*args) \n",
      "11": "for component in self.pipeline: \n <IND> assert component.pipeline_init_args(), context, self.config.as_dict() \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "12": "for component in self.pipeline: \n <IND> assert isinstance(component.pipeline_init_args(), context, self.config.as_dict()) \n assert isinstance(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "13": "for component in self.pipeline: \n <DED> assert component.pipeline_init_args() is not None \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "14": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args).init(*args) \n",
      "15": "for component in self.pipeline: \n \\ args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "16": "for component in self.pipeline: <IND> <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "17": "for component in self.pipeline: \n <IND> assert isinstance(component.pipeline_init_args()), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "18": "for component in self.pipeline: <DED> <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "19": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "20": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "21": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) <IND>",
      "22": "for component in self.pipeline: \n <DED> assert component.pipeline_init_args(), context, self.config.as_dict() \n updates = component.pipeline_init(*args) \n",
      "23": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "24": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "25": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) <DED> updates = component.pipeline_init(*args) \n",
      "26": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) <IND> updates = component.pipeline_init(*args) \n",
      "27": "for component in self.pipeline: \n <IND> args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) <DED>",
      "28": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "29": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "30": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "31": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "32": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "33": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "34": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "35": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "36": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "37": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "38": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "39": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "40": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "41": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "42": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "43": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "44": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "45": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "46": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "47": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "48": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n",
      "49": "for component in self.pipeline: \n args = rasa_nlu.components.fill_args(component.pipeline_init_args(), context, self.config.as_dict()) \n updates = component.pipeline_init(*args) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n                new = Or(new, key_argument != index_argument)\n\n",
    "target_code": "\n                new = Or(new, cast(Bool, key_argument != index_argument))\n\n",
    "warning_line": "                new = Or(new, key_argument != index_argument)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `mythril.laser.smt.bool.Bool` for 2nd positional only parameter to call `mythril.laser.smt.bool.Or` but got `bool`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1374,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474^",
    "target_changeid": "b2b21431cd255c33fed711aee2d1d749b3968474",
    "predictions": [
      "\n new = Or(new, key_argument!= index_argument) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n new = Or(new, key_argument!= index_argument) \n \n",
      "1": "\n new_argument = Or(new, key_argument!= index_argument) \n \n",
      "2": "<DED> new = Or(new, key_argument!= index_argument) \n \n",
      "3": "<IND> new = Or(new, key_argument!= index_argument) \n \n",
      "4": "\n new_argument = or(new, key_argument!= index_argument) \n \n",
      "5": "\n new = Or(new, key_argument!= index_argument) \n <IND>",
      "6": "\n new = Or(new, key_argument!= index_argument) \n <DED>",
      "7": "<DED> new_argument = Or(new, key_argument!= index_argument) \n \n",
      "8": "<IND> new_argument = Or(new, key_argument!= index_argument) \n \n",
      "9": "{ new = Or(new, key_argument!= index_argument) \n \n",
      "10": "} new = Or(new, key_argument!= index_argument) \n \n",
      "11": "\n new = Or(new, key_argument!= index_argument) \n {",
      "12": "\n new = Or(new, key_argument!= index_argument) <DED> \n",
      "13": "\n new = Or(new, key_argument!= index_argument) <IND> \n",
      "14": "\n new_argument = Or(new, key_argument!= index_argument) \n <IND>",
      "15": "\n new_argument = Or(new, key_argument!= index_argument) \n <DED>",
      "16": "\n new= Or(new, key_argument!= index_argument) \n \n",
      "17": "\n new = or(new, key_argument!= index_argument) \n \n",
      "18": "\n new = Or(new, key_argument!= index_argument) \n }",
      "19": "\n new = Or(new, key_argument!= index_argument) { \n",
      "20": "\\ new = Or(new, key_argument!= index_argument) \n \n",
      "21": "\n new = bool(new, key_argument!= index_argument) \n \n",
      "22": "\n new = Or(new, key_argument!= index_argument) } \n",
      "23": "\n new = Bool(new, key_argument!= index_argument) \n \n",
      "24": "new = Or(new, key_argument!= index_argument) \n \n",
      "25": "\n new_argument = Or(new, key_argument!= index_argument) \n {",
      "26": "\n new = Or(new, key_argument!= index_argument) \n \\",
      "27": "new = Or(new, key_argument!= index_argument) \n \n",
      "28": "new = Or(new, key_argument!= index_argument) \n \n",
      "29": "new = Or(new, key_argument!= index_argument) \n \n",
      "30": "new = Or(new, key_argument!= index_argument) \n \n",
      "31": "\n new_argument = Or(new, key_argument!= index_argument) <DED> \n",
      "32": "new = Or(new, key_argument!= index_argument) \n \n",
      "33": "\n new_argument = Or(new, key_argument!= index_argument) <IND> \n",
      "34": "new = Or(new, key_argument!= index_argument) \n \n",
      "35": "^ new = Or(new, key_argument!= index_argument) \n \n",
      "36": "\n new = Or(new, key_argument!= index_argument) \\ \n",
      "37": "new = Or(new, key_argument!= index_argument) \n \n",
      "38": "new = Or(new, key_argument!= index_argument) \n \n",
      "39": "new = Or(new, key_argument!= index_argument) \n \n",
      "40": "new = Or(new, key_argument!= index_argument) \n \n",
      "41": "new = Or(new, key_argument!= index_argument) \n \n",
      "42": "new = Or(new, key_argument!= index_argument) \n \n",
      "43": "new = Or(new, key_argument!= index_argument) \n \n",
      "44": "new = Or(new, key_argument!= index_argument) \n \n",
      "45": "new = Or(new, key_argument!= index_argument) \n \n",
      "46": "\n new_argument = Or(new, key_argument!= index_argument) \n }",
      "47": "new = Or(new, key_argument!= index_argument) \n \n",
      "48": "\n new = Or(new, key_argument!= index_argument) \n",
      "49": "new = Or(new, key_argument!= index_argument) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map(None), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "target_code": "    (\"read_array\", [T.File()], T.Array(T.Any()), _notimpl),\n    (\"read_map\", [T.File()], T.Map((T.Any(), T.Any())), _notimpl),\n    (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl),\n",
    "warning_line": "    (\"read_map\", [T.File()], T.Map(None), _notimpl),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `Tuple[T.Base, T.Base]` for 1st positional only parameter to call `T.Map.__init__` but got `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 180,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "chanzuckerberg/miniwdl",
    "source_filename": "WDL/StdLib.py",
    "target_filename": "WDL/StdLib.py",
    "source_changeid": "1b3f26c69b306c12226eaa02145072af0de12839^",
    "target_changeid": "1b3f26c69b306c12226eaa02145072af0de12839",
    "predictions": [
      "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n"
    ],
    "correct": false,
    "top_five": {
      "0": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "1": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "2": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "3": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "4": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((T.Any())), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "5": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], None], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "6": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "7": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((T.Any()), ''), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "8": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(''), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "9": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "10": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((None), None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "11": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(((T.Any())), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "12": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([]), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "13": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((\"\")), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "14": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((''), '), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "15": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"write_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "16": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((T.Any(), T.Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "17": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((''), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "18": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), <DED> (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "19": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), <IND> (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "20": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), <IND> (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "21": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), <DED> (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "22": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((''), ''), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "23": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), <DED>",
      "24": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), <IND>",
      "25": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((T.Any()), None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "26": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), {",
      "27": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), { (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "28": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), { (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "29": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((Too), Too), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "30": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map()\", _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "31": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(((T.Any()), None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "32": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "33": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((Any()), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "34": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), } (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "35": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), }",
      "36": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), } (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "37": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(\"\")), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "38": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((T.Any()), _notimpl)), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "39": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(), [], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "40": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map([], T.Any()], _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "41": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map((None, None)), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "42": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(((None), None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "43": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(False), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "44": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), \"_notimpl\")), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "45": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(none), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "46": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(Too), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "47": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(0), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n",
      "48": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \n (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \\",
      "49": "(\"read_array\", [T.File()], T.Array(T.Any()), _notimpl), \\ (\"read_map\", [T.File()], T.Map(None), _notimpl), \n (\"read_lines\", [T.File()], T.Array(T.Any()), _notimpl), \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=int(data['identifier']),\n            amount=int(data['amount']),\n            initiator=to_canonical_address(data['initiator']),\n",
    "target_code": "            token_network_identifier=to_canonical_address(data['token_network_identifier']),\n            identifier=PaymentID(int(data['identifier'])),\n            amount=TokenAmount(int(data['amount'])),\n            initiator=to_canonical_address(data['initiator']),\n",
    "warning_line": "            amount=int(data['amount']),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `TokenAmount` for 4th parameter `amount` to call `EventPaymentReceivedSuccess.__init__` but got `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 598,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/transfer/events.py",
    "target_filename": "raiden/transfer/events.py",
    "source_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277^",
    "target_changeid": "e349c2aa42059e125df2aba9bcf1bfc9e6668277",
    "predictions": [
      "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n"
    ],
    "correct": false,
    "top_five": {
      "0": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "1": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n token_network_identifier=to_canonical_address(data['initiator']), \n",
      "2": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <IND> identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "3": "token_network_identifier=to_canonical_address(data['token_network_identifier']), <DED> identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "4": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), <IND> amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "5": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), <IND> initiator=to_canonical_address(data['initiator']), \n",
      "6": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), <DED> amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "7": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), <DED> initiator=to_canonical_address(data['initiator']), \n",
      "8": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), <IND>",
      "9": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), <DED>",
      "10": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n token_network_identifier=to_canonical_address(data['initiator']), \n token_network_identifier=to_canonical_address(data['token_network_identifier']), \n",
      "11": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=to_canonical_address(data['identifier']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "12": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n value=TokenAmount(int(data['value'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "13": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n token_network_identifier=to_canonical_address(data['initiator']), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['",
      "14": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), { amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "15": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), { initiator=to_canonical_address(data['initiator']), \n",
      "16": "token_network_identifier=to_canonical_address(data['token_network_identifier']), { identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "17": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), {",
      "18": "token_network_identifier=to_canonical_address(data['token_network_identifier']), } identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "19": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), } initiator=to_canonical_address(data['initiator']), \n",
      "20": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), }",
      "21": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), } amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "22": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator'])), \n",
      "23": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenID(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "24": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \\ identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "25": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \\ amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "26": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \\ initiator=to_canonical_address(data['initiator']), \n",
      "27": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \\",
      "28": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n award=TokenAmount(int(data['award'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "29": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n token_network_identifier=to_canonical_address(data['initiator']), \n token_network_identifier=TokenAmount(int(data['network_identifier'])), \n",
      "30": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']),",
      "31": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "32": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), \n",
      "33": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "34": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "35": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "36": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), \n",
      "37": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']),",
      "38": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), \n",
      "39": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "40": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']),",
      "41": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']),",
      "42": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "43": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), \n",
      "44": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "45": "token_network_identifier=to_canonical_address(data['token_network_identifier']), identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']), \n",
      "46": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiater=to_canonical_address(data['initiator']), \n",
      "47": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), \n",
      "48": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), initiator=to_canonical_address(data['initiator']), \n",
      "49": "token_network_identifier=to_canonical_address(data['token_network_identifier']), \n identifier=TokenAmount(int(data['identifier'])), \n amount=TokenAmount(int(data['amount'])), \n initiator=to_canonical_address(data['initiator']),"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "target_code": "        file_suffix='_medium_expert-v2',\n        step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]),\n    ),\n",
    "warning_line": "        step_metadata_keys=set([_QPOS, _QVEL, _ACTION_LOG_PROBS]),",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `frozenset[str]` for 5th parameter `step_metadata_keys` to call `BuilderConfig.__init__` but got `typing.Set[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 210,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/datasets",
    "source_filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "target_filename": "tensorflow_datasets/d4rl/dataset_builder.py",
    "source_changeid": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f^",
    "target_changeid": "4dbf2d78a44eccfcdf46fb8e15681cda8c0b144f",
    "predictions": [
      "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n"
    ],
    "correct": true,
    "top_five": {
      "0": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "1": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <IND>",
      "2": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), <IND> ), \n",
      "3": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), <DED>",
      "4": "file_suffix='_medium_expert-v2', <IND> step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "5": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), <DED> ), \n",
      "6": "file_suffix='_medium_expert-v2', <DED> step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "7": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), {",
      "8": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), { ), \n",
      "9": "file_suffix='_medium_expert-v2', { step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "10": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), } ), \n",
      "11": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), }",
      "12": "file_suffix='_medium_expert-v2', } step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "13": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \\ ), \n",
      "14": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \\",
      "15": "file_suffix='_medium_expert-v2', \\ step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "16": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ),",
      "17": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "18": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "19": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "20": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "21": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ),",
      "22": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "23": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "24": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ),",
      "25": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ),",
      "26": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "27": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "28": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "29": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "30": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "31": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "32": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ),",
      "33": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ),",
      "34": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ),",
      "35": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "36": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "37": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ^ ), \n",
      "38": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), ^",
      "39": "file_suffix='_medium_expert-v2', ^ step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "40": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "41": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ),",
      "42": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "43": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ),",
      "44": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "45": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "46": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "47": "file_suffix='_medium_expert-v2', step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ), \n",
      "48": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), ), \n",
      "49": "file_suffix='_medium_expert-v2', \n step_metadata_keys=frozenset([_QPOS, _QVEL, _ACTION_LOG_PROBS]), \n ),"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED><DED>group_by_spec = Definition(\n    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec\n)\n\n",
    "target_code": "\n<DED><DED>group_by_spec = Definition(name=\"group_by_spec\", primitive=\"Dict[str, Any]\")\n\n",
    "warning_line": "    name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `NamedTuple` for 3rd parameter `spec` to call `Definition.__init__` but got `typing.Type[GroupBySpec]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 39,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "intel/dffml",
    "source_filename": "dffml/operation/output.py",
    "target_filename": "dffml/operation/output.py",
    "source_changeid": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3^",
    "target_changeid": "7eb963f2bf46891428851dbd15bd8cbfdd58e7a3",
    "predictions": [
      "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "1": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple \n ) \n \n",
      "2": "\n <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "3": "\n <IND> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "4": "\n <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple \n ) \n \n",
      "5": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition.GroupBySpec \n ) \n \n",
      "6": "\n <IND> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple \n ) \n \n",
      "7": "\n <IND> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "8": "<DED> <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "9": "\n <DED> \n group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "10": "\n \n <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "11": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition.BySpec \n ) \n \n",
      "12": "<IND> <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "13": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Tuple(GroupBySpec) \n ) \n \n",
      "14": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple <DED> ) \n \n",
      "15": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=FalseGroupBySpec \n ) \n \n",
      "16": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple <IND> ) \n \n",
      "17": "\n <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition.GroupBySpec \n ) \n \n",
      "18": "\n <IND> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple \n ) \n \n",
      "19": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Personality[GroupBySpec] \n ) \n \n",
      "20": "\n <IND> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition.GroupBySpec \n ) \n \n",
      "21": "\n <DED> { group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "22": "\n <DED> \n group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple \n ) \n \n",
      "23": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n <IND>",
      "24": "<DED> <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple \n ) \n \n",
      "25": "\n <DED> } group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "26": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=List[GroupBySpec] \n ) \n \n",
      "27": "\n \n <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple \n ) \n \n",
      "28": "\n } <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "29": "\n { <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "30": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n <DED>",
      "31": "<DED> <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "32": "\n \n <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "33": "\n <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition.BySpec \n ) \n \n",
      "34": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Dict[str, Any] \n ) \n \n",
      "35": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=\"GroupBySpec\" \n ) \n \n",
      "36": "<IND> <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple \n ) \n \n",
      "37": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple { ) \n \n",
      "38": "<DED> <IND> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "39": "\n <IND> \n group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "40": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple } ) \n \n",
      "41": "\n <IND> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Definition.BySpec \n ) \n \n",
      "42": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Personality.GroupBySpec \n ) \n \n",
      "43": "<IND> <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "44": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Personal[GroupBySpec] \n ) \n \n",
      "45": "<IND> <IND> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec \n ) \n \n",
      "46": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=Dict[str, Any]) \n \n",
      "47": "\n <DED> <IND> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=NamedTuple <DED> ) \n \n",
      "48": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=GroupBySpec <DED> ) \n \n",
      "49": "\n <DED> <DED> group_by_spec = Definition( \n name=\"group_by_spec\", primitive=\"Dict[str, Any]\", spec=BySpec \n ) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        <IND>from_zip_code = ZipCode(from_zip_code)\n        to_zip_code = ZipCode(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "target_code": "                                    to_zip_code: Union[ZipCode, str]) -> bool:\n        <IND>from_zip_code = ZipCode.create(from_zip_code)\n        to_zip_code = ZipCode.create(to_zip_code)\n        result = self._auth_call(\"verificaDisponibilidadeServico\",\n",
    "warning_line": "        to_zip_code = ZipCode(to_zip_code)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `ZipCode.__init__` but got `Union[ZipCode, str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 326,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "olist/correios",
    "source_filename": "correios/client.py",
    "target_filename": "correios/client.py",
    "source_changeid": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457^",
    "target_changeid": "8fbe4b3da9ddeb49f0a69c04ccef5afa37956457",
    "predictions": [
      "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n"
    ],
    "correct": true,
    "top_five": {
      "0": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "1": "to_zip_code: Union[ZipCode, str]) -> bool: \n <DED> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "2": "to_zip_code: Union[ZipCode, str]) -> bool: \n \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "3": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "4": "to_zip_code: Union[ZipCode, str]) -> bool: \n { from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "5": "to_zip_code: Union[ZipCode, str]) -> bool: \n } from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "6": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.append(from_zip_code) \n to_zip_code = ZipCode.append(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "7": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(to_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "8": "to_zip_code: Union[ZipCode, str]) -> bool: \n \\ from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "9": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.add(from_zip_code) \n to_zip_code = ZipCode.add(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "10": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.union(from_zip_code) \n to_zip_code = ZipCode.union(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "11": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", <IND>",
      "12": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", <DED>",
      "13": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "14": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) <IND> to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "15": "to_zip_code: Union[ZipCode, str]) -> bool: <IND> <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "16": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) <DED> to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "17": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) <IND> result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "18": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "19": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "20": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) <DED> result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "21": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "22": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "23": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "24": "to_zip_code: Union[ZipCode, str]) -> bool: <DED> <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "25": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", {",
      "26": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "27": "to_zip_code: Union[ZipCode, str]) -> bool: \n <DED> from_zip_code = ZipCode(from_zip_code) \n to_zip_code = ZipCode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "28": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "29": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "30": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.decode(from_zip_code) \n to_zip_code = ZipCode.decode(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "31": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "32": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "33": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "34": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "35": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "36": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "37": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "38": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "39": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "40": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "41": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "42": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "43": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "44": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) { to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "45": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "46": "to_zip_code: Union[ZipCode, str]) -> bool: \n <IND> from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) { result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "47": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "48": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n",
      "49": "to_zip_code: Union[ZipCode, str]) -> bool: \n from_zip_code = ZipCode.create(from_zip_code) \n to_zip_code = ZipCode.create(to_zip_code) \n result = self._auth_call(\"verificaDisponibilidadeServico\", \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if not self.check_enable_mode():\n            <IND>output += self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            if re.search(pattern, output, flags=re_flags):\n",
    "target_code": "        if not self.check_enable_mode():\n            <IND>new_data = self.send_command_timing(\n                cmd, strip_prompt=False, strip_command=False\n            )\n            assert isinstance(new_data, str)\n            output += new_data\n            if re.search(pattern, output, flags=re_flags):\n",
    "warning_line": "            output += self.send_command_timing(",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `str.__add__` but got `typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any], str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 65,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ktbyers/netmiko",
    "source_filename": "netmiko/dell/dell_isilon_ssh.py",
    "target_filename": "netmiko/dell/dell_isilon_ssh.py",
    "source_changeid": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8^",
    "target_changeid": "bbdb10efe05561f6ea2b5c9fd8cfff1b0dd293b8",
    "predictions": [
      "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "1": "if not self.check_enable_mode(): \n <DED> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "2": "if not self.check_enable_mode(): \n <IND> timing += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "3": "if not self.check_enable_mode(): \n \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "4": "if not self.check_enable_mode(): \n <IND> timing = self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "5": "if not self.check_enable_mode(): \n <IND> input += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "6": "if not self.check_enable_mode(): \n { output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "7": "if not self.check_enable_mode(): \n } output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "8": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False <DED> ) \n if re.search(pattern, output, flags=re_flags): \n",
      "9": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False <IND> ) \n if re.search(pattern, output, flags=re_flags): \n",
      "10": "if not self.check_enable_mode(): \n <DED> timing += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "11": "if not self.check_enable_mode(): \n <IND> ) \n if re.search(pattern, output, flags=re_flags): \n",
      "12": "if not self.check_enable_mode(): \n <IND> assert cmd is not None \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "13": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( <DED> cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "14": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( <IND> cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "15": "if not self.check_enable_mode(): \n \\ output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "16": "if not self.check_enable_mode(): \n <IND> return self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "17": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False { ) \n if re.search(pattern, output, flags=re_flags): \n",
      "18": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=1, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "19": "if not self.check_enable_mode(): \n <IND> self.send_command_timing = self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "20": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): <IND>",
      "21": "if not self.check_enable_mode(): <IND> <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "22": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False } ) \n if re.search(pattern, output, flags=re_flags): \n",
      "23": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) <DED> if re.search(pattern, output, flags=re_flags): \n",
      "24": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) <IND> if re.search(pattern, output, flags=re_flags): \n",
      "25": "if not self.check_enable_mode(): <DED> <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "26": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( { cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "27": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "28": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): <DED>",
      "29": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "30": "if not self.check_enable_mode(): \n \n timing += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "31": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "32": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "33": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=0, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "34": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "35": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "36": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=True, strip_command=True \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "37": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "38": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "39": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "40": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "41": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "42": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "43": "if not self.check_enable_mode(): \n output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "44": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) { if re.search(pattern, output, flags=re_flags): \n",
      "45": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "46": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): {",
      "47": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=, strip_prompt=, strip_command=False \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "48": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd=strip_prompt, strip_command=strip_command \n ) \n if re.search(pattern, output, flags=re_flags): \n",
      "49": "if not self.check_enable_mode(): \n <IND> output += self.send_command_timing( \n cmd, strip_prompt=False, strip_command=False \n ) } if re.search(pattern, output, flags=re_flags): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                dists[param_name] = distribution\n                cached_trial.distributions[param_name] = dists\n                updates.params[param_name] = param_value_internal\n",
    "target_code": "                dists[param_name] = distribution\n                cached_trial.distributions = dists\n                updates.params[param_name] = param_value_internal\n",
    "warning_line": "                cached_trial.distributions[param_name] = dists",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `distributions.BaseDistribution` for 2nd positional only parameter to call `dict.__setitem__` but got `Dict[str, distributions.BaseDistribution]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 182,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "optuna/optuna",
    "source_filename": "optuna/storages/cached_storage.py",
    "target_filename": "optuna/storages/cached_storage.py",
    "source_changeid": "e17476d91462f955a7bb3793ab67c32fa4107afb^",
    "target_changeid": "e17476d91462f955a7bb3793ab67c32fa4107afb",
    "predictions": [
      "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n"
    ],
    "correct": false,
    "top_five": {
      "0": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "1": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = base_distribution \n updates.params[param_name] = param_value_internal \n",
      "2": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bastion_distribution \n updates.params[param_name] = param_value_internal \n",
      "3": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bastion() \n updates.params[param_name] = param_value_internal \n",
      "4": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = Dists \n updates.params[param_name] = param_value_internal \n",
      "5": "dists[param_name] = distribution <IND> cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "6": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists <IND> updates.params[param_name] = param_value_internal \n",
      "7": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bastion.distribution \n updates.params[param_name] = param_value_internal \n",
      "8": "dists[param_name] = distribution <DED> cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "9": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <IND>",
      "10": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dict.__setitem__ \n updates.params[param_name] = param_value_internal \n",
      "11": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal <DED>",
      "12": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bash \n updates.params[param_name] = param_value_internal \n",
      "13": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists <DED> updates.params[param_name] = param_value_internal \n",
      "14": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal {",
      "15": "dists[param_name] = distribution { cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "16": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = base_distribution <DED> updates.params[param_name] = param_value_internal \n",
      "17": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists { updates.params[param_name] = param_value_internal \n",
      "18": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = BaseDistribution() \n updates.params[param_name] = param_value_internal \n",
      "19": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updated_params[param_name] = param_value_internal \n",
      "20": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = base_distribution <IND> updates.params[param_name] = param_value_internal \n",
      "21": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal }",
      "22": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bastion.Distribution() \n updates.params[param_name] = param_value_internal \n",
      "23": "dists[param_name] = distribution } cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "24": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists } updates.params[param_name] = param_value_internal \n",
      "25": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_valley_internal \n",
      "26": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = base_distribution { updates.params[param_name] = param_value_internal \n",
      "27": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bas_distribution \n updates.params[param_name] = param_value_internal \n",
      "28": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = base_distribution } updates.params[param_name] = param_value_internal \n",
      "29": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = distributions \n updates.params[param_name] = param_value_internal \n",
      "30": "dists[parm_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "31": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "32": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \\",
      "33": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bask_distribution \n updates.params[param_name] = param_value_internal \n",
      "34": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = \"\" \n updates.params[param_name] = param_value_internal \n",
      "35": "dists[param_name] = distribution \\ cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "36": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \\ updates.params[param_name] = param_value_internal \n",
      "37": "dists[param_name] = distribution \n cached_trial.distribution[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "38": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = bask() \n updates.params[param_name] = param_value_internal \n",
      "39": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal",
      "40": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal",
      "41": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "42": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal \n",
      "43": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "44": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal \n",
      "45": "dists[param_name] = distribution cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "46": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal",
      "47": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal",
      "48": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists \n updates.params[param_name] = param_value_internal \n",
      "49": "dists[param_name] = distribution \n cached_trial.distributions[param_name] = dists updates.params[param_name] = param_value_internal \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>time.sleep(1.5)\n        ret = perform_krb181_workaround(principal)\n        if exit_on_fail and ret != 0:\n",
    "target_code": "        <IND>time.sleep(1.5)\n        ret = perform_krb181_workaround(cmd_principal)\n        if exit_on_fail and ret != 0:\n",
    "warning_line": "        ret = perform_krb181_workaround(principal)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `str` for 1st positional only parameter to call `perform_krb181_workaround` but got `Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 117,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "apache/airflow",
    "source_filename": "airflow/security/kerberos.py",
    "target_filename": "airflow/security/kerberos.py",
    "source_changeid": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0^",
    "target_changeid": "4fc0530309d79afa55c4c5bfb257ae82f514a6f0",
    "predictions": [
      "<DED> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "1": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "2": "\n time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "3": "<DED> time.sleep(1.5) \n assert isinstance(principal, str) \n if exit_on_fail and ret!= 0: \n",
      "4": "<IND> time.sleep(1.5) \n assert isinstance(principal, str) \n if exit_on_fail and ret!= 0: \n",
      "5": "<DED> time.sleep(1.5) \n if exit_on_fail and ret!= 0: \n",
      "6": "\n time.sleep(1.5) \n assert isinstance(principal, str) \n if exit_on_fail and ret!= 0: \n",
      "7": "<IND> time.sleep(1.5) \n if exit_on_fail and ret!= 0: \n",
      "8": "{ time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "9": "\n time.sleep(1.5) \n if exit_on_fail and ret!= 0: \n",
      "10": "} time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "11": "<DED> time.sleep(1.5) \n str = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "12": "\\ time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "13": "<DED> time.sleep(1.5) \n key = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "14": "<IND> time.sleep(1.5) \n str = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "15": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "16": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "17": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "18": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "19": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "20": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "21": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "22": "<IND> time.sleep(1.5) \n key = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "23": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "24": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "25": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "26": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "27": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "28": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "29": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "30": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "31": "^ time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "32": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "33": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "34": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "35": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "36": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "37": "time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "38": "<DED> time.sleep(1.5) \n cast(str) = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: \n",
      "39": "<DED> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) <DED> if exit_on_fail and ret!= 0: \n",
      "40": "<DED> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) <IND> if exit_on_fail and ret!= 0: \n",
      "41": "<DED> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: <IND>",
      "42": "{ time.sleep(1.5) \n assert isinstance(principal, str) \n if exit_on_fail and ret!= 0: \n",
      "43": "<DED> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: <DED>",
      "44": "} time.sleep(1.5) \n assert isinstance(principal, str) \n if exit_on_fail and ret!= 0: \n",
      "45": "<DED> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) { if exit_on_fail and ret!= 0: \n",
      "46": "<DED> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: {",
      "47": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) <DED> if exit_on_fail and ret!= 0: \n",
      "48": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) <IND> if exit_on_fail and ret!= 0: \n",
      "49": "<IND> time.sleep(1.5) \n ret = perform_krb181_workaround(principal) \n if exit_on_fail and ret!= 0: <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <IND>chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not self.model.yanked_msgs:\n            <IND>return\n        <DED>from_chat_id, msg_ids = self.model.yanked_msgs\n        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "target_code": "        <IND>chat_id = self.model.chats.id_by_index(self.model.current_chat)\n        if not chat_id:\n            <IND>return\n        <DED>from_chat_id, msg_ids = self.model.yanked_msgs\n        if from_chat_id is None:\n            <IND>return\n        <DED>self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)\n",
    "warning_line": "        self.tg.forward_msgs(chat_id, from_chat_id, msg_ids)",
    "linter_report": {
      "rule_id": "Incompatible parameter type [6]",
      "message": " Expected `int` for 1st positional only parameter to call `Tdlib.forward_msgs` but got `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 111,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "paul-nameless/tg",
    "source_filename": "tg/controllers.py",
    "target_filename": "tg/controllers.py",
    "source_changeid": "b466724d058c15d999f2c9866aa7ba5e08308744^",
    "target_changeid": "b466724d058c15d999f2c9866aa7ba5e08308744",
    "predictions": [
      "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "1": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "2": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id to self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "3": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "4": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "5": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "6": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id to self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "7": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id, from_msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "8": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "9": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "10": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id to msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "11": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, msg_ids) \n",
      "12": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "13": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id, from_msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "14": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id to self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "15": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "16": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "17": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, msg_ids) \n",
      "18": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id to msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "19": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "20": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "21": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n \n from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "22": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id to msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "23": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id, from_msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "24": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id(from_chat_id), msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "25": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id and msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "26": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <DED> return from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "27": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "28": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "29": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n assert msg_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "30": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, msg_ids) \n",
      "31": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id to msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "32": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id to msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "33": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id and msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "34": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "35": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <IND> from_chat_id, msg_ids = self.model.yanked_msgs \n assert msg_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "36": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n return \n <DED> from_chat_id, msg_ids = self.model.yanked_msgs \n assert msg_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "37": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id = self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "38": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id to self.model.yanked_msgs \n assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "39": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id to self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "40": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(chat_id, from_chat_id, msg_ids) \n assert isinstance(chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "41": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "42": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id to msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "43": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return from_chat_id and msg_ids \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "44": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <DED> from_chat_id to self.model.yanked_msgs \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "45": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(chat_id, from_chat_id, msg_ids) \n assert isinstance(chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "46": "<IND> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> from_chat_id to self.model.yanked_msgs \n assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "47": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert chat_id is not None \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "48": "\n chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> assert isinstance(chat_id, from_chat_id, msg_ids) \n self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n",
      "49": "<DED> chat_id = self.model.chats.id_by_index(self.model.current_chat) \n if not self.model.yanked_msgs: \n <IND> return self.tg.forward_msgs(chat_id, from_chat_id, msg_ids) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    company: ormar.String(max_length=200)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    company = ormar.String(max_length=200)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_unique_constraints.py",
    "target_filename": "tests/test_unique_constraints.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "2": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "3": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "4": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "5": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "6": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "7": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "8": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "9": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n <IND>",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n <DED>",
      "12": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "13": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "14": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> company = ormar.String(max_length=200) \n \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> company = ormar.String(max_length=200) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) <DED> \n",
      "19": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) <IND> \n",
      "22": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "23": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n {",
      "25": "} <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "26": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "27": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "28": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "29": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "30": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "31": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) { company = ormar.String(max_length=200) \n \n",
      "33": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "35": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) { \n",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) { name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "43": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company= ormar.String(max_length=200) \n \n",
      "44": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "47": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "48": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n",
      "49": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n company = ormar.String(max_length=200) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>class BaseExampleGenExecutor(\n    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):\n  <IND>",
    "target_code": "\n<DED>class BaseExampleGenExecutor(base_beam_executor.BaseBeamExecutor, abc.ABC):\n  <IND>",
    "warning_line": "    with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `six.with_metaclass(abc.ABCMeta, tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/tfx",
    "source_filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "target_filename": "tfx/components/example_gen/base_example_gen_executor.py",
    "source_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f^",
    "target_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "predictions": [
      "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor): \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor): \n <IND>",
      "1": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "2": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "3": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \n <IND>",
      "4": "\n <DED> class BaseExampleGenExecutor( \n metaclass=base_beam_executor.BaseBeamExecutor): \n <IND>",
      "5": "\n <DED> class BaseExampleGenExecutor( \n metaclass=abc.ABC): \n <IND>",
      "6": "\n <IND> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor): \n <IND>",
      "7": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) -> tfx.dsl.components.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "8": "\n <IND> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "9": "\n <IND> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "10": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) as tfx.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "11": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor): \n <DED>",
      "12": "\n <DED> class BaseExampleGenExecutor( \n base_beam_executor.BaseBeamExecutor): \n <IND>",
      "13": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED>",
      "14": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED>",
      "15": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC)), base_beam_executor.BaseBeamExecutor): \n <IND>",
      "16": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) as tfx.components.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "17": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABCMeta, base_beam_executor.BaseBeamExecutor): \n <IND>",
      "18": "\n <DED> class BaseExampleGenExecutor( \n metaclass=\"abc.ABC\" -> base_beam_executor.BaseBeamExecutor): \n <IND>",
      "19": "\n <IND> class BaseExampleGenExecutor( \n with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \n <IND>",
      "20": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor): \n \n",
      "21": "\n <DED> class BaseExampleGenExecutor( \n metaclass=abc.ABCMeta, base_beam_executor.BaseBeamExecutor): \n <IND>",
      "22": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n \n",
      "23": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC): \n <IND>",
      "24": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABCMeta), base_beam_executor.BaseBeamExecutor)): \n <IND>",
      "25": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \n <DED>",
      "26": "\n <IND> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) -> tfx.dsl.components.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "27": "<DED> <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor): \n <IND>",
      "28": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) as tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "29": "\n <IND> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) as tfx.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "30": "\n \n class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor): \n <IND>",
      "31": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n \n",
      "32": "\n <IND> class BaseExampleGenExecutor( \n metaclass=base_beam_executor.BaseBeamExecutor): \n <IND>",
      "33": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) -> tfx.dsl.components.base_beam_executor.BaseBeamExecutor): \n <DED>",
      "34": "\n <IND> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) -> tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED>",
      "35": "\n <IND> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor): \n <DED>",
      "36": "<IND> <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) and base_beam_executor.BaseBeamExecutor): \n <IND>",
      "37": "\n <DED> class BaseExampleGenExecutor( \n \"base_beam_executor.BaseBeamExecutor\"): \n <IND>",
      "38": "<DED> <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "39": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) as tfx.components.base.base_beam_executor.BaseBeamExecutor): \n <DED>",
      "40": "\n <IND> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC) as tfx.components.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "41": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABCMeta, base_beam_executor.BaseBeamExecutor)): \n \n",
      "42": "\n <DED> class BaseExampleGenExecutor( \n metaclass=base_beam_executor.BaseBeamExecutor): \n <DED>",
      "43": "\n <DED> class BaseExampleGenExecutor( \n metaclass=\"abc.ABCMeta\", base_beam_executor.BaseBeamExecutor): \n <IND>",
      "44": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC), base_beam_executor.BaseBeamExecutor)): \n <IND>",
      "45": "\n <IND> class BaseExampleGenExecutor( \n tfx.dsl.components.base.base_beam_executor.BaseBeamExecutor): \n <DED>",
      "46": "\n <DED> class BaseExampleGenExecutor( \n tfx.dsl.components.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "47": "\n <DED> class BaseExampleGenExecutor( \n dsl.base_beam_executor.BaseBeamExecutor): \n <IND>",
      "48": "\n <IND> class BaseExampleGenExecutor( \n with_metaclass(abc.ABC)), base_beam_executor.BaseBeamExecutor): \n <IND>",
      "49": "\n <DED> class BaseExampleGenExecutor( \n with_metaclass=abc.ABC), base_beam_executor.BaseBeamExecutor): \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nclass BaseHandler(with_metaclass(abc.ABCMeta, object)):\n  <IND>",
    "target_code": "\nclass BaseHandler(abc.ABC):\n  <IND>",
    "warning_line": "class BaseHandler(with_metaclass(abc.ABCMeta, object)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `six.with_metaclass(abc.ABCMeta, object)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 36,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "tensorflow/tfx",
    "source_filename": "tfx/tools/cli/handler/base_handler.py",
    "target_filename": "tfx/tools/cli/handler/base_handler.py",
    "source_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f^",
    "target_changeid": "c1e0704b2a83232469f55598efcdb7808b6c909f",
    "predictions": [
      "\n class BaseHandler(abc.ABC): \n <IND>"
    ],
    "correct": true,
    "top_five": {
      "0": "\n class BaseHandler(abc.ABC): \n <IND>",
      "1": "\n class BaseHandler(abc.ABC): \n <DED>",
      "2": "\n class BaseHandler(abc.ABC): \n \n",
      "3": "<DED> class BaseHandler(abc.ABC): \n <IND>",
      "4": "\n class BaseHandler(abc.ABCMeta, object): \n <IND>",
      "5": "<IND> class BaseHandler(abc.ABC): \n <IND>",
      "6": "\n class BaseHandler(abc.ABC): \n {",
      "7": "\n class BaseHandler(abc.ABC): \n }",
      "8": "\n class BaseHandler(abc.ABC): \n \\",
      "9": "\n class BaseHandler(abc.ABCMeta, object): \n <DED>",
      "10": "{ class BaseHandler(abc.ABC): \n <IND>",
      "11": "<DED> class BaseHandler(abc.ABC): \n <DED>",
      "12": "\n class BaseHandler(abc.ABC): <IND> <IND>",
      "13": "\n class BaseHandler(abc.ABC): \n",
      "14": "<IND> class BaseHandler(abc.ABC): \n <DED>",
      "15": "\n class BaseHandler(abc.ABC): \n",
      "16": "\n class BaseHandler(abc.ABC): \n",
      "17": "\n class BaseHandler(abc.ABC): <DED> <IND>",
      "18": "\n class BaseHandler(abc.ABC): \n",
      "19": "\n class BaseHandler(abc.ABC): \n",
      "20": "\n class BaseHandler(abc.ABC): \n",
      "21": "\n class BaseHandler(abc.ABC): \n",
      "22": "} class BaseHandler(abc.ABC): \n <IND>",
      "23": "\n class BaseHandler(abc.ABC): \n",
      "24": "\n class BaseHandler(abc.ABC): \n",
      "25": "\n class BaseHandler(abc.ABC): \n",
      "26": "\n class BaseHandler(abc.ABC): \n",
      "27": "\n class BaseHandler(abc.ABC): \n",
      "28": "\n class BaseHandler(abc.ABC): \n",
      "29": "\n class BaseHandler(abc.ABC): \n",
      "30": "\n class BaseHandler(abc.ABC): \n",
      "31": "\n class BaseHandler(abc.ABC): \n",
      "32": "\n class BaseHandler(abc.ABC): \n",
      "33": "\n class BaseHandler(abc.ABC): \n",
      "34": "\n class BaseHandler(abc.ABC): \n",
      "35": "\n class BaseHandler(abc.ABC): \n",
      "36": "\n class BaseHandler(abc.ABCMeta, object): \n \n",
      "37": "\n class BaseHandler(abc.ABC): \n",
      "38": "\n class BaseHandler(abc.ABC): \n",
      "39": "\n class BaseHandler(abc.ABC): \n",
      "40": "\n class BaseHandler(abc.ABC): \n",
      "41": "\n class BaseHandler(abc.ABC): \n",
      "42": "\n class BaseHandler(abc.ABC): \n",
      "43": "\n class BaseHandler(abc.ABC): \n",
      "44": "\n class BaseHandler(abc.ABC): \n",
      "45": "\n class BaseHandler(abc.ABC): \n",
      "46": "\n class BaseHandler(abc.ABC): \n",
      "47": "\n class BaseHandler(abc.ABC): \n",
      "48": "\n class BaseHandler(abc.ABC): \n",
      "49": "\n class BaseHandler(abc.ABC): \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        unconf_lith_id: int,\n        edges: Array[int, ..., 2],\n        centroids: Dict[int, np.ndarray]\n",
    "target_code": "        unconf_lith_id: int,\n        edges: np.ndarray,\n        centroids: Dict[int, np.ndarray]\n",
    "warning_line": "        edges: Array[int, ..., 2],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `nptyping.Array[(int, ..., 2)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 361,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cgre-aachen/gempy",
    "source_filename": "gempy/assets/topology.py",
    "target_filename": "gempy/assets/topology.py",
    "source_changeid": "a0a4e5bdf417fd13741fd5b29916845f93dc2098^",
    "target_changeid": "a0a4e5bdf417fd13741fd5b29916845f93dc2098",
    "predictions": [
      "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n"
    ],
    "correct": true,
    "top_five": {
      "0": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "1": "unconf_lith_id: int, \n edges: Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "2": "unconf_lith_id: int, \n edges: int, \n centroids: Dict[int, np.ndarray] \n",
      "3": "unconf_lith_id: int, \n edges: Optional[Array[int],..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "4": "unconf_lith_id: int, \n edges: Dict[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "5": "unconf_lith_id: int, \n edges: np.ndarray.Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "6": "unconf_lith_id: int, \n edges: np.ndarray, <IND> centroids: Dict[int, np.ndarray] \n",
      "7": "unconf_lith_id: int, <IND> edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "8": "unconf_lith_id: int, <DED> edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "9": "unconf_lith_id: int, \n edges: str, \n centroids: Dict[int, np.ndarray] \n",
      "10": "unconf_lith_id: int, \n edges: np.ndarray, <DED> centroids: Dict[int, np.ndarray] \n",
      "11": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] <IND>",
      "12": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] <DED>",
      "13": "unconf_lith_id: int, \n edges: Optional[Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "14": "unconf_lith_id: int, \n edges: python.Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "15": "unconf_lith_id: int, \n edges: nptyping.Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "16": "unconf_lith_id: int, \n edges: np.ndarray, { centroids: Dict[int, np.ndarray] \n",
      "17": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] {",
      "18": "unconf_lith_id: int, { edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "19": "unconf_lith_id: int, \n edges: Int, \n centroids: Dict[int, np.ndarray] \n",
      "20": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] }",
      "21": "unconf_lith_id: int, \n edges: np.ndarray, } centroids: Dict[int, np.ndarray] \n",
      "22": "unconf_lith_id: int, } edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "23": "unconf_lith_id: int, \n edges: '', \n centroids: Dict[int, np.ndarray] \n",
      "24": "unconf_lith_id: int, \n edges: List[Array[int],..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "25": "unconf_lith_id: int, \n edges: List[Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "26": "unconf_lith_id: int, \n edges: str(Array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "27": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \\",
      "28": "unconf_lith_id: int, \n edges: np.ndarray, \\ centroids: Dict[int, np.ndarray] \n",
      "29": "unconf_lith_id: int, \\ edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "30": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray]",
      "31": "unconf_lith_id: int, \n edges: array[int,..., 2], \n centroids: Dict[int, np.ndarray] \n",
      "32": "unconf_lith_id: int, \n edges: np.ndarray, centroids: Dict[int, np.ndarray] \n",
      "33": "unconf_lith_id: int, edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "34": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray]",
      "35": "unconf_lith_id: int, \n edges: np.ndarray, centroids: Dict[int, np.ndarray] \n",
      "36": "unconf_lith_id: int, edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "37": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray]",
      "38": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray]",
      "39": "unconf_lith_id: int, \n edges: np.ndarray, centroids: Dict[int, np.ndarray] \n",
      "40": "unconf_lith_id: int, \n edges: np.ndarray, centroids: Dict[int, np.ndarray] \n",
      "41": "unconf_lith_id: int, edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "42": "unconf_lith_id: int, edges: np.ndarray, \n centroids: Dict[int, np.ndarray] \n",
      "43": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray]",
      "44": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray] ^",
      "45": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray]",
      "46": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray]",
      "47": "unconf_lith_id: int, \n edges: np.ndarray, \n centroids: Dict[int, np.ndarray]",
      "48": "unconf_lith_id: int, \n edges: np.ndarray, centroids: Dict[int, np.ndarray] \n",
      "49": "unconf_lith_id: int, \n edges: np.ndarray, ^ centroids: Dict[int, np.ndarray] \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\nRemoteMethod = namedtuple('RemoteMethod',\n                          'method config_section kwargs priority',\n                          verbose=False)\n",
    "target_code": "\nRemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'])\n",
    "warning_line": "                          verbose=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Final[False]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 12,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "missionpinball/mpf",
    "source_filename": "mpf/core/mode_controller.py",
    "target_filename": "mpf/core/mode_controller.py",
    "source_changeid": "15afcda17766968f420d53b885f8eca0cf3b40a7^",
    "target_changeid": "15afcda17766968f420d53b885f8eca0cf3b40a7",
    "predictions": [
      "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "1": "<DED> RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "2": "<IND> RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "3": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'], verbose=False) \n",
      "4": "\n RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', 'kwargs', 'priority') \n",
      "5": "{ RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "6": "} RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "7": "<DED> RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'], verbose=False) \n",
      "8": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) <DED>",
      "9": "<IND> RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'], verbose=False) \n",
      "10": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) <IND>",
      "11": "\\ RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "12": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) {",
      "13": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority'], ['kwargs']) \n",
      "14": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "15": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) }",
      "16": "\n RemoteMethod = namedtuple('RemoteMethod',['method', 'config_section', 'kwargs', 'priority']) \n",
      "17": "<DED> RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', 'kwargs', 'priority') \n",
      "18": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "19": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "20": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "21": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "22": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "23": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "24": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "25": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "26": "^ RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "27": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "28": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "29": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "30": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "31": "\n RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs']) \n",
      "32": "<IND> RemoteMethod = namedtuple('RemoteMethod','method', 'config_section', 'kwargs', 'priority') \n",
      "33": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "34": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "35": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "36": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "37": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "38": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "39": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "40": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "41": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "42": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "43": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "44": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "45": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "46": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "47": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "48": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n",
      "49": "RemoteMethod = namedtuple('RemoteMethod', ['method', 'config_section', 'kwargs', 'priority']) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    completed: ormar.Boolean(default=False)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    completed= ormar.Boolean(default=False)\n\n",
    "warning_line": "    completed: ormar.Boolean(default=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Boolean($parameter$default = False)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 37,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_queryset_level_methods.py",
    "target_filename": "tests/test_queryset_level_methods.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "2": "\n \n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "3": "<DED> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "4": "<IND> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "5": "\n { id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "6": "\n } id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n <IND>",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n <DED>",
      "9": "<DED> <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "10": "\n \\ id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "11": "{ <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "12": "<IND> <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) <DED> text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) <IND> text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) <DED> \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) <IND> \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n {",
      "18": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <DED> completed= ormar.Boolean(default=False) \n \n",
      "20": "} <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <IND> completed= ormar.Boolean(default=False) \n \n",
      "22": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "23": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "24": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "25": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "26": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "27": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "28": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) { text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "30": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "31": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) { \n",
      "33": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) { completed= ormar.Boolean(default=False) \n \n",
      "35": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "43": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "44": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n }",
      "48": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n",
      "49": "\n ^ id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n completed= ormar.Boolean(default=False) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):\n    <IND>",
    "target_code": "      preemptible_tpu: bool = True,\n      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]:\n    <IND>",
    "warning_line": "      tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional(V1Job):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Optional(kubernetes.client.V1Job)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 548,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "google/caliban",
    "source_filename": "caliban/gke/cluster.py",
    "target_filename": "caliban/gke/cluster.py",
    "source_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26^",
    "target_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "predictions": [
      "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>"
    ],
    "correct": true,
    "top_five": {
      "0": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "1": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <DED>",
      "2": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n \n",
      "3": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n {",
      "4": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n }",
      "5": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n \\",
      "6": "preemptible_tpu: bool = True, <IND> tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "7": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "8": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "9": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "10": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: <IND> <IND>",
      "11": "preemptible_tpu: bool = True, <DED> tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "12": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "13": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "14": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: <DED> <IND>",
      "15": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "16": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "17": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "18": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "19": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "20": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "21": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "22": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "23": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "24": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "25": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "26": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "27": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "28": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "29": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "30": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "31": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "32": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "33": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "34": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "35": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "36": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "37": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "38": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "39": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "40": "preemptible_tpu: bool = True, { tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n <IND>",
      "41": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "42": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: { <IND>",
      "43": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "44": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n ^",
      "45": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "46": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "47": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "48": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n",
      "49": "preemptible_tpu: bool = True, \n tpu_driver: str = k.DEFAULT_TPU_DRIVER) -> Optional[V1Job]: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "# pylint: disable=too-few-public-methods\n<DED><DED>class Component(with_metaclass(_Maker, object)):\n    <IND>",
    "target_code": "# pylint: disable=too-few-public-methods\n<DED><DED>class Component(metaclass=_Maker):\n    <IND>",
    "warning_line": "class Component(with_metaclass(_Maker, object)):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `future.utils.with_metaclass(bowtie._component._Maker, object)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 240,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jwkvam/bowtie",
    "source_filename": "bowtie/_component.py",
    "target_filename": "bowtie/_component.py",
    "source_changeid": "34981bc0791798ec6a8261d14d7713b48c3e66a1^",
    "target_changeid": "34981bc0791798ec6a8261d14d7713b48c3e66a1",
    "predictions": [
      "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker, object): \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker, object): \n <IND>",
      "1": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(_Maker, object): \n <IND>",
      "2": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(_Maker, object): \n <IND>",
      "3": "# pylint: disable=too-few-public-methods \n <IND> <IND> class Component(_Maker, object): \n <IND>",
      "4": "# pylint: disable=too-few-public-methods \n \n <DED> class Component(_Maker, object): \n <IND>",
      "5": "# pylint: disable=too-few-public-methods \n <DED> \n class Component(_Maker, object): \n <IND>",
      "6": "# pylint: disable=too-few-public-methods \n \n <IND> class Component(_Maker, object): \n <IND>",
      "7": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=_Maker, object): \n <IND>",
      "8": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker, object): \n <DED>",
      "9": "# pylint: disable=too-few-public-methods \n <IND> \n class Component(_Maker, object): \n <IND>",
      "10": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(metaclass=_Maker, object): \n <IND>",
      "11": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(_Maker, object): \n <DED>",
      "12": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(metaclass=_Maker, object): \n <IND>",
      "13": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker): \n <IND>",
      "14": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(_Maker, object): \n \n",
      "15": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(_Maker, object): \n <DED>",
      "16": "# pylint: disable=too-few-public-methods \n <IND> <IND> class Component(metaclass=_Maker, object): \n <IND>",
      "17": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(_Maker): \n <IND>",
      "18": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(_Maker, object): \n \n",
      "19": "# pylint: disable=too-few-public-methods \n <DED> } class Component(_Maker, object): \n <IND>",
      "20": "# pylint: disable=too-few-public-methods \n <DED> { class Component(_Maker, object): \n <IND>",
      "21": "# pylint: disable=too-few-public-methods \n <IND> <IND> class Component(_Maker, object): \n <DED>",
      "22": "# pylint: disable=too-few-public-methods \n \n \n class Component(_Maker, object): \n <IND>",
      "23": "# pylint: disable=too-few-public-methods \n \n <DED> class Component(metaclass=_Maker, object): \n <IND>",
      "24": "# pylint: disable=too-few-public-methods \n { <DED> class Component(_Maker, object): \n <IND>",
      "25": "# pylint: disable=too-few-public-methods \n } <DED> class Component(_Maker, object): \n <IND>",
      "26": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(_Maker): \n <IND>",
      "27": "# pylint: disable=too-few-public-methods \n <IND> } class Component(_Maker, object): \n <IND>",
      "28": "# pylint: disable=too-few-public-methods \n <DED> <IND> class Component(_Maker, object): \n \n",
      "29": "# pylint: disable=too-few-public-methods \n \n <DED> class Component(_Maker, object): \n <DED>",
      "30": "# pylint: disable=too-few-public-methods \n <IND> { class Component(_Maker, object): \n <IND>",
      "31": "# pylint: disable=too-few-public-methods \n <IND> <IND> class Component(_Maker): \n <IND>",
      "32": "# pylint: disable=too-few-public-methods \n <DED> \n class Component(metaclass=_Maker, object): \n <IND>",
      "33": "# pylint: disable=too-few-public-methods \n <IND> <IND> class Component(_Maker, object): \n \n",
      "34": "# pylint: disable=too-few-public-methods \n \n <IND> class Component(metaclass=_Maker, object): \n <IND>",
      "35": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(with_metaclass=_Maker, object): \n <IND>",
      "36": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=_Maker, object): \n <DED>",
      "37": "# pylint: disable=too-few-public-methods \n { <IND> class Component(_Maker, object): \n <IND>",
      "38": "# pylint: disable=too-few-public-methods \n <DED> \n class Component(_Maker, object): \n <DED>",
      "39": "# pylint: disable=too-few-public-methods \n <IND> \n class Component(metaclass=_Maker, object): \n <IND>",
      "40": "# pylint: disable=too-few-public-methods \n \n <DED> class Component(_Maker): \n <IND>",
      "41": "# pylint: disable=too-few-public-methods \n \n <DED> class Component(_Maker, object): \n \n",
      "42": "# pylint: disable=too-few-public-methods \n } <IND> class Component(_Maker, object): \n <IND>",
      "43": "# pylint: disable=too-few-public-methods \n \n <IND> class Component(_Maker, object): \n <DED>",
      "44": "# pylint: disable=too-few-public-methods \n <IND> <DED> class Component(metaclass=_Maker, object): \n <DED>",
      "45": "# pylint: disable=too-few-public-methods \n <DED> <DED> class Component(metaclass=_Maker): \n <IND>",
      "46": "# pylint: disable=too-few-public-methods \n <IND> \n class Component(_Maker, object): \n <DED>",
      "47": "# pylint: disable=too-few-public-methods \n <DED> \\ class Component(_Maker, object): \n <IND>",
      "48": "# pylint: disable=too-few-public-methods \n \n } class Component(_Maker, object): \n <IND>",
      "49": "# pylint: disable=too-few-public-methods \n \n { class Component(_Maker, object): \n <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": true,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 35,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "docs_src/fastapi/docs001.py",
    "target_filename": "docs_src/fastapi/docs001.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "2": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "3": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "4": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "5": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "6": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED>",
      "9": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "10": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "11": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n",
      "15": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n {",
      "18": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "19": "} <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "20": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "21": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "22": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "23": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "24": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "25": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "26": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "27": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) { name = ormar.String(max_length=100) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) { \n",
      "30": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "31": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "32": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "33": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "35": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "43": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "44": "\n ^ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "47": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "48": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n }"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):\n        <IND>",
    "target_code": "            awaited_messages: typing.Optional[list] = None\n    ) -> typing.Tuple[typing.Optional[bool], typing.Optional[typing.Match]]:\n        <IND>",
    "warning_line": "    ) -> (typing.Optional[bool], typing.Optional[typing.Match]):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `(typing.Optional[bool], typing.Optional[typing.Match])` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "golemfactory/clay",
    "source_filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "target_filename": "scripts/node_integration_tests/playbooks/concent/concent_base.py",
    "source_changeid": "7af4b37a587e7179390f0d24a108365fd0545eb6^",
    "target_changeid": "7af4b37a587e7179390f0d24a108365fd0545eb6",
    "predictions": [
      "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "1": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "2": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <DED>",
      "3": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool]], typing.Optional[typing.Match]]: \n <IND>",
      "4": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <DED>",
      "5": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Match, bool]: \n <IND>",
      "6": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n \n",
      "7": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n \n",
      "8": "awaited_messages: typing.Optional[list[str]] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "9": "awaited_messages: typing.Optional[list[str]] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "10": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool]], typing.Optional[typing.Match]]: \n <DED>",
      "11": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Match, typing.Optional[typing.Match]]: \n <IND>",
      "12": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool]], typing.Optional[typing.Match]): \n <IND>",
      "13": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n }",
      "14": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool]], typing.Optional[typing.Match]): \n <IND>",
      "15": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n {",
      "16": "awaited_messages: typing.Optional[list] = None \n ) -> T.Optional[typing.Match]: \n <IND>",
      "17": "awaited_messages: typing.Optional[list[e]] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "18": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.False, typing.Optional[typing.Match]]: \n <IND>",
      "19": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n }",
      "20": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n {",
      "21": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool]], typing.Optional[typing.Match]]: \n \n",
      "22": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Match, Optional[typing.Match]]: \n <IND>",
      "23": "awaited_messages: typing.Optional[list[e]] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <IND>",
      "24": "awaited_messages: typing.Optional[list] = None \n ) -> List[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "25": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Match, bool]: \n <DED>",
      "26": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Match, Optional[typing.Optional[bool]]: \n <IND>",
      "27": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Set[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "28": "awaited_messages: typing.Optional[list] = None \n ) -> List[typing.Optional[bool]], typing.Optional[typing.Match]]: \n <IND>",
      "29": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n \\",
      "30": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.False], typing.Optional[typing.Match]]: \n <IND>",
      "31": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], Typing.Optional[typing.Match]]: \n <IND>",
      "32": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Complete[typing.Optional[bool]], typing.Optional[typing.Match]]: \n <IND>",
      "33": "awaited_messages: typing.Optional[list[str]] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <DED>",
      "34": "awaited_messages: typing.Optional[list[str]] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n <DED>",
      "35": "awaited_messages: typing.Optional[list[str]] = None \n ) -> Tuple[typing.Optional[bool]], typing.Optional[typing.Match]]: \n <IND>",
      "36": "awaited_messages: typing.Optional[list] = None \n ) -> (typing.Optional[bool], typing.Optional[typing.Match]): \n \\",
      "37": "awaited_messages: typing.Optional[list] = None <DED> ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "38": "awaited_messages: typing.Optional[list] = None <IND> ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "39": "awaited_messages: typing.Optional[list[None]] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n <IND>",
      "40": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.ForeignKey], typing.Optional[typing.Match]]: \n <IND>",
      "41": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n",
      "42": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Match, bool]: \n \n",
      "43": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n",
      "44": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n",
      "45": "awaited_messages: typing.Optional[list] = None \n ) -> bool: \n <IND>",
      "46": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n",
      "47": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: <IND> <IND>",
      "48": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Bad, typing.Optional[typing.Match]]: \n <IND>",
      "49": "awaited_messages: typing.Optional[list] = None \n ) -> Tuple[typing.Optional[bool], typing.Optional[typing.Match]]: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True, autoincrement=False)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True, autoincrement=False)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True, autoincrement=False)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True, $parameter$autoincrement = False)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 20,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_same_table_joins.py",
    "target_filename": "tests/test_more_same_table_joins.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "2": "\n \n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "3": "<DED> <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "4": "<IND> <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "5": "\n { id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "6": "\n } id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <IND>",
      "8": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n <DED>",
      "9": "\n \\ id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "10": "<DED> <IND> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "11": "{ <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) <DED> name = ormar.String(max_length=100) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) <IND> name = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) <DED> \n",
      "15": "<IND> <IND> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) <IND> \n",
      "17": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n {",
      "19": "} <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "20": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "21": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "22": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "23": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "24": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "25": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "26": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "27": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "28": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) { \n",
      "30": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "31": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) { name = ormar.String(max_length=100) \n \n",
      "32": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "33": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "35": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "43": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "44": "\n ^ id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n }",
      "48": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n",
      "49": "\n id = ormar.Integer(primary_key=True, autoincrement=False) \n name = ormar.String(max_length=100) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>@staticmethod\n    def center(a: [\"Point2\"]) -> \"Point2\":\n        <IND>\"\"\" Returns the central point for points in list \"\"\"\n",
    "target_code": "    <DED>@staticmethod\n    def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\":\n        <IND>\"\"\" Returns the central point for points in list \"\"\"\n",
    "warning_line": "    def center(a: [\"Point2\"]) -> \"Point2\":",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[sc2.position.Point2]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 240,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "BurnySc2/python-sc2",
    "source_filename": "sc2/position.py",
    "target_filename": "sc2/position.py",
    "source_changeid": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53^",
    "target_changeid": "3ab17dfc68eeaa3aabbd00a02241908d6e77cf53",
    "predictions": [
      "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "1": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "2": "<IND> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "3": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "4": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "5": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "6": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "7": "<IND> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "8": "<IND> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "9": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n \n \"\"\" Returns the central point for points in list \"\"\" \n",
      "10": "\n @staticmethod \n def center(a: Union[List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "11": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"]], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "12": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n \n \"\"\" Returns the central point for points in list \"\"\" \n",
      "13": "<DED> @staticmethod \n def center(a: Union[List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "14": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "15": "{ @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "16": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"]], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "17": "} @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "18": "<IND> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n \n \"\"\" Returns the central point for points in list \"\"\" \n",
      "19": "<IND> @staticmethod \n def center(a: Union[List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "20": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]], -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "21": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "22": "<IND> @staticmethod \n def center(a: Union[Set[\"Point2\"]], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "23": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n } \"\"\" Returns the central point for points in list \"\"\" \n",
      "24": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n { \"\"\" Returns the central point for points in list \"\"\" \n",
      "25": "\n @staticmethod \n def center(a: Union[Mapping[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "26": "\n @staticmethod \n def center(a: Union[Set[\"Point2\", List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "27": "\n @staticmethod \n def center(a: Union[List[\"Point2\"], List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "28": "<IND> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "29": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "30": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]], -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "31": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n } \"\"\" Returns the central point for points in list \"\"\" \n",
      "32": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n { \"\"\" Returns the central point for points in list \"\"\" \n",
      "33": "<DED> @staticmethod \n def center(a: Union[Mapping[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "34": "\n @staticmethod \n def center(a: Union[Set[\"Point2\", List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "35": "\n @staticmethod \n def center(a: Union[List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "36": "\\ @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "37": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"]], List[\"Point2\"]]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "38": "<IND> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]], -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "39": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "40": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n \\ \"\"\" Returns the central point for points in list \"\"\" \n",
      "41": "<IND> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n } \"\"\" Returns the central point for points in list \"\"\" \n",
      "42": "<IND> @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n { \"\"\" Returns the central point for points in list \"\"\" \n",
      "43": "<IND> @staticmethod \n def center(a: Union[Mapping[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "44": "<DED> @staticmethod \n def center(a: Union[Set[\"Point2\", List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "45": "<DED> @staticmethod \n def center(a: Union[List[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <DED> \"\"\" Returns the central point for points in list \"\"\" \n",
      "46": "\n @staticmethod <DED> def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "47": "\n @staticmethod <IND> def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "48": "@staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" \n",
      "49": "\n @staticmethod \n def center(a: Union[Set[\"Point2\"], List[\"Point2\"]]) -> \"Point2\": \n <IND> \"\"\" Returns the central point for points in list \"\"\" <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    name: ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 49,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "2": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "3": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "4": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "5": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "6": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "7": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "8": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "9": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "10": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "11": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "12": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "13": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "15": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "17": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "19": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "21": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "22": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "23": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "24": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <DED> \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "31": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "32": "} <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "33": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "34": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n {",
      "35": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "38": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "40": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "42": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <DED> \n",
      "43": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "44": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "48": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "49": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    name: ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 100)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 16,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "docs_src/fields/docs003.py",
    "target_filename": "docs_src/fields/docs003.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "2": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "3": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "4": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "5": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "6": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED>",
      "9": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "10": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "11": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "16": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "17": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n {",
      "19": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "20": "} <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "21": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "22": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "23": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "24": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "25": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) { \n",
      "27": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "28": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "29": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) { name = ormar.String(max_length=100) \n \n",
      "31": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "32": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "33": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "35": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "42": "\n ^ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "43": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "44": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n }",
      "48": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "49": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def predict(self, X: np.ndarray) -> np.ndarray():\n        <IND>return np.array([1, 2, 1])\n\n    <DED>def predict_proba(self, X: np.ndarray) -> np.ndarray():\n        <IND>if np.max(X) <= 2:\n",
    "target_code": "\n    <DED>def predict(self, X: np.ndarray) -> np.ndarray:\n        <IND>return np.array([1, 2, 1])\n\n    <DED>def predict_proba(self, X: np.ndarray) -> np.ndarray:\n        <IND>if np.max(X) <= 2:\n",
    "warning_line": "    def predict(self, X: np.ndarray) -> np.ndarray():",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `np.ndarray()` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 116,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "scikit-learn-contrib/MAPIE",
    "source_filename": "mapie/tests/test_classification.py",
    "target_filename": "mapie/tests/test_classification.py",
    "source_changeid": "8ffdc639645c54503ea4387c2a0d8e38e317305f^",
    "target_changeid": "8ffdc639645c54503ea4387c2a0d8e38e317305f",
    "predictions": [
      "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "1": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "2": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "3": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "4": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "5": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "6": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "7": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "8": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "9": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "10": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "11": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "12": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "13": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "14": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "15": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n \n def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "16": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> \n def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "17": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> \n def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "18": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "19": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "20": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "21": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "22": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "23": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "24": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n \n <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "25": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n <DED> <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "26": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n \n if np.max(X) = 2: \n",
      "27": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n \n if np.max(X) = 2: \n",
      "28": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n <IND> <IND> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "29": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n { <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "30": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n \n if np.max(X) = 2: \n",
      "31": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n \n return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "32": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "33": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n \n return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "34": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n } <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "35": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "36": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n \n return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "37": "\n \n def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "38": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "39": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "40": "\n \n def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "41": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "42": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "43": "<DED> <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "44": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "45": "<DED> <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <DED> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "46": "\n \n def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n",
      "47": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "48": "\n <DED> def predict(self, X: np.ndarray) -> np.ndarray: \n <IND> return np.array([1, 2, 1]) \n \n \n def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <DED> if np.max(X) = 2: \n",
      "49": "\n <IND> def predict(self, X: np.ndarray) -> np.ndarray: \n <DED> return np.array([1, 2, 1]) \n <IND> <DED> def predict_proba(self, X: np.ndarray) -> np.ndarray: \n <IND> if np.max(X) = 2: \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):\n    <IND>tmp, thisPart = \"\", \"\"\n",
    "target_code": "\n<DED>def __decryptPart(\n    messagePart: str, character2Number: dict[str, str]\n) -> tuple[str, str, str]:\n    <IND>tmp, thisPart = \"\", \"\"\n",
    "warning_line": "def __decryptPart(messagePart: str, character2Number: dict) -> (str, str, str):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `(str, str, str)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 19,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "TheAlgorithms/Python",
    "source_filename": "ciphers/trafid_cipher.py",
    "target_filename": "ciphers/trafid_cipher.py",
    "source_changeid": "60895366c0f50844af2737130ed98c2510e90060^",
    "target_changeid": "60895366c0f50844af2737130ed98c2510e90060",
    "predictions": [
      "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "1": "\n <IND> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "2": "\n <DED> def __decryptPart( <DED> messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "3": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <DED> tmp, thisPart = \"\", \"\" \n",
      "4": "\n <DED> def __decryptPart( <IND> messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "5": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str], [str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "6": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str], [str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "7": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str], Tuple[str, str, str]]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "8": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: str \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "9": "\n <DED> def __decryptPart( { messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "10": "\n <DED> def __decryptPart(messagePart: str, character2Number: dict) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "11": "\n <DED> def __decryptPart( } messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "12": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str,...]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "13": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str],... \n \n tmp, thisPart = \"\", \"\" \n",
      "14": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n \n tmp, thisPart = \"\", \"\" \n",
      "15": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str], tuple[str, str]]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "16": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> tmp: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "17": "\n \n def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "18": "\n <DED> def __decryptPart( \\ messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "19": "\n <IND> def __decryptPart( <DED> messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "20": "\n <IND> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <DED> tmp, thisPart = \"\", \"\" \n",
      "21": "\n <DED> def __decryptPart( <DED> messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <DED> tmp, thisPart = \"\", \"\" \n",
      "22": "\n <DED> def __decryptPart( \n messagesPart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "23": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "24": "\n <IND> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str], [str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "25": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "26": "\n <DED> def __decryptPart( <DED> messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str], [str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "27": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str], Tuple[str, str, str]]: \n <DED> tmp, thisPart = \"\", \"\" \n",
      "28": "\n <IND> def __decryptPart( <IND> messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "29": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str], [str, str]: \n <DED> tmp, thisPart = \"\", \"\" \n",
      "30": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "31": "\n <DED> def __decryptPart( <IND> messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <DED> tmp, thisPart = \"\", \"\" \n",
      "32": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "33": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "34": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "35": "\n <DED> def __decryptPart( ^ messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "36": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "37": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "38": "<DED> <DED> def __decryptPart( \n messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "39": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "40": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "41": "\n <DED> def __decryptPart( \n messagePart: str, character2Number: dict <IND> ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "42": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "43": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "44": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "45": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "46": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "47": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "48": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n",
      "49": "\n <DED> def __decryptPart( messagePart: str, character2Number: dict \n ) -> Tuple[str, str, str]: \n <IND> tmp, thisPart = \"\", \"\" \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    text: ormar.String(max_length=500)\n    category: ormar.ForeignKey(Category)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    text = ormar.String(max_length=500)\n    category= ormar.ForeignKey(Category)\n\n",
    "warning_line": "    category: ormar.ForeignKey(Category)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.ForeignKey(tests.test_queryset_level_methods.Category)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 58,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_queryset_level_methods.py",
    "target_filename": "tests/test_queryset_level_methods.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "2": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "3": "\n <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "4": "\n \n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "5": "\n \n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "6": "<DED> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "7": "<DED> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "8": "<IND> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "9": "<IND> <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "10": "\n { id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "11": "\n } id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "12": "\n { id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "13": "\n } id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n <IND>",
      "15": "<DED> <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n <DED>",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n <IND>",
      "18": "\n \\ id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n <DED>",
      "20": "<DED> <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "21": "\n \\ id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "22": "{ <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "23": "<IND> <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "24": "{ <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n text= ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "26": "<IND> <IND> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) <DED> text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) <DED> \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) <IND> text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) <IND> \n",
      "31": "} <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <IND> category = ormar.ForeignKey(Category) \n \n",
      "33": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <DED> category = ormar.ForeignKey(Category) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "35": "\n <DED> id = ormar.Integer(primary_key=True) <DED> text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "36": "\n <DED> id = ormar.Integer(primary_key=True) <IND> text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "37": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) <DED> \n",
      "38": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n {",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) <IND> \n",
      "40": "} <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "43": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "44": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category= ormar.ForeignKey(Category) \n \n",
      "46": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <IND> category= ormar.ForeignKey(Category) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) <DED> category= ormar.ForeignKey(Category) \n \n",
      "48": "\n id = ormar.Integer(primary_key=True) \n text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) { text = ormar.String(max_length=500) \n category = ormar.ForeignKey(Category) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    category: ormar.ForeignKey(Category, nullable=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.ForeignKey(tests.test_fastapi_usage.Category, $parameter$nullable = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_fastapi_usage.py",
    "target_filename": "tests/test_fastapi_usage.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "2": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "3": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "4": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "5": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "6": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "7": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "8": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "9": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "10": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "11": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "12": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "14": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "16": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "17": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "18": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "19": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "23": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <DED> \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "27": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "28": "} <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "30": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "31": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n {",
      "33": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "35": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "41": "\n <DED> id = ormar.Integer(primary_key=True) { name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "43": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "44": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) { \n",
      "45": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) { category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "47": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "48": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "49": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.String(primary_key=True, default=key, max_length=8)\n    name: ormar.String(max_length=32)\n\n",
    "target_code": "\n    <DED>id = ormar.String(primary_key=True, default=key, max_length=8)\n    name = ormar.String(max_length=32)\n\n",
    "warning_line": "    id: ormar.String(primary_key=True, default=key, max_length=8)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$primary_key = True, $parameter$default = tests.test_non_integer_pkey.key, $parameter$max_length = 8)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 24,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_non_integer_pkey.py",
    "target_filename": "tests/test_non_integer_pkey.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "1": "\n <IND> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "2": "\n \n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "3": "<DED> <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "4": "<IND> <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "5": "\n { id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "6": "\n } id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "7": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <IND>",
      "8": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n <DED>",
      "9": "\n \\ id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "10": "<DED> <IND> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "11": "{ <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "12": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) <IND> name = ormar.String(max_length=32) \n \n",
      "13": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) <DED> \n",
      "14": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) <DED> name = ormar.String(max_length=32) \n \n",
      "15": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) <IND> \n",
      "16": "<IND> <IND> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "17": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "18": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n {",
      "19": "} <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "20": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "21": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "22": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "23": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "24": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "25": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "26": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "27": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "28": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "29": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) { \n",
      "30": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "31": "\n <DED> id = ormar.String(primary_key=True, default=key, max_length=8) { name = ormar.String(max_length=32) \n \n",
      "32": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "33": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "34": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "35": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "36": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "37": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "38": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "39": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "40": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "41": "\n ^ id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "42": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "43": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "44": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "45": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "46": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "47": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "48": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n",
      "49": "\n id = ormar.String(primary_key=True, default=key, max_length=8) \n name = ormar.String(max_length=32) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional(List[str]) = None,\n      args: Optional[List[str]] = None,\n",
    "target_code": "      experiments: Iterable[conf.Experiment],\n      command: Optional[List[str]] = None,\n      args: Optional[List[str]] = None,\n",
    "warning_line": "      command: Optional(List[str]) = None,",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Optional(typing.List[str])` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 687,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "google/caliban",
    "source_filename": "caliban/gke/cluster.py",
    "target_filename": "caliban/gke/cluster.py",
    "source_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26^",
    "target_changeid": "4bf818763b94c83a0dc9efad566d5e15e1002f26",
    "predictions": [
      "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "1": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "2": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Iterable[List[str]] = None, \n",
      "3": "experiments: Iterable[conf.Experiment], \n command: Iterable[list[str]] = None, \n args: Optional[List[str]] = None, \n",
      "4": "experiment: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "5": "experiment: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "6": "experiments: Iterable[conf.Experiment], <DED> command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "7": "experiments: Iterable[conf.Experiment], <IND> command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "8": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, <IND> args: Optional[List[str]] = None, \n",
      "9": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, <DED> args: Optional[List[str]] = None, \n",
      "10": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, <IND>",
      "11": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, <DED>",
      "12": "experiments: Iterable[conf.Experiment], \n command: Iterable[str] = None, \n args: Optional[List[str]] = None, \n",
      "13": "experiments: Iterable[conf.Experiment], { command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "14": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, { args: Optional[List[str]] = None, \n",
      "15": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, {",
      "16": "experiments: Iterable[conf.Experiment], <DED> command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "17": "experiments: Iterable[conf.Experiment], <IND> command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "18": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, <IND> args: Optional[List[str]] = None, \n",
      "19": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, <DED> args: Optional[List[str]] = None, \n",
      "20": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, <IND>",
      "21": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, <DED>",
      "22": "experiments: Iterable[conf.Experiment], \n command: Iterable[str, Iterable[str]] = None, \n args: Optional[List[str]] = None, \n",
      "23": "experiments: Iterable[conf.Experiment], } command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "24": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, }",
      "25": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, } args: Optional[List[str]] = None, \n",
      "26": "experiments: Iterable[conf.Experiment], { command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "27": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, { args: Optional[List[str]] = None, \n",
      "28": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, {",
      "29": "experiments: Iterable[conf.Experiment], \n command: Iterable[str, List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "30": "experiments: Iterable[conf.Experiment], } command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "31": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, \n args: Optional[List[str]] = None, }",
      "32": "experiments: Iterable[conf.Experiment], \n command: Optional[List[str]] = None, } args: Optional[List[str]] = None, \n",
      "33": "experiments: Iterable[conf.Experiment], \\ command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "34": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \\",
      "35": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \\ args: Optional[List[str]] = None, \n",
      "36": "experiments: Iterable[conf.Experiment], command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "37": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, args: Optional[List[str]] = None, \n",
      "38": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None,",
      "39": "experiments: Iterable[conf.Experiment], command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "40": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None,",
      "41": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, args: Optional[List[str]] = None, \n",
      "42": "experiments: Iterable[conf.Experiment], \n command = None, \n args: Optional[List[str]] = None, \n",
      "43": "experiments: Iterable[conf.Experiment], command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "44": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None,",
      "45": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, args: Optional[List[str]] = None, \n",
      "46": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None,",
      "47": "experiments: Iterable[conf.Experiment], command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None, \n",
      "48": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, args: Optional[List[str]] = None, \n",
      "49": "experiments: Iterable[conf.Experiment], \n command: Iterable[List[str]] = None, \n args: Optional[List[str]] = None,"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    <DED>def setMetaData(self, metadata: Dict[str: Any]) -> None:\n        <IND>self._metadata = metadata\n\n    <DED>def getMetaData(self) -> Dict[str: Any]:\n        <IND>return self._metadata\n",
    "target_code": "    #   The metadata of the plugin is set at the moment it is loaded.\n    <DED>def setMetaData(self, metadata: Dict[str, Any]) -> None:\n        <IND>self._metadata = metadata\n\n    <DED>def getMetaData(self) -> Dict[str, Any]:\n        <IND>return self._metadata\n",
    "warning_line": "    def setMetaData(self, metadata: Dict[str: Any]) -> None:",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Dict[slice(str, typing.Any, None)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 31,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Uranium",
    "source_filename": "UM/PluginObject.py",
    "target_filename": "UM/PluginObject.py",
    "source_changeid": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9^",
    "target_changeid": "d9fc6e5b837c9e455031255f8c6b90a74812bfd9",
    "predictions": [
      "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "1": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "2": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "3": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "4": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "5": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "6": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n \n def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "7": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <IND> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "8": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "9": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n \n def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "10": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <IND> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "11": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "12": "# The metadata of the plugin is set at the moment it is loaded. \n \n def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "13": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "14": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "15": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "16": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "17": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <IND> <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "18": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "19": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <IND> <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "20": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n \n return self._metadata \n",
      "21": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "22": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n \n return self._metadata \n",
      "23": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> \n def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "24": "# The metadata of the plugin is set at the moment it is loaded. \n \n def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "25": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "26": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> <DED> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "27": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> \n def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "28": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <IND> \n def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "29": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "30": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> <DED> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "31": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n \n self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "32": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n \n def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "33": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <IND> <DED> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "34": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <IND> \n def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "35": "# The metadata of the plugin is set at the moment it is loaded. \n \n def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <DED> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "36": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n \n self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "37": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n \n def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "38": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <IND> <DED> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "39": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n <DED> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "40": "# The metadata of the plugin is set at the moment it is loaded. \n \n def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n \n def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "41": "# The metadata of the plugin is set at the moment it is loaded. \n \n def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n <IND> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "42": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n <DED> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "43": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n \n \n def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "44": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n <IND> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "45": "# The metadata of the plugin is set at the moment it is loaded. \n \n def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "46": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <IND> self._metadata = metadata \n \n <IND> def getMetaData(self) -> Dict[str, Any]: \n \n return self._metadata \n",
      "47": "# The metadata of the plugin is set at the moment it is loaded. \n <IND> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n \n <DED> def getMetaData(self) -> Dict[str, Any]: \n <DED> return self._metadata \n",
      "48": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n \n \n def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n",
      "49": "# The metadata of the plugin is set at the moment it is loaded. \n <DED> def setMetaData(self, metadata: Dict[str, Any]) -> None: \n <DED> self._metadata = metadata \n <IND> <DED> def getMetaData(self) -> Dict[str, Any]: \n <IND> return self._metadata \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self,\n        plane: [str, Plane],\n        actors=None,\n",
    "target_code": "        self,\n        plane,\n        actors=None,\n",
    "warning_line": "        plane: [str, Plane],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[str, vedo.Plane]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 336,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "brainglobe/brainrender",
    "source_filename": "brainrender/scene.py",
    "target_filename": "brainrender/scene.py",
    "source_changeid": "43874da26cfb07b286c8002d093f903c5c4b4ed6^",
    "target_changeid": "43874da26cfb07b286c8002d093f903c5c4b4ed6",
    "predictions": [
      "self, \n plane: List[str, Plane], \n actors=None, \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self, \n plane: List[str, Plane], \n actors=None, \n",
      "1": "self, \n plane: [str, Plane], \n actors=None, \n",
      "2": "self, \n plane: List[str, vedo.Plane], \n actors=None, \n",
      "3": "self, \n plane: vedo.Plane, \n actors=None, \n",
      "4": "self, \n plane: Union[str, vedo.Plane], \n actors=None, \n",
      "5": "self, \n plane: Union[str, Plane], \n actors=None, \n",
      "6": "self, \n plane: Optional[str, Plane] = None, \n actors=None, \n",
      "7": "self, \n plane: list[str, Plane], \n actors=None, \n",
      "8": "self, \n plane: [str, vedo.Plane], \n actors=None, \n",
      "9": "self, \n plane: typing.Optional[str, Plane], \n actors=None, \n",
      "10": "self, \n plane: str, Plane], \n actors=None, \n",
      "11": "self, \n plane: typing.Optional[str], Plane], \n actors=None, \n",
      "12": "self, \n plane: Optional[str] = None, \n actors=None, \n",
      "13": "self, \n plane, \n actors=None, \n",
      "14": "self, \n plane: typing.Optional[str, Plane]], \n actors=None, \n",
      "15": "self, \n plane: list[str, vedo.Plane], \n actors=None, \n",
      "16": "self, \n plane: Type[str, Plane], \n actors=None, \n",
      "17": "self, \n plane: Optional[List[str, Plane]] = None, \n actors=None, \n",
      "18": "self, \n plane: Type[str, vedo.Plane], \n actors=None, \n",
      "19": "self, \n plane: Optional[str, Plane], \n actors=None, \n",
      "20": "self, \n plane: Tuple[str, vedo.Plane], \n actors=None, \n",
      "21": "self, \n plane: List[str], Plane], \n actors=None, \n",
      "22": "self, \n plane: typing.Optional[str] = [str, Plane], \n actors=None, \n",
      "23": "self, \n plane: List[str, vedo.Plane]], \n actors=None, \n",
      "24": "self, \n plane: Optional[List[str, Plane]], \n actors=None, \n",
      "25": "self, \n plane: List[List[str, Plane]], \n actors=None, \n",
      "26": "self, \n plane: Map[str, Plane], \n actors=None, \n",
      "27": "self, \n plane: List[str, Plane]], \n actors=None, \n",
      "28": "self, \n plane: Union[str, vedo.Plane] = None, \n actors=None, \n",
      "29": "self, \n plane: Union[Mapping[str, Plane], \n actors=None, \n",
      "30": "self, \n plane: typing.Optional[str] = [] \n actors=None, \n",
      "31": "self, \n plane: Set[str, Plane], \n actors=None, \n",
      "32": "self, \n plane: Optional[Mapping[str, Plane], \n actors=None, \n",
      "33": "self, \n plane: Optional[Plane] = None, \n actors=None, \n",
      "34": "self, \n plane: Schedule[str, Plane], \n actors=None, \n",
      "35": "self, \n plane: List[str, [Plane], \n actors=None, \n",
      "36": "self, <DED> plane: List[str, Plane], \n actors=None, \n",
      "37": "self, <IND> plane: List[str, Plane], \n actors=None, \n",
      "38": "self, \n plane: Optional[str], \n actors=None, \n",
      "39": "self, \n plane: List[str, vedo.Plane], \n actors=None, <DED>",
      "40": "self, \n plane: List[str, vedo.Plane], \n actors=None, <IND>",
      "41": "self, \n plane: List[str, Plane], <IND> actors=None, \n",
      "42": "self, \n plane: List[str, Plane], \n actors=None, <DED>",
      "43": "self, \n plane: List[str, Plane], \n actors=None, <IND>",
      "44": "self, \n plane: List[str, Plane], <DED> actors=None, \n",
      "45": "self, \n plane: Union[List, str], Plane], \n actors=None, \n",
      "46": "self, \n plane: Tuple[str, Plane], \n actors=None, \n",
      "47": "self, \n plane: str, Plane, \n actors=None, \n",
      "48": "self, \n plane: Union[Str, Plane], \n actors=None, \n",
      "49": "self, \n plane: List[str, Plane] = [] \n actors=None, \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": true,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n    category: ormar.ForeignKey(Category, nullable=True)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n    category = ormar.ForeignKey(Category, nullable=True)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 48,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "2": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "3": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "4": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "5": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "6": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "7": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "8": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "9": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "10": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "11": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "12": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "15": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "16": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "17": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "18": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <DED> \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) <IND> \n",
      "25": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "26": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <IND>",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n <DED>",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n {",
      "30": "} <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "31": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n",
      "32": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "33": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "35": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) { name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "41": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) { category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "42": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) { \n",
      "43": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "44": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "47": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "48": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category= ormar.ForeignKey(Category, nullable=True) \n \n",
      "49": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n category = ormar.ForeignKey(Category, nullable=True) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        text: Optional[Text],\n        sender_id: [Optional[Text]],\n        metadata: Optional[Dict],\n",
    "target_code": "        text: Optional[Text],\n        sender_id: Optional[Text],\n        metadata: Optional[Dict],\n",
    "warning_line": "        sender_id: [Optional[Text]],",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `[typing.Optional[typing.Text]]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 78,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/core/channels/webexteams.py",
    "target_filename": "rasa/core/channels/webexteams.py",
    "source_changeid": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2^",
    "target_changeid": "d4b8f1a989e95044bf7a44139bc74aba9d05f9b2",
    "predictions": [
      "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict], \n"
    ],
    "correct": true,
    "top_five": {
      "0": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "1": "text: Optional[Text], \n sender_id: Optional[Text]], \n metadata: Optional[Dict], \n",
      "2": "text: Optional[Text], \n sender_id: Optional[Text]), \n metadata: Optional[Dict], \n",
      "3": "text: Optional[Text], <DED> sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "4": "text: Optional[Text], <IND> sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "5": "text: Optional[Text], \n sender_id: Optional[Text], <IND> metadata: Optional[Dict], \n",
      "6": "text: Optional[Text], \n sender_id: Optional[Text], <DED> metadata: Optional[Dict], \n",
      "7": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict], <IND>",
      "8": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict], <DED>",
      "9": "text: Optional[Text], \n sender_id: Optional[Text], { metadata: Optional[Dict], \n",
      "10": "text: Optional[Text], { sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "11": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict], {",
      "12": "text: Optional[Text], <IND> sender_id: Optional[Text]], \n metadata: Optional[Dict], \n",
      "13": "text: Optional[Text], <DED> sender_id: Optional[Text]], \n metadata: Optional[Dict], \n",
      "14": "text: Optional[Text], \n sender_id: Optional[Text]], <IND> metadata: Optional[Dict], \n",
      "15": "text: Optional[Text], \n sender_id: Optional[Text]], <DED> metadata: Optional[Dict], \n",
      "16": "text: Optional[Text], \n sender_id: Optional[Optional[Text]], \n metadata: Optional[Dict], \n",
      "17": "text: Optional[Text], \n sender_id: Optional[Text]], \n metadata: Optional[Dict], <IND>",
      "18": "text: Optional[Text], \n sender_id: Optional[Text]], \n metadata: Optional[Dict], <DED>",
      "19": "text: Optional[Text], \n sender_id: Optional[Text], } metadata: Optional[Dict], \n",
      "20": "text: Optional[Text], } sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "21": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict], }",
      "22": "text: Optional[Text], \n sender_id: Optional[Text]], { metadata: Optional[Dict], \n",
      "23": "text: Optional[Text], { sender_id: Optional[Text]], \n metadata: Optional[Dict], \n",
      "24": "text: Optional[Text], \n sender_id: Optional[Text]], \n metadata: Optional[Dict], {",
      "25": "text: Optional[Text], } sender_id: Optional[Text]], \n metadata: Optional[Dict], \n",
      "26": "text: Optional[Text], \n sender_id: Optional[Text]], } metadata: Optional[Dict], \n",
      "27": "text: Optional[Text], \n sender_id: Optional[Text]], \n metadata: Optional[Dict], }",
      "28": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict], \\",
      "29": "text: Optional[Text], \\ sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "30": "text: Optional[Text], \n sender_id: Optional[Text], \\ metadata: Optional[Dict], \n",
      "31": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict],",
      "32": "text: Optional[Text], sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "33": "text: Optional[Text], \n sender_id: Optional[Text], metadata: Optional[Dict], \n",
      "34": "text: Optional[Text], \n sender_id: Optional[Text], metadata: Optional[Dict], \n",
      "35": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict],",
      "36": "text: Optional[Text], sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "37": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict],",
      "38": "text: Optional[Text], \n sender_id: Optional[Text], metadata: Optional[Dict], \n",
      "39": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict],",
      "40": "text: Optional[Text], \n sender_id: Optional[Text]], \n metadata: Optional[Dict], \\",
      "41": "text: Optional[Text], sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "42": "text: Optional[Text], \n sender_id: Optional[Text], metadata: Optional[Dict], \n",
      "43": "text: Optional[Text], sender_id: Optional[Text], \n metadata: Optional[Dict], \n",
      "44": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict],",
      "45": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict],",
      "46": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict],",
      "47": "text: Optional[Text], \n sender_id: Optional[Text], metadata: Optional[Dict], \n",
      "48": "text: Optional[Text], \n sender_id: Optional[Text], metadata: Optional[Dict], \n",
      "49": "text: Optional[Text], \n sender_id: Optional[Text], \n metadata: Optional[Dict],"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n<DED>def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):\n    <IND>magic = pi * sqrt(2) / smoothing\n",
    "target_code": "\n<DED>def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Series:\n    <IND>magic = pi * sqrt(2) / smoothing\n",
    "warning_line": "def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series):",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `type(pandas.Series)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 16,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "freqtrade/freqtrade",
    "source_filename": "freqtrade/indicator_helpers.py",
    "target_filename": "freqtrade/indicator_helpers.py",
    "source_changeid": "88755fcded808c2c094b6ee317affbcd1894bf7c^",
    "target_changeid": "88755fcded808c2c094b6ee317affbcd1894bf7c",
    "predictions": [
      "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "1": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "2": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <DED> magic = pi * sqrt(2) / smoothing \n",
      "3": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n \n magic = pi * sqrt(2) / smoothing \n",
      "4": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <DED> magic = pi * sqrt(2) / smoothing \n",
      "5": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "6": "\n \n def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "7": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "8": "<DED> <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "9": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n { magic = pi * sqrt(2) / smoothing \n",
      "10": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n } magic = pi * sqrt(2) / smoothing \n",
      "11": "<IND> <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "12": "\n { def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "13": "\n } def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "14": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "15": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n \n magic = pi * sqrt(2) / smoothing \n",
      "16": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type(Series): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "17": "\n \n def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <DED> magic = pi * sqrt(2) / smoothing \n",
      "18": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n \\ magic = pi * sqrt(2) / smoothing \n",
      "19": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <DED> magic = pi * sqrt(2) / smoothing \n",
      "20": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6): \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "21": "\n \\ def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "22": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "23": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> Type[Series]: \n <DED> magic = pi * sqrt(2) / smoothing \n",
      "24": "{ <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "25": "<DED> <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "26": "<DED> <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <DED> magic = pi * sqrt(2) / smoothing \n",
      "27": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing <IND>",
      "28": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: <IND> <IND> magic = pi * sqrt(2) / smoothing \n",
      "29": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing <DED>",
      "30": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "31": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "32": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "33": "\n def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "34": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "35": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: <DED> <IND> magic = pi * sqrt(2) / smoothing \n",
      "36": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "37": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "38": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "39": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n { magic = pi * sqrt(2) / smoothing \n",
      "40": "\n <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n } magic = pi * sqrt(2) / smoothing \n",
      "41": "<IND> <IND> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "42": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "43": "\n def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "44": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "45": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "46": "<IND> <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <DED> magic = pi * sqrt(2) / smoothing \n",
      "47": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n",
      "48": "\n def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n <IND> magic = pi * sqrt(2) / smoothing \n",
      "49": "\n <DED> def ehlers_super_smoother(series: Series, smoothing: float = 6) -> type[Series]: \n magic = pi * sqrt(2) / smoothing \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    album: ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title: ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    album = ormar.ForeignKey(Album, related_name=\"cover_pictures\")\n    title = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 41,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_foreign_keys.py",
    "target_filename": "tests/test_foreign_keys.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "2": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "3": "\n \n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "4": "\n <IND> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "5": "<DED> <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "6": "\n <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n \n",
      "7": "<IND> <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "8": "\n { id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "9": "\n } id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "10": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n <IND>",
      "11": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n <DED>",
      "12": "\n \\ id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "13": "\n \n id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "14": "<DED> <IND> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "15": "{ <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") <IND> title = ormar.String(max_length=100) \n \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") <DED> title = ormar.String(max_length=100) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) <DED> album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) <DED> \n",
      "20": "\n <DED> id = ormar.Integer(primary_key=True) <IND> album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) <IND> \n",
      "22": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "23": "\n <IND> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title= ormar.String(max_length=100) \n \n",
      "24": "<IND> <IND> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n {",
      "26": "} <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "27": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "28": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "29": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "30": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "31": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "32": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "33": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "35": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") { title = ormar.String(max_length=100) \n \n",
      "36": "<DED> <DED> id = ormar.Integer(primary_key=True) \n album= ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "37": "\n <DED> id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) { \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "39": "\n <DED> id = ormar.Integer(primary_key=True) { album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "43": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "44": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "47": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "48": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n",
      "49": "\n id = ormar.Integer(primary_key=True) \n album = ormar.ForeignKey(Album, related_name=\"cover_pictures\") \n title = ormar.String(max_length=100) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    id: ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.Integer($parameter$primary_key = True)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 38,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_more_reallife_fastapi.py",
    "target_filename": "tests/test_more_reallife_fastapi.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "2": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "3": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "4": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "5": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "6": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED>",
      "9": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "10": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "11": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n",
      "15": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n {",
      "18": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "19": "} <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "20": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "21": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "22": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "23": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "24": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "25": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "26": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "27": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) { name = ormar.String(max_length=100) \n \n",
      "29": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) { \n",
      "30": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "31": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "32": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "33": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "35": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "43": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "44": "\n ^ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "47": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "48": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n }"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED>def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    <IND>d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "target_code": "<DED>def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]:\n    <IND>d: Dict[ConditionOpcode, List[ConditionVarPair]] = {}\n    for _ in conditions:\n",
    "warning_line": "    d: Dict[ConditionOpcode: List[ConditionVarPair]] = {}",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `typing.Dict[slice(src.types.condition_opcodes.ConditionOpcode, typing.List[src.types.ConditionVarPair.ConditionVarPair], None)]` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 43,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Flax-Network/flax-blockchain",
    "source_filename": "src/util/Conditions.py",
    "target_filename": "src/util/Conditions.py",
    "source_changeid": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f^",
    "target_changeid": "5755909c5fbc6ffa630b3512b8a8ef957dc5537f",
    "predictions": [
      "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> for _ in conditions: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> for _ in conditions: \n",
      "1": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> for _ in conditions: \n",
      "2": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> <DED> for _ in conditions: \n",
      "3": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> <DED> for _ in conditions: \n",
      "4": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = [] \n <DED> for _ in conditions: \n",
      "5": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> <IND> for _ in conditions: \n",
      "6": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> <IND> for _ in conditions: \n",
      "7": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> for _ in conditions: \n",
      "8": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> \n for _ in conditions: \n",
      "9": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> \n for _ in conditions: \n",
      "10": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = [] \n \n for _ in conditions: \n",
      "11": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> <DED> for _ in conditions: \n",
      "12": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> <DED> for _ in conditions: \n",
      "13": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n \n <DED> for _ in conditions: \n",
      "14": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = [] \n <IND> for _ in conditions: \n",
      "15": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <DED> <DED> <DED> for _ in conditions: \n",
      "16": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <DED> <IND> <DED> for _ in conditions: \n",
      "17": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = [] \n <DED> for _ in conditions: \n",
      "18": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <IND> <IND> <DED> for _ in conditions: \n",
      "19": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <IND> <DED> <DED> for _ in conditions: \n",
      "20": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> <IND> for _ in conditions: \n",
      "21": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> <IND> for _ in conditions: \n",
      "22": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <DED> for _ in conditions: \n",
      "23": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> <DED> for _ in conditions: \n",
      "24": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> <DED> for _ in conditions: \n",
      "25": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n \n <IND> for _ in conditions: \n",
      "26": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <DED> <IND> <IND> for _ in conditions: \n",
      "27": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <DED> <DED> <IND> for _ in conditions: \n",
      "28": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> \n for _ in conditions: \n",
      "29": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> \n for _ in conditions: \n",
      "30": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n \n \n for _ in conditions: \n",
      "31": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <DED> <DED> \n for _ in conditions: \n",
      "32": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <DED> <IND> \n for _ in conditions: \n",
      "33": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { <IND> <DED> for _ in conditions: \n",
      "34": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = { <DED> <DED> for _ in conditions: \n",
      "35": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = [] \n \n for _ in conditions: \n",
      "36": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <IND> <IND> <IND> for _ in conditions: \n",
      "37": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: List[ConditionOpcode, List[ConditionVarPair]] = [] \n <DED> for _ in conditions: \n",
      "38": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <IND> <DED> <IND> for _ in conditions: \n",
      "39": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> <IND> for _ in conditions: \n",
      "40": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> <IND> for _ in conditions: \n",
      "41": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n \n <DED> for _ in conditions: \n",
      "42": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <IND> <IND> \n for _ in conditions: \n",
      "43": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <IND> <DED> \n for _ in conditions: \n",
      "44": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict: \n <IND> d: List[ConditionVarPair, List[ConditionVarPair]] = [] \n for _ in conditions: \n",
      "45": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <DED> <DED> <DED> for _ in conditions: \n",
      "46": "<DED> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <DED> <IND> <DED> for _ in conditions: \n",
      "47": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <DED> \n for _ in conditions: \n",
      "48": "<IND> def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = \n <IND> \n for _ in conditions: \n",
      "49": "\n def conditions_by_opcode(conditions: List[ConditionVarPair]) -> Dict[ConditionOpcode, List[ConditionVarPair]]: \n <IND> d: Dict[ConditionOpcode, List[ConditionVarPair]] = <DED> \n <DED> for _ in conditions: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            <DED>else:\n                <IND>extra_info = [] # type: [str]\n                if subtype_label is not None:\n",
    "target_code": "            <DED>else:\n                <IND>extra_info = [] # type: List[str]\n                if subtype_label is not None:\n",
    "warning_line": "                extra_info = [] # type: [str]",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `\"[str]\"` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1292,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/checker.py",
    "target_filename": "mypy/checker.py",
    "source_changeid": "021283f03639d185c3a0985684a94307c9fcc15b^",
    "target_changeid": "021283f03639d185c3a0985684a94307c9fcc15b",
    "predictions": [
      "\n else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "1": "<DED> else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "2": "<IND> else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "3": "\n else: \n <IND> extra_info = [] # type: list[str] \n if subtype_label is not None: \n",
      "4": "\n else: \n <IND> extra_info = [] # type: typing.Optional[str] \n if subtype_label is not None: \n",
      "5": "\n else: \n <DED> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "6": "\n else: \n <IND> extra_info = [] # type: typing.Optional[[str]] \n if subtype_label is not None: \n",
      "7": "<DED> else: \n <IND> extra_info = [] # type: list[str] \n if subtype_label is not None: \n",
      "8": "<DED> else: \n <IND> extra_info = [] # type: typing.Optional[str] \n if subtype_label is not None: \n",
      "9": "<IND> else: \n <IND> extra_info = [] # type: list[str] \n if subtype_label is not None: \n",
      "10": "\n else: \n <IND> extra_info: typing.Optional[str] = [] \n if subtype_label is not None: \n",
      "11": "<DED> else: \n <IND> extra_info = [] # type: typing.Optional[[str]] \n if subtype_label is not None: \n",
      "12": "<DED> else: \n <DED> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "13": "<IND> else: \n <IND> extra_info = [] # type: typing.Optional[str] \n if subtype_label is not None: \n",
      "14": "\n else: \n <IND> extra_info: typing.Optional[type] = [] \n if subtype_label is not None: \n",
      "15": "<IND> else: \n <IND> extra_info = [] # type: typing.Optional[[str]] \n if subtype_label is not None: \n",
      "16": "<IND> else: \n <DED> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "17": "<DED> else: \n <IND> extra_info: typing.Optional[str] = [] \n if subtype_label is not None: \n",
      "18": "\n else: \n <IND> extra_info = [] # type: [str] \n if subtype_label is not None: \n",
      "19": "\n else: \n <IND> extra_info = [] # type: Union[str,...] \n if subtype_label is not None: \n",
      "20": "<DED> else: \n <IND> extra_info: typing.Optional[type] = [] \n if subtype_label is not None: \n",
      "21": "\n else: \n \n extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "22": "\n else: \n <DED> extra_info = [] # type: list[str] \n if subtype_label is not None: \n",
      "23": "\n else: \n <DED> extra_info = [] # type: typing.Optional[str] \n if subtype_label is not None: \n",
      "24": "<IND> else: \n <IND> extra_info: typing.Optional[str] = [] \n if subtype_label is not None: \n",
      "25": "\n else: \n <IND> extra_info = [] # type: Union[str, Tuple[str,...]] \n if subtype_label is not None: \n",
      "26": "\n else: \n <IND> extra_info = [] # type: Union[List[str]] \n if subtype_label is not None: \n",
      "27": "\n else: \n <IND> extra_info: typing.attribute = [] \n if subtype_label is not None: \n",
      "28": "<IND> else: \n <IND> extra_info: typing.Optional[type] = [] \n if subtype_label is not None: \n",
      "29": "\n else: \n <DED> extra_info = [] # type: typing.Optional[[str]] \n if subtype_label is not None: \n",
      "30": "<DED> else: \n <IND> extra_info = [] # type: [str] \n if subtype_label is not None: \n",
      "31": "<DED> else: \n <IND> extra_info = [] # type: Union[str,...] \n if subtype_label is not None: \n",
      "32": "<DED> else: \n \n extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "33": "<DED> else: \n <DED> extra_info = [] # type: list[str] \n if subtype_label is not None: \n",
      "34": "<DED> else: \n <DED> extra_info = [] # type: typing.Optional[str] \n if subtype_label is not None: \n",
      "35": "\n else: \n <IND> extra_info = [] # type: Optional[str] \n if subtype_label is not None: \n",
      "36": "\n else: \n <IND> extra_info: typing.Optional[[str]] \n if subtype_label is not None: \n",
      "37": "<DED> else: \n <IND> extra_info = [] # type: Union[List[str]] \n if subtype_label is not None: \n",
      "38": "<IND> else: \n <IND> extra_info = [] # type: [str] \n if subtype_label is not None: \n",
      "39": "<IND> else: \n <IND> extra_info = [] # type: Union[str,...] \n if subtype_label is not None: \n",
      "40": "<DED> else: \n <IND> extra_info: typing.attribute = [] \n if subtype_label is not None: \n",
      "41": "<IND> else: \n \n extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "42": "{ else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "43": "\n else: \n <DED> extra_info: typing.Optional[str] = [] \n if subtype_label is not None: \n",
      "44": "<IND> else: \n <DED> extra_info = [] # type: list[str] \n if subtype_label is not None: \n",
      "45": "} else: \n <IND> extra_info = [] # type: List[str] \n if subtype_label is not None: \n",
      "46": "\n else: \n <DED> extra_info: typing.Optional[type] = [] \n if subtype_label is not None: \n",
      "47": "<IND> else: \n <IND> extra_info: typing.attribute = [] \n if subtype_label is not None: \n",
      "48": "<DED> else: \n <IND> extra_info: typing.Optional[[str]] \n if subtype_label is not None: \n",
      "49": "\n else: \n <IND> extra_info: typing.type = [] \n if subtype_label is not None: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: ormar.Integer(primary_key=True)\n    name: ormar.String(max_length=40)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=40)\n\n",
    "warning_line": "    name: ormar.String(max_length=40)",
    "linter_report": {
      "rule_id": "Invalid type [31]",
      "message": " Expression `ormar.String($parameter$max_length = 40)` is not a valid type.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 33,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_many_to_many.py",
    "target_filename": "tests/test_many_to_many.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "2": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "3": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "4": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "5": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "6": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <IND>",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n <DED>",
      "9": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "10": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "11": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "12": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=40) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) <DED> \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=40) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) <IND> \n",
      "16": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "17": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "18": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n {",
      "19": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "20": "} <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "21": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "22": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "23": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "24": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "25": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "26": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "27": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) { \n",
      "29": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) { name = ormar.String(max_length=40) \n \n",
      "31": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "32": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "33": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "35": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "42": "\n ^ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "43": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "44": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "47": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "48": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n \n",
      "49": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=40) \n }"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def add(self, predicted: List[str], labels: List[str]) -> None:\n        <IND>for (reference, hypothesis) in zip(labels, predicted):\n",
    "target_code": "\n    <DED>def add(self, predicted: List[MaybeList[str]],\n            labels: List[MaybeList[str]]) -> None:\n        <IND>for (reference, hypothesis) in zip(labels, predicted):\n",
    "warning_line": "    def add(self, predicted: List[str], labels: List[str]) -> None:",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `texar.torch.run.metric.generation.BLEU.add` overrides method defined in `StreamingMetric` inconsistently. Parameter of type `List[str]` is not a supertype of the overridden parameter `List[typing.Union[List[str], str]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 69,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "asyml/texar-pytorch",
    "source_filename": "texar/torch/run/metric/generation.py",
    "target_filename": "texar/torch/run/metric/generation.py",
    "source_changeid": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3^",
    "target_changeid": "72efe4ef23bbca2c83da5741e03bfd5f24acb0e3",
    "predictions": [
      "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "1": "\n <IND> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "2": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n",
      "3": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "4": "\n \n def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "5": "<DED> <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "6": "\n <IND> def add(self, predicted: List[str], labels: List[str]) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n",
      "7": "<IND> <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "8": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n { for (reference, hypothesis) in zip(labels, predicted): \n",
      "9": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n } for (reference, hypothesis) in zip(labels, predicted): \n",
      "10": "\n { def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "11": "\n } def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "12": "\n <IND> def add(self, predicted: List[str], labels: List[str]) -> None: \n \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "13": "<DED> <IND> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "14": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n \\ for (reference, hypothesis) in zip(labels, predicted): \n",
      "15": "\n \n def add(self, predicted: List[str], labels: List[str]) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n",
      "16": "\n \\ def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "17": "<DED> <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n",
      "18": "{ <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "19": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): <IND>",
      "20": "<IND> <IND> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "21": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): <DED>",
      "22": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: <IND> <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "23": "<IND> <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <DED> for (reference, hypothesis) in zip(labels, predicted): \n",
      "24": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "25": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "26": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: <DED> <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "27": "} <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "28": "\n def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "29": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "30": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "31": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "32": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "33": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "34": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "35": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "36": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "37": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "38": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "39": "\n def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "40": "\n def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "41": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "42": "\n def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "43": "\n def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "44": "\n def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "45": "\n def add(self, predicted: List[str], labels: List[str]) -> None: \n <IND> for (reference, hypothesis) in zip(labels, predicted): \n",
      "46": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "47": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "48": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n",
      "49": "\n <DED> def add(self, predicted: List[str], labels: List[str]) -> None: \n for (reference, hypothesis) in zip(labels, predicted): \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def fit(self, ts, component_index: Optional[int] = None):\n        <IND>super().fit(ts, component_index)\n        # Check univariate time series\n",
    "target_code": "\n    <DED>def fit(self, ts):\n        <IND>super().fit(ts)\n        # Check univariate time series\n",
    "warning_line": "    def fit(self, ts, component_index: Optional[int] = None):",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `darts.models.theta.FourTheta.fit` overrides method defined in `UnivariateForecastingModel` inconsistently. Could not find parameter `series` in overriding signature.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 218,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "unit8co/darts",
    "source_filename": "darts/models/theta.py",
    "target_filename": "darts/models/theta.py",
    "source_changeid": "2977f4f666e255b617ad980eab81d6ff6aad9db3^",
    "target_changeid": "2977f4f666e255b617ad980eab81d6ff6aad9db3",
    "predictions": [
      "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "1": "\n <IND> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "2": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> UnivariateForecastingModel: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "3": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "4": "\n <DED> def fit(self, ts: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "5": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> Set[str]: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "6": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> ts: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "7": "\n <DED> def fit(self, ts: Optional[int] = None) -> UnivariateForecastingModel: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "8": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> bool: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "9": "\n <IND> def fit(self, ts, component_index: Optional[int] = None) -> UnivariateForecastingModel: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "10": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n \n super().fit(ts, component_index) \n # Check univariate time series \n",
      "11": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> UnivariateForecastingModel: \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "12": "\n \n def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "13": "\n <IND> def fit(self, ts, component_index: Optional[int] = None): \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "14": "<DED> <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "15": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> univariate: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "16": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> Check univariate time series \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "17": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "18": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> Check univariate time series \n \n super().fit(ts, component_index) \n # Check univariate time series \n",
      "19": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> Check univariate time series \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "20": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> List[str]: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "21": "<IND> <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "22": "\n <IND> def fit(self, ts, component_index: Optional[int] = None) -> Set[str]: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "23": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> Set[str]: \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "24": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> UnivariateForecastingModel: \n \n super().fit(ts, component_index) \n # Check univariate time series \n",
      "25": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) ->'series': \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "26": "\n <IND> def fit(self, ts: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "27": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n { super().fit(ts, component_index) \n # Check univariate time series \n",
      "28": "\n <DED> def fit(self, ts, component_index=None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "29": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n } super().fit(ts, component_index) \n # Check univariate time series \n",
      "30": "\n <DED> def fit(self, ts: Optional[int] = None): \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "31": "\n <IND> def fit(self, ts: Optional[int] = None) -> UnivariateForecastingModel: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "32": "\n <IND> def fit(self, ts, component_index: Optional[int] = None) -> ts: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "33": "\n { def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "34": "\n } def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "35": "\n <DED> def fit(self, ts: Optional[int] = None) -> ts: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "36": "\n <IND> def fit(self, ts, component_index: Optional[int] = None) -> bool: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "37": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> ts: \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "38": "\n <DED> def fit(self, ts: Optional[int] = None) -> Set[str]: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "39": "\n <DED> def fit(self, ts: Optional[int] = None) -> UnivariateForecastingModel: \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "40": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> bool: \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "41": "\n <IND> def fit(self, ts, component_index: Optional[int] = None): \n \n super().fit(ts, component_index) \n # Check univariate time series \n",
      "42": "\n <DED> def fit(self, ts: Optional[int] = None) -> univariate: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "43": "\n \n def fit(self, ts, component_index: Optional[int] = None): \n <DED> super().fit(ts, component_index) \n # Check univariate time series \n",
      "44": "\n <DED> def fit(self, ts, component_index: Optional[int] = None) -> FOUR: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "45": "<DED> <IND> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "46": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts) \n # Check univariate time series \n",
      "47": "\n <DED> def fit(self, ts: Optional[int] = None) -> None: \n <IND> super().fit(ts, component_index) \n # Check univariate time series \n",
      "48": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series <IND>",
      "49": "\n <DED> def fit(self, ts, component_index: Optional[int] = None): \n <IND> super().fit(ts, component_index) \n # Check univariate time series <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        return _arithmetic_helper(self, other, operator.or_)\n\n    <DED>def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":\n        <IND>",
    "target_code": "\n        if not isinstance(other, BitVec):\n            <IND>other = BitVec(z3.BitVecVal(other, self.size()))\n        <DED>return _arithmetic_helper(self, other, operator.or_)\n\n    <DED>def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\":\n        <IND>",
    "warning_line": "    def __xor__(self, other: \"BitVec\") -> \"BitVecFunc\":",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `mythril.laser.smt.bitvecfunc.BitVecFunc.__xor__` overrides method defined in `BitVec` inconsistently. Parameter of type `BitVec` is not a supertype of the overridden parameter `Union[BitVec, int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 145,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/smt/bitvecfunc.py",
    "target_filename": "mythril/laser/smt/bitvecfunc.py",
    "source_changeid": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9^",
    "target_changeid": "556d138d50ef5ce02bd725a0743f8c7bf3038ae9",
    "predictions": [
      "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>"
    ],
    "correct": false,
    "top_five": {
      "0": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "1": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "2": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "3": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "4": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "5": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "6": "<DED> return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "7": "<DED> return _arithmetic_helper(self, other, operator.or_) \n <DED> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "8": "<DED> return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "9": "<IND> return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "10": "<IND> return _arithmetic_helper(self, other, operator.or_) \n <DED> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "11": "<IND> return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "12": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "13": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "14": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <DED>",
      "15": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "16": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <DED>",
      "17": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <DED>",
      "18": "\n return _arithmetic_helper(self, other, operator.or_) \n \n \n def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "19": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> \n def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "20": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> \n def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "21": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n \n",
      "22": "<DED> return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "23": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n \n",
      "24": "<DED> return _arithmetic_helper(self, other, operator.or_) \n <DED> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "25": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n \n",
      "26": "<DED> return _arithmetic_helper(self, other, operator.or_) \n <IND> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "27": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "28": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return _arithmetic_helper(self, other, operator.or_) \n \n",
      "29": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "30": "<IND> return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "31": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return _arithmetic_helper(self, other, operator.or_) \n \n",
      "32": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "33": "<IND> return _arithmetic_helper(self, other, operator.or_) \n <DED> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "34": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return _arithmetic_helper(self, other, operator.or_) \n \n",
      "35": "<IND> return _arithmetic_helper(self, other, operator.or_) \n <IND> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "36": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <DED>",
      "37": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <DED>",
      "38": "<DED> return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "39": "\n return _arithmetic_helper(self, other, operator.or_) \n <IND> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <DED>",
      "40": "<DED> return _arithmetic_helper(self, other, operator.or_) \n <DED> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "41": "<DED> return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "42": "\n return _arithmetic_helper(self, other, operator.or_) \n { <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "43": "<IND> return _arithmetic_helper(self, other, operator.or_) \n \n <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "44": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n \n",
      "45": "<IND> return _arithmetic_helper(self, other, operator.or_) \n <DED> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n",
      "46": "\n return _arithmetic_helper(self, other, operator.or_) \n <DED> <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n \n",
      "47": "\n return _arithmetic_helper(self, other, operator.or_) \n } <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND>",
      "48": "\n return _arithmetic_helper(self, other, operator.or_) \n \n <IND> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return _arithmetic_helper(self, other, operator.or_) \n \n",
      "49": "<IND> return _arithmetic_helper(self, other, operator.or_) \n <IND> <DED> def __xor__(self, other: Union[int, \"BitVec\"]) -> \"BitVecFunc\": \n <IND> return self._arithmetic_helper(self, other, operator.or_) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):\n        <IND>data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted)\n\n",
    "target_code": "\n    <DED>def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float):\n        <IND>data = str(temperature)\n        self._output_device.put(\"printer/bed/temperature/target\", data, on_finished = self._onPutBedTemperatureCompleted)\n\n",
    "warning_line": "    def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: int):",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `plugins.UM3NetworkPrinting.src.LegacyUM3PrinterOutputController.LegacyUM3PrinterOutputController.setTargetBedTemperature` overrides method defined in `PrinterOutputController` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `float`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 36,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Cura",
    "source_filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "target_filename": "plugins/UM3NetworkPrinting/src/LegacyUM3PrinterOutputController.py",
    "source_changeid": "25b18dee7a02b09a692ce71e853e7e4c32da8e28^",
    "target_changeid": "25b18dee7a02b09a692ce71e853e7e4c32da8e28",
    "predictions": [
      "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "1": "\n <IND> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "2": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <DED> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "3": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "4": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: 255): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "5": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n \n data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "6": "\n \n def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "7": "\n <DED> def setTargetBedTemperature(self, printer: List[PrinterOutputModel], temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "8": "<DED> <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "9": "\n <IND> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <DED> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "10": "\n <DED> def setTargetBedTemperature(self, printer: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "11": "<IND> <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "12": "\n <IND> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "13": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: 0): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "14": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): \n <DED> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "15": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temp\u00e9rature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "16": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: -25): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "17": "\n <DED> def setTargetBedTemperature(self, printer: Optional[PrinterOutputModel], temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "18": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n { data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "19": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n } data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "20": "\n <IND> def setTargetBedTemperature(self, printer: float, temperature: 255): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "21": "\n <DED> def setTargetBedTemperature(self, printer, temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "22": "\n { def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "23": "\n } def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "24": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: 190): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "25": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: 0 \n ): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "26": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n <IND>",
      "27": "\n <DED> def setTargetBedTemperature(self, printer: \u201cPrinterOutputModel\u201d, temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "28": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: 255): \n <DED> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "29": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> bool: \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "30": "\n <IND> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n \n data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "31": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float) -> None: \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "32": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n <DED>",
      "33": "\n <DED> def setTargetBedTemperature(self, printer: Optional[PrinterOutputModel]), temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "34": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: -40): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "35": "\n <IND> def setTargetBedTemperature(self, printer: List[PrinterOutputModel], temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "36": "<DED> <IND> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "37": "\n <DED> def setTargetBedTemperature(self, printer: Union[PrinterModel, temperature], float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "38": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = 0 \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "39": "\n \n def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <DED> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "40": "\n <DED> def setTargetBedTemperature(self, printer: 'PrinterOutputModel', temperature: float): \n \n data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "41": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: 125): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "42": "\n <DED> def setTargetBedTemperature(self, printer: Union[PrinterModel, temperature int]): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "43": "\n \\ def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "44": "\n <DED> def setTargetBedTemperature(self, printer: float, temperature: 127): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "45": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = -1 \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "46": "\n <IND> def setTargetBedTemperature(self, printer: float, temperature: 0): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "47": "\n <IND> def setTargetBedTemperature(self, printer: float): \n <IND> data = str(temperature) \n self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "48": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) <DED> self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n",
      "49": "\n <DED> def setTargetBedTemperature(self, printer: \"PrinterOutputModel\", temperature: float): \n <IND> data = str(temperature) <IND> self._output_device.put(\"printer/bed/temperature/target\", data, on_finished=self._onPutBedTemperatureCompleted) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: int, value: V) -> NoReturn: ...\n    def pop(self, index: int = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "target_code": "    def extend(self, values: Iterable[V]) -> NoReturn: ...\n    def insert(self, pos: SupportsIndex, value: V) -> NoReturn: ...\n    def pop(self, index: SupportsIndex = -1) -> NoReturn: ...\n    def reverse(self) -> NoReturn: ...\n",
    "warning_line": "    def pop(self, index: int = -1) -> NoReturn: ...",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `src.werkzeug.datastructures.ImmutableListMixin.pop` overrides method defined in `list` inconsistently. Parameter of type `int` is not a supertype of the overridden parameter `SupportsIndex`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 52,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "pallets/werkzeug",
    "source_filename": "src/werkzeug/datastructures.pyi",
    "target_filename": "src/werkzeug/datastructures.pyi",
    "source_changeid": "131ebd1f4172e27e5117b7e3884bb51fcab927b3^",
    "target_changeid": "131ebd1f4172e27e5117b7e3884bb51fcab927b3",
    "predictions": [
      "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "1": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "2": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "3": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V):... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "4": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V):... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "5": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self):... \n",
      "6": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "7": "def extend(self, values: Iterable[V]):... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "8": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoneReturn:... \n def reverse(self) -> NoReturn:... \n",
      "9": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V):... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self):... \n",
      "10": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoneReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "11": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 2) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "12": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def flip(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "13": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> noreturn:... \n def reverse(self) -> NoReturn:... \n",
      "14": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... <IND> def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "15": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... <IND> def reverse(self) -> NoReturn:... \n",
      "16": "def extend(self, values: Iterable[V]):... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "17": "def extend(self, values: Iterable[V]) -> NoReturn:... <IND> def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "18": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self):... \n",
      "19": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... <DED> def reverse(self) -> NoReturn:... \n",
      "20": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... <IND>",
      "21": "def extend(self, values: Iterable[V]) -> NoReturn:... <DED> def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "22": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: Int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "23": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... <DED> def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "24": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... <DED>",
      "25": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoneReturn:... \n def reverse(self) -> NoReturn:... \n",
      "26": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1 -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "27": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: Int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "28": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> noreturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "29": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... { def reverse(self) -> NoReturn:... \n",
      "30": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoneReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "31": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... {",
      "32": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... { def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "33": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: str, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "34": "def extend(self, values: Iterable[V]) -> NoReturn:... { def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "35": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> 'NoReturn':... \n def reverse(self) -> NoReturn:... \n",
      "36": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoneReturn:... \n def reverse(self) -> NoReturn:... \n",
      "37": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V):... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "38": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... <IND> def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "39": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "40": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... } def reverse(self) -> NoReturn:... \n",
      "41": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... } def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "42": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... <IND> def reverse(self) -> NoReturn:... \n",
      "43": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "44": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... }",
      "45": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V):... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self):... \n",
      "46": "def extend(self, values: Iterable[V]) -> NoReturn:... } def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = 1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "47": "def extend(self, values: Iterable[V]) -> NoReturn:... <IND> def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n",
      "48": "def extend(self, values: Iterable[V]) -> NoReturn:... \n def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... <DED> def reverse(self) -> NoReturn:... \n",
      "49": "def extend(self, values: Iterable[V]) -> NoReturn:... <DED> def insert(self, pos: int, value: V) -> NoReturn:... \n def pop(self, index: int = -1) -> NoReturn:... \n def reverse(self) -> NoReturn:... \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    def from_dict(\n            cls: typing.Type[typing.T_UpdatePFS],\n            data: typing.Dict,\n    ) -> typing.T_UpdatePFS:\n        <IND>return cls(\n",
    "target_code": "    def from_dict(\n            cls,\n            data: typing.Dict[str, typing.Any],\n    ) -> 'UpdatePFS':\n        <IND>return cls(\n",
    "warning_line": "    def from_dict(",
    "linter_report": {
      "rule_id": "Inconsistent override [14]",
      "message": " `raiden.messages.UpdatePFS.from_dict` overrides method defined in `Message` inconsistently. Parameter of type `typing.Type[Variable[typing.T_UpdatePFS (bound to UpdatePFS)]]` is not a supertype of the overridden parameter `typing.Type[Message]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1769,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "raiden-network/raiden",
    "source_filename": "raiden/messages.py",
    "target_filename": "raiden/messages.py",
    "source_changeid": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd^",
    "target_changeid": "ff41a5dc40657487209cc25e2b8f8d239d4f27cd",
    "predictions": [
      "def from_dict( \n cls, \n data, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n"
    ],
    "correct": false,
    "top_five": {
      "0": "def from_dict( \n cls, \n data, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "1": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> 'UpdatePFS': \n <IND> return cls( \n",
      "2": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "3": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Message: \n <IND> return cls( \n",
      "4": "def from_dict( \n cls, \n data, \n ) -> 'T_UpdatePFS': \n <IND> return cls( \n",
      "5": "def from_dict( \n cls, \n data, \n ) -> Message: \n <IND> return cls( \n",
      "6": "def from_dict( \n cls, \n data, \n ) -> typing.T_UpdatePFS: \n <DED> return cls( \n",
      "7": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> tuple[typing.T_UpdatePFS]: \n <IND> return cls( \n",
      "8": "def from_dict( \n cls, \n data, \n ) -> 'UpdatePFS': \n <IND> return cls( \n",
      "9": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> 'UpdatePFS': \n <DED> return cls( \n",
      "10": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <DED> return cls( \n",
      "11": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Message: \n <DED> return cls( \n",
      "12": "def from_dict( \n cls, \n data, \n ) -> typing.T_UpdatePFS: \n \n return cls( \n",
      "13": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n \n return cls( \n",
      "14": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> 'T_UpdatePFS': \n <IND> return cls( \n",
      "15": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> 'UpdatePFS': \n \n return cls( \n",
      "16": "def from_dict( \n cls, \n data, \n ) -> 'T_UpdatePFS': \n <DED> return cls( \n",
      "17": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> _UpdatePFS: \n <IND> return cls( \n",
      "18": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> tuple[typing.T_UpdatePFS]: \n <DED> return cls( \n",
      "19": "def from_dict( \n cls, <DED> data, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "20": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> txt: \n <IND> return cls( \n",
      "21": "def from_dict( \n cls, <IND> data, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "22": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> Message: \n \n return cls( \n",
      "23": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> from_dict: \n <IND> return cls( \n",
      "24": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> tuple.UpdatePFS: \n <IND> return cls( \n",
      "25": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> super(): \n <IND> return cls( \n",
      "26": "def from_dict( \n cls, \n data, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "27": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> -> Message: \n <IND> return cls( \n",
      "28": "def from_dict( \n cls, \n data, <DED> ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "29": "def from_dict( \n cls, \n data, <IND> ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "30": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> msg: \n <IND> return cls( \n",
      "31": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "32": "def from_dict( \n cls, \n data = typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "33": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) ->.T_UpdatePFS: \n <IND> return cls( \n",
      "34": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> tuple[typing.T_UpdatePFS]: \n \n return cls( \n",
      "35": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> tuple[typing.Type[Message]]: \n <IND> return cls( \n",
      "36": "def from_dict( \n cls, \n data, \n ) -> tuple[typing.T_UpdatePFS]: \n <IND> return cls( \n",
      "37": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n } return cls( \n",
      "38": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n { return cls( \n",
      "39": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> -> 'UpdatePFS': \n <IND> return cls( \n",
      "40": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> 'UpdatePFS': \n } return cls( \n",
      "41": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> 'UpdatePFS': \n { return cls( \n",
      "42": "def from_dict( \n cls, \n data, \n ) -> 'UpdatePFS': \n <DED> return cls( \n",
      "43": "def from_dict( \n cls, \n data, \n ) -> Message: \n <DED> return cls( \n",
      "44": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], <DED> data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "45": "def from_dict( \n cls, \n data, \n ) -> 'T_UpdatePFS': \n \n return cls( \n",
      "46": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], <DED> data: typing.Dict, \n ) -> 'UpdatePFS': \n <IND> return cls( \n",
      "47": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], \n data: typing.Dict, \n ) -> dict: \n <IND> return cls( \n",
      "48": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], <IND> data: typing.Dict, \n ) -> typing.T_UpdatePFS: \n <IND> return cls( \n",
      "49": "def from_dict( \n cls: typing.Type[typing.T_UpdatePFS], <IND> data: typing.Dict, \n ) -> 'UpdatePFS': \n <IND> return cls( \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: int = ormar.Integer(primary_key=True)\n    team: Optional[Team] = ormar.ForeignKey(Team)\n    email: str = ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    team= ormar.ForeignKey(Team)\n    email = ormar.String(max_length=100)\n\n",
    "warning_line": "    team: Optional[Team] = ormar.ForeignKey(Team)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `team` declared in class `Member` has type `Optional[Team]` but is used as type `typing.Type[ormar.fields.foreign_key.ForeignKeyField]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 76,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "2": "\n <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "3": "\n \n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "4": "\n <IND> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "5": "<DED> <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "6": "<IND> <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "8": "\n { id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "9": "\n } id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "10": "\n \n id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "11": "<DED> <IND> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "12": "<DED> <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "13": "<IND> <IND> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "14": "<IND> <DED> id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n <IND>",
      "16": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n <DED>",
      "17": "\n \\ id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "18": "{ <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "19": "\n <IND> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email= ormar.String(max_length=100) \n \n",
      "20": "} <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "21": "\n <DED> id = ormar.Integer(primary_key=True) <DED> team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) <DED> \n",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) <IND> team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "24": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) <DED> email = ormar.String(max_length=100) \n \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) <IND> \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) <IND> email = ormar.String(max_length=100) \n \n",
      "28": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n {",
      "29": "\n { id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "30": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "31": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "32": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "33": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "35": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "37": "\n } id = ormar.Integer(primary_key=True) \n team = ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "41": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) { email = ormar.String(max_length=100) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "43": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "44": "\n <DED> id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) { \n",
      "45": "\n <DED> id = ormar.Integer(primary_key=True) { team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "46": "<DED> \n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "47": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "48": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n",
      "49": "\n id = ormar.Integer(primary_key=True) \n team= ormar.ForeignKey(Team) \n email = ormar.String(max_length=100) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>id_tag: str\n    connector_id: int = None\n    charging_profile: Dict = None\n\n",
    "target_code": "    <IND>id_tag: str\n    connector_id: Optional[int] = None\n    charging_profile: Optional[Dict] = None\n\n",
    "warning_line": "    charging_profile: Dict = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `charging_profile` declared in class `RemoteStartTransactionPayload` has type `Dict[typing.Any, typing.Any]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 96,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "\n id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "1": "<DED> id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "2": "<IND> id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "3": "{ id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "4": "} id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "5": "\n id_tag: str \n connector_id: int = \"\" \n charging_profile: Optional[Dict] = None \n \n",
      "6": "\\ id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "7": "\n id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n <DED>",
      "8": "\n id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n <IND>",
      "9": "\n id_tag: str <IND> connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "10": "\n id_tag: str <DED> connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "11": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "12": "<DED> id_tag: str \n connector_id: int = \"\" \n charging_profile: Optional[Dict] = None \n \n",
      "13": "\n id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None <DED> \n",
      "14": "\n id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None <IND> \n",
      "15": "\n id_tag: str \n connector_id: Optional[int] = None <IND> charging_profile: Optional[Dict] = None \n \n",
      "16": "\n id_tag: str \n connector_id: Optional[int] = None <DED> charging_profile: Optional[Dict] = None \n \n",
      "17": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "18": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "19": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "20": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "21": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "22": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "23": "\n id_tag: str \n connector_id: int = \"4\" \n charging_profile: Optional[Dict] = None \n \n",
      "24": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "25": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "26": "\n id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n {",
      "27": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "28": "^ id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "29": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "30": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "31": "<IND> id_tag: str \n connector_id: int = \"\" \n charging_profile: Optional[Dict] = None \n \n",
      "32": "\n id_tag: str { connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "33": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "34": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "35": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "36": "<DED> id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n <DED>",
      "37": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "38": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "39": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "40": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "41": "<DED> id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n <IND>",
      "42": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "43": "\n id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None { \n",
      "44": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "45": "\n id_tag: str \n connector_id: Optional[int] = None { charging_profile: Optional[Dict] = None \n \n",
      "46": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "47": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "48": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n",
      "49": "id_tag: str \n connector_id: Optional[int] = None \n charging_profile: Optional[Dict] = None \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    body: List[Union[Comment, Statement]] = field(default=list)\n",
    "target_code": "\n    __slots__ = {'lineno', 'col_offset', 'raw_text', 'text', 'body'}\n\n    body: List[Union[Comment, Statement]]\n",
    "warning_line": "    body: List[Union[Comment, Statement]] = field(default=list)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `body` declared in class `Module` has type `List[Union[Comment, Statement]]` but is used as type `typing.Type[list]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 139,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "wemake-services/dotenv-linter",
    "source_filename": "dotenv_linter/grammar/fst.py",
    "target_filename": "dotenv_linter/grammar/fst.py",
    "source_changeid": "69892deec3de61824124bfe3e1da9182f1527ba6^",
    "target_changeid": "69892deec3de61824124bfe3e1da9182f1527ba6",
    "predictions": [
      "\n body: List[Union[Comment, Statement]] = field(default=list) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n body: List[Union[Comment, Statement]] = field(default=list) \n",
      "1": "\n body: List[List[Union[Comment, Statement]] = field(default=list) \n",
      "2": "<DED> body: List[Union[Comment, Statement]] = field(default=list) \n",
      "3": "<IND> body: List[Union[Comment, Statement]] = field(default=list) \n",
      "4": "\n body: List[Union[Comment, Statement], List[Union[Comment, Statement]] = field(default=list) \n",
      "5": "\n body: List[Union[Comment, Statement]] = field(default=list) \n \n",
      "6": "\n body: List[List[Union[Comment, Statement]]] = field(default=list) \n",
      "7": "{ body: List[Union[Comment, Statement]] = field(default=list) \n",
      "8": "\n body: List[Union[Comment, Statement]] = field(default=List) \n",
      "9": "\n body: List[Union[Comment, Statement]] = field(default=list) \n <IND>",
      "10": "\n body: List[Union[Comment, Statement]] = field(default=list) \n <DED>",
      "11": "\n statement: List[Union[Comment, Statement]] = field(default=list) \n",
      "12": "\n body: List[Union[Comment, Statement]] = field(default=list) <DED>",
      "13": "\n body: List[Union[Comment, Statement]] = field(default=list) <IND>",
      "14": "} body: List[Union[Comment, Statement]] = field(default=list) \n",
      "15": "\n body: Union[Comment, Statement]] = field(default=list) \n",
      "16": "\n body: List[Union[Comment, Statement]] = field(default=list) {",
      "17": "\n argument: List[Union[Comment, Statement]] = field(default=list) \n",
      "18": "\n body: Optional[List[Union[Comment, Statement]]] = field(default=list) \n",
      "19": "\n submodule: List[List[Union[Comment, Statement]] = field(default=list) \n",
      "20": "\n text: List[Union[Comment, Statement]] = field(default=list) \n",
      "21": "\n body: List[Union[Comment, Statement]] = field(default=list) }",
      "22": "\n object: List[Union[Comment, Statement]] = field(default=list) \n",
      "23": "\n element: List[Union[Comment, Statement]] = field(default=list) \n",
      "24": "\\ body: List[Union[Comment, Statement]] = field(default=list) \n",
      "25": "\n submodule: List[Union[Comment, Statement]] = field(default=list) \n",
      "26": "\n body: list[Union[Comment, Statement]] = field(default=list) \n",
      "27": "\n form: List[Union[Comment, Statement]] = field(default=list) \n",
      "28": "\n comment: List[Union[Comment, Statement]] = field(default=list) \n",
      "29": "<DED> body: List[List[Union[Comment, Statement]] = field(default=list) \n",
      "30": "body: List[Union[Comment, Statement]] = field(default=list) \n",
      "31": "\n body: List[Union[Comment, Statement]] = field(default=liste) \n",
      "32": "\n body: List[Union[Comment, Statement]] = field(default=list) \\",
      "33": "\n body: List[Union[Comment, Statement]] = field(default=list) \n }",
      "34": "\n body: List[Union[Comment, Statement]] = field(default=list) \n {",
      "35": "body: List[Union[Comment, Statement]] = field(default=list) \n",
      "36": "body: List[Union[Comment, Statement]] = field(default=list) \n",
      "37": "body: List[Union[Comment, Statement]] = field(default=list) \n",
      "38": "\n expression: List[Union[Comment, Statement]] = field(default=list) \n",
      "39": "body: List[Union[Comment, Statement]] = field(default=list) \n",
      "40": "\n body: List[Union[Comment, Statement]] = field(default=list)",
      "41": "\n body: List[Union[Comment, Statement], List[Union[Comment, Statement]]] = field(default=list) \n",
      "42": "^ body: List[Union[Comment, Statement]] = field(default=list) \n",
      "43": "\n body: List[Union[Comment, Statement]] = field(default=list)",
      "44": "body: List[Union[Comment, Statement]] = field(default=list) \n",
      "45": "body: List[Union[Comment, Statement]] = field(default=list) \n",
      "46": "body: List[Union[Comment, Statement]] = field(default=list) \n",
      "47": "body: List[Union[Comment, Statement]] = field(default=list) \n",
      "48": "body: List[Union[Comment, Statement]] = field(default=list) \n",
      "49": "body: List[Union[Comment, Statement]] = field(default=list) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    pub_port: Optional[int] = None\n    server: SuiteRuntimeServer = None\n    publisher: WorkflowPublisher = None\n    barrier: Optional[Barrier] = None\n",
    "target_code": "    pub_port: Optional[int] = None\n    server: Optional[SuiteRuntimeServer] = None\n    publisher: Optional[WorkflowPublisher] = None\n    barrier: Optional[Barrier] = None\n",
    "warning_line": "    publisher: WorkflowPublisher = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `publisher` declared in class `Scheduler` has type `WorkflowPublisher` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 213,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cylc/cylc-flow",
    "source_filename": "cylc/flow/scheduler.py",
    "target_filename": "cylc/flow/scheduler.py",
    "source_changeid": "aa541ef7622378a99558e517385504d1767097e6^",
    "target_changeid": "aa541ef7622378a99558e517385504d1767097e6",
    "predictions": [
      "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n"
    ],
    "correct": true,
    "top_five": {
      "0": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "1": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None <IND> barrier: Optional[Barrier] = None \n",
      "2": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None <IND> publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "3": "pub_port: Optional[int] = None <DED> server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "4": "pub_port: Optional[int] = None <IND> server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "5": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None <IND>",
      "6": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None <DED> barrier: Optional[Barrier] = None \n",
      "7": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None <DED> publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "8": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None <DED>",
      "9": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None { barrier: Optional[Barrier] = None \n",
      "10": "pub_port: Optional[int] = None { server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "11": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None {",
      "12": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None { publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "13": "pub_port: Optional[int] = None \n server: Optional[WorkflowPublisher] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "14": "pub_port: Optional[int] = None \n server: Optional[StudyRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "15": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None } barrier: Optional[Barrier] = None \n",
      "16": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None }",
      "17": "pub_port: Optional[int] = None } server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "18": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None } publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "19": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \\",
      "20": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \\ barrier: Optional[Barrier] = None \n",
      "21": "pub_port: Optional[int] = None \\ server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "22": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \\ publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "23": "pub_port: Optional[int] = None \n server: Optional[ShareAlikeRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "24": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None",
      "25": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None \n",
      "26": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "27": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "28": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None",
      "29": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "30": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None \n",
      "31": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "32": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None",
      "33": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None",
      "34": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None \n",
      "35": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "36": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "37": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None \n",
      "38": "pub_port: Optional[int] = None server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "39": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "40": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None",
      "41": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None",
      "42": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None",
      "43": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None \n",
      "44": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None",
      "45": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None \n",
      "46": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "47": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None barrier: Optional[Barrier] = None \n",
      "48": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None publisher: Optional[WorkflowPublisher] = None \n barrier: Optional[Barrier] = None \n",
      "49": "pub_port: Optional[int] = None \n server: Optional[SuiteRuntimeServer] = None \n publisher: Optional[WorkflowPublisher] = None ^ barrier: Optional[Barrier] = None \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class ClearChargingProfilePayload:\n    <IND>id: int = None\n    connector_id: int = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: int = None\n\n",
    "target_code": "class ClearChargingProfilePayload:\n    <IND>id: Optional[int] = None\n    connector_id: Optional[int] = None\n    charging_profile_purpose: Optional[ChargingProfilePurposeType] = None\n    stack_level: Optional[int] = None\n\n",
    "warning_line": "    connector_id: int = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `connector_id` declared in class `ClearChargingProfilePayload` has type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 61,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "1": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "2": "class ClearChargingProfilePayload: \n <DED> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "3": "class ClearChargingProfilePayload: \n <DED> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "4": "class ClearChargingProfilePayload: \n \n id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "5": "class ClearChargingProfilePayload: \n \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "6": "class ClearChargingProfilePayload: \n <IND> connection_id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "7": "class ClearChargingProfilePayload: \n { id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "8": "class ClearChargingProfilePayload: \n } id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "9": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "10": "class ClearChargingProfilePayload: \n { connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "11": "class ClearChargingProfilePayload: \n \\ id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "12": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n <IND>",
      "13": "class ClearChargingProfilePayload: \n } connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "14": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n <DED>",
      "15": "class ClearChargingProfilePayload: \n <DED> connection_id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "16": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None <IND> charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "17": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None <DED> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "18": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None <DED> charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "19": "class ClearChargingProfilePayload: <IND> <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "20": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "21": "class ClearChargingProfilePayload: <DED> <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "22": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None <IND> stack_level: Optional[int] = None \n \n",
      "23": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None <DED> \n",
      "24": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None <IND> \n",
      "25": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None <DED> stack_level: Optional[int] = None \n \n",
      "26": "class ClearChargingProfilePayload: \n id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "27": "class ClearChargingProfilePayload: \n id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "28": "class ClearChargingProfilePayload: \n id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "29": "class ClearChargingProfilePayload: \n id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "30": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n {",
      "31": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None { \n",
      "32": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n }",
      "33": "class ClearChargingProfilePayload: \n \\ connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "34": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None } \n",
      "35": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n <IND>",
      "36": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n <DED>",
      "37": "class ClearChargingProfilePayload: \n <DED> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n <IND>",
      "38": "class ClearChargingProfilePayload: \n <DED> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n <DED>",
      "39": "class ClearChargingProfilePayload: <IND> <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "40": "class ClearChargingProfilePayload: <DED> <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "41": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None <DED> \n",
      "42": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None <IND> \n",
      "43": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None <IND> stack_level: Optional[int] = None \n \n",
      "44": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None <IND> charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "45": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None <DED> charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "46": "class ClearChargingProfilePayload: \n <DED> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "47": "class ClearChargingProfilePayload: \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \n",
      "48": "class ClearChargingProfilePayload: \n <IND> connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None <DED> stack_level: Optional[int] = None \n \n",
      "49": "class ClearChargingProfilePayload: \n <IND> id: Optional[int] = None \n connector_id: Optional[int] = None \n charging_profile_purpose: Optional[ChargingProfilePurposeType] = None \n stack_level: Optional[int] = None \n \\"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # Some services are provided by a TypeChecker instance.\n    chk = None  # type: mypy.checker.TypeChecker\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg = None  # type: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk = None  # type: mypy.checkexpr.ExpressionChecker\n\n",
    "target_code": "    # Some services are provided by a TypeChecker instance.\n    chk: \"mypy.checker.TypeChecker\"\n    # This is shared with TypeChecker, but stored also here for convenience.\n    msg: MessageBuilder\n    # Some services are provided by a ExpressionChecker instance.\n    exprchk: \"mypy.checkexpr.ExpressionChecker\"\n\n",
    "warning_line": "    msg = None  # type: MessageBuilder",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `msg` declared in class `StringFormatterChecker` has type `MessageBuilder` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 175,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python/mypy",
    "source_filename": "mypy/checkstrformat.py",
    "target_filename": "mypy/checkstrformat.py",
    "source_changeid": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe^",
    "target_changeid": "f98f78216ba9d6ab68c8e69c19e9f3c7926c5efe",
    "predictions": [
      "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "1": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[MessageBuilder] = None # type: Optional[MessageBuilder] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "2": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n \n",
      "3": "# Some services are provided by a TypeChecker instance. \n chk: Mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "4": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[MessageBuilder] = None # type: Optional[ExpressionBuilder] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "5": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker\" \n \n",
      "6": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker <DED> \n",
      "7": "# Some services are provided by a ExpressionChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "8": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker <IND> \n",
      "9": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker { \n",
      "10": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[MessageBuilder] = None # type: Optional[Optional[MessageBuilder]] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "11": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[MessageBuilder] = None # type: Optional[Iterator] \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "12": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by an ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "13": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n <DED>",
      "14": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n <IND>",
      "15": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker } \n",
      "16": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n <DED>",
      "17": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "18": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: Optional[TypeBuilder] = None \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "19": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker <DED> \n",
      "20": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n <IND>",
      "21": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n \n",
      "22": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker <IND> \n",
      "23": "# Some services are provided by a TypeChecker instance. <DED> chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "24": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \\ \n",
      "25": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. <DED> exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "26": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker <DED> # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "27": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. <IND> exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "28": "# Some services are provided by a TypeChecker instance. <IND> chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "29": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder <IND> # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "30": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder <DED> # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "31": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. <IND> msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "32": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker <IND> # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "33": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker\". \n \n",
      "34": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. <DED> msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "35": "# Some services are provided by a TypeChecker instance. \n chk:'mypy.checker.TypeChecker' \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "36": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker\" \n \n",
      "37": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n",
      "38": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n {",
      "39": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder \n # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker { \n",
      "40": "# Some services are provided by a TypeChecker instance. \n chk: mypy.checker.TypeChecker \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: MessageBuilder { # Some services are provided by a ExpressionChecker instance. \n exprchk: mypy.checkexpr.ExpressionChecker \n \n",
      "41": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n",
      "42": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n",
      "43": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n",
      "44": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n",
      "45": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n",
      "46": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n",
      "47": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n",
      "48": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n",
      "49": "# Some services are provided by a TypeChecker instance. \n chk: \"mypy.checker.TypeChecker\" \n # This is shared with TypeChecker, but stored also here for convenience. \n msg: \"MessageBuilder\" \n # Some services are provided by a ExpressionChecker instance. \n exprchk: \"mypy.checkexpr.ExpressionChecker \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": true,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>ARG_REGS: List[str] = None                                  # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "target_code": "\n    <DED>ARG_REGS: List[str] = []                                    # A list of all the registers used for integral args, in order (names or offsets)\n    FP_ARG_REGS: List[str] = []                                 # A list of all the registers used for floating point args, in order\n    STACKARG_SP_BUFF = 0                                        # The amount of stack space reserved between the saved return address\n",
    "warning_line": "    FP_ARG_REGS: List[str] = None                               # A list of all the registers used for floating point args, in order",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `FP_ARG_REGS` declared in class `SimCC` has type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 353,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "angr/angr",
    "source_filename": "angr/calling_conventions.py",
    "target_filename": "angr/calling_conventions.py",
    "source_changeid": "98cc88d3cb9a577fd001977d8515d43075aa619f^",
    "target_changeid": "98cc88d3cb9a577fd001977d8515d43075aa619f",
    "predictions": [
      "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "1": "\n <IND> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "2": "\n \n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "3": "<DED> <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "4": "<IND> <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "5": "\n { ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "6": "\n } ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "7": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "8": "<DED> <IND> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "9": "\n <DED> FP_ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "10": "\n \\ ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "11": "<IND> <IND> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "12": "{ <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "13": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order <IND> STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "14": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order <DED> STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "15": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) <DED> FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "16": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address <IND>",
      "17": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) <IND> FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "18": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "19": "} <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "20": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address <DED>",
      "21": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "22": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "23": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "24": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "25": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "26": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "27": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "28": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "29": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "30": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "31": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order { STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "32": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "33": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "34": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "35": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "36": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "37": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "38": "\n <IND> ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "39": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "40": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "41": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "42": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "43": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "44": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "45": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) { FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "46": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "47": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "48": "\n ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address \n",
      "49": "\n <DED> ARG_REGS: List[str] = [] # A list of all the registers used for integral args, in order (names or offsets) \n FP_ARG_REGS: List[str] = [] # A list of all the registers used for floating point args, in order \n STACKARG_SP_BUFF = 0 # The amount of stack space reserved between the saved return address {"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # suite params\n    stop_mode: StopMode = None\n    stop_task: Optional[str] = None\n",
    "target_code": "    # suite params\n    stop_mode: Optional[StopMode] = None\n    stop_task: Optional[str] = None\n",
    "warning_line": "    stop_mode: StopMode = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `stop_mode` declared in class `Scheduler` has type `StopMode` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 181,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "cylc/cylc-flow",
    "source_filename": "cylc/flow/scheduler.py",
    "target_filename": "cylc/flow/scheduler.py",
    "source_changeid": "aa541ef7622378a99558e517385504d1767097e6^",
    "target_changeid": "aa541ef7622378a99558e517385504d1767097e6",
    "predictions": [
      "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n"
    ],
    "correct": true,
    "top_five": {
      "0": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "1": "# suite params \n stop_mode: Optional[stop_mode] = None \n stop_task: Optional[str] = None \n",
      "2": "# suite params <DED> stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "3": "# suite params <IND> stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "4": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <IND>",
      "5": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None <DED>",
      "6": "# suite params \n stop_mode: Optional[StopMode] = None <IND> stop_task: Optional[str] = None \n",
      "7": "# suite params \n stop_mode: Optional[StopMode] = None <DED> stop_task: Optional[str] = None \n",
      "8": "# suite params \n stop_mode = StopMode \n stop_task: Optional[str] = None \n",
      "9": "# suite params { stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "10": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None {",
      "11": "# suite params \n stop_mode: Optional[StopMode] = None { stop_task: Optional[str] = None \n",
      "12": "# suite params \n stop_mode: StopMode \n stop_task: Optional[str] = None \n",
      "13": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None }",
      "14": "# suite params \n stop_mode: Optional[StopMode] = None } stop_task: Optional[str] = None \n",
      "15": "# suite params } stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "16": "# suite params \n stop_mode: Optional[str] = None \n stop_task: Optional[str] = None \n",
      "17": "# suite params \n stop_mode: Optional[stopmode] = None \n stop_task: Optional[str] = None \n",
      "18": "# suite params \n stop_mode: Optional[ StopMode] = None \n stop_task: Optional[str] = None \n",
      "19": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \\",
      "20": "# suite params \n stop_mode: Optional[StopMode] = None \\ stop_task: Optional[str] = None \n",
      "21": "# suite params \\ stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "22": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "23": "# suite params \n stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None \n",
      "24": "# suite params stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "25": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "26": "# suite params \n stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None \n",
      "27": "# suite params stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "28": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "29": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "30": "# suite params \n stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None \n",
      "31": "# suite params \n stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None \n",
      "32": "# suite params stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "33": "# suite params stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "34": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "35": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "36": "# suite params \n stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None \n",
      "37": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "38": "# suite params \n stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None \n",
      "39": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "40": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None ^",
      "41": "# suite params \n stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None \n",
      "42": "# suite params \n stop_mode: Optional[StopMode] = None ^ stop_task: Optional[str] = None \n",
      "43": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "44": "# suite params stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "45": "# suite params stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n",
      "46": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "47": "# suite params \n stop_mode: Optional[StopMode] = None stop_task: Optional[str] = None \n",
      "48": "# suite params \n stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None",
      "49": "# suite params stop_mode: Optional[StopMode] = None \n stop_task: Optional[str] = None \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "<DED>class OrthVariants(BaseModel):\n    <IND>paired: List[OrthVariantsPaired] = {}\n    single: List[OrthVariantsSingle] = {}\n\n",
    "target_code": "<DED>class OrthVariants(BaseModel):\n    <IND>paired: List[OrthVariantsPaired] = []\n    single: List[OrthVariantsSingle] = []\n\n",
    "warning_line": "    single: List[OrthVariantsSingle] = {}",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `single` declared in class `OrthVariants` has type `List[OrthVariantsSingle]` but is used as type `Dict[Variable[_KT], Variable[_VT]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 26,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "explosion/spaCy",
    "source_filename": "spacy/training/augment.py",
    "target_filename": "spacy/training/augment.py",
    "source_changeid": "657af5f91f88bb5a414ae133a99465dbc4f240be^",
    "target_changeid": "657af5f91f88bb5a414ae133a99465dbc4f240be",
    "predictions": [
      "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "1": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "2": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "3": "\n class OrthVariants(BaseModel): \n <DED> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "4": "<DED> class OrthVariants(BaseModel): \n <DED> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "5": "<IND> class OrthVariants(BaseModel): \n <DED> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "6": "\n class OrthVariants(BaseModel): \n \n paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "7": "<DED> class OrthVariants(BaseModel): \n \n paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "8": "{ class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "9": "<IND> class OrthVariants(BaseModel): \n \n paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "10": "} class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "11": "\n class OrthVariants(BaseModel): \n { paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "12": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] =[] \n \n \n",
      "13": "\n class OrthVariants(BaseModel): \n } paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "14": "<DED> class OrthVariants(BaseModel): \n { paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "15": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] =[] \n \n \n",
      "16": "<DED> class OrthVariants(BaseModel): \n } paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "17": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n <DED> \n",
      "18": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = Listing[OrthVariantsSingle] \n \n \n",
      "19": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n <DED> \n",
      "20": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = Listing[OrthVariantsSingle] \n \n \n",
      "21": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n <IND> \n",
      "22": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n <DED>",
      "23": "\\ class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "24": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n <IND> \n",
      "25": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n <DED>",
      "26": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [], \n \n \n",
      "27": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n <IND>",
      "28": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [], \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "29": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [], \n \n \n",
      "30": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [], \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "31": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n <IND>",
      "32": "<IND> class OrthVariants(BaseModel): \n { paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "33": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] =[] \n \n \n",
      "34": "<IND> class OrthVariants(BaseModel): \n } paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "35": "{ class OrthVariants(BaseModel): \n <DED> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "36": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n <DED> \n",
      "37": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n <IND> \n",
      "38": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n <DED>",
      "39": "\n class OrthVariants(BaseModel): \n \\ paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "40": "\n class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [], \n <DED> \n",
      "41": "} class OrthVariants(BaseModel): \n <DED> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "42": "class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "43": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [], \n \n \n",
      "44": "class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "45": "<DED> class OrthVariants(BaseModel): \n \\ paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "46": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [], \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "47": "<IND> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n <IND>",
      "48": "class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [] \n \n \n",
      "49": "<DED> class OrthVariants(BaseModel): \n <IND> paired: List[OrthVariantsPaired] = [] \n single: List[OrthVariantsSingle] = [], \n <DED> \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: str\n\n",
    "target_code": "        # current meson version target within that if-block.\n        self.tmp_meson_version = None # type: T.Optional[str]\n\n",
    "warning_line": "        self.tmp_meson_version = None # type: str",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `tmp_meson_version` declared in class `InterpreterBase` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 461,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mesonbuild/meson",
    "source_filename": "mesonbuild/interpreterbase.py",
    "target_filename": "mesonbuild/interpreterbase.py",
    "source_changeid": "70d2207212e9ae6a2b5d345811acfbe441b6ec74^",
    "target_changeid": "70d2207212e9ae6a2b5d345811acfbe441b6ec74",
    "predictions": [
      "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \n",
      "1": "# current meson version target within that if-block. \n self.tmp_meson_version: Optional[str] = None \n \n",
      "2": "# current meson version target within that if-block. \n self.tmp_meson_version = 0 # type: Optional[str] \n \n",
      "3": "# current meson version target within that if-block. \n self.tmp_meson_version = \"\" \n \n",
      "4": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n <IND>",
      "5": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n <DED>",
      "6": "# current meson version target within that if-block. \n self.tmp_meson_version = none # type: Optional[str] \n \n",
      "7": "# current meson version target within that if-block. \n self.tmp_messon_version = None # type: Optional[str] \n \n",
      "8": "# current meson version target within that if-block. <IND> self.tmp_meson_version = None # type: Optional[str] \n \n",
      "9": "# current meson version target within that if-block. <DED> self.tmp_meson_version = None # type: Optional[str] \n \n",
      "10": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] <IND> \n",
      "11": "# current meson version target within that if-block. \n self.tmp_meson_version: str \n \n",
      "12": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] <DED> \n",
      "13": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n {",
      "14": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] { \n",
      "15": "# current meson version target within that if-block. { self.tmp_meson_version = None # type: Optional[str] \n \n",
      "16": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n }",
      "17": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] } \n",
      "18": "# current meson version target within that if-block. } self.tmp_meson_version = None # type: Optional[str] \n \n",
      "19": "# current meson version target within that if-block. \n self.tmp_meson_version = '' # type: Optional[str] \n \n",
      "20": "# current meson version target within that if-block. \n self.tmp_meson_version=None # type: Optional[str] \n \n",
      "21": "# current meson version target within that if-block. \n self.tmp_meson_version = '' \n \n",
      "22": "# current meson version target within that if-block. \n self.tmp_meson_version = 0.0 # type: Optional[str] \n \n",
      "23": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \\ \n",
      "24": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n \\",
      "25": "# current meson version target within that if-block. \\ self.tmp_meson_version = None # type: Optional[str] \n \n",
      "26": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "27": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "28": "# current meson version target within that if-block. self.tmp_meson_version = None # type: Optional[str] \n \n",
      "29": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "30": "# current meson version target within that if-block. \n self.tmp_meson_version = 0 # type: Optional[str] \n <IND>",
      "31": "# current meson version target within that if-block. self.tmp_meson_version = None # type: Optional[str] \n \n",
      "32": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "33": "# current meson version target within that if-block. \n self.tmp_meson_version = 0 # type: Optional[str] \n <DED>",
      "34": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "35": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "36": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "37": "# current meson version target within that if-block. self.tmp_meson_version = None # type: Optional[str] \n \n",
      "38": "# current meson version target within that if-block. self.tmp_meson_version = None # type: Optional[str] \n \n",
      "39": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "40": "# current meson version target within that if-block. \n self.tmp_meson_version = 0. # type: Optional[str] \n \n",
      "41": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "42": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "43": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "44": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "45": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] ^ \n",
      "46": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "47": "# current meson version target within that if-block. \n self.tmp_meson_version = None # type: Optional[str] \n",
      "48": "# current meson version target within that if-block. self.tmp_meson_version = None # type: Optional[str] \n \n",
      "49": "# current meson version target within that if-block. self.tmp_meson_version = None # type: Optional[str] \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    APP_DIR: str = None\n    STUDIES: str = None\n\n",
    "target_code": "\n    APP_DIR: str = \"\"\n    STUDIES: str = \"\"\n\n",
    "warning_line": "    STUDIES: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `STUDIES` declared in class `Settings` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 12,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Project-MONAI/MONAILabel",
    "source_filename": "monailabel/config.py",
    "target_filename": "monailabel/config.py",
    "source_changeid": "4bcf6ea684888411b771da5f4e9632bae0e267a0^",
    "target_changeid": "4bcf6ea684888411b771da5f4e9632bae0e267a0",
    "predictions": [
      "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "1": "<DED> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "2": "<IND> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "3": "{ APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "4": "} APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "5": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <DED>",
      "6": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <IND>",
      "7": "\\ APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "8": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <IND> \n",
      "9": "\n APP_DIR: Optional[str] = None <DED> STUDIES: Optional[str] = None \n \n",
      "10": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None <DED> \n",
      "11": "\n APP_DIR: Optional[str] = None <IND> STUDIES: Optional[str] = None \n \n",
      "12": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n {",
      "13": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "14": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None { \n",
      "15": "\n APP_DIR: Optional[str] = None { STUDIES: Optional[str] = None \n \n",
      "16": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "17": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "18": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "19": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n }",
      "20": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "21": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "22": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "23": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "24": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "25": "^ APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "26": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "27": "\n APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None } \n",
      "28": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "29": "\n APP_DIR: Optional[str] = None } STUDIES: Optional[str] = None \n \n",
      "30": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "31": "<DED> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <DED>",
      "32": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "33": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "34": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "35": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "36": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "37": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "38": "<DED> APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n <IND>",
      "39": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "40": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "41": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "42": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "43": "\n APP_DIR: str = '' \n STUDIES: str = '' \n \n",
      "44": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "45": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "46": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "47": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "48": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n",
      "49": "APP_DIR: Optional[str] = None \n STUDIES: Optional[str] = None \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        )\n        self.image: str = None\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "target_code": "        )\n        self.image: str = ''\n        self.append_file = ''.join([self.image_name, '.append'])\n",
    "warning_line": "        self.image: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `image` declared in class `KisBuilder` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 86,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "OSInside/kiwi",
    "source_filename": "kiwi/builder/kis.py",
    "target_filename": "kiwi/builder/kis.py",
    "source_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536^",
    "target_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "predictions": [
      ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n"
    ],
    "correct": false,
    "top_five": {
      "0": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "1": ") \n self.image: str = \"\" \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "2": ") \n self.image: str = '' \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "3": ") <DED> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "4": ") <IND> self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "5": ") \n self.image: Optional[str] = None <IND> self.append_file = ''.join([self.image_name, '.append']) \n",
      "6": ") \n self.image: Optional[str] = None <DED> self.append_file = ''.join([self.image_name, '.append']) \n",
      "7": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <IND>",
      "8": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) <DED>",
      "9": ") { self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "10": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) {",
      "11": ") \n self.image: Optional[str] = None { self.append_file = ''.join([self.image_name, '.append']) \n",
      "12": ") } self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "13": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) }",
      "14": ") \n self.image: Optional[str] = None } self.append_file = ''.join([self.image_name, '.append']) \n",
      "15": ") \n self.image: str = \"\") \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "16": ") \\ self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "17": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \\",
      "18": ") \n self.image: Optional[str] = None \\ self.append_file = ''.join([self.image_name, '.append']) \n",
      "19": ") \n self.image_name: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "20": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "21": ") self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "22": ") \n self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append']) \n",
      "23": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "24": ") \n self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append']) \n",
      "25": ") self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "26": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "27": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "28": ") \n self.image = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "29": ") self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "30": ") self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "31": ") \n self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append']) \n",
      "32": ") \n self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append']) \n",
      "33": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "34": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "35": ") self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "36": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "37": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) ^",
      "38": ") \n self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append']) \n",
      "39": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "40": ") ^ self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "41": ") self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "42": ") self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append']) \n",
      "43": ") \n self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append']) \n",
      "44": ") \n self.image: Optional[str] = None ^ self.append_file = ''.join([self.image_name, '.append']) \n",
      "45": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "46": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "47": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "48": ") \n self.image: Optional[str] = None \n self.append_file = ''.join([self.image_name, '.append'])",
      "49": ") \n self.image: Optional[str] = None self.append_file = ''.join([self.image_name, '.append']) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.waiter = False\n        self.event = None   # type: asyncio.Event\n\n",
    "target_code": "        self.waiter = False\n        self.event = None   # type: Optional[asyncio.Event]\n\n",
    "warning_line": "        self.event = None   # type: asyncio.Event",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `event` declared in class `QueuedEvent` has type `asyncio.locks.Event` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 794,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "missionpinball/mpf",
    "source_filename": "mpf/core/events.py",
    "target_filename": "mpf/core/events.py",
    "source_changeid": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278^",
    "target_changeid": "4dbcd2cdbc16939332b76efdfeb1ae3a0ede0278",
    "predictions": [
      "self.waiter = False \n self.event = None # type: asyncio.Event \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self.waiter = False \n self.event = None # type: asyncio.Event \n \n",
      "1": "self.waiter = False \n self.event = 0 # type: asyncio.Event \n \n",
      "2": "self.waiter = False \n self.event = asyncio.Event \n \n",
      "3": "self.waiter = False \n self.event = None # type: Optional[asyncio.Event] \n \n",
      "4": "self.waiter = False \n self.event = None # type: Asyncio.Event \n \n",
      "5": "self.waiter = False \n self.event = Asyncio.Event \n \n",
      "6": "self.waiter = False \n self.event = QueuedEvent # type: asyncio.Event \n \n",
      "7": "self.waiter = False \n self.event: asyncio.Event \n \n",
      "8": "self.waiter = False \n self.event = 0 # type: Asyncio.Event \n \n",
      "9": "self.waiter = False \n self.event = None # type: asyncio.Event \n <IND>",
      "10": "self.waiter = False \n self.event = 0 # type: Optional[asyncio.Event] \n \n",
      "11": "self.waiter = False \n self.event = None # type: asyncio.Event \n <DED>",
      "12": "self.waiter = False \n self.event = '' # type: asyncio.Event \n \n",
      "13": "self.waiter = False \n self.event = \"\" # type: asyncio.Event \n \n",
      "14": "self.waiter = False \n self.event = None # type: a.Optional[asyncio.Event] \n \n",
      "15": "self.waiter = False \n self.event_locks = None # type: asyncio.Event \n \n",
      "16": "self.waiter = False <IND> self.event = None # type: asyncio.Event \n \n",
      "17": "self.waiter = False \n self.event = None # type: asyncio.Event <IND> \n",
      "18": "self.waiter = False <DED> self.event = None # type: asyncio.Event \n \n",
      "19": "self.waiter = False \n self.event = None # type: asyncio.Event <DED> \n",
      "20": "self.waiter = False \n self.event = None # type: asyncio.Event \n {",
      "21": "self.waiter = False \n self.event = none # type: asyncio.Event \n \n",
      "22": "self.waiter = False \n self.event = False # type: asyncio.Event \n \n",
      "23": "self.waiter = False \n self.event = None # type: type asyncio.Event \n \n",
      "24": "self.waiter = False \n self.event = None # type: asyncio.Event { \n",
      "25": "self.waiter = False { self.event = None # type: asyncio.Event \n \n",
      "26": "self.waiter = False \n self.event = null # type: asyncio.Event \n \n",
      "27": "self.waiter = False \n self.event = None # type: asyncio.Event \n }",
      "28": "self.waiter = False \n self.event = None # type: 'asyncio.Event' \n \n",
      "29": "self.waiter = False \n self.event_locks = asyncio.Event \n \n",
      "30": "self.waiter = False } self.event = None # type: asyncio.Event \n \n",
      "31": "self.waiter = False \n self.locks.Event # type: asyncio.Event \n \n",
      "32": "self.waiter = False \n self.event = None # type: asyncio.Event } \n",
      "33": "self.waiter = False \n self.event = Null # type: asyncio.Event \n \n",
      "34": "self.waiter = False \n self.event = NONE # type: asyncio.Event \n \n",
      "35": "self.waiter = False \n self.event is not None # type: asyncio.Event \n \n",
      "36": "self.waiter = False \n self.event = no # type: asyncio.Event \n \n",
      "37": "self.waiter = False \n self.event = No # type: asyncio.Event \n \n",
      "38": "self.waiter = False \n self.event: Asyncio.Event \n \n",
      "39": "self.waiter = False \n self.event = 0 # type: asyncio.Event \n <IND>",
      "40": "self.waiter = False \n self.event = 0 # type: asyncio.Event \n <DED>",
      "41": "self.waiter = False \n self.event = None # type: Optional[asyncio.Event] \n <IND>",
      "42": "self.waiter = False \n self.event = None # type: Optional[asyncio.Event] \n <DED>",
      "43": "self.waiter = False \n self.event = None # type: asyncio.Event \n \\",
      "44": "self.waiter = False \n asyncio.event = asyncio.Event \n \n",
      "45": "self.waiter = False \\ self.event = None # type: asyncio.Event \n \n",
      "46": "self.waiter = False \n self.event = int # type: asyncio.Event \n \n",
      "47": "self.waiter = False \n self.event = None # type: asyncio.Event \\ \n",
      "48": "self.waiter = False self.event = None # type: asyncio.Event \n \n",
      "49": "self.waiter = False \n self.event = None # type: asyncio.Event \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: int = ormar.Integer(primary_key=True)\n    ident: str = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"])\n\n",
    "warning_line": "    id: int = ormar.Integer(primary_key=True)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `id` declared in class `Organisation` has type `int` but is used as type `ormar.fields.model_fields.Integer`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 54,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "1": "\n <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "2": "\n <IND> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "3": "\n <IND> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "4": "\n \n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "5": "<DED> <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "6": "\n \n id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "7": "\n <DED> id= ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "8": "<IND> <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "9": "<DED> <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "10": "\n { id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "11": "\n } id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "12": "<IND> <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n <IND>",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n <DED>",
      "15": "\n { id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "16": "\n } id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "17": "<DED> <IND> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "18": "\n \\ id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "19": "{ <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "20": "\n <IND> id= ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "21": "<IND> <IND> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "22": "\n <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n <IND>",
      "23": "\n <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n <DED>",
      "24": "\n <DED> id = ormar.Integer(primary_key=True) <DED> ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "25": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) <DED> \n",
      "26": "\n <DED> id = ormar.Integer(primary_key=True) <IND> ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "27": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) <IND> \n",
      "28": "} <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "29": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "30": "<DED> <IND> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "31": "\n \\ id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "32": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n {",
      "33": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "35": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "43": "{ <DED> id = ormar.Integer(primary_key=True) \n ident = ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "44": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "47": "\n <DED> id = ormar.Integer(primary_key=True) { ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n",
      "48": "\n <DED> id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) { \n",
      "49": "\n id = ormar.Integer(primary_key=True) \n ident= ormar.String(max_length=100, choices=[\"ACME Ltd\", \"Other ltd\"]) \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    ioc: str\n    ioc_type: str\n    query_subtype: str = None\n    result: bool = False\n",
    "target_code": "    ioc: str\n    ioc_type: Optional[str]\n    query_subtype: Optional[str] = None\n    result: bool = False\n",
    "warning_line": "    query_subtype: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `query_subtype` declared in class `LookupResult` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 50,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "microsoft/msticpy",
    "source_filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "target_filename": "msticpy/sectools/tiproviders/ti_provider_base.py",
    "source_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a^",
    "target_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "predictions": [
      "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n"
    ],
    "correct": false,
    "top_five": {
      "0": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "1": "ioc: str \n ioc_type: str \n query_subtype: str \n result: bool = False \n",
      "2": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "3": "ioc: str <IND> ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "4": "ioc: str \n ioc_type: str <IND> query_subtype: Optional[str] = None \n result: bool = False \n",
      "5": "ioc: str <DED> ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "6": "ioc: str \n ioc_type: str <DED> query_subtype: Optional[str] = None \n result: bool = False \n",
      "7": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False <IND>",
      "8": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None <IND> result: bool = False \n",
      "9": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False <DED>",
      "10": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None <DED> result: bool = False \n",
      "11": "ioc: str { ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "12": "ioc: str \n ioc_type: str { query_subtype: Optional[str] = None \n result: bool = False \n",
      "13": "ioc: str \n ioc_type: str \n query_subtype: str <IND> result: bool = False \n",
      "14": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False {",
      "15": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None { result: bool = False \n",
      "16": "ioc: str \n ioc_type: str \n query_subtype: str <DED> result: bool = False \n",
      "17": "ioc: str } ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "18": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False }",
      "19": "ioc: str \n ioc_type: str } query_subtype: Optional[str] = None \n result: bool = False \n",
      "20": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None } result: bool = False \n",
      "21": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False <IND>",
      "22": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False <DED>",
      "23": "ioc: str \n ioc_type: str \n query_subtype: str { result: bool = False \n",
      "24": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \\",
      "25": "ioc: str \\ ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "26": "ioc: str \n ioc_type: str \\ query_subtype: Optional[str] = None \n result: bool = False \n",
      "27": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \\ result: bool = False \n",
      "28": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False {",
      "29": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False",
      "30": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None result: bool = False \n",
      "31": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False",
      "32": "ioc: str \n ioc_type: str query_subtype: Optional[str] = None \n result: bool = False \n",
      "33": "ioc: str ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "34": "ioc: str \n ioc_type: str \n query_subtype: str } result: bool = False \n",
      "35": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None result: bool = False \n",
      "36": "ioc: str \n ioc_type: str query_subtype: Optional[str] = None \n result: bool = False \n",
      "37": "ioc: str ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False \n",
      "38": "ioc: str \n ioc_type: Optional[str] = None \n query_subtype: Optional[str] = None \n result: bool = False }",
      "39": "ioc: str <IND> ioc_type: str \n query_subtype: str \n result: bool = False \n",
      "40": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False",
      "41": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False",
      "42": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None result: bool = False \n",
      "43": "ioc: str \n ioc_type: str <IND> query_subtype: str \n result: bool = False \n",
      "44": "ioc: str <DED> ioc_type: str \n query_subtype: str \n result: bool = False \n",
      "45": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False",
      "46": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False",
      "47": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False",
      "48": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False",
      "49": "ioc: str \n ioc_type: str \n query_subtype: Optional[str] = None \n result: bool = False"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "class Cli:\n    <IND>description: str = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "target_code": "class Cli:\n    <IND>description: Optional[str] = None\n    formatter: Formatter = field(default_factory=RichFormatter)\n",
    "warning_line": "    description: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `description` declared in class `Cli` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 15,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Andarius/piou",
    "source_filename": "piou/cli.py",
    "target_filename": "piou/cli.py",
    "source_changeid": "2d6f659202b7ec37a5a9b1fe260950363abc51d2^",
    "target_changeid": "2d6f659202b7ec37a5a9b1fe260950363abc51d2",
    "predictions": [
      "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n"
    ],
    "correct": true,
    "top_five": {
      "0": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "1": "class Cli: \n <DED> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "2": "class Cli: \n \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "3": "class Cli: \n <IND> description: str = \"\" \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "4": "class Cli: \n { description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "5": "class Cli: \n } description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "6": "class Cli: \n \\ description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "7": "class Cli: \n <DED> description: str = \"\" \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "8": "class Cli: \n <IND> description: Optional[str] = None <IND> formatter: Formatter = field(default_factory=RichFormatter) \n",
      "9": "class Cli: <DED> <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "10": "class Cli: <IND> <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "11": "class Cli: \n <IND> description: Optional[str] = None <DED> formatter: Formatter = field(default_factory=RichFormatter) \n",
      "12": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "13": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "14": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "15": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "16": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "17": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <IND>",
      "18": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) <DED>",
      "19": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "20": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "21": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "22": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "23": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "24": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "25": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "26": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "27": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "28": "class Cli: \n <IND> description: str = '' \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "29": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "30": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "31": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "32": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "33": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "34": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "35": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "36": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "37": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "38": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "39": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "40": "class Cli: { <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "41": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "42": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "43": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "44": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "45": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "46": "class Cli: \n description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n",
      "47": "class Cli: \n <IND> description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) {",
      "48": "class Cli: \n <IND> description: Optional[str] = None { formatter: Formatter = field(default_factory=RichFormatter) \n",
      "49": "class Cli: \n ^ description: Optional[str] = None \n formatter: Formatter = field(default_factory=RichFormatter) \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <IND>requested_message: MessageTrigger\n    connector_id: int = None\n\n",
    "target_code": "    <IND>requested_message: MessageTrigger\n    connector_id: Optional[int] = None\n\n",
    "warning_line": "    connector_id: int = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `connector_id` declared in class `TriggerMessagePayload` has type `int` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 134,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "mobilityhouse/ocpp",
    "source_filename": "ocpp/v16/call.py",
    "target_filename": "ocpp/v16/call.py",
    "source_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c^",
    "target_changeid": "d99886565233ef7fa99750d386ff35d2933bbe8c",
    "predictions": [
      "\n requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "1": "<DED> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "2": "<IND> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "3": "{ requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "4": "} requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "5": "\\ requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "6": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "7": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "8": "\n requested_message: MessageTrigger \n connector_id: Optional[int] = None \n <DED>",
      "9": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "10": "\n requested_message: MessageTrigger \n connector_id: Optional[int] = None \n <IND>",
      "11": "<DED> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n <DED>",
      "12": "<DED> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n <IND>",
      "13": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "14": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "15": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "16": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "17": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "18": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "19": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "20": "^ requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "21": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "22": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "23": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "24": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "25": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "26": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "27": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "28": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "29": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "30": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "31": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "32": "<IND> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n <DED>",
      "33": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "34": "<IND> requested_message: MessageTrigger \n connector_id: Optional[int] = None \n <IND>",
      "35": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "36": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "37": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "38": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "39": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "40": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "41": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "42": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "43": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "44": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "45": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "46": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "47": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "48": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n",
      "49": "requested_message: MessageTrigger \n connector_id: Optional[int] = None \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agents\n                for a_i, agent in enumerate(agents)\n            }\n",
    "target_code": "            self._agent_net_config = {\n                agent: agent.split(\"_\")[0] if shared_weights else agent\n                for agent in agents\n            }\n",
    "warning_line": "            self._agent_net_config = {",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `_agent_net_config` declared in class `MAPPO` has type `Dict[str, str]` but is used as type `Dict[str, Union[typing.List[str], str]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 153,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "instadeepai/Mava",
    "source_filename": "mava/systems/tf/mappo/system.py",
    "target_filename": "mava/systems/tf/mappo/system.py",
    "source_changeid": "e9693e9e7f081d68802b70615e799cb910353fe7^",
    "target_changeid": "e9693e9e7f081d68802b70615e799cb910353fe7",
    "predictions": [
      "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "1": "self._agent_net_config = \n <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "2": "self._agent_net_config = \n <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "3": "self._agent_net_config = <DED> \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "4": "self._agent_net_config = <IND> \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "5": "self._agent_net_config = <DED> <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "6": "self._agent_net_config = <IND> <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "7": "self._agent_net_config = <DED> <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "8": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n <DED>",
      "9": "self._agent_net_config = <IND> <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "10": "self._agent_net_config = { \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "11": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n <IND>",
      "12": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n \n \n",
      "13": "self._agent_net_config = \n <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n <DED>",
      "14": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n <DED> \n",
      "15": "self._agent_net_config = { <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "16": "self._agent_net_config = \n { agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "17": "self._agent_net_config = } \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "18": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n <IND> \n",
      "19": "self._agent_net_config = \n <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n <IND>",
      "20": "self._agent_net_config = \n <IND> agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n \n \n",
      "21": "self._agent_net_config = \n } agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "22": "self._agent_net_config = \n <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n <DED> \n",
      "23": "self._agent_net_config = \n <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n <DED>",
      "24": "self._agent_net_config = \n <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n <IND> \n",
      "25": "self._agent_net_config = } <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "26": "self._agent_net_config = { <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "27": "self._agent_net_config = \n <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n <IND>",
      "28": "self._agent_net_config = \n <DED> agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n \n \n",
      "29": "self._agent_net_config = \n <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n <DED> \n",
      "30": "self._agent_net_config = \n <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n <IND> \n",
      "31": "self._agent_net_config = } <DED> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "32": "self._agent_net_config = \\ \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "33": "self._agent_net_config = \n \\ agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "34": "self._agent_net_config = <DED> \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n <DED>",
      "35": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n {",
      "36": "self._agent_net_config = \\ <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "37": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n { \n",
      "38": "self._agent_net_config = <IND> \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n <DED>",
      "39": "self._agent_net_config = \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "40": "self._agent_net_config = \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "41": "self._agent_net_config = <DED> \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n <IND>",
      "42": "self._agent_net_config = \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "43": "self._agent_net_config = <DED> \n agent: agent.split(\"_\")[0] if shared_weights else agents \n for a_i, agent in enumerate(agents) \n \n \n",
      "44": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n }",
      "45": "self._agent_net_config = \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n",
      "46": "self._agent_net_config = <DED> <IND> agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n <DED>",
      "47": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in list(agents) \n \n \n",
      "48": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n assert agent is not None \n self._agent_net_config = \n \n",
      "49": "self._agent_net_config = \n \n agent: agent.split(\"_\")[0] if shared_weights else agent \n for a_i, agent in enumerate(agents) \n \n \n self._agent_net_config = \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    <DED>id: int = ormar.Integer(primary_key=True)\n    name: str = ormar.String(max_length=100)\n\n",
    "target_code": "\n    <DED>id = ormar.Integer(primary_key=True)\n    name = ormar.String(max_length=100)\n\n",
    "warning_line": "    name: str = ormar.String(max_length=100)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `name` declared in class `Album` has type `str` but is used as type `ormar.fields.model_fields.String`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 22,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "collerek/ormar",
    "source_filename": "tests/test_new_annotation_style.py",
    "target_filename": "tests/test_new_annotation_style.py",
    "source_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c^",
    "target_changeid": "7d5e291a19e2ed21f264a17970e6ffd31ef1c73c",
    "predictions": [
      "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "1": "\n <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "2": "\n \n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "3": "<DED> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "4": "<IND> <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "5": "\n { id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "6": "\n } id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "7": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <IND>",
      "8": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n <DED>",
      "9": "<DED> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "10": "\n \\ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "11": "<IND> <IND> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "12": "{ <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "13": "\n <DED> id = ormar.Integer(primary_key=True) <DED> name = ormar.String(max_length=100) \n \n",
      "14": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <DED> \n",
      "15": "\n <DED> id = ormar.Integer(primary_key=True) <IND> name = ormar.String(max_length=100) \n \n",
      "16": "} <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "17": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) <IND> \n",
      "18": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "19": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n {",
      "20": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "21": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "22": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "23": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "24": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "25": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "26": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "27": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "28": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "29": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "30": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) { \n",
      "31": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "32": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "33": "\n <DED> id = ormar.Integer(primary_key=True) { name = ormar.String(max_length=100) \n \n",
      "34": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "35": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "36": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "37": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "38": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "39": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "40": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "41": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "42": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "43": "\n ^ id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "44": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "45": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "46": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "47": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n",
      "48": "\n <DED> id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n }",
      "49": "\n id = ormar.Integer(primary_key=True) \n name = ormar.String(max_length=100) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    <IND>self.env_good = True\n                    self.failure_list = None\n\n",
    "target_code": "                    <IND>self.env_good = True\n                    self.failure_list = []\n\n",
    "warning_line": "                    self.failure_list = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `failure_list` declared in class `AmbassadorEventWatcher` has type `List[str]` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 707,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "emissary-ingress/emissary",
    "source_filename": "ambassador/ambassador_diag/diagd.py",
    "target_filename": "ambassador/ambassador_diag/diagd.py",
    "source_changeid": "45395db246f84a3c940d54d813dfdf8b57756f38^",
    "target_changeid": "45395db246f84a3c940d54d813dfdf8b57756f38",
    "predictions": [
      "\n self.env_good = True \n self.failure_list = [] \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n self.env_good = True \n self.failure_list = [] \n \n",
      "1": "\n self.env_good = True \n self.list = [] \n \n",
      "2": "<DED> self.env_good = True \n self.failure_list = [] \n \n",
      "3": "<IND> self.env_good = True \n self.failure_list = [] \n \n",
      "4": "\n self.env_good = True \n # self.failure_list: List[str] \n \n",
      "5": "\n self.env_good = True \n self.list[failure_list] = [] \n \n",
      "6": "\n self.env_good = True \n # self.failure_list: List[str] = [] \n \n",
      "7": "<DED> self.env_good = True \n self.list = [] \n \n",
      "8": "<DED> self.env_good = True \n # self.failure_list: List[str] \n \n",
      "9": "<IND> self.env_good = True \n self.list = [] \n \n",
      "10": "<IND> self.env_good = True \n # self.failure_list: List[str] \n \n",
      "11": "\n self.env_good = True \n self.failure_list = List[str] \n \n",
      "12": "{ self.env_good = True \n self.failure_list = [] \n \n",
      "13": "\n self.env_good = True \n # self.failure_list = [] \n \n",
      "14": "} self.env_good = True \n self.failure_list = [] \n \n",
      "15": "\n self.env_good = True \n self.failure_list = [] \n <IND>",
      "16": "\n self.env_good = True \n self.failure_list = [] \n <DED>",
      "17": "<DED> self.env_good = True \n self.list[failure_list] = [] \n \n",
      "18": "\n self.env_good = True <IND> self.failure_list = [] \n \n",
      "19": "\n self.env_good = True <DED> self.failure_list = [] \n \n",
      "20": "<IND> self.env_good = True \n self.list[failure_list] = [] \n \n",
      "21": "<DED> self.env_good = True \n # self.failure_list: List[str] = [] \n \n",
      "22": "\n self.env_good = True \n self.failure_list = [] <IND> \n",
      "23": "\n self.env_good = True \n self.list.failure_list = [] \n \n",
      "24": "\n self.env_good = True \n self.failure_list = [] <DED> \n",
      "25": "<IND> self.env_good = True \n # self.failure_list: List[str] = [] \n \n",
      "26": "\\ self.env_good = True \n self.failure_list = [] \n \n",
      "27": "\n self.env_good = True \n self.failure_list = [] \n {",
      "28": "\n self.env_good = True \n self.list(failure_list) = [] \n \n",
      "29": "\n self.env_good = True \n self.failure_list = [] { \n",
      "30": "\n self.env_good = True { self.failure_list = [] \n \n",
      "31": "\n self.env_good = True \n assert self.failure_list is not None \n \n",
      "32": "\n self.env_good = True \n # self.failure_list: List[str] <IND> \n",
      "33": "\n self.env_good = True \n # self.failure_list: List[str] <DED> \n",
      "34": "\n self.env_good = True \n # self.list = [] \n \n",
      "35": "\n self.env_good = True \n # self.failure_list: List[str] { \n",
      "36": "\n self.env_good = True \n self.failure_list = [] \n }",
      "37": "self.env_good = True \n self.failure_list = [] \n \n",
      "38": "\n self.env_good = True \n self.failure_list = [] } \n",
      "39": "\n self.env_good = True } self.failure_list = [] \n \n",
      "40": "\n self.env_good = True \n self.list_failure_list = [] \n \n",
      "41": "self.env_good = True \n self.failure_list = [] \n \n",
      "42": "self.env_good = True \n self.failure_list = [] \n \n",
      "43": "self.env_good = True \n self.failure_list = [] \n \n",
      "44": "<DED> self.env_good = True \n # self.failure_list = [] \n \n",
      "45": "self.env_good = True \n self.failure_list = [] \n \n",
      "46": "\n self.env_good = True \n # self.failure_list: List[str] } \n",
      "47": "self.env_good = True \n self.failure_list = [] \n \n",
      "48": "self.env_good = True \n self.failure_list = [] \n \n",
      "49": "self.env_good = True \n self.failure_list = [] \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": true,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    topo: Mesh = None\n    element: Element = None\n\n",
    "target_code": "\n    topo: Mesh\n    element: Element\n\n",
    "warning_line": "    element: Element = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `element` declared in class `Dofs` has type `skfem.element.element.Element` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 171,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "kinnala/scikit-fem",
    "source_filename": "skfem/assembly/dofs.py",
    "target_filename": "skfem/assembly/dofs.py",
    "source_changeid": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7^",
    "target_changeid": "9f9bc60b07dfa0d343e1d62536555b11d619d5f7",
    "predictions": [
      "\n topo: Mesh \n element: Optional[Element] = None \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n topo: Mesh \n element: Optional[Element] = None \n \n",
      "1": "\n topo: Mesh \n element: Element \n \n",
      "2": "\n topo: Mesh \n element: Optional[skfem.element.Element] = None \n \n",
      "3": "\n topo: Mesh \n element: Optional[element] = None \n \n",
      "4": "<DED> topo: Mesh \n element: Optional[Element] = None \n \n",
      "5": "<IND> topo: Mesh \n element: Optional[Element] = None \n \n",
      "6": "<DED> topo: Mesh \n element: Optional[skfem.element.Element] = None \n \n",
      "7": "<IND> topo: Mesh \n element: Optional[skfem.element.Element] = None \n \n",
      "8": "\n topo: Mesh \n element: Optional[skfem.Element.Element] = None \n \n",
      "9": "<DED> topo: Mesh \n element: Element \n \n",
      "10": "<DED> topo: Mesh \n element: Optional[element] = None \n \n",
      "11": "\n topo: Mesh <DED> element: Optional[Element] = None \n \n",
      "12": "\n topo: Optional[Mesh] = None \n element: Optional[Element] = None \n \n",
      "13": "<IND> topo: Mesh \n element: Optional[element] = None \n \n",
      "14": "\n topo: Mesh <IND> element: Optional[Element] = None \n \n",
      "15": "<IND> topo: Mesh \n element: Element \n \n",
      "16": "{ topo: Mesh \n element: Optional[Element] = None \n \n",
      "17": "\n topo: Mesh { element: Optional[Element] = None \n \n",
      "18": "<DED> topo: Mesh \n element: Optional[skfem.Element.Element] = None \n \n",
      "19": "} topo: Mesh \n element: Optional[Element] = None \n \n",
      "20": "\n topo: Mesh \n element: Optional[skfem.element.Element] = None \n <DED>",
      "21": "\n topo: Mesh \n element: Optional[skfem.element.Element] = None \n <IND>",
      "22": "\n topo: Mesh } element: Optional[Element] = None \n \n",
      "23": "\n topo: Mesh \n element: Optional[Element] = None \n <DED>",
      "24": "\n topo: Mesh \n element: Optional[Element] = None \n <IND>",
      "25": "\n topo: Mesh \n element: Optional[Sequence[Element]] = None \n \n",
      "26": "\n topo: Mesh \n element: Optional[skfem.element.Element] = None <DED> \n",
      "27": "\n topo: Mesh \n element: Optional[skfem.element.Element] = None <IND> \n",
      "28": "\n topo: Mesh \n element: Optional[str] = None \n \n",
      "29": "\n topo: Mesh \n element: Optional[skfem.element.Element] = None \n {",
      "30": "\n topo: Mesh \n element: Optional[Element] = None <DED> \n",
      "31": "\n topo: Mesh \n element: Optional[Element] = None <IND> \n",
      "32": "\n topo: Mesh \n element: Optional[skfem.element.Element] = None { \n",
      "33": "\n topo: Optional[Mesh] = None \n element: Optional[element] = None \n \n",
      "34": "\\ topo: Mesh \n element: Optional[Element] = None \n \n",
      "35": "\n topo: Mesh \n element: Optional[skfem.element.Element] = None \n }",
      "36": "\n topo: Mesh \n element: Optional[Element] = None \n {",
      "37": "\n topo: Mesh \\ element: Optional[Element] = None \n \n",
      "38": "\n topo: Mesh \n element: Optional[skfem.element.Element] = None } \n",
      "39": "\n topo: Mesh \n element: Optional[Element] = None { \n",
      "40": "\n topo: Mesh <DED> element: Optional[element] = None \n \n",
      "41": "<DED> topo: Mesh <DED> element: Optional[Element] = None \n \n",
      "42": "\n topo: Mesh <IND> element: Optional[element] = None \n \n",
      "43": "\n topo: Mesh \n element: Optional[Element] = None \n }",
      "44": "topo: Mesh \n element: Optional[Element] = None \n \n",
      "45": "<DED> topo: Mesh <IND> element: Optional[Element] = None \n \n",
      "46": "\n topo: Mesh element: Optional[Element] = None \n \n",
      "47": "<DED> topo: Mesh \n element: Optional[skfem.element.Element] = None \n <DED>",
      "48": "<DED> topo: Mesh \n element: Optional[skfem.element.Element] = None \n <IND>",
      "49": "\n topo: Mesh element: Optional[Element] = None \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    num_classes: int = None\n    names: List[str] = None\n    names_file: str = None\n    id: Optional[str] = None\n",
    "target_code": "\n    num_classes: Optional[int] = None\n    names: Optional[List[str]] = None\n    names_file: Optional[str] = None\n    id: Optional[str] = None\n",
    "warning_line": "    names_file: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `names_file` declared in class `ClassLabel` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 552,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "huggingface/datasets",
    "source_filename": "src/datasets/features.py",
    "target_filename": "src/datasets/features.py",
    "source_changeid": "49e517a3d21392291d771872204594f43cd09532^",
    "target_changeid": "49e517a3d21392291d771872204594f43cd09532",
    "predictions": [
      "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n"
    ],
    "correct": true,
    "top_five": {
      "0": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "1": "<DED> num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "2": "<IND> num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "3": "{ num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "4": "} num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "5": "\\ num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "6": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None <IND> id: Optional[str] = None \n",
      "7": "\n num_classes: Optional[int] = None <DED> names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "8": "\n num_classes: Optional[int] = None <IND> names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "9": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None <DED> id: Optional[str] = None \n",
      "10": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None <IND>",
      "11": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None <IND> names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "12": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "13": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None <DED>",
      "14": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None <DED> names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "15": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "16": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "17": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "18": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "19": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "20": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "21": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "22": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "23": "^ num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "24": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "25": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None { id: Optional[str] = None \n",
      "26": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "27": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "28": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "29": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "30": "\n num_classes: Optional[int] = None { names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "31": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "32": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None { names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "33": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "34": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "35": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "36": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "37": "\n num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None {",
      "38": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "39": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "40": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "41": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "42": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "43": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "44": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "45": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "46": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "47": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "48": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n",
      "49": "num_classes: Optional[int] = None \n names: Optional[List[str]] = None \n names_file: Optional[str] = None \n id: Optional[str] = None \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n    def _fake_exit(self, code: Optional[int] = 0) -> NoReturn:\n        <IND>self.returncode = code\n",
    "target_code": "\n    def _fake_exit(self, code: int = 0) -> NoReturn:\n        <IND>self.returncode = code\n",
    "warning_line": "        self.returncode = code",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `returncode` declared in class `InterceptSysOutput` has type `int` but is used as type `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 85,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "actionless/pikaur",
    "source_filename": "pikaur_test/helpers.py",
    "target_filename": "pikaur_test/helpers.py",
    "source_changeid": "dc22538c3d010c381442569fed417df83c0f8ecc^",
    "target_changeid": "dc22538c3d010c381442569fed417df83c0f8ecc",
    "predictions": [
      "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "1": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "2": "<IND> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "3": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <DED> self.returncode = code \n",
      "4": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <DED> self.returncode = code \n",
      "5": "<IND> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <DED> self.returncode = code \n",
      "6": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n \n self.returncode = code \n",
      "7": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> code = self.returncode \n",
      "8": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n \n self.returncode = code \n",
      "9": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> code = self.returncode \n",
      "10": "{ def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "11": "} def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "12": "<IND> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n \n self.returncode = code \n",
      "13": "\n def _fake_exit(self, code: Optional[int] = None) -> NoReturn: \n <IND> self.returncode = code \n",
      "14": "<IND> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> code = self.returncode \n",
      "15": "<DED> def _fake_exit(self, code: Optional[int] = None) -> NoReturn: \n <IND> self.returncode = code \n",
      "16": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n { self.returncode = code \n",
      "17": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n } self.returncode = code \n",
      "18": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n { self.returncode = code \n",
      "19": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n } self.returncode = code \n",
      "20": "<IND> def _fake_exit(self, code: Optional[int] = None) -> NoReturn: \n <IND> self.returncode = code \n",
      "21": "\\ def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "22": "<IND> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n { self.returncode = code \n",
      "23": "<IND> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n } self.returncode = code \n",
      "24": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <DED> code = self.returncode \n",
      "25": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n \\ self.returncode = code \n",
      "26": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <DED> code = self.returncode \n",
      "27": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "28": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "29": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "30": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n \\ self.returncode = code \n",
      "31": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "32": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "33": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "34": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "35": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "36": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "37": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "38": "{ def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <DED> self.returncode = code \n",
      "39": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "40": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "41": "^ def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "42": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "43": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "44": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "45": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: <IND> <IND> self.returncode = code \n",
      "46": "def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code \n",
      "47": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code <IND>",
      "48": "\n def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code <DED>",
      "49": "<DED> def _fake_exit(self, code: Optional[int] = 0) -> NoReturn: \n <IND> self.returncode = code <IND>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: InferenceAPI = []\n\n",
    "target_code": "    # List of inference APIs that this BentoService provides\n    _inference_apis: List[InferenceAPI] = []\n\n",
    "warning_line": "    _inference_apis: InferenceAPI = []",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `_inference_apis` declared in class `BentoService` has type `InferenceAPI` but is used as type `List[Variable[_T]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 588,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "bentoml/BentoML",
    "source_filename": "bentoml/service.py",
    "target_filename": "bentoml/service.py",
    "source_changeid": "9e7a86be53833f3f36dda09dbfeba114b4977fcd^",
    "target_changeid": "9e7a86be53833f3f36dda09dbfeba114b4977fcd",
    "predictions": [
      "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n \n",
      "1": "# List of inference APIs that this BentoService provides \n _inference_apis: InferenceAPI = [] \n \n",
      "2": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = List[] \n \n",
      "3": "# List of inference APIs that this BentoService provides \n _inference_apis: InferenceAPI = List[Variable[_T]] \n \n",
      "4": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = List[Variable[_T]] \n \n",
      "5": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [], \n \n",
      "6": "# List of inference APIs that this BentoService provides \n _inference_apis: List[inferenceAPI] = [] \n \n",
      "7": "# List of inference APIs that this BentoService provides \n _inference_apis: List[Variable[_T]] = [] \n \n",
      "8": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n <DED>",
      "9": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n <IND>",
      "10": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = list[] \n \n",
      "11": "# List of inference APIs that this BentoService provides <IND> _inference_apis: List[InferenceAPI] = [] \n \n",
      "12": "# List of inference APIs that this BentoService provides \n _inference_apis: Optional[InferenceAPI] = [] \n \n",
      "13": "# List of inference APIs that this BentoService provides <DED> _inference_apis: List[InferenceAPI] = [] \n \n",
      "14": "# List of inference APIs that this BentoService provides \n _inference_apis: List[Index[InferenceAPI]] = [] \n \n",
      "15": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] <IND> \n",
      "16": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] <DED> \n",
      "17": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n {",
      "18": "# List of inference APIs that this BentoService provides { _inference_apis: List[InferenceAPI] = [] \n \n",
      "19": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] { \n",
      "20": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n }",
      "21": "# List of inference APIs that this BentoService provides \n _inference_apis: Liste[InferenceAPI] = [] \n \n",
      "22": "# List of inference APIs that this BentoService provides } _inference_apis: List[InferenceAPI] = [] \n \n",
      "23": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] } \n",
      "24": "# List of inference APIs that this BentoService provides \n _inference_apis = List[InferenceAPI] \n \n",
      "25": "# List of inference APIs that this BentoService provides \n _inference_apis: Union[InferenceAPI] = [] \n \n",
      "26": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = List[], \n \n",
      "27": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n \\",
      "28": "# List of inference APIs that this BentoService provides \n _inference_apis: InferenceAPI = [], \n \n",
      "29": "# List of inference APIs that this BentoService provides \\ _inference_apis: List[InferenceAPI] = [] \n \n",
      "30": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \\ \n",
      "31": "# List of inference APIs that this BentoService provides \n _inference_apis=List[InferenceAPI] = [] \n \n",
      "32": "# List of inference APIs that this BentoService provides \n inference_apis: List[InferenceAPI] = [] \n \n",
      "33": "# List of inference APIs that this BentoService provides \n _inference_apis: InferenceAPI = list([]) \n \n",
      "34": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n",
      "35": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] \n \n",
      "36": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n",
      "37": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n",
      "38": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] \n \n",
      "39": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n",
      "40": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n",
      "41": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n",
      "42": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n",
      "43": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = () \n \n",
      "44": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] \n \n",
      "45": "# List of inference APIs that this BentoService provides _inference_apis: List[InferenceAPI] = [] \n \n",
      "46": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n",
      "47": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n",
      "48": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n",
      "49": "# List of inference APIs that this BentoService provides \n _inference_apis: List[InferenceAPI] = [] \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            m.author = self.chat_manager.self\n            m.chat = self.chat_manager.get_chat(channel, uid)\n            if not m.chat:\n                # Chat not found anyway, build a fake object\n",
    "target_code": "            m.author = self.chat_manager.self\n            m_chat = self.chat_manager.get_chat(channel, uid)\n            if not m_chat:\n                # Chat not found anyway, build a fake object\n",
    "warning_line": "            m.chat = self.chat_manager.get_chat(channel, uid)",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `chat` declared in class `ETMMsg` has type `efb_telegram_master.chat.ETMChat` but is used as type `Optional[efb_telegram_master.chat.ETMChat]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 271,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ehForwarderBot/efb-telegram-master",
    "source_filename": "efb_telegram_master/master_message.py",
    "target_filename": "efb_telegram_master/master_message.py",
    "source_changeid": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6^",
    "target_changeid": "ba3d8d85152e2e58a8385a74f19be04c5c7a4fe6",
    "predictions": [
      "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n"
    ],
    "correct": false,
    "top_five": {
      "0": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "1": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> build a fake object \n",
      "2": "m.author = self.chat_manager.self \n m.chat = self.chat_manager[efb_telegram_master.chat.get_chat(channel, uid)) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "3": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "4": "m.author = self.chat_manager.self \n m.chat_manager = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "5": "m.author = self.chat_manager.self \n m.chat = efb_telegram_master.chat.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "6": "m.author = self.chat_manager.self \n if not m.chat: \n <DED> build a fake object \n",
      "7": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> m.chat_manager = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "8": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n <IND> build a fake object \n",
      "9": "m.author = self.chat_manager.self \n if not m.chat: \n <DED> m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "10": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> m.chat = self.chat_manager.get_chat(channel, uid) \n # Chat not found anyway, build a fake object \n",
      "11": "m.author = self.chat_manager.self \n m.chat = self.chat_manager[channel, uid] \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "12": "m.author = self.chat_manager.self \n m.chat = self.chat_manager[efb_telegram_master.chat.get_chat(channel, uid)] \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "13": "m.author = self.chat_manager.self \n m.chat = efb_telegram_master.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "14": "m.author = self.chat_manager.self \n m.chat = efb_telegram_master.chat[channel, uid] \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "15": "m.author = self.chat_manager.self \n e.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "16": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> m.chat not found anyway, build a fake object \n",
      "17": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, efb_telegram_master.chat.ETMChat) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "18": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> m.chat = self.chat_manager.get_chat(channel, uid) \n efb_telegram_master.chat.ETMChat \n # Chat not found anyway, build a fake object \n",
      "19": "m.author = self.chat_manager.self \n if not m.chat: \n \n build a fake object \n",
      "20": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> m.chat = self.chat_manager[efb_telegram_master.chat.get_chat(channel, uid)) \n # Chat not found anyway, build a fake object \n",
      "21": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n <DED> build a fake object \n",
      "22": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> build a fake object \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "23": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> m.chat_manager = self.chat_manager.get_chat(channel, uid) \n # Chat not found anyway, build a fake object \n",
      "24": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object <IND>",
      "25": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: <IND> # Chat not found anyway, build a fake object \n",
      "26": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object <DED>",
      "27": "m.author = self.chat_manager.self \n m.chat = self.chat_manager[efb_telegram_master.chat].get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "28": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: <DED> # Chat not found anyway, build a fake object \n",
      "29": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> m.chat = self.chat_manager[efb_telegram_master.chat.get_chat(channel, uid)) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "30": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) <IND> if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "31": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) <DED> if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "32": "m.author = self.chat_manager.self \n if not m.chat: \n <DED> m.chat = self.chat_manager.get_chat(channel, uid) \n # Chat not found anyway, build a fake object \n",
      "33": "m.author = self.chat_manager.self \n e.chat = self.chat_manager.get_chat(channel, uid) \n if not e.chat: \n # Chat not found anyway, build a fake object \n",
      "34": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object {",
      "35": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) { if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "36": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: { # Chat not found anyway, build a fake object \n",
      "37": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n \n build a fake object \n",
      "38": "m.author = self.chat_manager.self \n m.chat = efb_telegram_master.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "39": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, user_id) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "40": "m.author = self.chat_manager.self \n assert isinstance(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "41": "m.author = self.chat_manager.self \n assert m.chat is not None \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "42": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object }",
      "43": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) } if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "44": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel, uid) \n if not m.chat: } # Chat not found anyway, build a fake object \n",
      "45": "m.author = self.chat_manager.self \n m.chat = self.chat_manager[efb_telegram_master.chat.get_chat(channel, uid)) \n if not m.chat: \n <IND> build a fake object \n",
      "46": "m.author = self.chat_manager.self \n m.chat = self.chat_manager.get_chat(channel_id, uid) \n if not m.chat: \n # Chat not found anyway, build a fake object \n",
      "47": "m.author = self.chat_manager.self \n m.chat = self.chat_manager[efb_telegram_master.chat.get_chat(channel, uid)) \n if not m.chat: \n # Chat not found anyway, build a fake object <IND>",
      "48": "m.author = self.chat_manager.self \n m.chat = self.chat_manager[efb_telegram_master.chat.get_chat(channel, uid)) \n if not m.chat: \n # Chat not found anyway, build a fake object <DED>",
      "49": "m.author = self.chat_manager.self \n if not m.chat: \n <IND> m.chat = self.chat_manager.get_chat(channel, uid) \n m.chat not found anyway, build a fake object \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = None\n        self.hypervisor_filename: str = None\n        self.result = Result(xml_state)\n",
    "target_code": "        self.checksum_name = ''.join([self.image_name, '.md5'])\n        self.kernel_filename: str = ''\n        self.hypervisor_filename: str = ''\n        self.result = Result(xml_state)\n",
    "warning_line": "        self.kernel_filename: str = None",
    "linter_report": {
      "rule_id": "Incompatible attribute type [8]",
      "message": " Attribute `kernel_filename` declared in class `KisBuilder` has type `str` but is used as type `None`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 90,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "OSInside/kiwi",
    "source_filename": "kiwi/builder/kis.py",
    "target_filename": "kiwi/builder/kis.py",
    "source_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536^",
    "target_changeid": "81bb72cf69983cac4e72c35b353f4fd75c2d4536",
    "predictions": [
      "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "1": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' \n self.result = Result(xml_state) \n",
      "2": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = \"\" \n self.hypervisor_filename: str = \"\" \n self.result = Result(xml_state) \n",
      "3": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None <IND> self.result = Result(xml_state) \n",
      "4": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None <IND> self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "5": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None <DED> self.result = Result(xml_state) \n",
      "6": "self.checksum_name = ''.join([self.image_name, '.md5']) <IND> self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "7": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None <DED> self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "8": "self.checksum_name = ''.join([self.image_name, '.md5']) <DED> self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "9": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) <IND>",
      "10": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) <DED>",
      "11": "self.checksum_name = ''.join([self.image_name, '.md5']) { self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "12": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None { self.result = Result(xml_state) \n",
      "13": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None { self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "14": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) {",
      "15": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None } self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "16": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None } self.result = Result(xml_state) \n",
      "17": "self.checksum_name = ''.join([self.image_name, '.md5']) } self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "18": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) }",
      "19": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \\ self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "20": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \\ self.result = Result(xml_state) \n",
      "21": "self.checksum_name = ''.join([self.image_name, '.md5']) \\ self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "22": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \\",
      "23": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state)",
      "24": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "25": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "26": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state) \n",
      "27": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "28": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "29": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state)",
      "30": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state) \n",
      "31": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' <IND> self.result = Result(xml_state) \n",
      "32": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "33": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state) \n",
      "34": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state)",
      "35": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "36": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "37": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state)",
      "38": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "39": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state) \n",
      "40": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "41": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "42": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None self.result = Result(xml_state) \n",
      "43": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None ^ self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "44": "self.checksum_name = ''.join([self.image_name, '.md5']) self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "45": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: str = '' \n self.hypervisor_filename: str = '' <DED> self.result = Result(xml_state) \n",
      "46": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state) \n",
      "47": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state)",
      "48": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state)",
      "49": "self.checksum_name = ''.join([self.image_name, '.md5']) \n self.kernel_filename: Optional[str] = None \n self.hypervisor_filename: Optional[str] = None \n self.result = Result(xml_state)"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>if cfg_key is None:\n            <IND>cfg_key = camelCaseify(trait)\n        <DED>set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)\n",
    "warning_line": "        set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 275,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "source_filename": "images/hub/jupyterhub_config.py",
    "target_filename": "images/hub/jupyterhub_config.py",
    "source_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d^",
    "target_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "predictions": [
      "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "1": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "2": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "3": "for trait, cfg_key in common_oauth_traits: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "4": "for trait, cfg_key in common_oauth_traits: \n <DED> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "5": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.cilogon.') \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "6": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "7": "for trait, cfg_key in common_oauth_traits: \n \n assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "8": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "9": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <DED> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "10": "for trait, cfg_key in common_oauth_traits: \n <DED> if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "11": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = trait \n \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "12": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert isinstance(trait, 'auth.cilogon.') \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "13": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "14": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.cilogon.', cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "15": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <DED> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "16": "for trait, cfg_key in common_oauth_traits: \n <DED> if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "17": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n if cfg_key is None: \n <IND> assert cfg_key is None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "18": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.cilogon.' + cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "19": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str) \n",
      "20": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n \n assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "21": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "22": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <DED> assert cfg_key is None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "23": "for trait, cfg_key in common_oauth_traits: \n <DED> assert isinstance(trait, 'auth.cilogon.') \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "24": "for trait, cfg_key in common_oauth_traits: \n <DED> if cfg_key is None: \n <IND> assert cfg_key is None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "25": "for trait, cfg_key in common_oauth_traits: \n \n if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "26": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n \n assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "27": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert isinstance(trait, 'auth.cilogon.', cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "28": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = trait \n <IND> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "29": "for trait, cfg_key in common_oauth_traits: \n <IND> cfg_key = cfg_key \n if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "30": "for trait, cfg_key in common_oauth_traits: \n <DED> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "31": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = trait \n <DED> set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "32": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert isinstance(trait, 'auth.cilogon.' + cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "33": "for trait, cfg_key in common_oauth_traits: \n <IND> cfg_key = cfg_key \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "34": "for trait, cfg_key in common_oauth_traits: \n { assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "35": "for trait, cfg_key in common_oauth_traits: \n } assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "36": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "37": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str(cfg_key)) \n",
      "38": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n",
      "39": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = self.auth.cilogon.create(trait) \n \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "40": "for trait, cfg_key in common_oauth_traits: \n \n assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "41": "for trait, cfg_key in common_oauth_traits: \n <IND> cfg_key = trait \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + cfg_key) \n",
      "42": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str(cfg_key)) \n",
      "43": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.cilogon.') \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str) \n",
      "44": "for trait, cfg_key in common_oauth_traits: \n <IND> assert trait is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str(cfg_key)) \n",
      "45": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str) \n",
      "46": "for trait, cfg_key in common_oauth_traits: \n <DED> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str) \n",
      "47": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, 'auth.cilogon.' + str) \n",
      "48": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.cilogon.' + cfg_key) \n set_config_if_not_none(c.CILogonOAuthenticator, trait) \n",
      "49": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.CILogonOAuthenticator, trait, Optional['auth.cilogon.']) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n number = int(number)\n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])\n\n",
    "target_code": "\n value = int(number)\n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10 != 1) * (value % 10 < 4) * value % 10::4])\n\n",
    "warning_line": "\treturn \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10 != 1) * (number % 10 < 4) * number % 10::4])",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `str` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 720,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "standardebooks/tools",
    "source_filename": "se/formatting.py",
    "target_filename": "se/formatting.py",
    "source_changeid": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3^",
    "target_changeid": "eb607c5540f4c2cf139a33c20e2c1cd1938713d3",
    "predictions": [
      "\n number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "1": "\n value = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "2": "\n number = int(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "3": "\n number = str(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "4": "<DED> number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "5": "\n value = int(number) \n return \"%d%s\" % (value, tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "6": "\n number = str(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "7": "<IND> number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "8": "\n value = int(number) \n return \"%d%s\" % (value, str(tsnrhtdd)[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "9": "<DED> value = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "10": "<IND> value = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "11": "<DED> number = int(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "12": "\n number = int(number) \n return \"%d%s\" % (number, tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "13": "\n number = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "14": "<IND> number = int(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "15": "<DED> number = str(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "16": "\n result = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "17": "<IND> number = str(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "18": "<DED> value = int(number) \n return \"%d%s\" % (value, tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "19": "<DED> number = str(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "20": "<DED> value = int(number) \n return \"%d%s\" % (value, str(tsnrhtdd)[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "21": "\n name = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "22": "<IND> value = int(number) \n return \"%d%s\" % (value, tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "23": "<IND> number = str(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "24": "{ number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "25": "<IND> value = int(number) \n return \"%d%s\" % (value, str(tsnrhtdd)[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "26": "\n number = int(number) \n return \"%d%s\" % (value, tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "27": "\n number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n <IND>",
      "28": "\n number = str(number) \n return \"%d%s\" % (number, tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "29": "\n number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n <DED>",
      "30": "} number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "31": "\n result = int(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "32": "<DED> number = int(number) \n return \"%d%s\" % (number, tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "33": "{ value = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "34": "\n value = int(number) \n return \"%d%s\" % (value, tsnrhtdd=\"math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "35": "<DED> number = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "36": "\n name = int(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "37": "\n value = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n <IND>",
      "38": "<IND> number = int(number) \n return \"%d%s\" % (number, tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "39": "\n number = str(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "40": "\n value = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n <DED>",
      "41": "} value = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "42": "<IND> number = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10) % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "43": "{ number = int(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "44": "\n number = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10 % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "45": "<DED> result = int(number) \n return \"%d%s\" % (number, \"tsnrhtdd\"[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "46": "\n number = int(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n <IND>",
      "47": "\n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n \n",
      "48": "\n value = int(number) \n return \"%d%s\" % (value, \"tsnrhtdd\"[(math.floor(value / 10 % 10!= 1) * (value % 10  4) * value % 10::4]) \n \n",
      "49": "\n number = int(number) \n return \"%d%s\" % (number, str(tsnrhtdd)[(math.floor(number / 10) % 10!= 1) * (number % 10  4) * number % 10::4]) \n <DED>"
    },
    "top_five_exact_match": {
      "0": false,
      "1": true,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        <DED>else:\n            <IND>raise ValueError(\"unknown topic: \" + topicname)\n\n",
    "target_code": "        <DED>else:\n            <IND>raise ValueError(\"unknown topic: \" + str(topicname))\n\n",
    "warning_line": "            raise ValueError(\"unknown topic: \" + topicname)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `Union[str, typing.Tuple[typing.Any, ...]]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1052,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "irmen/Tale",
    "source_filename": "tale/driver.py",
    "target_filename": "tale/driver.py",
    "source_changeid": "2bf79167e755c6ac169a0c13c401e65fbbfde997^",
    "target_changeid": "2bf79167e755c6ac169a0c13c401e65fbbfde997",
    "predictions": [
      "<DED> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "1": "\n else: \n <IND> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "2": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "3": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: <DED> topicname \n \") \n \n",
      "4": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: <IND> topicname \n \") \n \n",
      "5": "<DED> else: \n <DED> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "6": "\n else: \n <IND> raise ValueError(f\"unknown topic: <DED> topicname \n \") \n \n",
      "7": "\n else: \n <IND> raise ValueError(f\"unknown topic: <IND> topicname \n \") \n \n",
      "8": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: <DED> topicname \n \") \n \n",
      "9": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname <DED> \") \n \n",
      "10": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname <IND> \") \n \n",
      "11": "\n else: \n <DED> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "12": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: <IND> topicname \n \") \n \n",
      "13": "<IND> else: \n <DED> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "14": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: { topicname \n \") \n \n",
      "15": "\n else: \n <IND> raise ValueError(f\"unknown topic: \n topicname <DED> \") \n \n",
      "16": "\n else: \n <IND> raise ValueError(f\"unknown topic: \n topicname <IND> \") \n \n",
      "17": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname <DED> \") \n \n",
      "18": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname <IND> \") \n \n",
      "19": "\n else: \n <IND> raise ValueError(f\"unknown topic: { topicname \n \") \n \n",
      "20": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: } topicname \n \") \n \n",
      "21": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: { topicname \n \") \n \n",
      "22": "\n else: \n <IND> raise ValueError(f\"unknown topic: } topicname \n \") \n \n",
      "23": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname { \") \n \n",
      "24": "<DED> else: \n <DED> raise ValueError(f\"unknown topic: <DED> topicname \n \") \n \n",
      "25": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname } \") \n \n",
      "26": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: } topicname \n \") \n \n",
      "27": "<DED> else: \n <DED> raise ValueError(f\"unknown topic: <IND> topicname \n \") \n \n",
      "28": "<DED> else: \n \n raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "29": "\n else: \n <IND> raise ValueError(f\"unknown topic: \n topicname { \") \n \n",
      "30": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: <DED> topicname <DED> \") \n \n",
      "31": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: <DED> topicname <IND> \") \n \n",
      "32": "\n else: \n <DED> raise ValueError(f\"unknown topic: <DED> topicname \n \") \n \n",
      "33": "\n else: \n <IND> raise ValueError(f\"unknown topic: \n topicname } \") \n \n",
      "34": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: <IND> topicname <DED> \") \n \n",
      "35": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: <IND> topicname <IND> \") \n \n",
      "36": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname { \") \n \n",
      "37": "\n else: \n <DED> raise ValueError(f\"unknown topic: <IND> topicname \n \") \n \n",
      "38": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: \\ topicname \n \") \n \n",
      "39": "<IND> else: \n <DED> raise ValueError(f\"unknown topic: <DED> topicname \n \") \n \n",
      "40": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname } \") \n \n",
      "41": "<DED> else: \n <DED> raise ValueError(f\"unknown topic: \n topicname <DED> \") \n \n",
      "42": "<DED> else: \n <DED> raise ValueError(f\"unknown topic: \n topicname <IND> \") \n \n",
      "43": "\n else: \n \n raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "44": "\n else: \n <IND> raise ValueError(f\"unknown topic: <DED> topicname <DED> \") \n \n",
      "45": "\n else: \n <IND> raise ValueError(f\"unknown topic: <DED> topicname <IND> \") \n \n",
      "46": "<IND> else: \n <DED> raise ValueError(f\"unknown topic: <IND> topicname \n \") \n \n",
      "47": "<DED> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "48": "\n else: \n <IND> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n",
      "49": "<IND> else: \n <IND> raise ValueError(f\"unknown topic: \n topicname \n \") \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "                    <IND>callback(True)\n                <DED>elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response):\n                    <IND>callback(len(response) < self._library_max_private_projects)\n",
    "target_code": "                    <IND>callback(True)\n                <DED>elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response) and self._library_max_private_projects is not None:\n                    <IND>callback(len(response) < self._library_max_private_projects)\n",
    "warning_line": "                    callback(len(response) < self._library_max_private_projects)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `<` is not supported for operand types `int` and `Optional[int]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 95,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Ultimaker/Cura",
    "source_filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "target_filename": "plugins/DigitalLibrary/src/DigitalFactoryApiClient.py",
    "source_changeid": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af^",
    "target_changeid": "2961d20c04ff5262d29dd69d65b6e0ccb78c57af",
    "predictions": [
      "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "1": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "2": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "3": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "4": "\n callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "5": "<IND> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "6": "<DED> callback(True) \n \n elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "7": "\n callback(True) \n \n elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "8": "<IND> callback(True) \n \n elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  self._library_max_private_projects) \n",
      "9": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  list(self._library_max_private_projects)) \n",
      "10": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  list(self._library_max_private_projects)) \n",
      "11": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  list(self._library_max_private_projects)) \n",
      "12": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  list(self._library_max_private_projects)) \n",
      "13": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  str(self._library_max_private_projects)) \n",
      "14": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <DED> callback(len(response)  self._library_max_private_projects) \n",
      "15": "\n callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  list(self._library_max_private_projects)) \n",
      "16": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  str(self._library_max_private_projects)) \n",
      "17": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <DED> callback(len(response)  self._library_max_private_projects) \n",
      "18": "<IND> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  list(self._library_max_private_projects)) \n",
      "19": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  str(self._library_max_private_projects)) \n",
      "20": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  cast(int, self._library_max_private_projects)) \n",
      "21": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects)) \n",
      "22": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <DED> callback(len(response)  self._library_max_private_projects) \n",
      "23": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  str(self._library_max_private_projects)) \n",
      "24": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <DED> callback(len(response)  self._library_max_private_projects) \n",
      "25": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  tuple(self._library_max_private_projects)) \n",
      "26": "\n callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  str(self._library_max_private_projects)) \n",
      "27": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  cast(int, self._library_max_private_projects)) \n",
      "28": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects)) \n",
      "29": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  tuple(self._library_max_private_projects)) \n",
      "30": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  cast(int, self._library_max_private_projects)) \n",
      "31": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects)) \n",
      "32": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  cast(int, self._library_max_private_projects)) \n",
      "33": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects)) \n",
      "34": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  tuple(self._library_max_private_projects)) \n",
      "35": "\n callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  cast(int, self._library_max_private_projects)) \n",
      "36": "\n callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects)) \n",
      "37": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  tuple(self._library_max_private_projects)) \n",
      "38": "\n callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  tuple(self._library_max_private_projects)) \n",
      "39": "<IND> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects)) \n",
      "40": "<IND> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  tuple(self._library_max_private_projects)) \n",
      "41": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  project_list) \n \n",
      "42": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  project_list) \n \n",
      "43": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  project_list) \n \n",
      "44": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  project_list) \n \n",
      "45": "<DED> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects) \n",
      "46": "\n callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects) \n",
      "47": "<DED> callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects) \n",
      "48": "<IND> callback(True) \n <DED> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects) \n",
      "49": "\n callback(True) \n <IND> elif isinstance(response, list) and all(isinstance(r, DigitalFactoryProjectResponse) for r in response): \n <IND> callback(len(response)  int(self._library_max_private_projects) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        if other_line is not None:\n            <IND>buffer.append(\" \" + other_line)\n\n",
    "target_code": "        if other_line is not None:\n            <IND>buffer.append(\" \" + str(other_line))\n\n",
    "warning_line": "            buffer.append(\" \" + other_line)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 249,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "python-poetry/poetry",
    "source_filename": "poetry/mixology/incompatibility.py",
    "target_filename": "poetry/mixology/incompatibility.py",
    "source_changeid": "1346497b2bb8c1d1353243a153f6a85b41a57728^",
    "target_changeid": "1346497b2bb8c1d1353243a153f6a85b41a57728",
    "predictions": [
      "if other_line is not None: \n <IND> buffer.append(\" \" + str(other_line)) \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "if other_line is not None: \n <IND> buffer.append(\" \" + str(other_line)) \n \n",
      "1": "if other_line is not None: \n <DED> buffer.append(\" \" + str(other_line)) \n \n",
      "2": "if other_line is not None: \n <IND> buffer.append(\" \" + other_line) \n \n",
      "3": "if other_line is not None: \n <IND> buffer.append(str(\" \") + other_line) \n \n",
      "4": "if other_line is not None: \n <IND> buffer.append(str(\" \" + other_line)) \n \n",
      "5": "if other_line is not None: \n \n buffer.append(\" \" + str(other_line)) \n \n",
      "6": "if other_line is not None: \n <DED> buffer.append(str(\" \") + other_line) \n \n",
      "7": "if other_line is not None: \n } buffer.append(\" \" + str(other_line)) \n \n",
      "8": "if other_line is not None: \n { buffer.append(\" \" + str(other_line)) \n \n",
      "9": "if other_line is not None: \n <DED> buffer.append(\" \" + other_line) \n \n",
      "10": "if other_line is not None: \n <DED> buffer.append(str(\" \" + other_line)) \n \n",
      "11": "if other_line is not None: \n <IND> buffer.append(\" \" + buffer.append(\" \" + other_line)) \n \n",
      "12": "if other_line is not None: \n <IND> buffer.append(\" \" + buffer.append(str(other_line)) \n \n",
      "13": "if other_line is not None: \n <IND> buffer.append(\" \" + str(other_line)) \n <IND>",
      "14": "if other_line is not None: \n <IND> buffer.append(\" \" + str(other_line)) \n <DED>",
      "15": "if other_line is not None: \n \n buffer.append(str(\" \") + other_line) \n \n",
      "16": "if other_line is not None: \n \\ buffer.append(\" \" + str(other_line)) \n \n",
      "17": "if other_line is not None: \n <IND> buffer.append(\" \" + buffer.append(other_line)) \n \n",
      "18": "if other_line is not None: \n \n buffer.append(str(\" \" + other_line)) \n \n",
      "19": "if other_line is not None: \n <IND> buffer.append(f\" \" + str(other_line)) \n \n",
      "20": "if other_line is not None: \n <IND> buffer.append(str(\" \" + str)) \n \n",
      "21": "if other_line is not None: \n <IND> buffer.append((str(\" \") + other_line) \n \n",
      "22": "if other_line is not None: \n \n buffer.append(\" \" + other_line) \n \n",
      "23": "if other_line is not None: <IND> <IND> buffer.append(\" \" + str(other_line)) \n \n",
      "24": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "25": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "26": "if other_line is not None: <DED> <IND> buffer.append(\" \" + str(other_line)) \n \n",
      "27": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "28": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "29": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "30": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "31": "if other_line is not None: \n <IND> buffer.append(\" \" + str(other_line)) <IND> \n",
      "32": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "33": "if other_line is not None: \n <IND> buffer.append(\" \" + str(other_line)) \n {",
      "34": "if other_line is not None: \n <IND> buffer.append(\" \" + str(other_line)) <DED> \n",
      "35": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "36": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "37": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "38": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "39": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "40": "if other_line is not None: \n <IND> buffer.append('' + str(other_line)) \n \n",
      "41": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "42": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "43": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "44": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "45": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "46": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "47": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "48": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n",
      "49": "if other_line is not None: \n buffer.append(\" \" + str(other_line)) \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "target_code": "    for trait, cfg_key in common_oauth_traits:\n        <IND>if cfg_key is None:\n            <IND>cfg_key = camelCaseify(trait)\n        <DED>set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)\n",
    "warning_line": "        set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key)",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `str` and `typing.Optional[str]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 279,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "jupyterhub/zero-to-jupyterhub-k8s",
    "source_filename": "images/hub/jupyterhub_config.py",
    "target_filename": "images/hub/jupyterhub_config.py",
    "source_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d^",
    "target_changeid": "4e9b4a22f516a7f7545c1cfebe440f0b2dde5a6d",
    "predictions": [
      "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "1": "for trait, cfg_key in common_oauth_traits: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "2": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "3": "for trait, cfg_key in common_oauth_traits: \n <DED> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "4": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "5": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.gitlab.') \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "6": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "7": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "8": "for trait, cfg_key in common_oauth_traits: \n \n assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "9": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n if cfg_key is None: \n <IND> assert cfg_key is None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "10": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "11": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.gitlab.', cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "12": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <DED> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "13": "for trait, cfg_key in common_oauth_traits: \n <DED> if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "14": "for trait, cfg_key in common_oauth_traits: \n <DED> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "15": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_key \n",
      "16": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <DED> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "17": "for trait, cfg_key in common_oauth_traits: \n <DED> if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "18": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "19": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + str) \n",
      "20": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert isinstance(trait, 'auth.gitlab.') \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "21": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n \n assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "22": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <DED> assert cfg_key is None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "23": "for trait, cfg_key in common_oauth_traits: \n <DED> assert isinstance(trait, 'auth.gitlab.') \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "24": "for trait, cfg_key in common_oauth_traits: \n \n if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "25": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.gitlab.' + cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "26": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert isinstance(trait, 'auth.gitlab.', cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "27": "for trait, cfg_key in common_oauth_traits: \n { assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "28": "for trait, cfg_key in common_oauth_traits: \n } assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "29": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n if cfg_key is None: \n <IND> assert cfg_key is not None \n assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "30": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "31": "for trait, cfg_key in common_oauth_traits: \n \n assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "32": "for trait, cfg_key in common_oauth_traits: \n <IND> cfg_key = cfg_key \n if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "33": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_authenticator(trait) \n \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "34": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> cfg_key = cfg_authenticator.get(trait) \n \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "35": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.gitlab.') \n set_config_if_not_none(c.GitLabOAuthenticator, trait) \n",
      "36": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + str(cfg_key)) \n",
      "37": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, Optional['auth.gitlab.'] + cfg_key) \n",
      "38": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + str(cfg_key)) \n",
      "39": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert isinstance(trait, 'auth.gitlab.' + cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "40": "for trait, cfg_key in common_oauth_traits: \n <IND> assert trait is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + str(cfg_key)) \n",
      "41": "for trait, cfg_key in common_oauth_traits: \n <IND> if cfg_key is None: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + str) \n",
      "42": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) <IND>",
      "43": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.gitlab.' + cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait) \n",
      "44": "for trait, cfg_key in common_oauth_traits: \n <DED> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + str) \n",
      "45": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) <DED>",
      "46": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.gitlab.') \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + str) \n",
      "47": "for trait, cfg_key in common_oauth_traits: \n <IND> set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) \n",
      "48": "for trait, cfg_key in common_oauth_traits: \n <IND> assert cfg_key is not None \n set_config_if_not_none(c.GitLabOAuthenticator, trait, 'auth.gitlab.' + cfg_key) {",
      "49": "for trait, cfg_key in common_oauth_traits: \n <IND> assert isinstance(trait, 'auth.gitlab.', cfg_key) \n set_config_if_not_none(c.GitLabOAuthenticator, trait) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            <IND>return 32, True\n\n        <DED>return int(self.size / 8), False\n",
    "target_code": "            <IND>return 32, True\n        <DED>if self.size is None:\n            <IND>return 32, True\n        <DED>return int(self.size / 8), False\n",
    "warning_line": "        return int(self.size / 8), False",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `Optional[int]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 180,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "crytic/slither",
    "source_filename": "slither/core/solidity_types/elementary_type.py",
    "target_filename": "slither/core/solidity_types/elementary_type.py",
    "source_changeid": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b^",
    "target_changeid": "a3daeebfc8e8d5e44b689b028dc98b0688bced3b",
    "predictions": [
      "\n return 32, True \n <DED> <DED> return int(self.size / 8), False \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n return 32, True \n <DED> <DED> return int(self.size / 8), False \n",
      "1": "\n return 32, True \n <IND> <DED> return int(self.size / 8), False \n",
      "2": "\n return 32, True \n <DED> <IND> return int(self.size / 8), False \n",
      "3": "\n return 32, True \n \n <DED> return int(self.size / 8), False \n",
      "4": "\n return 32, True \n <IND> <IND> return int(self.size / 8), False \n",
      "5": "\n return 32, True \n <DED> \n return int(self.size / 8), False \n",
      "6": "\n return 32, True \n \n <IND> return int(self.size / 8), False \n",
      "7": "\n return 32, True \n <DED> <DED> assert self.size is not None \n return int(self.size / 8), False \n",
      "8": "<DED> return 32, True \n <DED> <DED> return int(self.size / 8), False \n",
      "9": "<IND> return 32, True \n <DED> <DED> return int(self.size / 8), False \n",
      "10": "\n return 32, True \n <IND> <DED> assert self.size is not None \n return int(self.size / 8), False \n",
      "11": "\n return 32, True \n <IND> \n return int(self.size / 8), False \n",
      "12": "<DED> return 32, True \n <IND> <DED> return int(self.size / 8), False \n",
      "13": "\n return 32, True \n <DED> <IND> assert self.size is not None \n return int(self.size / 8), False \n",
      "14": "\n return 32, True \n \n <DED> assert self.size is not None \n return int(self.size / 8), False \n",
      "15": "\n return 32, True \n <DED> <DED> return self.size(self.size / 8), False \n",
      "16": "\n return 32, True \n <DED> <DED> return self.size(int(self.size / 8), False \n",
      "17": "<IND> return 32, True \n <IND> <DED> return int(self.size / 8), False \n",
      "18": "\n return 32, True \n \n \n return int(self.size / 8), False \n",
      "19": "<DED> return 32, True \n <DED> <IND> return int(self.size / 8), False \n",
      "20": "\n return 32, True \n <DED> <DED> assert self.size is not None \n return self.size(int(self.size / 8), False \n",
      "21": "<DED> return 32, True \n \n <DED> return int(self.size / 8), False \n",
      "22": "<IND> return 32, True \n <DED> <IND> return int(self.size / 8), False \n",
      "23": "\n return 32, True \n <IND> <DED> return self.size(int(self.size / 8), False \n",
      "24": "\n return 32, True \n <IND> <DED> return self.size(self.size / 8), False \n",
      "25": "\n return 32, True \n <DED> <DED> return int(int(self.size / 8), False \n",
      "26": "<IND> return 32, True \n \n <DED> return int(self.size / 8), False \n",
      "27": "\n return 32, True \n { <DED> return int(self.size / 8), False \n",
      "28": "\n return 32, True \n <DED> <DED> return bool(int(self.size / 8), False \n",
      "29": "<DED> return 32, True \n <IND> <IND> return int(self.size / 8), False \n",
      "30": "\n return 32, True \n } <DED> return int(self.size / 8), False \n",
      "31": "\n return 32, True \n <DED> <IND> return self.size(int(self.size / 8), False \n",
      "32": "\n return 32, True \n <DED> { return int(self.size / 8), False \n",
      "33": "\n return 32, True \n <DED> } return int(self.size / 8), False \n",
      "34": "\n return 32, True \n <DED> <IND> return self.size(self.size / 8), False \n",
      "35": "\n return 32, True \n \n <DED> return self.size(self.size / 8), False \n",
      "36": "<IND> return 32, True \n <IND> <IND> return int(self.size / 8), False \n",
      "37": "\n return 32, True \n <DED> <DED> return Self.size(int(self.size / 8), False \n",
      "38": "<DED> return 32, True \n <DED> \n return int(self.size / 8), False \n",
      "39": "<DED> return 32, True \n \n <IND> return int(self.size / 8), False \n",
      "40": "\n return 32, True \n <IND> { return int(self.size / 8), False \n",
      "41": "\n return 32, True \n <IND> <IND> return self.size(self.size / 8), False \n",
      "42": "\n return 32, True \n <IND> } return int(self.size / 8), False \n",
      "43": "<IND> return 32, True \n <DED> \n return int(self.size / 8), False \n",
      "44": "<IND> return 32, True \n \n <IND> return int(self.size / 8), False \n",
      "45": "\n return 32, True \n <DED> <DED> return int(self.size / 8, False \n",
      "46": "\n return 32, True \n { <IND> return int(self.size / 8), False \n",
      "47": "\n return 32, True \n <DED> <DED> assert self.size is not None \n return self.size(int(self.size / 8)), False \n",
      "48": "\n return 32, True \n <IND> <DED> return int(self.size / 8, False \n",
      "49": "\n return 32, True \n <DED> <DED> assert self.size is not None \n return self.size(int(self.size) / 8), False \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),\n                     [255, 1])],\n",
    "target_code": "    int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T,\n          numpy.tile(numpy.array(list(range(-127, 0)) + list(range(1, 128)),\n                                 dtype='int8'),\n                     [255, 1])],\n",
    "warning_line": "          numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'),",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `range` and `range`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 848,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "rizar/attention-lvcsr",
    "source_filename": "theano/tensor/tests/test_basic.py",
    "target_filename": "theano/tensor/tests/test_basic.py",
    "source_changeid": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047^",
    "target_changeid": "6d4c441d444fc4980b8e49eb2e2b66bb124b6047",
    "predictions": [
      "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n"
    ],
    "correct": false,
    "top_five": {
      "0": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "1": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "2": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "3": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "4": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "5": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "6": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [255, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "7": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [255, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "8": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]), \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "9": "int8=[numpy.tile(numpy.arange(127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "10": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(-1, 128)), dtype='int8'), \n [255, 1])], \n",
      "11": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [255, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "12": "int8=[numpy.tile(numpy.arange(127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "13": "int8=[numpy.tile(numpy.arange(127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "14": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(0, range(-127, 0)) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "15": "int8=[numpy.tile(numpy.arange(127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "16": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, <IND> numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "17": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, <DED> numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "18": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), <DED> [255, 1])], \n",
      "19": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), <IND> [255, 1])], \n",
      "20": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], <IND>",
      "21": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], <DED>",
      "22": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1])).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "23": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1])), \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "24": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0), range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "25": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [255, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "26": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), { [255, 1])], \n",
      "27": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]), \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "28": "int8=[numpy.tile(nompy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "29": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, { numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "30": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], {",
      "31": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'),[254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "32": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + [range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "33": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(range(numpy.array(range(-127, 0)) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "34": "int8=[numpy.tile(numpy.arange(127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(127, 0)) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "35": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(0, range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "36": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(range(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "37": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "38": "int8=[numpy.tile(arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(arange(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "39": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "40": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8,'), \n [255, 1])], \n",
      "41": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), } [255, 1])], \n",
      "42": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), <DED> [255, 1])], \n",
      "43": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), <IND> [255, 1])], \n",
      "44": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, <IND> numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "45": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, <DED> numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], \n",
      "46": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(-127, 0) + [range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "47": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0)) + range(1, 128), dtype='int8'), \n [255, 1])], <IND>",
      "48": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8'), [254, 1]).T, } numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n",
      "49": "int8=[numpy.tile(numpy.arange(-127, 128, dtype='int8,'), [254, 1]).T, \n numpy.tile(numpy.array(range(-127, 0) + range(1, 128)), dtype='int8'), \n [255, 1])], \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            return [global_state]\n\n        <DED>if size > 0:\n",
    "target_code": "            return [global_state]\n        <DED>size = cast(int, size)\n        if size > 0:\n",
    "warning_line": "        if size > 0:",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `>` is not supported for operand types `Union[int, mythril.laser.smt.expression.Expression]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 748,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "ConsenSys/mythril",
    "source_filename": "mythril/laser/ethereum/instructions.py",
    "target_filename": "mythril/laser/ethereum/instructions.py",
    "source_changeid": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f^",
    "target_changeid": "3f6dbacd9d02569f0fd071452efddbeb6b267c2f",
    "predictions": [
      "return [global_state] \n <DED> <DED> if size is not None and size > 0: \n"
    ],
    "correct": false,
    "top_five": {
      "0": "return [global_state] \n <DED> <DED> if size is not None and size > 0: \n",
      "1": "return [global_state] \n <IND> <DED> if size is not None and size > 0: \n",
      "2": "return [global_state] \n <DED> <DED> if size > 0: \n",
      "3": "return [global_state] \n <IND> <DED> if size > 0: \n",
      "4": "return [global_state] \n \n <DED> if size is not None and size > 0: \n",
      "5": "return [global_state] \n <DED> <IND> if size is not None and size > 0: \n",
      "6": "return [global_state] \n <IND> <IND> if size is not None and size > 0: \n",
      "7": "return [global_state] \n \n <DED> if size > 0: \n",
      "8": "return [global_state] \n <DED> <IND> if size > 0: \n",
      "9": "return [global_state] \n <IND> <IND> if size > 0: \n",
      "10": "return [global_state] \n \n <IND> if size is not None and size > 0: \n",
      "11": "return [global_state] \n <DED> \n if size is not None and size > 0: \n",
      "12": "return [global_state] \n <IND> \n if size is not None and size > 0: \n",
      "13": "return [global_state] \n \n <IND> if size > 0: \n",
      "14": "return [global_state] \n <DED> <DED> if size is None and size > 0: \n",
      "15": "return [global_state] \n <IND> <DED> if size is None and size > 0: \n",
      "16": "return [global_state] \n <DED> \n if size > 0: \n",
      "17": "return [global_state] \n <IND> \n if size > 0: \n",
      "18": "return [global_state] \n \n \n if size is not None and size > 0: \n",
      "19": "return [global_state] \n { <DED> if size is not None and size > 0: \n",
      "20": "return [global_state] \n <DED> <DED> if size is not None and isinstance(str, int) > 0: \n",
      "21": "return [global_state] \n } <DED> if size is not None and size > 0: \n",
      "22": "return [global_state] \n <DED> { if size is not None and size > 0: \n",
      "23": "return [global_state] \n <IND> <DED> if size is not None and isinstance(str, int) > 0: \n",
      "24": "return [global_state] \n <IND> { if size is not None and size > 0: \n",
      "25": "return [global_state] \n <DED> } if size is not None and size > 0: \n",
      "26": "return [global_state] \n <IND> } if size is not None and size > 0: \n",
      "27": "return [global_state] \n <DED> <DED> if isinstance(str, int) > 0: \n",
      "28": "return [global_state] \n <IND> <DED> if isinstance(str, int) > 0: \n",
      "29": "return [global_state] \n <DED> <DED> if isinstance(str, tuple(str, tuple)) > 0: \n",
      "30": "return [global_state] \n <IND> <DED> if isinstance(str, tuple(str, tuple)) > 0: \n",
      "31": "return [global_state] \n \n <DED> if size is None and size > 0: \n",
      "32": "return [global_state] \n <DED> <IND> if size is None and size > 0: \n",
      "33": "return [global_state] \n <DED> <DED> if isinstance(str, int, int) > 0: \n",
      "34": "return [global_state] \n <IND> <IND> if size is None and size > 0: \n",
      "35": "return [global_state] \n <IND> <DED> if isinstance(str, int, int) > 0: \n",
      "36": "return [global_state] \n \n \n if size > 0: \n",
      "37": "return [global_state] \n \n <DED> if isinstance(str, tuple(str, tuple)) > 0: \n",
      "38": "return [global_state] \n <DED> <DED> if isinstance(str, int, smt.expression.Expression) and size > 0: \n",
      "39": "return [global_state] \n <DED> <IND> if isinstance(str, tuple(str, tuple)) > 0: \n",
      "40": "return [global_state] \n <IND> <IND> if isinstance(str, tuple(str, tuple)) > 0: \n",
      "41": "return [global_state] \n <IND> <DED> if isinstance(str, int, smt.expression.Expression) and size > 0: \n",
      "42": "return [global_state] \n <DED> <DED> if isinstance(str, int) and size > 0: \n",
      "43": "return [global_state] \n <DED> <DED> if isinstance(str, tuple(str, int)) > 0: \n",
      "44": "return [global_state] \n \n <DED> if isinstance(str, int) > 0: \n",
      "45": "return [global_state] \n <DED> <DED> if isinstance(str, int, sys.expression.Expression) > 0: \n",
      "46": "return [global_state] \n <IND> <DED> if isinstance(str, tuple(str, int)) > 0: \n",
      "47": "return [global_state] \n <IND> <DED> if isinstance(str, int) and size > 0: \n",
      "48": "return [global_state] \n <DED> <IND> if isinstance(str, int) > 0: \n",
      "49": "return [global_state] \n <IND> <DED> if isinstance(str, int, sys.expression.Expression) > 0: \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "            err_result.raw_result = (\n                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "target_code": "            err_result.raw_result = (\n                type(err).__name__ + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()\n            )\n",
    "warning_line": "                type(err) + \"\\n\" + str(err) + \"\\n\" + traceback.format_exc()",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `typing.Type[typing.Union[ConnectionError, LookupError, NotImplementedError, json.decoder.JSONDecodeError]]` and `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 159,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "microsoft/msticpy",
    "source_filename": "msticpy/sectools/tiproviders/http_base.py",
    "target_filename": "msticpy/sectools/tiproviders/http_base.py",
    "source_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a^",
    "target_changeid": "468cd68323e98ca71b125217ee14518a9b9bd69a",
    "predictions": [
      "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "1": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" <DED> n\" + traceback.format_exc() \n ) \n",
      "2": "err_result.raw_result = ( \n type(err) + \" <DED> n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "3": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" <IND> n\" + traceback.format_exc() \n ) \n",
      "4": "err_result.raw_result = ( \n type(err) + \" <IND> n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "5": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" { n\" + traceback.format_exc() \n ) \n",
      "6": "err_result.raw_result = ( \n type(err) + \" <DED> n\" + str(err) + \" <DED> n\" + traceback.format_exc() \n ) \n",
      "7": "err_result.raw_result = ( \n type(err) + \" { n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "8": "err_result.raw_result = ( \n type(err) + \" <IND> n\" + str(err) + \" <DED> n\" + traceback.format_exc() \n ) \n",
      "9": "err_result.raw_result = ( \n type(err) + \" <DED> n\" + str(err) + \" <IND> n\" + traceback.format_exc() \n ) \n",
      "10": "err_result.raw_result = ( \n type(err) + \" <IND> n\" + str(err) + \" <IND> n\" + traceback.format_exc() \n ) \n",
      "11": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" } n\" + traceback.format_exc() \n ) \n",
      "12": "err_result.raw_result = ( \n type(err) + \" } n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "13": "err_result.raw_result = ( \n type(err) + \" { n\" + str(err) + \" <DED> n\" + traceback.format_exc() \n ) \n",
      "14": "err_result.raw_result = ( \n type(err) + \" <DED> n\" + str(err) + \" { n\" + traceback.format_exc() \n ) \n",
      "15": "err_result.raw_result = ( \n type(err) + \" <IND> n\" + str(err) + \" { n\" + traceback.format_exc() \n ) \n",
      "16": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" \\ n\" + traceback.format_exc() \n ) \n",
      "17": "err_result.raw_result = ( \n type(err) + \" { n\" + str(err) + \" <IND> n\" + traceback.format_exc() \n ) \n",
      "18": "err_result.raw_result = ( \n type(err) + \" \\ n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "19": "err_result.raw_result = ( \n type(err) + \" } n\" + str(err) + \" <DED> n\" + traceback.format_exc() \n ) \n",
      "20": "err_result.raw_result = ( \n type(err) + \" <DED> n\" + str(err) + \" } n\" + traceback.format_exc() \n ) \n",
      "21": "err_result.raw_result = ( \n type(err) + \" <IND> n\" + str(err) + \" } n\" + traceback.format_exc() \n ) \n",
      "22": "err_result.raw_result = ( \n type(err) + \" } n\" + str(err) + \" <IND> n\" + traceback.format_exc() \n ) \n",
      "23": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "24": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "25": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "26": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "27": "err_result.raw_result = ( \n type(err) + \" n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "28": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "29": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "30": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "31": "err_result.raw_result = ( \n type(err) + \" n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "32": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "33": "err_result.raw_result = ( \n type(err) + \" n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "34": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "35": "err_result.raw_result = ( \n type(err) + \" n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "36": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "37": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "38": "err_result.raw_result = ( \n type(err) + \" n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "39": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "40": "err_result.raw_result = ( \n type(err) + \" n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "41": "err_result.raw_result = ( \n type(err) + \" n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "42": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "43": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "44": "err_result.raw_result = ( \n type(err) + \" n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "45": "err_result.raw_result = ( \n type(err) + \" n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n",
      "46": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "47": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "48": "err_result.raw_result = ( \n type(err) + \" \n n\" + str(err) + \" n\" + traceback.format_exc() \n ) \n",
      "49": "err_result.raw_result = ( \n type(err) + \" n\" + str(err) + \" \n n\" + traceback.format_exc() \n ) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "\n        <DED>model_dir = Path(model_dir)\n        tf_model_file = model_dir / f\"{file_name}.tf_model\"\n\n",
    "target_code": "\n        <DED>model_dir_path = Path(model_dir)\n        tf_model_file = model_dir_path / f\"{file_name}.tf_model\"\n\n",
    "warning_line": "        tf_model_file = model_dir / f\"{file_name}.tf_model\"",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `/` is not supported for operand types `str` and `str`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1015,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "RasaHQ/rasa",
    "source_filename": "rasa/nlu/classifiers/diet_classifier.py",
    "target_filename": "rasa/nlu/classifiers/diet_classifier.py",
    "source_changeid": "f78a6a17d5146248500630a2397ee099a24e0f5c^",
    "target_changeid": "f78a6a17d5146248500630a2397ee099a24e0f5c",
    "predictions": [
      "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name \n.tf_model\" \n \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name \n.tf_model\" \n \n",
      "1": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name <DED>.tf_model\" \n \n",
      "2": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name <IND>.tf_model\" \n \n",
      "3": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" \n file_name \n.tf_model\" \n \n",
      "4": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" \n file_name <DED>.tf_model\" \n \n",
      "5": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" \n file_name <IND>.tf_model\" \n \n",
      "6": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name \n.tf_model\" \n \n",
      "7": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name <DED>.tf_model\" \n \n",
      "8": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <DED> file_name \n.tf_model\" \n \n",
      "9": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <DED> file_name <DED>.tf_model\" \n \n",
      "10": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <IND> file_name \n.tf_model\" \n \n",
      "11": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <IND> file_name <DED>.tf_model\" \n \n",
      "12": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name <IND>.tf_model\" \n \n",
      "13": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name {.tf_model\" \n \n",
      "14": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name }.tf_model\" \n \n",
      "15": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <DED> file_name <IND>.tf_model\" \n \n",
      "16": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <IND> file_name <IND>.tf_model\" \n \n",
      "17": "\n <IND> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" \n file_name \n.tf_model\" \n \n",
      "18": "\n <IND> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" \n file_name <DED>.tf_model\" \n \n",
      "19": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" <DED> file_name \n.tf_model\" \n \n",
      "20": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" <IND> file_name \n.tf_model\" \n \n",
      "21": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" <DED> file_name <DED>.tf_model\" \n \n",
      "22": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" \n file_name {.tf_model\" \n \n",
      "23": "\n <IND> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" \n file_name <IND>.tf_model\" \n \n",
      "24": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" \n file_name }.tf_model\" \n \n",
      "25": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name \n.tf_model\" \n \n",
      "26": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" <IND> file_name <DED>.tf_model\" \n \n",
      "27": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name <DED>.tf_model\" \n \n",
      "28": "\n <DED> model_dir_path = Path(model_dir) \n tf_model_file = model_dir_path / f\" <DED> file_name <IND>.tf_model\" \n \n",
      "29": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name \\.tf_model\" \n \n",
      "30": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" { file_name <IND>.tf_model\" \n \n",
      "31": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <DED> file_name \n.tf_model\" \n \n",
      "32": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <DED> file_name <DED>.tf_model\" \n \n",
      "33": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <IND> file_name \n.tf_model\" \n \n",
      "34": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" } file_name \n.tf_model\" \n \n",
      "35": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir/ f\" \n file_name \n.tf_model\" \n \n",
      "36": "<DED> <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name \n.tf_model\" \n \n",
      "37": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir/ f\" \n file_name <DED>.tf_model\" \n \n",
      "38": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <IND> file_name <DED>.tf_model\" \n \n",
      "39": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name {.tf_model\" \n \n",
      "40": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" } file_name <DED>.tf_model\" \n \n",
      "41": "<DED> <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name <DED>.tf_model\" \n \n",
      "42": "\n \n model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name \n.tf_model\" \n \n",
      "43": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name }.tf_model\" \n \n",
      "44": "\n <IND> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <DED> file_name <IND>.tf_model\" \n \n",
      "45": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" <DED> file_name {.tf_model\" \n \n",
      "46": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name.tf_model\" \n \n",
      "47": "\n \n model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name <DED>.tf_model\" \n \n",
      "48": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir / f\" \n file_name.tf_model\" \n \n",
      "49": "\n <DED> model_dir = Path(model_dir) \n tf_model_file = model_dir/ f\" \n file_name <IND>.tf_model\" \n \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "        # So if any list is non-empty, something went terribly wrong\n        <DED><DED>assert not self.lists + self.sets + self.dict_keys + self.dict_values\n\n",
    "target_code": "        # So if any list is non-empty, something went terribly wrong\n        <DED><DED>assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values\n\n",
    "warning_line": "        assert not self.lists + self.sets + self.dict_keys + self.dict_values",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `+` is not supported for operand types `typing.List[UserList]` and `typing.List[UserSet]`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 464,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "lykoss/lykos",
    "source_filename": "src/users.py",
    "target_filename": "src/users.py",
    "source_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c^",
    "target_changeid": "290f6e0d75e82eb8810106b5240b033c9abbd35c",
    "predictions": [
      "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n"
    ],
    "correct": true,
    "top_five": {
      "0": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "1": "# So if any list is non-empty, something went terribly wrong \n <IND> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "2": "# So if any list is non-empty, something went terribly wrong \n <DED> <IND> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "3": "# So if any list is non-empty, something went terribly wrong \n <IND> <IND> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "4": "# So if any list is non-empty, something went terribly wrong \n \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "5": "# So if any list is non-empty, something went terribly wrong \n <DED> \n assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "6": "# So if any list is non-empty, something went terribly wrong \n <IND> \n assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "7": "# So if any list is non-empty, something went terribly wrong \n \n <IND> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "8": "# So if any list is non-empty, something went terribly wrong \n \n \n assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "9": "# So if any list is non-empty, something went terribly wrong \n { <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "10": "# So if any list is non-empty, something went terribly wrong \n } <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "11": "# So if any list is non-empty, something went terribly wrong \n <DED> { assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "12": "# So if any list is non-empty, something went terribly wrong \n <DED> } assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "13": "# So if any list is non-empty, something went terribly wrong \n <IND> { assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "14": "# So if any list is non-empty, something went terribly wrong \n <IND> } assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "15": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists is not None \n self.sets is not None \n self.dict_keys is not None \n self.dict_values \n \n",
      "16": "# So if any list is non-empty, something went terribly wrong \n <IND> <DED> assert not self.lists is not None \n self.sets is not None \n self.dict_keys is not None \n self.dict_values \n \n",
      "17": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists is not None \n self.sets is not None \n self.dict_keys are not None \n self.dict_values \n \n",
      "18": "# So if any list is non-empty, something went terribly wrong \n { <IND> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "19": "# So if any list is non-empty, something went terribly wrong \n <IND> <DED> assert not self.lists is not None \n self.sets is not None \n self.dict_keys are not None \n self.dict_values \n \n",
      "20": "# So if any list is non-empty, something went terribly wrong \n } <IND> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "21": "# So if any list is non-empty, something went terribly wrong \n <DED> <IND> assert not self.lists is not None \n self.sets is not None \n self.dict_keys is not None \n self.dict_values \n \n",
      "22": "# So if any list is non-empty, something went terribly wrong \n <IND> <IND> assert not self.lists is not None \n self.sets is not None \n self.dict_keys is not None \n self.dict_values \n \n",
      "23": "# So if any list is non-empty, something went terribly wrong \n \\ <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "24": "# So if any list is non-empty, something went terribly wrong \n <DED> <IND> assert not self.lists is not None \n self.sets is not None \n self.dict_keys are not None \n self.dict_values \n \n",
      "25": "# So if any list is non-empty, something went terribly wrong \n <DED> \\ assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "26": "# So if any list is non-empty, something went terribly wrong \n <IND> <IND> assert not self.lists is not None \n self.sets is not None \n self.dict_keys are not None \n self.dict_values \n \n",
      "27": "# So if any list is non-empty, something went terribly wrong \n \n { assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "28": "# So if any list is non-empty, something went terribly wrong \n <IND> \\ assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "29": "# So if any list is non-empty, something went terribly wrong \n \n } assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "30": "# So if any list is non-empty, something went terribly wrong \n \n <DED> assert not self.lists is not None \n self.sets is not None \n self.dict_keys is not None \n self.dict_values \n \n",
      "31": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists or set(self.sets, self.dict_keys) or self.dict_values \n \n",
      "32": "# So if any list is non-empty, something went terribly wrong \n <IND> <DED> assert not self.lists or set(self.sets, self.dict_keys) or self.dict_values \n \n",
      "33": "# So if any list is non-empty, something went terribly wrong \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "34": "# So if any list is non-empty, something went terribly wrong \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "35": "# So if any list is non-empty, something went terribly wrong \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "36": "# So if any list is non-empty, something went terribly wrong \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "37": "# So if any list is non-empty, something went terribly wrong \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "38": "# So if any list is non-empty, something went terribly wrong \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "39": "# So if any list is non-empty, something went terribly wrong \n { \n assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "40": "# So if any list is non-empty, something went terribly wrong \n \\ <IND> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "41": "# So if any list is non-empty, something went terribly wrong \n <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n \n",
      "42": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <IND>",
      "43": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists or set(self.sets) and not self.dict_keys or self.dict_values \n \n",
      "44": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED>",
      "45": "# So if any list is non-empty, something went terribly wrong \n <IND> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <IND>",
      "46": "# So if any list is non-empty, something went terribly wrong \n <IND> <DED> assert not self.lists or set(self.sets) and not self.dict_keys or self.dict_values \n \n",
      "47": "# So if any list is non-empty, something went terribly wrong \n <IND> <DED> assert not self.lists and not self.sets and not self.dict_keys and not self.dict_values \n <DED>",
      "48": "# So if any list is non-empty, something went terribly wrong \n <DED> <DED> assert not self.lists or self.sets or self.dict_keys or self.dict_values \n \n",
      "49": "# So if any list is non-empty, something went terribly wrong \n <IND> <DED> assert not self.lists or self.sets or self.dict_keys or self.dict_values \n \n"
    },
    "top_five_exact_match": {
      "0": true,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>def _check_params(self) -> None:\n        <IND>if self.step <= 0:\n            <IND>raise ValueError(\"Step size must be strictly positive.\")\n        <DED>if self.eps <= 0:\n            <IND>raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "target_code": "    <DED>def _check_params(self) -> None:\n        <IND>if self.step is not None and self.step <= 0:\n            <IND>raise ValueError(\"Step size must be strictly positive.\")\n        <DED>if self.eps is not None and self.eps <= 0:\n            <IND>raise ValueError(\"Value of eps must be strictly positive.\")\n",
    "warning_line": "        if self.eps <= 0:",
    "linter_report": {
      "rule_id": "Unsupported operand [58]",
      "message": " `<=` is not supported for operand types `Optional[float]` and `int`.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 148,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "Trusted-AI/adversarial-robustness-toolbox",
    "source_filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "target_filename": "art/attacks/poisoning/poisoning_attack_svm.py",
    "source_changeid": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37^",
    "target_changeid": "e7c5d65a6e28af8ca36fb568551ae72ee7cc2d37",
    "predictions": [
      "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n"
    ],
    "correct": false,
    "top_five": {
      "0": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "1": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "2": "\n def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "3": "\n def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "4": "<IND> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "5": "<IND> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "6": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "7": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "8": "\n def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "9": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "10": "\n def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "11": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "12": "<IND> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "13": "\n def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "14": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "15": "\n def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "16": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "17": "<IND> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "18": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n \n if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "19": "\n def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "20": "<IND> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "21": "<DED> def _check_params(self) -> None: \n <DED> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "22": "\n def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "23": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "24": "<IND> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "25": "\n def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n \n if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "26": "<DED> def _check_params(self) -> None: \n <DED> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "27": "\n def _check_params(self) -> None: \n <DED> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "28": "<IND> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "29": "\n def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "30": "<DED> def _check_params(self) -> None: \n <IND> if self.step is not None and self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "31": "\n def _check_params(self) -> None: \n <DED> if self.step is not None and self.eps = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "32": "<IND> def _check_params(self) -> None: \n <IND> if self.step is not None and self.eps = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps is not None and self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "33": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "34": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "35": "\n def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "36": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "37": "\n def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "38": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "39": "\n def _check_params(self) -> None: \n <IND> if self.step = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "40": "<IND> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "41": "<DED> def _check_params(self) -> None: \n <DED> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "42": "<DED> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n \n if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "43": "\n def _check_params(self) -> None: \n <IND> if self.step = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "44": "<IND> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <DED> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "45": "<IND> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "46": "<DED> def _check_params(self) -> None: \n <DED> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "47": "\n def _check_params(self) -> None: \n <DED> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n <DED> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "48": "\n def _check_params(self) -> None: \n <IND> if self.step = 0: \n <IND> raise ValueError(\"Step size must be strictly positive.\") \n \n if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n",
      "49": "<IND> def _check_params(self) -> None: \n <IND> if self.step = 0: \n <DED> raise ValueError(\"Step size must be strictly positive.\") \n <IND> if self.eps = 0: \n <IND> raise ValueError(\"Value of eps must be strictly positive.\") \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": false,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": true,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  },
  {
    "source_code": "    <DED>def __aiter__(self) -> AsyncIterator:\n        <IND>return aiter(self._stream())\n",
    "target_code": "    <DED>def __aiter__(self) -> AsyncIterator:\n        <IND>return aiter(self._stream)\n",
    "warning_line": "        return aiter(self._stream())",
    "linter_report": {
      "rule_id": "Call error [29]",
      "message": " `faust.types.streams.StreamT[typing.Any]` is not a function.",
      "evidence": "",
      "col_begin": "",
      "col_end": "",
      "line_begin": 1123,
      "line_end": "",
      "severity": ""
    },
    "instructions": [],
    "source_file": "",
    "target_file": "",
    "repo": "faust-streaming/faust",
    "source_filename": "faust/agents/agent.py",
    "target_filename": "faust/agents/agent.py",
    "source_changeid": "51de861ada304a1763a4872811274818a8ee0851^",
    "target_changeid": "51de861ada304a1763a4872811274818a8ee0851",
    "predictions": [
      "\n def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n"
    ],
    "correct": false,
    "top_five": {
      "0": "\n def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "1": "\n def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream()) \n",
      "2": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "3": "<IND> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "4": "\n def __aiter__(self) -> AsyncIterator: \n <DED> return aiter(self._stream) \n",
      "5": "\n def __aiter__(self) -> AsyncIterator: \n <IND> assert self._stream is not None \n return aiter(self._stream()) \n",
      "6": "\n def __aiter__(self) -> AsyncIterator: \n <IND> assert self._stream is not None \n return aiter(self._stream) \n",
      "7": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream()) \n",
      "8": "<IND> def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream()) \n",
      "9": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> assert self._stream is not None \n return aiter(self._stream()) \n",
      "10": "\n def __aiter__(self) -> AsyncIterator: \n <DED> return aiter(self._stream()) \n",
      "11": "\n def __aiter__(self) -> AsyncIterator: \n \n return aiter(self._stream) \n",
      "12": "<DED> def __aiter__(self) -> AsyncIterator: \n <DED> return aiter(self._stream) \n",
      "13": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> assert self._stream is not None \n return aiter(self._stream) \n",
      "14": "<IND> def __aiter__(self) -> AsyncIterator: \n <IND> assert self._stream is not None \n return aiter(self._stream()) \n",
      "15": "\n def __aiter__(self) -> AsyncIterator: \n <DED> assert self._stream is not None \n return aiter(self._stream()) \n",
      "16": "<IND> def __aiter__(self) -> AsyncIterator: \n <IND> assert self._stream is not None \n return aiter(self._stream) \n",
      "17": "<IND> def __aiter__(self) -> AsyncIterator: \n <DED> return aiter(self._stream) \n",
      "18": "\n def __aiter__(self) -> AsyncIterator: \n <DED> assert self._stream is not None \n return aiter(self._stream) \n",
      "19": "\n def __aiter__(self) -> AsyncIterator: \n <IND> assert self.stream is not None \n return aiter(self._stream()) \n",
      "20": "\n def __aiter__(self) -> AsyncIterator: \n <IND> assert self.stream is not None \n return aiter(self._stream) \n",
      "21": "\n def __aiter__(self) -> AsyncIterator: \n \n return aiter(self._stream()) \n",
      "22": "<DED> def __aiter__(self) -> AsyncIterator: \n <DED> return aiter(self._stream()) \n",
      "23": "\n def __aiter__(self) -> AsyncIterator: \n { return aiter(self._stream) \n",
      "24": "{ def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "25": "<DED> def __aiter__(self) -> AsyncIterator: \n \n return aiter(self._stream) \n",
      "26": "\n def __aiter__(self) -> AsyncIterator: \n \n assert self._stream is not None \n return aiter(self._stream()) \n",
      "27": "\n def __aiter__(self) -> AsyncIterator: \n } return aiter(self._stream) \n",
      "28": "<DED> def __aiter__(self) -> AsyncIterator: \n <DED> assert self._stream is not None \n return aiter(self._stream()) \n",
      "29": "} def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "30": "\n def __aiter__(self) -> AsyncIterator: \n <IND> return self._stream = aiter(self._stream()) \n",
      "31": "\n def __aiter__(self) -> AsyncIterator: \n \n assert self._stream is not None \n return aiter(self._stream) \n",
      "32": "\n def __aiter__(self) -> AsyncIterator: \n <IND> return assert self._stream is not None \n",
      "33": "<DED> def __aiter__(self) -> AsyncIterator: \n <DED> assert self._stream is not None \n return aiter(self._stream) \n",
      "34": "<IND> def __aiter__(self) -> AsyncIterator: \n <DED> return aiter(self._stream()) \n",
      "35": "\n def __aiter__(self) -> AsyncIterator: \n <IND> return self._stream = aiter(self._stream) \n",
      "36": "<IND> def __aiter__(self) -> AsyncIterator: \n <DED> assert self._stream is not None \n return aiter(self._stream()) \n",
      "37": "<IND> def __aiter__(self) -> AsyncIterator: \n \n return aiter(self._stream) \n",
      "38": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> assert self.stream is not None \n return aiter(self._stream()) \n",
      "39": "<IND> def __aiter__(self) -> AsyncIterator: \n <DED> assert self._stream is not None \n return aiter(self._stream) \n",
      "40": "\n def __aiter__(self) -> AsyncIterator: \n <IND> aiter(self._stream) \n",
      "41": "<DED> def __aiter__(self) -> AsyncIterator: \n <IND> assert self.stream is not None \n return aiter(self._stream) \n",
      "42": "\n def __aiter__(self) -> AsyncIterator: \n \\ return aiter(self._stream) \n",
      "43": "{ def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream()) \n",
      "44": "\n def __aiter__(self) -> AsyncIterator: \n { return aiter(self._stream()) \n",
      "45": "<DED> def __aiter__(self) -> AsyncIterator: \n \n return aiter(self._stream()) \n",
      "46": "\n def __aiter__(self) -> AsyncIterator: \n } return aiter(self._stream()) \n",
      "47": "\\ def __aiter__(self) -> AsyncIterator: \n <IND> return aiter(self._stream) \n",
      "48": "<DED> def __aiter__(self) -> AsyncIterator: \n { return aiter(self._stream) \n",
      "49": "<DED> def __aiter__(self) -> AsyncIterator: \n } return aiter(self._stream) \n"
    },
    "top_five_exact_match": {
      "0": false,
      "1": false,
      "2": true,
      "3": false,
      "4": false,
      "5": false,
      "6": false,
      "7": false,
      "8": false,
      "9": false,
      "10": false,
      "11": false,
      "12": false,
      "13": false,
      "14": false,
      "15": false,
      "16": false,
      "17": false,
      "18": false,
      "19": false,
      "20": false,
      "21": false,
      "22": false,
      "23": false,
      "24": false,
      "25": false,
      "26": false,
      "27": false,
      "28": false,
      "29": false,
      "30": false,
      "31": false,
      "32": false,
      "33": false,
      "34": false,
      "35": false,
      "36": false,
      "37": false,
      "38": false,
      "39": false,
      "40": false,
      "41": false,
      "42": false,
      "43": false,
      "44": false,
      "45": false,
      "46": false,
      "47": false,
      "48": false,
      "49": false
    }
  }
]